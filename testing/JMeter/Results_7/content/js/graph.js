/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 87.0, "minX": 0.0, "maxY": 11320.0, "series": [{"data": [[0.0, 125.0], [0.1, 125.0], [0.2, 132.0], [0.3, 132.0], [0.4, 136.0], [0.5, 136.0], [0.6, 136.0], [0.7, 136.0], [0.8, 138.0], [0.9, 138.0], [1.0, 138.0], [1.1, 138.0], [1.2, 138.0], [1.3, 138.0], [1.4, 139.0], [1.5, 139.0], [1.6, 139.0], [1.7, 139.0], [1.8, 140.0], [1.9, 140.0], [2.0, 141.0], [2.1, 141.0], [2.2, 141.0], [2.3, 141.0], [2.4, 143.0], [2.5, 143.0], [2.6, 143.0], [2.7, 143.0], [2.8, 143.0], [2.9, 143.0], [3.0, 144.0], [3.1, 144.0], [3.2, 144.0], [3.3, 144.0], [3.4, 146.0], [3.5, 146.0], [3.6, 147.0], [3.7, 147.0], [3.8, 147.0], [3.9, 147.0], [4.0, 148.0], [4.1, 148.0], [4.2, 148.0], [4.3, 148.0], [4.4, 152.0], [4.5, 152.0], [4.6, 152.0], [4.7, 156.0], [4.8, 156.0], [4.9, 157.0], [5.0, 157.0], [5.1, 169.0], [5.2, 169.0], [5.3, 175.0], [5.4, 175.0], [5.5, 179.0], [5.6, 179.0], [5.7, 179.0], [5.8, 179.0], [5.9, 179.0], [6.0, 179.0], [6.1, 180.0], [6.2, 180.0], [6.3, 180.0], [6.4, 180.0], [6.5, 187.0], [6.6, 187.0], [6.7, 188.0], [6.8, 188.0], [6.9, 190.0], [7.0, 190.0], [7.1, 190.0], [7.2, 190.0], [7.3, 190.0], [7.4, 190.0], [7.5, 191.0], [7.6, 191.0], [7.7, 191.0], [7.8, 191.0], [7.9, 196.0], [8.0, 196.0], [8.1, 198.0], [8.2, 198.0], [8.3, 200.0], [8.4, 201.0], [8.5, 201.0], [8.6, 205.0], [8.7, 205.0], [8.8, 205.0], [8.9, 205.0], [9.0, 206.0], [9.1, 206.0], [9.2, 211.0], [9.3, 211.0], [9.4, 214.0], [9.5, 214.0], [9.6, 216.0], [9.7, 216.0], [9.8, 217.0], [9.9, 217.0], [10.0, 220.0], [10.1, 220.0], [10.2, 220.0], [10.3, 220.0], [10.4, 221.0], [10.5, 221.0], [10.6, 222.0], [10.7, 222.0], [10.8, 222.0], [10.9, 222.0], [11.0, 223.0], [11.1, 223.0], [11.2, 224.0], [11.3, 224.0], [11.4, 227.0], [11.5, 227.0], [11.6, 228.0], [11.7, 228.0], [11.8, 236.0], [11.9, 236.0], [12.0, 237.0], [12.1, 237.0], [12.2, 238.0], [12.3, 238.0], [12.4, 239.0], [12.5, 239.0], [12.6, 244.0], [12.7, 244.0], [12.8, 252.0], [12.9, 252.0], [13.0, 474.0], [13.1, 474.0], [13.2, 475.0], [13.3, 475.0], [13.4, 479.0], [13.5, 479.0], [13.6, 483.0], [13.7, 483.0], [13.8, 484.0], [13.9, 484.0], [14.0, 489.0], [14.1, 489.0], [14.2, 504.0], [14.3, 504.0], [14.4, 508.0], [14.5, 508.0], [14.6, 528.0], [14.7, 528.0], [14.8, 542.0], [14.9, 542.0], [15.0, 551.0], [15.1, 551.0], [15.2, 568.0], [15.3, 568.0], [15.4, 572.0], [15.5, 572.0], [15.6, 576.0], [15.7, 576.0], [15.8, 578.0], [15.9, 578.0], [16.0, 579.0], [16.1, 579.0], [16.2, 580.0], [16.3, 580.0], [16.4, 580.0], [16.5, 580.0], [16.6, 585.0], [16.7, 585.0], [16.8, 585.0], [16.9, 585.0], [17.0, 596.0], [17.1, 596.0], [17.2, 596.0], [17.3, 596.0], [17.4, 597.0], [17.5, 597.0], [17.6, 597.0], [17.7, 597.0], [17.8, 601.0], [17.9, 601.0], [18.0, 601.0], [18.1, 601.0], [18.2, 601.0], [18.3, 601.0], [18.4, 604.0], [18.5, 604.0], [18.6, 605.0], [18.7, 605.0], [18.8, 607.0], [18.9, 607.0], [19.0, 607.0], [19.1, 607.0], [19.2, 608.0], [19.3, 608.0], [19.4, 608.0], [19.5, 608.0], [19.6, 609.0], [19.7, 609.0], [19.8, 611.0], [19.9, 611.0], [20.0, 613.0], [20.1, 613.0], [20.2, 616.0], [20.3, 616.0], [20.4, 616.0], [20.5, 616.0], [20.6, 619.0], [20.7, 619.0], [20.8, 620.0], [20.9, 620.0], [21.0, 621.0], [21.1, 621.0], [21.2, 624.0], [21.3, 624.0], [21.4, 625.0], [21.5, 625.0], [21.6, 626.0], [21.7, 626.0], [21.8, 627.0], [21.9, 627.0], [22.0, 630.0], [22.1, 630.0], [22.2, 631.0], [22.3, 631.0], [22.4, 632.0], [22.5, 632.0], [22.6, 632.0], [22.7, 632.0], [22.8, 633.0], [22.9, 633.0], [23.0, 638.0], [23.1, 638.0], [23.2, 640.0], [23.3, 640.0], [23.4, 640.0], [23.5, 640.0], [23.6, 640.0], [23.7, 640.0], [23.8, 642.0], [23.9, 642.0], [24.0, 642.0], [24.1, 642.0], [24.2, 644.0], [24.3, 644.0], [24.4, 644.0], [24.5, 644.0], [24.6, 647.0], [24.7, 647.0], [24.8, 648.0], [24.9, 648.0], [25.0, 656.0], [25.1, 656.0], [25.2, 658.0], [25.3, 658.0], [25.4, 659.0], [25.5, 659.0], [25.6, 662.0], [25.7, 662.0], [25.8, 665.0], [25.9, 665.0], [26.0, 673.0], [26.1, 673.0], [26.2, 677.0], [26.3, 677.0], [26.4, 678.0], [26.5, 678.0], [26.6, 679.0], [26.7, 679.0], [26.8, 681.0], [26.9, 681.0], [27.0, 681.0], [27.1, 681.0], [27.2, 685.0], [27.3, 685.0], [27.4, 688.0], [27.5, 688.0], [27.6, 690.0], [27.7, 690.0], [27.8, 695.0], [27.9, 695.0], [28.0, 698.0], [28.1, 698.0], [28.2, 702.0], [28.3, 702.0], [28.4, 703.0], [28.5, 703.0], [28.6, 704.0], [28.7, 704.0], [28.8, 737.0], [28.9, 737.0], [29.0, 744.0], [29.1, 744.0], [29.2, 747.0], [29.3, 747.0], [29.4, 747.0], [29.5, 747.0], [29.6, 750.0], [29.7, 750.0], [29.8, 753.0], [29.9, 753.0], [30.0, 755.0], [30.1, 755.0], [30.2, 763.0], [30.3, 763.0], [30.4, 769.0], [30.5, 769.0], [30.6, 770.0], [30.7, 770.0], [30.8, 773.0], [30.9, 773.0], [31.0, 776.0], [31.1, 776.0], [31.2, 779.0], [31.3, 779.0], [31.4, 780.0], [31.5, 780.0], [31.6, 785.0], [31.7, 785.0], [31.8, 785.0], [31.9, 785.0], [32.0, 785.0], [32.1, 785.0], [32.2, 785.0], [32.3, 785.0], [32.4, 785.0], [32.5, 785.0], [32.6, 789.0], [32.7, 789.0], [32.8, 791.0], [32.9, 791.0], [33.0, 792.0], [33.1, 792.0], [33.2, 793.0], [33.3, 793.0], [33.4, 793.0], [33.5, 793.0], [33.6, 794.0], [33.7, 794.0], [33.8, 795.0], [33.9, 795.0], [34.0, 795.0], [34.1, 795.0], [34.2, 796.0], [34.3, 796.0], [34.4, 797.0], [34.5, 797.0], [34.6, 799.0], [34.7, 799.0], [34.8, 800.0], [34.9, 800.0], [35.0, 800.0], [35.1, 800.0], [35.2, 800.0], [35.3, 800.0], [35.4, 804.0], [35.5, 804.0], [35.6, 806.0], [35.7, 806.0], [35.8, 807.0], [35.9, 807.0], [36.0, 808.0], [36.1, 808.0], [36.2, 808.0], [36.3, 808.0], [36.4, 809.0], [36.5, 809.0], [36.6, 815.0], [36.7, 815.0], [36.8, 816.0], [36.9, 816.0], [37.0, 816.0], [37.1, 816.0], [37.2, 818.0], [37.3, 818.0], [37.4, 821.0], [37.5, 821.0], [37.6, 823.0], [37.7, 823.0], [37.8, 823.0], [37.9, 823.0], [38.0, 827.0], [38.1, 827.0], [38.2, 828.0], [38.3, 828.0], [38.4, 833.0], [38.5, 833.0], [38.6, 835.0], [38.7, 835.0], [38.8, 837.0], [38.9, 837.0], [39.0, 848.0], [39.1, 848.0], [39.2, 849.0], [39.3, 849.0], [39.4, 849.0], [39.5, 849.0], [39.6, 852.0], [39.7, 852.0], [39.8, 854.0], [39.9, 854.0], [40.0, 854.0], [40.1, 854.0], [40.2, 858.0], [40.3, 858.0], [40.4, 858.0], [40.5, 858.0], [40.6, 862.0], [40.7, 862.0], [40.8, 864.0], [40.9, 864.0], [41.0, 867.0], [41.1, 867.0], [41.2, 868.0], [41.3, 868.0], [41.4, 869.0], [41.5, 869.0], [41.6, 870.0], [41.7, 870.0], [41.8, 875.0], [41.9, 875.0], [42.0, 882.0], [42.1, 882.0], [42.2, 883.0], [42.3, 883.0], [42.4, 883.0], [42.5, 885.0], [42.6, 885.0], [42.7, 893.0], [42.8, 893.0], [42.9, 895.0], [43.0, 895.0], [43.1, 897.0], [43.2, 897.0], [43.3, 897.0], [43.4, 897.0], [43.5, 900.0], [43.6, 900.0], [43.7, 902.0], [43.8, 902.0], [43.9, 902.0], [44.0, 902.0], [44.1, 905.0], [44.2, 905.0], [44.3, 906.0], [44.4, 906.0], [44.5, 907.0], [44.6, 907.0], [44.7, 908.0], [44.8, 908.0], [44.9, 910.0], [45.0, 910.0], [45.1, 915.0], [45.2, 915.0], [45.3, 916.0], [45.4, 916.0], [45.5, 926.0], [45.6, 926.0], [45.7, 933.0], [45.8, 933.0], [45.9, 942.0], [46.0, 942.0], [46.1, 945.0], [46.2, 945.0], [46.3, 953.0], [46.4, 953.0], [46.5, 955.0], [46.6, 955.0], [46.7, 955.0], [46.8, 955.0], [46.9, 958.0], [47.0, 958.0], [47.1, 958.0], [47.2, 958.0], [47.3, 960.0], [47.4, 960.0], [47.5, 961.0], [47.6, 961.0], [47.7, 961.0], [47.8, 961.0], [47.9, 962.0], [48.0, 962.0], [48.1, 964.0], [48.2, 964.0], [48.3, 965.0], [48.4, 965.0], [48.5, 965.0], [48.6, 965.0], [48.7, 965.0], [48.8, 965.0], [48.9, 966.0], [49.0, 966.0], [49.1, 967.0], [49.2, 967.0], [49.3, 970.0], [49.4, 970.0], [49.5, 970.0], [49.6, 970.0], [49.7, 971.0], [49.8, 971.0], [49.9, 973.0], [50.0, 973.0], [50.1, 975.0], [50.2, 975.0], [50.3, 975.0], [50.4, 975.0], [50.5, 976.0], [50.6, 976.0], [50.7, 977.0], [50.8, 977.0], [50.9, 978.0], [51.0, 978.0], [51.1, 978.0], [51.2, 978.0], [51.3, 978.0], [51.4, 978.0], [51.5, 980.0], [51.6, 980.0], [51.7, 983.0], [51.8, 983.0], [51.9, 983.0], [52.0, 983.0], [52.1, 986.0], [52.2, 986.0], [52.3, 987.0], [52.4, 987.0], [52.5, 988.0], [52.6, 988.0], [52.7, 989.0], [52.8, 989.0], [52.9, 989.0], [53.0, 989.0], [53.1, 991.0], [53.2, 991.0], [53.3, 991.0], [53.4, 991.0], [53.5, 995.0], [53.6, 995.0], [53.7, 996.0], [53.8, 996.0], [53.9, 998.0], [54.0, 998.0], [54.1, 998.0], [54.2, 998.0], [54.3, 999.0], [54.4, 999.0], [54.5, 1007.0], [54.6, 1007.0], [54.7, 1009.0], [54.8, 1009.0], [54.9, 1009.0], [55.0, 1009.0], [55.1, 1010.0], [55.2, 1010.0], [55.3, 1015.0], [55.4, 1015.0], [55.5, 1022.0], [55.6, 1022.0], [55.7, 1022.0], [55.8, 1022.0], [55.9, 1023.0], [56.0, 1023.0], [56.1, 1026.0], [56.2, 1026.0], [56.3, 1027.0], [56.4, 1027.0], [56.5, 1031.0], [56.6, 1031.0], [56.7, 1032.0], [56.8, 1032.0], [56.9, 1038.0], [57.0, 1038.0], [57.1, 1038.0], [57.2, 1038.0], [57.3, 1040.0], [57.4, 1040.0], [57.5, 1040.0], [57.6, 1040.0], [57.7, 1046.0], [57.8, 1046.0], [57.9, 1048.0], [58.0, 1048.0], [58.1, 1049.0], [58.2, 1049.0], [58.3, 1051.0], [58.4, 1051.0], [58.5, 1053.0], [58.6, 1053.0], [58.7, 1057.0], [58.8, 1057.0], [58.9, 1059.0], [59.0, 1059.0], [59.1, 1061.0], [59.2, 1061.0], [59.3, 1062.0], [59.4, 1062.0], [59.5, 1066.0], [59.6, 1066.0], [59.7, 1067.0], [59.8, 1067.0], [59.9, 1070.0], [60.0, 1070.0], [60.1, 1072.0], [60.2, 1072.0], [60.3, 1072.0], [60.4, 1072.0], [60.5, 1076.0], [60.6, 1076.0], [60.7, 1088.0], [60.8, 1088.0], [60.9, 1091.0], [61.0, 1091.0], [61.1, 1091.0], [61.2, 1091.0], [61.3, 1093.0], [61.4, 1093.0], [61.5, 1102.0], [61.6, 1102.0], [61.7, 1111.0], [61.8, 1111.0], [61.9, 1115.0], [62.0, 1115.0], [62.1, 1120.0], [62.2, 1120.0], [62.3, 1121.0], [62.4, 1121.0], [62.5, 1121.0], [62.6, 1121.0], [62.7, 1124.0], [62.8, 1124.0], [62.9, 1128.0], [63.0, 1128.0], [63.1, 1130.0], [63.2, 1130.0], [63.3, 1132.0], [63.4, 1132.0], [63.5, 1133.0], [63.6, 1133.0], [63.7, 1137.0], [63.8, 1137.0], [63.9, 1138.0], [64.0, 1138.0], [64.1, 1142.0], [64.2, 1142.0], [64.3, 1143.0], [64.4, 1143.0], [64.5, 1144.0], [64.6, 1144.0], [64.7, 1147.0], [64.8, 1147.0], [64.9, 1148.0], [65.0, 1148.0], [65.1, 1149.0], [65.2, 1149.0], [65.3, 1151.0], [65.4, 1151.0], [65.5, 1155.0], [65.6, 1155.0], [65.7, 1155.0], [65.8, 1155.0], [65.9, 1157.0], [66.0, 1157.0], [66.1, 1161.0], [66.2, 1161.0], [66.3, 1172.0], [66.4, 1172.0], [66.5, 1175.0], [66.6, 1175.0], [66.7, 1176.0], [66.8, 1176.0], [66.9, 1180.0], [67.0, 1180.0], [67.1, 1187.0], [67.2, 1187.0], [67.3, 1190.0], [67.4, 1190.0], [67.5, 1193.0], [67.6, 1193.0], [67.7, 1211.0], [67.8, 1211.0], [67.9, 1218.0], [68.0, 1218.0], [68.1, 1228.0], [68.2, 1228.0], [68.3, 1232.0], [68.4, 1232.0], [68.5, 1236.0], [68.6, 1236.0], [68.7, 1238.0], [68.8, 1238.0], [68.9, 1243.0], [69.0, 1243.0], [69.1, 1246.0], [69.2, 1246.0], [69.3, 1250.0], [69.4, 1250.0], [69.5, 1250.0], [69.6, 1250.0], [69.7, 1251.0], [69.8, 1251.0], [69.9, 1251.0], [70.0, 1251.0], [70.1, 1251.0], [70.2, 1251.0], [70.3, 1252.0], [70.4, 1252.0], [70.5, 1255.0], [70.6, 1255.0], [70.7, 1256.0], [70.8, 1256.0], [70.9, 1260.0], [71.0, 1260.0], [71.1, 1263.0], [71.2, 1263.0], [71.3, 1299.0], [71.4, 1299.0], [71.5, 1317.0], [71.6, 1317.0], [71.7, 1324.0], [71.8, 1324.0], [71.9, 1333.0], [72.0, 1333.0], [72.1, 1348.0], [72.2, 1348.0], [72.3, 1354.0], [72.4, 1354.0], [72.5, 1358.0], [72.6, 1358.0], [72.7, 1383.0], [72.8, 1383.0], [72.9, 1385.0], [73.0, 1385.0], [73.1, 1403.0], [73.2, 1403.0], [73.3, 1405.0], [73.4, 1405.0], [73.5, 1436.0], [73.6, 1436.0], [73.7, 1459.0], [73.8, 1459.0], [73.9, 1466.0], [74.0, 1466.0], [74.1, 1470.0], [74.2, 1470.0], [74.3, 1475.0], [74.4, 1475.0], [74.5, 1476.0], [74.6, 1476.0], [74.7, 1481.0], [74.8, 1481.0], [74.9, 1484.0], [75.0, 1484.0], [75.1, 1486.0], [75.2, 1486.0], [75.3, 1491.0], [75.4, 1491.0], [75.5, 1509.0], [75.6, 1509.0], [75.7, 1535.0], [75.8, 1535.0], [75.9, 1536.0], [76.0, 1536.0], [76.1, 1542.0], [76.2, 1542.0], [76.3, 1543.0], [76.4, 1543.0], [76.5, 1545.0], [76.6, 1545.0], [76.7, 1546.0], [76.8, 1546.0], [76.9, 1549.0], [77.0, 1549.0], [77.1, 1551.0], [77.2, 1551.0], [77.3, 1559.0], [77.4, 1559.0], [77.5, 1565.0], [77.6, 1565.0], [77.7, 1570.0], [77.8, 1570.0], [77.9, 1570.0], [78.0, 1570.0], [78.1, 1583.0], [78.2, 1583.0], [78.3, 1587.0], [78.4, 1587.0], [78.5, 1595.0], [78.6, 1595.0], [78.7, 1597.0], [78.8, 1597.0], [78.9, 1598.0], [79.0, 1598.0], [79.1, 1599.0], [79.2, 1599.0], [79.3, 1624.0], [79.4, 1624.0], [79.5, 1626.0], [79.6, 1626.0], [79.7, 1634.0], [79.8, 1634.0], [79.9, 1636.0], [80.0, 1636.0], [80.1, 1639.0], [80.2, 1639.0], [80.3, 1640.0], [80.4, 1640.0], [80.5, 1651.0], [80.6, 1651.0], [80.7, 1664.0], [80.8, 1664.0], [80.9, 1686.0], [81.0, 1686.0], [81.1, 1687.0], [81.2, 1687.0], [81.3, 1698.0], [81.4, 1698.0], [81.5, 1715.0], [81.6, 1715.0], [81.7, 1716.0], [81.8, 1716.0], [81.9, 1725.0], [82.0, 1725.0], [82.1, 1741.0], [82.2, 1741.0], [82.3, 1748.0], [82.4, 1748.0], [82.5, 1765.0], [82.6, 1765.0], [82.7, 1783.0], [82.8, 1783.0], [82.9, 1787.0], [83.0, 1787.0], [83.1, 1793.0], [83.2, 1793.0], [83.3, 1813.0], [83.4, 1813.0], [83.5, 1818.0], [83.6, 1818.0], [83.7, 1821.0], [83.8, 1821.0], [83.9, 1825.0], [84.0, 1825.0], [84.1, 1829.0], [84.2, 1829.0], [84.3, 1844.0], [84.4, 1844.0], [84.5, 1865.0], [84.6, 1865.0], [84.7, 1866.0], [84.8, 1866.0], [84.9, 1869.0], [85.0, 1869.0], [85.1, 1873.0], [85.2, 1873.0], [85.3, 1877.0], [85.4, 1877.0], [85.5, 1911.0], [85.6, 1911.0], [85.7, 1912.0], [85.8, 1912.0], [85.9, 1914.0], [86.0, 1914.0], [86.1, 1925.0], [86.2, 1925.0], [86.3, 1928.0], [86.4, 1928.0], [86.5, 1932.0], [86.6, 1932.0], [86.7, 1945.0], [86.8, 1945.0], [86.9, 1954.0], [87.0, 1954.0], [87.1, 1968.0], [87.2, 1968.0], [87.3, 1985.0], [87.4, 1985.0], [87.5, 2010.0], [87.6, 2010.0], [87.7, 2013.0], [87.8, 2013.0], [87.9, 2034.0], [88.0, 2034.0], [88.1, 2048.0], [88.2, 2048.0], [88.3, 2050.0], [88.4, 2050.0], [88.5, 2058.0], [88.6, 2058.0], [88.7, 2059.0], [88.8, 2059.0], [88.9, 2061.0], [89.0, 2061.0], [89.1, 2065.0], [89.2, 2065.0], [89.3, 2070.0], [89.4, 2070.0], [89.5, 2097.0], [89.6, 2097.0], [89.7, 2120.0], [89.8, 2120.0], [89.9, 2134.0], [90.0, 2134.0], [90.1, 2137.0], [90.2, 2137.0], [90.3, 2150.0], [90.4, 2150.0], [90.5, 2165.0], [90.6, 2165.0], [90.7, 2227.0], [90.8, 2227.0], [90.9, 2276.0], [91.0, 2276.0], [91.1, 2279.0], [91.2, 2279.0], [91.3, 2318.0], [91.4, 2318.0], [91.5, 2360.0], [91.6, 2360.0], [91.7, 2383.0], [91.8, 2383.0], [91.9, 2386.0], [92.0, 2386.0], [92.1, 2409.0], [92.2, 2409.0], [92.3, 2434.0], [92.4, 2434.0], [92.5, 2439.0], [92.6, 2439.0], [92.7, 2451.0], [92.8, 2451.0], [92.9, 2478.0], [93.0, 2478.0], [93.1, 2482.0], [93.2, 2482.0], [93.3, 2491.0], [93.4, 2491.0], [93.5, 2508.0], [93.6, 2508.0], [93.7, 2559.0], [93.8, 2559.0], [93.9, 2579.0], [94.0, 2579.0], [94.1, 2621.0], [94.2, 2621.0], [94.3, 2641.0], [94.4, 2641.0], [94.5, 2761.0], [94.6, 2761.0], [94.7, 2824.0], [94.8, 2824.0], [94.9, 2929.0], [95.0, 2929.0], [95.1, 3278.0], [95.2, 3278.0], [95.3, 3283.0], [95.4, 3283.0], [95.5, 3354.0], [95.6, 3354.0], [95.7, 4242.0], [95.8, 4242.0], [95.9, 4442.0], [96.0, 4442.0], [96.1, 4643.0], [96.2, 4643.0], [96.3, 4968.0], [96.4, 4968.0], [96.5, 5155.0], [96.6, 5155.0], [96.7, 5919.0], [96.8, 5919.0], [96.9, 6038.0], [97.0, 6038.0], [97.1, 6241.0], [97.2, 6241.0], [97.3, 6315.0], [97.4, 6315.0], [97.5, 6340.0], [97.6, 6340.0], [97.7, 6343.0], [97.8, 6343.0], [97.9, 6403.0], [98.0, 6403.0], [98.1, 6458.0], [98.2, 6458.0], [98.3, 6987.0], [98.4, 6987.0], [98.5, 7060.0], [98.6, 7060.0], [98.7, 7118.0], [98.8, 7118.0], [98.9, 7202.0], [99.0, 7202.0], [99.1, 7224.0], [99.2, 7224.0], [99.3, 8813.0], [99.4, 8813.0], [99.5, 8914.0], [99.6, 8914.0], [99.7, 9104.0], [99.8, 9104.0], [99.9, 11233.0], [100.0, 11233.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 87.0], [0.1, 87.0], [0.2, 89.0], [0.3, 89.0], [0.4, 90.0], [0.5, 90.0], [0.6, 90.0], [0.7, 90.0], [0.8, 92.0], [0.9, 92.0], [1.0, 94.0], [1.1, 94.0], [1.2, 95.0], [1.3, 95.0], [1.4, 95.0], [1.5, 95.0], [1.6, 96.0], [1.7, 96.0], [1.8, 97.0], [1.9, 97.0], [2.0, 97.0], [2.1, 97.0], [2.2, 97.0], [2.3, 97.0], [2.4, 98.0], [2.5, 98.0], [2.6, 100.0], [2.7, 100.0], [2.8, 100.0], [2.9, 102.0], [3.0, 102.0], [3.1, 102.0], [3.2, 102.0], [3.3, 102.0], [3.4, 102.0], [3.5, 104.0], [3.6, 104.0], [3.7, 105.0], [3.8, 105.0], [3.9, 105.0], [4.0, 105.0], [4.1, 109.0], [4.2, 109.0], [4.3, 109.0], [4.4, 109.0], [4.5, 112.0], [4.6, 112.0], [4.7, 114.0], [4.8, 114.0], [4.9, 122.0], [5.0, 122.0], [5.1, 127.0], [5.2, 127.0], [5.3, 132.0], [5.4, 132.0], [5.5, 133.0], [5.6, 133.0], [5.7, 133.0], [5.8, 133.0], [5.9, 137.0], [6.0, 137.0], [6.1, 138.0], [6.2, 138.0], [6.3, 139.0], [6.4, 139.0], [6.5, 139.0], [6.6, 139.0], [6.7, 141.0], [6.8, 141.0], [6.9, 142.0], [7.0, 142.0], [7.1, 143.0], [7.2, 143.0], [7.3, 143.0], [7.4, 143.0], [7.5, 156.0], [7.6, 156.0], [7.7, 156.0], [7.8, 156.0], [7.9, 164.0], [8.0, 164.0], [8.1, 164.0], [8.2, 164.0], [8.3, 169.0], [8.4, 169.0], [8.5, 176.0], [8.6, 176.0], [8.7, 177.0], [8.8, 177.0], [8.9, 181.0], [9.0, 181.0], [9.1, 186.0], [9.2, 186.0], [9.3, 192.0], [9.4, 192.0], [9.5, 192.0], [9.6, 192.0], [9.7, 192.0], [9.8, 196.0], [9.9, 196.0], [10.0, 200.0], [10.1, 200.0], [10.2, 205.0], [10.3, 205.0], [10.4, 208.0], [10.5, 208.0], [10.6, 210.0], [10.7, 210.0], [10.8, 211.0], [10.9, 211.0], [11.0, 232.0], [11.1, 232.0], [11.2, 235.0], [11.3, 235.0], [11.4, 237.0], [11.5, 237.0], [11.6, 238.0], [11.7, 238.0], [11.8, 243.0], [11.9, 243.0], [12.0, 254.0], [12.1, 254.0], [12.2, 274.0], [12.3, 274.0], [12.4, 275.0], [12.5, 275.0], [12.6, 276.0], [12.7, 276.0], [12.8, 279.0], [12.9, 279.0], [13.0, 284.0], [13.1, 284.0], [13.2, 286.0], [13.3, 286.0], [13.4, 287.0], [13.5, 287.0], [13.6, 297.0], [13.7, 297.0], [13.8, 300.0], [13.9, 300.0], [14.0, 302.0], [14.1, 302.0], [14.2, 304.0], [14.3, 304.0], [14.4, 312.0], [14.5, 312.0], [14.6, 313.0], [14.7, 313.0], [14.8, 315.0], [14.9, 315.0], [15.0, 318.0], [15.1, 318.0], [15.2, 318.0], [15.3, 318.0], [15.4, 318.0], [15.5, 318.0], [15.6, 319.0], [15.7, 319.0], [15.8, 320.0], [15.9, 320.0], [16.0, 321.0], [16.1, 321.0], [16.2, 321.0], [16.3, 321.0], [16.4, 323.0], [16.5, 323.0], [16.6, 332.0], [16.7, 332.0], [16.8, 335.0], [16.9, 335.0], [17.0, 336.0], [17.1, 336.0], [17.2, 337.0], [17.3, 337.0], [17.4, 338.0], [17.5, 338.0], [17.6, 339.0], [17.7, 339.0], [17.8, 339.0], [17.9, 339.0], [18.0, 341.0], [18.1, 341.0], [18.2, 342.0], [18.3, 342.0], [18.4, 342.0], [18.5, 342.0], [18.6, 343.0], [18.7, 343.0], [18.8, 345.0], [18.9, 345.0], [19.0, 348.0], [19.1, 348.0], [19.2, 350.0], [19.3, 350.0], [19.4, 353.0], [19.5, 353.0], [19.6, 356.0], [19.7, 356.0], [19.8, 357.0], [19.9, 357.0], [20.0, 357.0], [20.1, 357.0], [20.2, 358.0], [20.3, 358.0], [20.4, 363.0], [20.5, 363.0], [20.6, 364.0], [20.7, 364.0], [20.8, 364.0], [20.9, 364.0], [21.0, 365.0], [21.1, 365.0], [21.2, 365.0], [21.3, 365.0], [21.4, 365.0], [21.5, 365.0], [21.6, 366.0], [21.7, 366.0], [21.8, 369.0], [21.9, 369.0], [22.0, 369.0], [22.1, 369.0], [22.2, 369.0], [22.3, 369.0], [22.4, 371.0], [22.5, 371.0], [22.6, 371.0], [22.7, 371.0], [22.8, 376.0], [22.9, 376.0], [23.0, 376.0], [23.1, 376.0], [23.2, 377.0], [23.3, 377.0], [23.4, 377.0], [23.5, 377.0], [23.6, 378.0], [23.7, 378.0], [23.8, 379.0], [23.9, 379.0], [24.0, 379.0], [24.1, 379.0], [24.2, 380.0], [24.3, 380.0], [24.4, 380.0], [24.5, 380.0], [24.6, 381.0], [24.7, 381.0], [24.8, 381.0], [24.9, 381.0], [25.0, 381.0], [25.1, 381.0], [25.2, 382.0], [25.3, 382.0], [25.4, 382.0], [25.5, 382.0], [25.6, 382.0], [25.7, 382.0], [25.8, 382.0], [25.9, 382.0], [26.0, 383.0], [26.1, 383.0], [26.2, 383.0], [26.3, 383.0], [26.4, 383.0], [26.5, 383.0], [26.6, 384.0], [26.7, 384.0], [26.8, 385.0], [26.9, 385.0], [27.0, 385.0], [27.1, 385.0], [27.2, 385.0], [27.3, 385.0], [27.4, 386.0], [27.5, 386.0], [27.6, 387.0], [27.7, 387.0], [27.8, 388.0], [27.9, 388.0], [28.0, 390.0], [28.1, 390.0], [28.2, 390.0], [28.3, 390.0], [28.4, 390.0], [28.5, 390.0], [28.6, 391.0], [28.7, 391.0], [28.8, 391.0], [28.9, 391.0], [29.0, 391.0], [29.1, 391.0], [29.2, 393.0], [29.3, 393.0], [29.4, 393.0], [29.5, 393.0], [29.6, 394.0], [29.7, 394.0], [29.8, 395.0], [29.9, 395.0], [30.0, 396.0], [30.1, 396.0], [30.2, 400.0], [30.3, 400.0], [30.4, 400.0], [30.5, 400.0], [30.6, 401.0], [30.7, 401.0], [30.8, 403.0], [30.9, 403.0], [31.0, 405.0], [31.1, 405.0], [31.2, 407.0], [31.3, 407.0], [31.4, 407.0], [31.5, 407.0], [31.6, 408.0], [31.7, 408.0], [31.8, 408.0], [31.9, 408.0], [32.0, 410.0], [32.1, 410.0], [32.2, 411.0], [32.3, 411.0], [32.4, 411.0], [32.5, 411.0], [32.6, 413.0], [32.7, 413.0], [32.8, 416.0], [32.9, 416.0], [33.0, 416.0], [33.1, 416.0], [33.2, 416.0], [33.3, 416.0], [33.4, 417.0], [33.5, 417.0], [33.6, 417.0], [33.7, 417.0], [33.8, 421.0], [33.9, 421.0], [34.0, 421.0], [34.1, 421.0], [34.2, 422.0], [34.3, 422.0], [34.4, 427.0], [34.5, 427.0], [34.6, 430.0], [34.7, 430.0], [34.8, 430.0], [34.9, 430.0], [35.0, 430.0], [35.1, 430.0], [35.2, 433.0], [35.3, 433.0], [35.4, 434.0], [35.5, 434.0], [35.6, 435.0], [35.7, 435.0], [35.8, 435.0], [35.9, 435.0], [36.0, 442.0], [36.1, 442.0], [36.2, 443.0], [36.3, 443.0], [36.4, 447.0], [36.5, 447.0], [36.6, 450.0], [36.7, 450.0], [36.8, 451.0], [36.9, 451.0], [37.0, 452.0], [37.1, 452.0], [37.2, 452.0], [37.3, 452.0], [37.4, 453.0], [37.5, 453.0], [37.6, 454.0], [37.7, 454.0], [37.8, 456.0], [37.9, 456.0], [38.0, 456.0], [38.1, 456.0], [38.2, 456.0], [38.3, 456.0], [38.4, 459.0], [38.5, 459.0], [38.6, 459.0], [38.7, 459.0], [38.8, 460.0], [38.9, 460.0], [39.0, 461.0], [39.1, 461.0], [39.2, 462.0], [39.3, 462.0], [39.4, 463.0], [39.5, 463.0], [39.6, 463.0], [39.7, 463.0], [39.8, 463.0], [39.9, 463.0], [40.0, 467.0], [40.1, 467.0], [40.2, 467.0], [40.3, 467.0], [40.4, 469.0], [40.5, 469.0], [40.6, 472.0], [40.7, 472.0], [40.8, 473.0], [40.9, 473.0], [41.0, 474.0], [41.1, 474.0], [41.2, 475.0], [41.3, 475.0], [41.4, 475.0], [41.5, 475.0], [41.6, 475.0], [41.7, 475.0], [41.8, 475.0], [41.9, 478.0], [42.0, 478.0], [42.1, 478.0], [42.2, 479.0], [42.3, 479.0], [42.4, 479.0], [42.5, 480.0], [42.6, 480.0], [42.7, 481.0], [42.8, 481.0], [42.9, 481.0], [43.0, 481.0], [43.1, 483.0], [43.2, 483.0], [43.3, 483.0], [43.4, 483.0], [43.5, 485.0], [43.6, 485.0], [43.7, 485.0], [43.8, 485.0], [43.9, 487.0], [44.0, 487.0], [44.1, 489.0], [44.2, 489.0], [44.3, 490.0], [44.4, 490.0], [44.5, 490.0], [44.6, 490.0], [44.7, 492.0], [44.8, 492.0], [44.9, 492.0], [45.0, 492.0], [45.1, 492.0], [45.2, 492.0], [45.3, 492.0], [45.4, 492.0], [45.5, 493.0], [45.6, 493.0], [45.7, 494.0], [45.8, 494.0], [45.9, 497.0], [46.0, 497.0], [46.1, 497.0], [46.2, 497.0], [46.3, 498.0], [46.4, 498.0], [46.5, 498.0], [46.6, 498.0], [46.7, 499.0], [46.8, 499.0], [46.9, 499.0], [47.0, 499.0], [47.1, 499.0], [47.2, 499.0], [47.3, 501.0], [47.4, 501.0], [47.5, 501.0], [47.6, 501.0], [47.7, 501.0], [47.8, 501.0], [47.9, 504.0], [48.0, 504.0], [48.1, 505.0], [48.2, 505.0], [48.3, 506.0], [48.4, 506.0], [48.5, 507.0], [48.6, 507.0], [48.7, 508.0], [48.8, 508.0], [48.9, 509.0], [49.0, 509.0], [49.1, 509.0], [49.2, 509.0], [49.3, 509.0], [49.4, 509.0], [49.5, 511.0], [49.6, 511.0], [49.7, 511.0], [49.8, 511.0], [49.9, 512.0], [50.0, 512.0], [50.1, 513.0], [50.2, 513.0], [50.3, 514.0], [50.4, 514.0], [50.5, 516.0], [50.6, 516.0], [50.7, 518.0], [50.8, 518.0], [50.9, 521.0], [51.0, 521.0], [51.1, 523.0], [51.2, 523.0], [51.3, 523.0], [51.4, 523.0], [51.5, 524.0], [51.6, 524.0], [51.7, 527.0], [51.8, 527.0], [51.9, 528.0], [52.0, 528.0], [52.1, 530.0], [52.2, 530.0], [52.3, 531.0], [52.4, 531.0], [52.5, 532.0], [52.6, 532.0], [52.7, 533.0], [52.8, 533.0], [52.9, 537.0], [53.0, 537.0], [53.1, 538.0], [53.2, 538.0], [53.3, 538.0], [53.4, 538.0], [53.5, 539.0], [53.6, 539.0], [53.7, 540.0], [53.8, 540.0], [53.9, 540.0], [54.0, 540.0], [54.1, 540.0], [54.2, 540.0], [54.3, 540.0], [54.4, 540.0], [54.5, 540.0], [54.6, 540.0], [54.7, 544.0], [54.8, 544.0], [54.9, 544.0], [55.0, 544.0], [55.1, 545.0], [55.2, 545.0], [55.3, 547.0], [55.4, 547.0], [55.5, 549.0], [55.6, 549.0], [55.7, 549.0], [55.8, 549.0], [55.9, 550.0], [56.0, 550.0], [56.1, 551.0], [56.2, 551.0], [56.3, 553.0], [56.4, 553.0], [56.5, 553.0], [56.6, 553.0], [56.7, 554.0], [56.8, 554.0], [56.9, 560.0], [57.0, 560.0], [57.1, 562.0], [57.2, 562.0], [57.3, 565.0], [57.4, 565.0], [57.5, 569.0], [57.6, 569.0], [57.7, 570.0], [57.8, 570.0], [57.9, 572.0], [58.0, 572.0], [58.1, 576.0], [58.2, 576.0], [58.3, 579.0], [58.4, 579.0], [58.5, 582.0], [58.6, 582.0], [58.7, 583.0], [58.8, 583.0], [58.9, 586.0], [59.0, 586.0], [59.1, 590.0], [59.2, 590.0], [59.3, 590.0], [59.4, 590.0], [59.5, 590.0], [59.6, 590.0], [59.7, 594.0], [59.8, 594.0], [59.9, 596.0], [60.0, 596.0], [60.1, 604.0], [60.2, 604.0], [60.3, 610.0], [60.4, 610.0], [60.5, 610.0], [60.6, 610.0], [60.7, 614.0], [60.8, 614.0], [60.9, 618.0], [61.0, 618.0], [61.1, 624.0], [61.2, 624.0], [61.3, 637.0], [61.4, 637.0], [61.5, 640.0], [61.6, 640.0], [61.7, 643.0], [61.8, 643.0], [61.9, 644.0], [62.0, 644.0], [62.1, 645.0], [62.2, 645.0], [62.3, 648.0], [62.4, 648.0], [62.5, 650.0], [62.6, 650.0], [62.7, 651.0], [62.8, 651.0], [62.9, 652.0], [63.0, 652.0], [63.1, 653.0], [63.2, 653.0], [63.3, 654.0], [63.4, 654.0], [63.5, 656.0], [63.6, 656.0], [63.7, 659.0], [63.8, 659.0], [63.9, 660.0], [64.0, 660.0], [64.1, 661.0], [64.2, 661.0], [64.3, 662.0], [64.4, 662.0], [64.5, 668.0], [64.6, 668.0], [64.7, 670.0], [64.8, 670.0], [64.9, 671.0], [65.0, 671.0], [65.1, 674.0], [65.2, 674.0], [65.3, 674.0], [65.4, 674.0], [65.5, 676.0], [65.6, 676.0], [65.7, 677.0], [65.8, 677.0], [65.9, 678.0], [66.0, 678.0], [66.1, 678.0], [66.2, 678.0], [66.3, 681.0], [66.4, 681.0], [66.5, 686.0], [66.6, 686.0], [66.7, 709.0], [66.8, 709.0], [66.9, 713.0], [67.0, 713.0], [67.1, 722.0], [67.2, 722.0], [67.3, 737.0], [67.4, 737.0], [67.5, 740.0], [67.6, 740.0], [67.7, 740.0], [67.8, 740.0], [67.9, 744.0], [68.0, 744.0], [68.1, 747.0], [68.2, 747.0], [68.3, 748.0], [68.4, 748.0], [68.5, 761.0], [68.6, 761.0], [68.7, 769.0], [68.8, 769.0], [68.9, 771.0], [69.0, 771.0], [69.1, 771.0], [69.2, 771.0], [69.3, 807.0], [69.4, 807.0], [69.5, 816.0], [69.6, 816.0], [69.7, 874.0], [69.8, 874.0], [69.9, 887.0], [70.0, 887.0], [70.1, 958.0], [70.2, 958.0], [70.3, 1027.0], [70.4, 1027.0], [70.5, 1028.0], [70.6, 1028.0], [70.7, 1034.0], [70.8, 1034.0], [70.9, 1068.0], [71.0, 1068.0], [71.1, 1077.0], [71.2, 1077.0], [71.3, 1112.0], [71.4, 1112.0], [71.5, 1112.0], [71.6, 1112.0], [71.7, 1116.0], [71.8, 1116.0], [71.9, 1125.0], [72.0, 1125.0], [72.1, 1135.0], [72.2, 1135.0], [72.3, 1139.0], [72.4, 1139.0], [72.5, 1140.0], [72.6, 1140.0], [72.7, 1141.0], [72.8, 1141.0], [72.9, 1143.0], [73.0, 1143.0], [73.1, 1147.0], [73.2, 1147.0], [73.3, 1152.0], [73.4, 1152.0], [73.5, 1153.0], [73.6, 1153.0], [73.7, 1158.0], [73.8, 1158.0], [73.9, 1158.0], [74.0, 1158.0], [74.1, 1159.0], [74.2, 1159.0], [74.3, 1165.0], [74.4, 1165.0], [74.5, 1168.0], [74.6, 1168.0], [74.7, 1174.0], [74.8, 1174.0], [74.9, 1182.0], [75.0, 1182.0], [75.1, 1183.0], [75.2, 1183.0], [75.3, 1185.0], [75.4, 1185.0], [75.5, 1188.0], [75.6, 1188.0], [75.7, 1199.0], [75.8, 1199.0], [75.9, 1209.0], [76.0, 1209.0], [76.1, 1210.0], [76.2, 1210.0], [76.3, 1216.0], [76.4, 1216.0], [76.5, 1216.0], [76.6, 1216.0], [76.7, 1216.0], [76.8, 1216.0], [76.9, 1217.0], [77.0, 1217.0], [77.1, 1230.0], [77.2, 1230.0], [77.3, 1246.0], [77.4, 1246.0], [77.5, 1260.0], [77.6, 1260.0], [77.7, 1267.0], [77.8, 1267.0], [77.9, 1282.0], [78.0, 1282.0], [78.1, 1283.0], [78.2, 1283.0], [78.3, 1324.0], [78.4, 1324.0], [78.5, 1328.0], [78.6, 1328.0], [78.7, 1344.0], [78.8, 1344.0], [78.9, 1347.0], [79.0, 1347.0], [79.1, 1375.0], [79.2, 1375.0], [79.3, 1387.0], [79.4, 1387.0], [79.5, 1402.0], [79.6, 1402.0], [79.7, 1403.0], [79.8, 1403.0], [79.9, 1405.0], [80.0, 1405.0], [80.1, 1405.0], [80.2, 1405.0], [80.3, 1414.0], [80.4, 1414.0], [80.5, 1423.0], [80.6, 1423.0], [80.7, 1433.0], [80.8, 1433.0], [80.9, 1436.0], [81.0, 1436.0], [81.1, 1443.0], [81.2, 1443.0], [81.3, 1445.0], [81.4, 1445.0], [81.5, 1446.0], [81.6, 1446.0], [81.7, 1447.0], [81.8, 1447.0], [81.9, 1449.0], [82.0, 1449.0], [82.1, 1450.0], [82.2, 1450.0], [82.3, 1452.0], [82.4, 1452.0], [82.5, 1457.0], [82.6, 1457.0], [82.7, 1466.0], [82.8, 1466.0], [82.9, 1469.0], [83.0, 1469.0], [83.1, 1470.0], [83.2, 1470.0], [83.3, 1470.0], [83.4, 1470.0], [83.5, 1471.0], [83.6, 1471.0], [83.7, 1482.0], [83.8, 1482.0], [83.9, 1483.0], [84.0, 1483.0], [84.1, 1483.0], [84.2, 1483.0], [84.3, 1489.0], [84.4, 1489.0], [84.5, 1498.0], [84.6, 1498.0], [84.7, 1516.0], [84.8, 1516.0], [84.9, 1522.0], [85.0, 1522.0], [85.1, 1531.0], [85.2, 1531.0], [85.3, 1540.0], [85.4, 1540.0], [85.5, 1556.0], [85.6, 1556.0], [85.7, 1575.0], [85.8, 1575.0], [85.9, 1581.0], [86.0, 1581.0], [86.1, 1587.0], [86.2, 1587.0], [86.3, 1603.0], [86.4, 1603.0], [86.5, 1614.0], [86.6, 1614.0], [86.7, 1625.0], [86.8, 1625.0], [86.9, 1635.0], [87.0, 1635.0], [87.1, 1644.0], [87.2, 1644.0], [87.3, 1647.0], [87.4, 1647.0], [87.5, 1656.0], [87.6, 1656.0], [87.7, 1657.0], [87.8, 1657.0], [87.9, 1657.0], [88.0, 1657.0], [88.1, 1659.0], [88.2, 1659.0], [88.3, 1663.0], [88.4, 1663.0], [88.5, 1669.0], [88.6, 1669.0], [88.7, 1678.0], [88.8, 1678.0], [88.9, 1684.0], [89.0, 1684.0], [89.1, 1685.0], [89.2, 1685.0], [89.3, 1687.0], [89.4, 1687.0], [89.5, 1694.0], [89.6, 1694.0], [89.7, 1695.0], [89.8, 1695.0], [89.9, 1712.0], [90.0, 1712.0], [90.1, 1721.0], [90.2, 1721.0], [90.3, 1774.0], [90.4, 1774.0], [90.5, 1797.0], [90.6, 1797.0], [90.7, 1819.0], [90.8, 1819.0], [90.9, 1830.0], [91.0, 1830.0], [91.1, 1834.0], [91.2, 1834.0], [91.3, 1834.0], [91.4, 1834.0], [91.5, 1836.0], [91.6, 1836.0], [91.7, 1845.0], [91.8, 1845.0], [91.9, 1855.0], [92.0, 1855.0], [92.1, 1858.0], [92.2, 1858.0], [92.3, 1862.0], [92.4, 1862.0], [92.5, 1867.0], [92.6, 1867.0], [92.7, 1870.0], [92.8, 1870.0], [92.9, 1873.0], [93.0, 1873.0], [93.1, 1874.0], [93.2, 1874.0], [93.3, 1880.0], [93.4, 1880.0], [93.5, 1885.0], [93.6, 1885.0], [93.7, 1890.0], [93.8, 1890.0], [93.9, 1895.0], [94.0, 1895.0], [94.1, 1900.0], [94.2, 1900.0], [94.3, 1901.0], [94.4, 1901.0], [94.5, 1911.0], [94.6, 1911.0], [94.7, 1969.0], [94.8, 1969.0], [94.9, 1972.0], [95.0, 1972.0], [95.1, 1977.0], [95.2, 1977.0], [95.3, 1983.0], [95.4, 1983.0], [95.5, 1995.0], [95.6, 1995.0], [95.7, 2094.0], [95.8, 2094.0], [95.9, 2270.0], [96.0, 2270.0], [96.1, 3191.0], [96.2, 3191.0], [96.3, 3191.0], [96.4, 3191.0], [96.5, 3251.0], [96.6, 3251.0], [96.7, 3272.0], [96.8, 3272.0], [96.9, 3274.0], [97.0, 3274.0], [97.1, 3283.0], [97.2, 3283.0], [97.3, 3290.0], [97.4, 3290.0], [97.5, 3331.0], [97.6, 3331.0], [97.7, 3334.0], [97.8, 3334.0], [97.9, 3343.0], [98.0, 3343.0], [98.1, 3377.0], [98.2, 3377.0], [98.3, 3388.0], [98.4, 3388.0], [98.5, 3388.0], [98.6, 3388.0], [98.7, 3398.0], [98.8, 3398.0], [98.9, 3401.0], [99.0, 3401.0], [99.1, 3406.0], [99.2, 3406.0], [99.3, 3407.0], [99.4, 3407.0], [99.5, 3412.0], [99.6, 3412.0], [99.7, 7120.0], [99.8, 7120.0], [99.9, 7131.0], [100.0, 7131.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 567.0], [0.1, 567.0], [0.2, 569.0], [0.3, 569.0], [0.4, 570.0], [0.5, 570.0], [0.6, 570.0], [0.7, 570.0], [0.8, 578.0], [0.9, 578.0], [1.0, 581.0], [1.1, 581.0], [1.2, 582.0], [1.3, 582.0], [1.4, 596.0], [1.5, 596.0], [1.6, 598.0], [1.7, 598.0], [1.8, 601.0], [1.9, 601.0], [2.0, 608.0], [2.1, 608.0], [2.2, 619.0], [2.3, 619.0], [2.4, 722.0], [2.5, 722.0], [2.6, 725.0], [2.7, 725.0], [2.8, 725.0], [2.9, 728.0], [3.0, 728.0], [3.1, 730.0], [3.2, 730.0], [3.3, 733.0], [3.4, 733.0], [3.5, 735.0], [3.6, 735.0], [3.7, 736.0], [3.8, 736.0], [3.9, 751.0], [4.0, 751.0], [4.1, 778.0], [4.2, 778.0], [4.3, 885.0], [4.4, 885.0], [4.5, 885.0], [4.6, 885.0], [4.7, 887.0], [4.8, 887.0], [4.9, 903.0], [5.0, 903.0], [5.1, 910.0], [5.2, 910.0], [5.3, 922.0], [5.4, 922.0], [5.5, 925.0], [5.6, 925.0], [5.7, 928.0], [5.8, 928.0], [5.9, 930.0], [6.0, 930.0], [6.1, 937.0], [6.2, 937.0], [6.3, 943.0], [6.4, 943.0], [6.5, 946.0], [6.6, 946.0], [6.7, 953.0], [6.8, 953.0], [6.9, 955.0], [7.0, 955.0], [7.1, 955.0], [7.2, 955.0], [7.3, 958.0], [7.4, 958.0], [7.5, 962.0], [7.6, 962.0], [7.7, 967.0], [7.8, 967.0], [7.9, 969.0], [8.0, 969.0], [8.1, 971.0], [8.2, 971.0], [8.3, 978.0], [8.4, 978.0], [8.5, 979.0], [8.6, 979.0], [8.7, 991.0], [8.8, 992.0], [8.9, 992.0], [9.0, 999.0], [9.1, 999.0], [9.2, 999.0], [9.3, 999.0], [9.4, 1001.0], [9.5, 1001.0], [9.6, 1005.0], [9.7, 1005.0], [9.8, 1005.0], [9.9, 1005.0], [10.0, 1010.0], [10.1, 1010.0], [10.2, 1011.0], [10.3, 1011.0], [10.4, 1014.0], [10.5, 1014.0], [10.6, 1017.0], [10.7, 1017.0], [10.8, 1017.0], [10.9, 1017.0], [11.0, 1026.0], [11.1, 1026.0], [11.2, 1030.0], [11.3, 1030.0], [11.4, 1032.0], [11.5, 1032.0], [11.6, 1037.0], [11.7, 1037.0], [11.8, 1039.0], [11.9, 1039.0], [12.0, 1039.0], [12.1, 1039.0], [12.2, 1045.0], [12.3, 1045.0], [12.4, 1052.0], [12.5, 1052.0], [12.6, 1057.0], [12.7, 1057.0], [12.8, 1063.0], [12.9, 1063.0], [13.0, 1068.0], [13.1, 1068.0], [13.2, 1070.0], [13.3, 1070.0], [13.4, 1074.0], [13.5, 1074.0], [13.6, 1078.0], [13.7, 1078.0], [13.8, 1083.0], [13.9, 1083.0], [14.0, 1083.0], [14.1, 1083.0], [14.2, 1085.0], [14.3, 1085.0], [14.4, 1092.0], [14.5, 1092.0], [14.6, 1110.0], [14.7, 1110.0], [14.8, 1114.0], [14.9, 1114.0], [15.0, 1117.0], [15.1, 1117.0], [15.2, 1121.0], [15.3, 1121.0], [15.4, 1125.0], [15.5, 1125.0], [15.6, 1127.0], [15.7, 1127.0], [15.8, 1127.0], [15.9, 1127.0], [16.0, 1129.0], [16.1, 1129.0], [16.2, 1131.0], [16.3, 1131.0], [16.4, 1134.0], [16.5, 1134.0], [16.6, 1135.0], [16.7, 1135.0], [16.8, 1137.0], [16.9, 1137.0], [17.0, 1138.0], [17.1, 1138.0], [17.2, 1138.0], [17.3, 1138.0], [17.4, 1140.0], [17.5, 1140.0], [17.6, 1141.0], [17.7, 1141.0], [17.8, 1149.0], [17.9, 1149.0], [18.0, 1161.0], [18.1, 1161.0], [18.2, 1172.0], [18.3, 1172.0], [18.4, 1173.0], [18.5, 1173.0], [18.6, 1176.0], [18.7, 1176.0], [18.8, 1176.0], [18.9, 1176.0], [19.0, 1176.0], [19.1, 1176.0], [19.2, 1179.0], [19.3, 1179.0], [19.4, 1184.0], [19.5, 1184.0], [19.6, 1184.0], [19.7, 1184.0], [19.8, 1187.0], [19.9, 1187.0], [20.0, 1187.0], [20.1, 1187.0], [20.2, 1188.0], [20.3, 1188.0], [20.4, 1193.0], [20.5, 1193.0], [20.6, 1200.0], [20.7, 1200.0], [20.8, 1201.0], [20.9, 1201.0], [21.0, 1203.0], [21.1, 1203.0], [21.2, 1203.0], [21.3, 1203.0], [21.4, 1211.0], [21.5, 1211.0], [21.6, 1212.0], [21.7, 1212.0], [21.8, 1220.0], [21.9, 1220.0], [22.0, 1223.0], [22.1, 1223.0], [22.2, 1227.0], [22.3, 1227.0], [22.4, 1233.0], [22.5, 1233.0], [22.6, 1237.0], [22.7, 1237.0], [22.8, 1238.0], [22.9, 1238.0], [23.0, 1239.0], [23.1, 1239.0], [23.2, 1239.0], [23.3, 1239.0], [23.4, 1249.0], [23.5, 1249.0], [23.6, 1249.0], [23.7, 1249.0], [23.8, 1251.0], [23.9, 1251.0], [24.0, 1254.0], [24.1, 1254.0], [24.2, 1256.0], [24.3, 1256.0], [24.4, 1259.0], [24.5, 1259.0], [24.6, 1262.0], [24.7, 1262.0], [24.8, 1263.0], [24.9, 1263.0], [25.0, 1273.0], [25.1, 1273.0], [25.2, 1279.0], [25.3, 1279.0], [25.4, 1293.0], [25.5, 1293.0], [25.6, 1295.0], [25.7, 1295.0], [25.8, 1297.0], [25.9, 1297.0], [26.0, 1297.0], [26.1, 1297.0], [26.2, 1298.0], [26.3, 1298.0], [26.4, 1303.0], [26.5, 1303.0], [26.6, 1303.0], [26.7, 1303.0], [26.8, 1310.0], [26.9, 1310.0], [27.0, 1312.0], [27.1, 1312.0], [27.2, 1319.0], [27.3, 1319.0], [27.4, 1323.0], [27.5, 1323.0], [27.6, 1323.0], [27.7, 1323.0], [27.8, 1332.0], [27.9, 1332.0], [28.0, 1335.0], [28.1, 1335.0], [28.2, 1336.0], [28.3, 1336.0], [28.4, 1336.0], [28.5, 1336.0], [28.6, 1341.0], [28.7, 1341.0], [28.8, 1342.0], [28.9, 1342.0], [29.0, 1342.0], [29.1, 1342.0], [29.2, 1343.0], [29.3, 1343.0], [29.4, 1345.0], [29.5, 1345.0], [29.6, 1354.0], [29.7, 1354.0], [29.8, 1355.0], [29.9, 1355.0], [30.0, 1356.0], [30.1, 1356.0], [30.2, 1358.0], [30.3, 1358.0], [30.4, 1359.0], [30.5, 1359.0], [30.6, 1360.0], [30.7, 1360.0], [30.8, 1361.0], [30.9, 1361.0], [31.0, 1362.0], [31.1, 1362.0], [31.2, 1363.0], [31.3, 1363.0], [31.4, 1363.0], [31.5, 1363.0], [31.6, 1366.0], [31.7, 1366.0], [31.8, 1368.0], [31.9, 1368.0], [32.0, 1369.0], [32.1, 1369.0], [32.2, 1369.0], [32.3, 1369.0], [32.4, 1369.0], [32.5, 1369.0], [32.6, 1369.0], [32.7, 1369.0], [32.8, 1370.0], [32.9, 1370.0], [33.0, 1370.0], [33.1, 1370.0], [33.2, 1371.0], [33.3, 1371.0], [33.4, 1373.0], [33.5, 1373.0], [33.6, 1374.0], [33.7, 1374.0], [33.8, 1375.0], [33.9, 1375.0], [34.0, 1377.0], [34.1, 1377.0], [34.2, 1377.0], [34.3, 1377.0], [34.4, 1377.0], [34.5, 1377.0], [34.6, 1377.0], [34.7, 1377.0], [34.8, 1381.0], [34.9, 1381.0], [35.0, 1381.0], [35.1, 1381.0], [35.2, 1381.0], [35.3, 1381.0], [35.4, 1381.0], [35.5, 1381.0], [35.6, 1383.0], [35.7, 1383.0], [35.8, 1389.0], [35.9, 1389.0], [36.0, 1389.0], [36.1, 1389.0], [36.2, 1390.0], [36.3, 1390.0], [36.4, 1391.0], [36.5, 1391.0], [36.6, 1391.0], [36.7, 1391.0], [36.8, 1395.0], [36.9, 1395.0], [37.0, 1396.0], [37.1, 1396.0], [37.2, 1399.0], [37.3, 1399.0], [37.4, 1399.0], [37.5, 1399.0], [37.6, 1405.0], [37.7, 1405.0], [37.8, 1406.0], [37.9, 1406.0], [38.0, 1409.0], [38.1, 1409.0], [38.2, 1409.0], [38.3, 1409.0], [38.4, 1417.0], [38.5, 1417.0], [38.6, 1419.0], [38.7, 1419.0], [38.8, 1421.0], [38.9, 1421.0], [39.0, 1422.0], [39.1, 1422.0], [39.2, 1422.0], [39.3, 1422.0], [39.4, 1423.0], [39.5, 1423.0], [39.6, 1423.0], [39.7, 1423.0], [39.8, 1424.0], [39.9, 1424.0], [40.0, 1427.0], [40.1, 1427.0], [40.2, 1428.0], [40.3, 1428.0], [40.4, 1438.0], [40.5, 1438.0], [40.6, 1440.0], [40.7, 1440.0], [40.8, 1451.0], [40.9, 1451.0], [41.0, 1459.0], [41.1, 1459.0], [41.2, 1461.0], [41.3, 1461.0], [41.4, 1466.0], [41.5, 1466.0], [41.6, 1469.0], [41.7, 1469.0], [41.8, 1473.0], [41.9, 1473.0], [42.0, 1474.0], [42.1, 1474.0], [42.2, 1486.0], [42.3, 1486.0], [42.4, 1489.0], [42.5, 1489.0], [42.6, 1507.0], [42.7, 1507.0], [42.8, 1509.0], [42.9, 1509.0], [43.0, 1510.0], [43.1, 1510.0], [43.2, 1511.0], [43.3, 1511.0], [43.4, 1511.0], [43.5, 1512.0], [43.6, 1512.0], [43.7, 1517.0], [43.8, 1517.0], [43.9, 1519.0], [44.0, 1519.0], [44.1, 1519.0], [44.2, 1519.0], [44.3, 1531.0], [44.4, 1531.0], [44.5, 1532.0], [44.6, 1532.0], [44.7, 1543.0], [44.8, 1543.0], [44.9, 1544.0], [45.0, 1544.0], [45.1, 1547.0], [45.2, 1547.0], [45.3, 1549.0], [45.4, 1549.0], [45.5, 1552.0], [45.6, 1552.0], [45.7, 1553.0], [45.8, 1553.0], [45.9, 1560.0], [46.0, 1560.0], [46.1, 1567.0], [46.2, 1567.0], [46.3, 1568.0], [46.4, 1568.0], [46.5, 1571.0], [46.6, 1571.0], [46.7, 1577.0], [46.8, 1577.0], [46.9, 1578.0], [47.0, 1578.0], [47.1, 1578.0], [47.2, 1578.0], [47.3, 1581.0], [47.4, 1581.0], [47.5, 1583.0], [47.6, 1583.0], [47.7, 1594.0], [47.8, 1594.0], [47.9, 1604.0], [48.0, 1604.0], [48.1, 1612.0], [48.2, 1612.0], [48.3, 1616.0], [48.4, 1616.0], [48.5, 1617.0], [48.6, 1617.0], [48.7, 1618.0], [48.8, 1618.0], [48.9, 1620.0], [49.0, 1620.0], [49.1, 1622.0], [49.2, 1622.0], [49.3, 1629.0], [49.4, 1629.0], [49.5, 1631.0], [49.6, 1631.0], [49.7, 1639.0], [49.8, 1639.0], [49.9, 1644.0], [50.0, 1644.0], [50.1, 1645.0], [50.2, 1645.0], [50.3, 1650.0], [50.4, 1650.0], [50.5, 1653.0], [50.6, 1653.0], [50.7, 1653.0], [50.8, 1653.0], [50.9, 1660.0], [51.0, 1660.0], [51.1, 1662.0], [51.2, 1662.0], [51.3, 1662.0], [51.4, 1662.0], [51.5, 1665.0], [51.6, 1665.0], [51.7, 1667.0], [51.8, 1667.0], [51.9, 1668.0], [52.0, 1668.0], [52.1, 1669.0], [52.2, 1669.0], [52.3, 1673.0], [52.4, 1673.0], [52.5, 1674.0], [52.6, 1674.0], [52.7, 1675.0], [52.8, 1675.0], [52.9, 1676.0], [53.0, 1676.0], [53.1, 1683.0], [53.2, 1683.0], [53.3, 1694.0], [53.4, 1694.0], [53.5, 1697.0], [53.6, 1697.0], [53.7, 1697.0], [53.8, 1697.0], [53.9, 1721.0], [54.0, 1721.0], [54.1, 1737.0], [54.2, 1737.0], [54.3, 1785.0], [54.4, 1785.0], [54.5, 1786.0], [54.6, 1786.0], [54.7, 1792.0], [54.8, 1792.0], [54.9, 1793.0], [55.0, 1793.0], [55.1, 1795.0], [55.2, 1795.0], [55.3, 1801.0], [55.4, 1801.0], [55.5, 1802.0], [55.6, 1802.0], [55.7, 1805.0], [55.8, 1805.0], [55.9, 1807.0], [56.0, 1807.0], [56.1, 1812.0], [56.2, 1812.0], [56.3, 1815.0], [56.4, 1815.0], [56.5, 1828.0], [56.6, 1828.0], [56.7, 1899.0], [56.8, 1899.0], [56.9, 1941.0], [57.0, 1941.0], [57.1, 1941.0], [57.2, 1941.0], [57.3, 1948.0], [57.4, 1948.0], [57.5, 1948.0], [57.6, 1948.0], [57.7, 1954.0], [57.8, 1954.0], [57.9, 1958.0], [58.0, 1958.0], [58.1, 1981.0], [58.2, 1981.0], [58.3, 1983.0], [58.4, 1983.0], [58.5, 2009.0], [58.6, 2009.0], [58.7, 2024.0], [58.8, 2024.0], [58.9, 2039.0], [59.0, 2039.0], [59.1, 2049.0], [59.2, 2049.0], [59.3, 2054.0], [59.4, 2054.0], [59.5, 2055.0], [59.6, 2055.0], [59.7, 2056.0], [59.8, 2056.0], [59.9, 2072.0], [60.0, 2072.0], [60.1, 2108.0], [60.2, 2108.0], [60.3, 2116.0], [60.4, 2116.0], [60.5, 2119.0], [60.6, 2119.0], [60.7, 2119.0], [60.8, 2119.0], [60.9, 2119.0], [61.0, 2119.0], [61.1, 2122.0], [61.2, 2122.0], [61.3, 2124.0], [61.4, 2124.0], [61.5, 2133.0], [61.6, 2133.0], [61.7, 2138.0], [61.8, 2138.0], [61.9, 2140.0], [62.0, 2140.0], [62.1, 2144.0], [62.2, 2144.0], [62.3, 2152.0], [62.4, 2152.0], [62.5, 2160.0], [62.6, 2160.0], [62.7, 2161.0], [62.8, 2161.0], [62.9, 2166.0], [63.0, 2166.0], [63.1, 2196.0], [63.2, 2196.0], [63.3, 2197.0], [63.4, 2197.0], [63.5, 2200.0], [63.6, 2200.0], [63.7, 2202.0], [63.8, 2202.0], [63.9, 2219.0], [64.0, 2219.0], [64.1, 2231.0], [64.2, 2231.0], [64.3, 2234.0], [64.4, 2234.0], [64.5, 2240.0], [64.6, 2240.0], [64.7, 2241.0], [64.8, 2241.0], [64.9, 2272.0], [65.0, 2272.0], [65.1, 2291.0], [65.2, 2291.0], [65.3, 2293.0], [65.4, 2293.0], [65.5, 2309.0], [65.6, 2309.0], [65.7, 2314.0], [65.8, 2314.0], [65.9, 2322.0], [66.0, 2322.0], [66.1, 2323.0], [66.2, 2323.0], [66.3, 2324.0], [66.4, 2324.0], [66.5, 2328.0], [66.6, 2328.0], [66.7, 2329.0], [66.8, 2329.0], [66.9, 2347.0], [67.0, 2347.0], [67.1, 2348.0], [67.2, 2348.0], [67.3, 2355.0], [67.4, 2355.0], [67.5, 2366.0], [67.6, 2366.0], [67.7, 2369.0], [67.8, 2369.0], [67.9, 2375.0], [68.0, 2375.0], [68.1, 2382.0], [68.2, 2382.0], [68.3, 2415.0], [68.4, 2415.0], [68.5, 2432.0], [68.6, 2432.0], [68.7, 2435.0], [68.8, 2435.0], [68.9, 2439.0], [69.0, 2439.0], [69.1, 2440.0], [69.2, 2440.0], [69.3, 2442.0], [69.4, 2442.0], [69.5, 2448.0], [69.6, 2448.0], [69.7, 2449.0], [69.8, 2449.0], [69.9, 2449.0], [70.0, 2449.0], [70.1, 2450.0], [70.2, 2450.0], [70.3, 2451.0], [70.4, 2451.0], [70.5, 2452.0], [70.6, 2452.0], [70.7, 2454.0], [70.8, 2454.0], [70.9, 2461.0], [71.0, 2461.0], [71.1, 2463.0], [71.2, 2463.0], [71.3, 2466.0], [71.4, 2466.0], [71.5, 2476.0], [71.6, 2476.0], [71.7, 2476.0], [71.8, 2476.0], [71.9, 2482.0], [72.0, 2482.0], [72.1, 2485.0], [72.2, 2485.0], [72.3, 2497.0], [72.4, 2497.0], [72.5, 2500.0], [72.6, 2500.0], [72.7, 2509.0], [72.8, 2509.0], [72.9, 2509.0], [73.0, 2509.0], [73.1, 2517.0], [73.2, 2517.0], [73.3, 2517.0], [73.4, 2517.0], [73.5, 2518.0], [73.6, 2518.0], [73.7, 2520.0], [73.8, 2520.0], [73.9, 2524.0], [74.0, 2524.0], [74.1, 2528.0], [74.2, 2528.0], [74.3, 2534.0], [74.4, 2534.0], [74.5, 2539.0], [74.6, 2539.0], [74.7, 2540.0], [74.8, 2540.0], [74.9, 2552.0], [75.0, 2552.0], [75.1, 2553.0], [75.2, 2553.0], [75.3, 2555.0], [75.4, 2555.0], [75.5, 2558.0], [75.6, 2558.0], [75.7, 2566.0], [75.8, 2566.0], [75.9, 2568.0], [76.0, 2568.0], [76.1, 2579.0], [76.2, 2579.0], [76.3, 2580.0], [76.4, 2580.0], [76.5, 2585.0], [76.6, 2585.0], [76.7, 2589.0], [76.8, 2589.0], [76.9, 2612.0], [77.0, 2612.0], [77.1, 2614.0], [77.2, 2614.0], [77.3, 2616.0], [77.4, 2616.0], [77.5, 2627.0], [77.6, 2627.0], [77.7, 2628.0], [77.8, 2628.0], [77.9, 2633.0], [78.0, 2633.0], [78.1, 2637.0], [78.2, 2637.0], [78.3, 2638.0], [78.4, 2638.0], [78.5, 2649.0], [78.6, 2649.0], [78.7, 2652.0], [78.8, 2652.0], [78.9, 2659.0], [79.0, 2659.0], [79.1, 2667.0], [79.2, 2667.0], [79.3, 2672.0], [79.4, 2672.0], [79.5, 2678.0], [79.6, 2678.0], [79.7, 2696.0], [79.8, 2696.0], [79.9, 2705.0], [80.0, 2705.0], [80.1, 2708.0], [80.2, 2708.0], [80.3, 2717.0], [80.4, 2717.0], [80.5, 2726.0], [80.6, 2726.0], [80.7, 2743.0], [80.8, 2743.0], [80.9, 2752.0], [81.0, 2752.0], [81.1, 2796.0], [81.2, 2796.0], [81.3, 2797.0], [81.4, 2797.0], [81.5, 2814.0], [81.6, 2814.0], [81.7, 2828.0], [81.8, 2828.0], [81.9, 2834.0], [82.0, 2834.0], [82.1, 2835.0], [82.2, 2835.0], [82.3, 2848.0], [82.4, 2848.0], [82.5, 2872.0], [82.6, 2872.0], [82.7, 2876.0], [82.8, 2876.0], [82.9, 2885.0], [83.0, 2885.0], [83.1, 2886.0], [83.2, 2886.0], [83.3, 2887.0], [83.4, 2887.0], [83.5, 2895.0], [83.6, 2895.0], [83.7, 2895.0], [83.8, 2895.0], [83.9, 2923.0], [84.0, 2923.0], [84.1, 2936.0], [84.2, 2936.0], [84.3, 2975.0], [84.4, 2975.0], [84.5, 2980.0], [84.6, 2980.0], [84.7, 3017.0], [84.8, 3017.0], [84.9, 3021.0], [85.0, 3021.0], [85.1, 3030.0], [85.2, 3030.0], [85.3, 3037.0], [85.4, 3037.0], [85.5, 3052.0], [85.6, 3052.0], [85.7, 3115.0], [85.8, 3115.0], [85.9, 3118.0], [86.0, 3118.0], [86.1, 3119.0], [86.2, 3119.0], [86.3, 3178.0], [86.4, 3178.0], [86.5, 3183.0], [86.6, 3183.0], [86.7, 3200.0], [86.8, 3200.0], [86.9, 3201.0], [87.0, 3201.0], [87.1, 3270.0], [87.2, 3270.0], [87.3, 3306.0], [87.4, 3306.0], [87.5, 3311.0], [87.6, 3311.0], [87.7, 3326.0], [87.8, 3326.0], [87.9, 3330.0], [88.0, 3330.0], [88.1, 3335.0], [88.2, 3335.0], [88.3, 3348.0], [88.4, 3348.0], [88.5, 3363.0], [88.6, 3363.0], [88.7, 3394.0], [88.8, 3394.0], [88.9, 3420.0], [89.0, 3420.0], [89.1, 3424.0], [89.2, 3424.0], [89.3, 3426.0], [89.4, 3426.0], [89.5, 3443.0], [89.6, 3443.0], [89.7, 3447.0], [89.8, 3447.0], [89.9, 3482.0], [90.0, 3482.0], [90.1, 3487.0], [90.2, 3487.0], [90.3, 3495.0], [90.4, 3495.0], [90.5, 3500.0], [90.6, 3500.0], [90.7, 3507.0], [90.8, 3507.0], [90.9, 3525.0], [91.0, 3525.0], [91.1, 3529.0], [91.2, 3529.0], [91.3, 3539.0], [91.4, 3539.0], [91.5, 3548.0], [91.6, 3548.0], [91.7, 3548.0], [91.8, 3548.0], [91.9, 3549.0], [92.0, 3549.0], [92.1, 3556.0], [92.2, 3556.0], [92.3, 3603.0], [92.4, 3603.0], [92.5, 3615.0], [92.6, 3615.0], [92.7, 3694.0], [92.8, 3694.0], [92.9, 3756.0], [93.0, 3756.0], [93.1, 3846.0], [93.2, 3846.0], [93.3, 3854.0], [93.4, 3854.0], [93.5, 3860.0], [93.6, 3860.0], [93.7, 3863.0], [93.8, 3863.0], [93.9, 3884.0], [94.0, 3884.0], [94.1, 3886.0], [94.2, 3886.0], [94.3, 3902.0], [94.4, 3902.0], [94.5, 3924.0], [94.6, 3924.0], [94.7, 3964.0], [94.8, 3964.0], [94.9, 4516.0], [95.0, 4516.0], [95.1, 4560.0], [95.2, 4560.0], [95.3, 4571.0], [95.4, 4571.0], [95.5, 4696.0], [95.6, 4696.0], [95.7, 5562.0], [95.8, 5562.0], [95.9, 5834.0], [96.0, 5834.0], [96.1, 6089.0], [96.2, 6089.0], [96.3, 6236.0], [96.4, 6236.0], [96.5, 6510.0], [96.6, 6510.0], [96.7, 6551.0], [96.8, 6551.0], [96.9, 6800.0], [97.0, 6800.0], [97.1, 6807.0], [97.2, 6807.0], [97.3, 6809.0], [97.4, 6809.0], [97.5, 6829.0], [97.6, 6829.0], [97.7, 6843.0], [97.8, 6843.0], [97.9, 7221.0], [98.0, 7221.0], [98.1, 7261.0], [98.2, 7261.0], [98.3, 7276.0], [98.4, 7276.0], [98.5, 7477.0], [98.6, 7477.0], [98.7, 7648.0], [98.8, 7648.0], [98.9, 8453.0], [99.0, 8453.0], [99.1, 8659.0], [99.2, 8659.0], [99.3, 8983.0], [99.4, 8983.0], [99.5, 9324.0], [99.6, 9324.0], [99.7, 9539.0], [99.8, 9539.0], [99.9, 11320.0], [100.0, 11320.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 85.0, "series": [{"data": [[8900.0, 1.0], [9100.0, 1.0], [8800.0, 1.0], [600.0, 52.0], [700.0, 33.0], [11200.0, 1.0], [800.0, 43.0], [900.0, 55.0], [1000.0, 35.0], [1100.0, 31.0], [1200.0, 19.0], [1300.0, 8.0], [1400.0, 12.0], [1500.0, 19.0], [1600.0, 11.0], [100.0, 41.0], [1700.0, 9.0], [1800.0, 11.0], [1900.0, 10.0], [2000.0, 11.0], [2100.0, 5.0], [2200.0, 3.0], [2300.0, 4.0], [2400.0, 7.0], [2500.0, 3.0], [2600.0, 2.0], [2700.0, 1.0], [2800.0, 1.0], [2900.0, 1.0], [200.0, 24.0], [3200.0, 2.0], [3300.0, 1.0], [4200.0, 1.0], [4400.0, 1.0], [4600.0, 1.0], [4900.0, 1.0], [5100.0, 1.0], [6000.0, 1.0], [5900.0, 1.0], [6300.0, 3.0], [6200.0, 1.0], [400.0, 6.0], [6400.0, 2.0], [6900.0, 1.0], [7000.0, 1.0], [7100.0, 1.0], [7200.0, 2.0], [500.0, 18.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 13.0], [600.0, 33.0], [700.0, 13.0], [800.0, 4.0], [900.0, 1.0], [1000.0, 5.0], [1100.0, 23.0], [1200.0, 12.0], [1300.0, 6.0], [1400.0, 26.0], [1500.0, 8.0], [100.0, 37.0], [1600.0, 18.0], [1700.0, 4.0], [1800.0, 17.0], [1900.0, 8.0], [2000.0, 1.0], [2200.0, 1.0], [3100.0, 2.0], [200.0, 19.0], [3300.0, 7.0], [3200.0, 5.0], [3400.0, 4.0], [300.0, 82.0], [400.0, 85.0], [7100.0, 2.0], [500.0, 64.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[600.0, 3.0], [700.0, 9.0], [800.0, 3.0], [900.0, 23.0], [1000.0, 26.0], [1100.0, 30.0], [1200.0, 29.0], [1300.0, 56.0], [1400.0, 25.0], [1500.0, 26.0], [1600.0, 30.0], [1700.0, 7.0], [1800.0, 8.0], [1900.0, 8.0], [2000.0, 8.0], [2100.0, 17.0], [2300.0, 14.0], [2200.0, 10.0], [2400.0, 21.0], [2500.0, 22.0], [2600.0, 15.0], [2800.0, 12.0], [2700.0, 8.0], [2900.0, 4.0], [3000.0, 5.0], [3100.0, 5.0], [3200.0, 3.0], [3300.0, 8.0], [3400.0, 8.0], [3500.0, 9.0], [3700.0, 1.0], [3600.0, 3.0], [3800.0, 6.0], [3900.0, 3.0], [4600.0, 1.0], [4500.0, 3.0], [5500.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [6200.0, 1.0], [6500.0, 2.0], [6800.0, 5.0], [7400.0, 1.0], [7200.0, 3.0], [7600.0, 1.0], [8400.0, 1.0], [8600.0, 1.0], [8900.0, 1.0], [9300.0, 1.0], [9500.0, 1.0], [11300.0, 1.0], [500.0, 9.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 307.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 706.0, "series": [{"data": [[0.0, 307.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 706.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 487.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 94.13200000000002, "minX": 1.72427502E12, "maxY": 94.13200000000002, "series": [{"data": [[1.72427502E12, 94.13200000000002]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427502E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 87.0, "minX": 1.0, "maxY": 11320.0, "series": [{"data": [[2.0, 6987.0], [3.0, 144.0], [4.0, 139.0], [5.0, 1138.0], [6.0, 11233.0], [8.0, 145.5], [9.0, 148.0], [10.0, 140.0], [11.0, 141.0], [13.0, 136.0], [14.0, 148.0], [15.0, 143.0], [16.0, 1250.0], [17.0, 152.0], [18.0, 157.0], [19.0, 146.0], [20.0, 156.0], [21.0, 138.0], [22.0, 143.0], [23.0, 143.0], [24.0, 3278.0], [25.0, 138.0], [26.0, 139.0], [27.0, 147.0], [28.0, 141.0], [30.0, 2265.0], [31.0, 1148.0], [33.0, 132.0], [32.0, 1358.0], [35.0, 125.0], [34.0, 138.0], [37.0, 191.0], [36.0, 190.0], [39.0, 3283.0], [38.0, 1187.0], [41.0, 205.0], [40.0, 1383.0], [43.0, 1333.0], [42.0, 1354.0], [45.0, 179.0], [44.0, 179.0], [47.0, 179.0], [46.0, 180.0], [48.0, 187.0], [51.0, 222.0], [50.0, 234.0], [53.0, 244.0], [52.0, 237.0], [54.0, 188.0], [57.0, 223.0], [56.0, 238.5], [59.0, 1236.0], [58.0, 222.0], [61.0, 1157.0], [60.0, 1256.0], [63.0, 1161.0], [62.0, 1149.0], [67.0, 198.0], [66.0, 169.0], [65.0, 4643.0], [64.0, 1260.0], [71.0, 196.0], [70.0, 217.0], [69.0, 205.0], [68.0, 201.0], [75.0, 175.0], [74.0, 211.0], [73.0, 180.0], [72.0, 190.0], [79.0, 949.0], [78.0, 865.75], [77.0, 191.0], [76.0, 190.0], [83.0, 1082.6], [82.0, 999.3333333333333], [81.0, 1099.1666666666667], [80.0, 985.25], [87.0, 1551.5], [86.0, 1394.3750000000002], [85.0, 1297.6666666666667], [84.0, 785.0], [89.0, 1097.4], [88.0, 1051.0], [91.0, 1103.3333333333333], [90.0, 1225.3333333333333], [95.0, 1104.909090909091], [94.0, 1069.6363636363637], [93.0, 1218.9], [92.0, 1140.2], [96.0, 1161.9999999999998], [99.0, 1008.6], [98.0, 1153.3333333333335], [97.0, 1755.8571428571431], [102.0, 1228.8999999999999], [101.0, 1939.5], [103.0, 1147.625], [100.0, 1221.125], [107.0, 1277.8666666666668], [106.0, 1053.1], [105.0, 952.5], [104.0, 996.2222222222222], [111.0, 1695.0666666666668], [110.0, 1403.9230769230767], [109.0, 1510.8666666666666], [108.0, 977.0], [113.0, 1646.1875], [112.0, 1599.8666666666666], [115.0, 1412.3000000000002], [114.0, 1719.2666666666669], [119.0, 2034.875], [118.0, 2129.3333333333335], [117.0, 965.4545454545455], [116.0, 604.0], [121.0, 869.1428571428571], [120.0, 1592.125], [122.0, 2786.333333333333], [123.0, 1808.2857142857142], [124.0, 1131.0], [127.0, 1749.0], [126.0, 1197.5], [125.0, 6343.0], [130.0, 1088.0], [135.0, 1317.0], [134.0, 753.0], [133.0, 4968.0], [132.0, 1570.0], [131.0, 479.0], [129.0, 858.0], [128.0, 1825.0], [136.0, 1545.0], [1.0, 7202.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[94.13200000000008, 1290.8600000000008]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 1466.0], [3.0, 7131.0], [4.0, 7120.0], [5.0, 3377.0], [6.0, 87.0], [8.0, 3372.0], [9.0, 3334.0], [10.0, 3398.0], [11.0, 3388.0], [13.0, 3400.0], [14.0, 3407.0], [15.0, 3406.0], [16.0, 1185.0], [17.0, 3272.0], [18.0, 3191.0], [19.0, 3274.0], [20.0, 3290.0], [21.0, 3191.0], [22.0, 3251.0], [23.0, 3283.0], [24.0, 1282.0], [25.0, 1283.0], [26.0, 1260.0], [27.0, 1216.0], [28.0, 1267.0], [30.0, 564.0], [31.0, 527.0], [33.0, 1165.0], [32.0, 1182.0], [35.0, 1147.0], [34.0, 1216.0], [37.0, 1112.0], [36.0, 1112.0], [39.0, 579.0], [38.0, 1188.0], [41.0, 1217.0], [40.0, 1669.0], [43.0, 1687.0], [42.0, 1625.0], [45.0, 1230.0], [44.0, 1143.0], [47.0, 1210.0], [46.0, 1209.0], [48.0, 1183.0], [51.0, 1159.0], [50.0, 1139.0], [53.0, 1116.0], [52.0, 1158.0], [54.0, 1174.0], [57.0, 1168.0], [56.0, 1140.0], [59.0, 1659.0], [58.0, 1135.0], [61.0, 1678.0], [60.0, 643.0], [63.0, 1635.0], [62.0, 1647.0], [67.0, 400.0], [66.0, 3331.0], [65.0, 1443.0], [64.0, 1482.0], [71.0, 382.0], [70.0, 391.0], [69.0, 396.0], [68.0, 416.0], [75.0, 391.0], [74.0, 371.0], [73.0, 390.0], [72.0, 390.0], [79.0, 450.5], [78.0, 305.0], [77.0, 378.0], [76.0, 380.0], [83.0, 364.0], [82.0, 241.66666666666666], [81.0, 327.0], [80.0, 504.25], [87.0, 323.2], [86.0, 371.5], [85.0, 484.55555555555554], [84.0, 323.3333333333333], [89.0, 488.0], [88.0, 409.83333333333337], [91.0, 503.3333333333333], [90.0, 647.2222222222222], [95.0, 545.0909090909091], [94.0, 696.9090909090909], [93.0, 942.3000000000001], [92.0, 970.4000000000001], [96.0, 788.7142857142857], [99.0, 1067.0], [98.0, 768.0], [97.0, 520.7142857142858], [102.0, 681.8000000000001], [101.0, 702.9], [103.0, 699.125], [100.0, 791.0], [107.0, 823.4666666666667], [106.0, 1121.8999999999999], [105.0, 717.1999999999999], [104.0, 381.1111111111111], [111.0, 438.46666666666664], [110.0, 907.9230769230768], [109.0, 599.4], [108.0, 853.7777777777779], [113.0, 613.3125], [112.0, 524.3999999999999], [115.0, 744.6], [114.0, 885.7333333333333], [119.0, 999.0], [118.0, 637.7777777777778], [117.0, 748.6363636363635], [116.0, 427.5], [121.0, 640.0000000000001], [120.0, 579.5], [122.0, 644.8333333333334], [123.0, 783.5714285714286], [124.0, 1131.6666666666667], [127.0, 1134.0], [126.0, 1035.0], [125.0, 456.0], [130.0, 966.0], [135.0, 637.0], [134.0, 469.0], [133.0, 594.0], [132.0, 485.0], [131.0, 430.0], [129.0, 453.0], [128.0, 413.0], [136.0, 509.0], [1.0, 1457.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[94.13200000000008, 833.9720000000004]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 8453.0], [3.0, 7276.0], [4.0, 7261.0], [5.0, 4516.0], [6.0, 11320.0], [8.0, 3517.5], [9.0, 3482.0], [10.0, 3539.0], [11.0, 3529.0], [13.0, 3536.5], [14.0, 3556.0], [15.0, 3549.0], [16.0, 2435.0], [17.0, 3424.0], [18.0, 3348.0], [19.0, 3420.0], [20.0, 3447.0], [21.0, 3330.0], [22.0, 3394.0], [23.0, 3426.0], [24.0, 4560.0], [25.0, 1421.0], [26.0, 1399.0], [27.0, 1363.0], [28.0, 1409.0], [30.0, 2829.0], [31.0, 1675.0], [33.0, 1297.0], [32.0, 2540.0], [35.0, 1273.0], [34.0, 1354.0], [37.0, 1303.0], [36.0, 1303.0], [39.0, 3863.0], [38.0, 2375.0], [41.0, 1422.0], [40.0, 3052.0], [43.0, 3021.0], [42.0, 2980.0], [45.0, 1409.0], [44.0, 1323.0], [47.0, 1389.0], [46.0, 1389.0], [48.0, 1370.0], [51.0, 1381.0], [50.0, 1373.0], [53.0, 1361.0], [52.0, 1395.0], [54.0, 1363.0], [57.0, 1391.0], [56.0, 1379.0], [59.0, 2895.0], [58.0, 1358.0], [61.0, 2835.0], [60.0, 1899.0], [63.0, 2797.0], [62.0, 2796.0], [67.0, 598.0], [66.0, 3500.0], [65.0, 6089.0], [64.0, 2743.0], [71.0, 578.0], [70.0, 608.0], [69.0, 601.0], [68.0, 619.0], [75.0, 567.0], [74.0, 582.0], [73.0, 570.0], [72.0, 581.0], [79.0, 1400.0], [78.0, 1173.25], [77.0, 569.0], [76.0, 570.0], [83.0, 1447.0], [82.0, 1241.6666666666667], [81.0, 1426.6666666666667], [80.0, 1490.5], [87.0, 1875.4], [86.0, 1766.375], [85.0, 1782.888888888889], [84.0, 1108.6666666666667], [89.0, 1585.8], [88.0, 1461.8333333333333], [91.0, 1606.888888888889], [90.0, 1873.111111111111], [95.0, 1650.4545454545455], [94.0, 1767.0], [93.0, 2162.0], [92.0, 2111.3], [96.0, 1951.2857142857142], [99.0, 2076.2], [98.0, 1921.5], [97.0, 2277.1428571428573], [102.0, 1911.3999999999999], [101.0, 2643.0], [103.0, 1847.125], [100.0, 2012.5], [107.0, 2101.8], [106.0, 2175.7], [105.0, 1670.3], [104.0, 1377.7777777777778], [111.0, 2134.5333333333333], [110.0, 2312.3076923076924], [109.0, 2111.2000000000003], [108.0, 1831.2222222222224], [113.0, 2260.375], [112.0, 2124.8666666666663], [115.0, 2157.3], [114.0, 2605.6000000000004], [119.0, 3036.875], [118.0, 2768.1111111111113], [117.0, 1714.8181818181818], [116.0, 1032.0], [121.0, 1509.9999999999998], [120.0, 2172.875], [122.0, 3432.0], [123.0, 2593.1428571428573], [124.0, 2263.0], [127.0, 2883.5], [126.0, 2233.5], [125.0, 6800.0], [130.0, 2054.5], [135.0, 1954.0], [134.0, 1223.0], [133.0, 5562.0], [132.0, 2056.0], [131.0, 910.0], [129.0, 1312.0], [128.0, 2241.0], [136.0, 2055.0], [1.0, 8659.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[94.13200000000008, 2125.4899999999993]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 136.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4300.0, "minX": 1.72427502E12, "maxY": 420455.63333333336, "series": [{"data": [[1.72427502E12, 420455.63333333336]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72427502E12, 4300.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427502E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 833.9720000000004, "minX": 1.72427502E12, "maxY": 2125.4899999999993, "series": [{"data": [[1.72427502E12, 1290.8600000000008]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.72427502E12, 833.9720000000004]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.72427502E12, 2125.4899999999993]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427502E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 833.8860000000004, "minX": 1.72427502E12, "maxY": 1126.8200000000002, "series": [{"data": [[1.72427502E12, 1126.8200000000002]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.72427502E12, 833.8860000000004]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.72427502E12, 833.8860000000004]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427502E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 518.4999999999999, "minX": 1.72427502E12, "maxY": 850.3960000000001, "series": [{"data": [[1.72427502E12, 850.3960000000001]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.72427502E12, 518.4999999999999]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.72427502E12, 518.4999999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427502E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 87.0, "minX": 1.72427502E12, "maxY": 11320.0, "series": [{"data": [[1.72427502E12, 11320.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72427502E12, 2694.2000000000016]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72427502E12, 7223.97]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72427502E12, 3480.250000000002]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72427502E12, 87.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72427502E12, 1124.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427502E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 101.0, "minX": 4.0, "maxY": 7827.5, "series": [{"data": [[135.0, 1765.0], [8.0, 5818.0], [142.0, 1142.0], [144.0, 1303.5], [158.0, 1072.5], [165.0, 1141.0], [168.0, 1048.5], [180.0, 1135.0], [45.0, 3278.0], [61.0, 365.0], [4.0, 7827.5], [22.0, 2958.5], [26.0, 101.0], [119.0, 795.0], [123.0, 1223.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 180.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 101.0, "minX": 4.0, "maxY": 5248.5, "series": [{"data": [[135.0, 447.0], [8.0, 5248.5], [142.0, 1004.0], [144.0, 782.0], [158.0, 711.5], [165.0, 660.0], [168.0, 766.0], [180.0, 675.0], [45.0, 3191.0], [61.0, 365.0], [4.0, 1926.5], [22.0, 1213.0], [26.0, 101.0], [119.0, 562.0], [123.0, 534.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 180.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.72427502E12, "maxY": 25.0, "series": [{"data": [[1.72427502E12, 25.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427502E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.72427502E12, "maxY": 16.666666666666668, "series": [{"data": [[1.72427502E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72427502E12, 8.333333333333334]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427502E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.333333333333334, "minX": 1.72427502E12, "maxY": 8.333333333333334, "series": [{"data": [[1.72427502E12, 8.333333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72427502E12, 8.333333333333334]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.72427502E12, 8.333333333333334]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427502E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.72427502E12, "maxY": 25.0, "series": [{"data": [[1.72427502E12, 25.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427502E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

