/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 78.0, "minX": 0.0, "maxY": 4056.0, "series": [{"data": [[0.0, 127.0], [0.1, 127.0], [0.2, 129.0], [0.3, 129.0], [0.4, 133.0], [0.5, 133.0], [0.6, 133.0], [0.7, 134.0], [0.8, 135.0], [0.9, 135.0], [1.0, 135.0], [1.1, 135.0], [1.2, 135.0], [1.3, 153.0], [1.4, 153.0], [1.5, 164.0], [1.6, 164.0], [1.7, 164.0], [1.8, 164.0], [1.9, 175.0], [2.0, 175.0], [2.1, 179.0], [2.2, 179.0], [2.3, 193.0], [2.4, 193.0], [2.5, 194.0], [2.6, 194.0], [2.7, 202.0], [2.8, 202.0], [2.9, 203.0], [3.0, 203.0], [3.1, 205.0], [3.2, 205.0], [3.3, 206.0], [3.4, 206.0], [3.5, 207.0], [3.6, 207.0], [3.7, 211.0], [3.8, 211.0], [3.9, 216.0], [4.0, 216.0], [4.1, 218.0], [4.2, 218.0], [4.3, 221.0], [4.4, 221.0], [4.5, 221.0], [4.6, 221.0], [4.7, 226.0], [4.8, 226.0], [4.9, 227.0], [5.0, 227.0], [5.1, 231.0], [5.2, 231.0], [5.3, 234.0], [5.4, 234.0], [5.5, 238.0], [5.6, 238.0], [5.7, 239.0], [5.8, 239.0], [5.9, 239.0], [6.0, 239.0], [6.1, 239.0], [6.2, 239.0], [6.3, 242.0], [6.4, 242.0], [6.5, 242.0], [6.6, 242.0], [6.7, 245.0], [6.8, 245.0], [6.9, 249.0], [7.0, 249.0], [7.1, 249.0], [7.2, 249.0], [7.3, 249.0], [7.4, 249.0], [7.5, 250.0], [7.6, 250.0], [7.7, 251.0], [7.8, 251.0], [7.9, 251.0], [8.0, 251.0], [8.1, 252.0], [8.2, 252.0], [8.3, 252.0], [8.4, 252.0], [8.5, 255.0], [8.6, 255.0], [8.7, 256.0], [8.8, 256.0], [8.9, 256.0], [9.0, 256.0], [9.1, 258.0], [9.2, 258.0], [9.3, 260.0], [9.4, 260.0], [9.5, 261.0], [9.6, 261.0], [9.7, 262.0], [9.8, 262.0], [9.9, 262.0], [10.0, 262.0], [10.1, 262.0], [10.2, 262.0], [10.3, 263.0], [10.4, 265.0], [10.5, 265.0], [10.6, 272.0], [10.7, 272.0], [10.8, 275.0], [10.9, 275.0], [11.0, 277.0], [11.1, 277.0], [11.2, 278.0], [11.3, 278.0], [11.4, 287.0], [11.5, 287.0], [11.6, 288.0], [11.7, 288.0], [11.8, 289.0], [11.9, 289.0], [12.0, 291.0], [12.1, 291.0], [12.2, 292.0], [12.3, 292.0], [12.4, 294.0], [12.5, 294.0], [12.6, 294.0], [12.7, 294.0], [12.8, 295.0], [12.9, 295.0], [13.0, 295.0], [13.1, 295.0], [13.2, 296.0], [13.3, 296.0], [13.4, 297.0], [13.5, 297.0], [13.6, 298.0], [13.7, 298.0], [13.8, 299.0], [13.9, 299.0], [14.0, 301.0], [14.1, 301.0], [14.2, 303.0], [14.3, 303.0], [14.4, 304.0], [14.5, 304.0], [14.6, 305.0], [14.7, 305.0], [14.8, 307.0], [14.9, 307.0], [15.0, 307.0], [15.1, 307.0], [15.2, 307.0], [15.3, 307.0], [15.4, 310.0], [15.5, 310.0], [15.6, 312.0], [15.7, 312.0], [15.8, 312.0], [15.9, 312.0], [16.0, 313.0], [16.1, 313.0], [16.2, 314.0], [16.3, 314.0], [16.4, 314.0], [16.5, 314.0], [16.6, 314.0], [16.7, 314.0], [16.8, 314.0], [16.9, 314.0], [17.0, 317.0], [17.1, 317.0], [17.2, 318.0], [17.3, 318.0], [17.4, 319.0], [17.5, 319.0], [17.6, 320.0], [17.7, 320.0], [17.8, 320.0], [17.9, 320.0], [18.0, 320.0], [18.1, 320.0], [18.2, 320.0], [18.3, 320.0], [18.4, 320.0], [18.5, 320.0], [18.6, 321.0], [18.7, 321.0], [18.8, 321.0], [18.9, 321.0], [19.0, 322.0], [19.1, 322.0], [19.2, 322.0], [19.3, 322.0], [19.4, 322.0], [19.5, 322.0], [19.6, 322.0], [19.7, 322.0], [19.8, 322.0], [19.9, 322.0], [20.0, 322.0], [20.1, 322.0], [20.2, 323.0], [20.3, 323.0], [20.4, 324.0], [20.5, 324.0], [20.6, 324.0], [20.7, 324.0], [20.8, 324.0], [20.9, 324.0], [21.0, 326.0], [21.1, 326.0], [21.2, 327.0], [21.3, 327.0], [21.4, 330.0], [21.5, 330.0], [21.6, 330.0], [21.7, 330.0], [21.8, 331.0], [21.9, 331.0], [22.0, 331.0], [22.1, 331.0], [22.2, 332.0], [22.3, 332.0], [22.4, 332.0], [22.5, 332.0], [22.6, 332.0], [22.7, 332.0], [22.8, 332.0], [22.9, 332.0], [23.0, 332.0], [23.1, 332.0], [23.2, 332.0], [23.3, 332.0], [23.4, 333.0], [23.5, 333.0], [23.6, 334.0], [23.7, 334.0], [23.8, 334.0], [23.9, 334.0], [24.0, 335.0], [24.1, 335.0], [24.2, 335.0], [24.3, 335.0], [24.4, 336.0], [24.5, 336.0], [24.6, 337.0], [24.7, 337.0], [24.8, 338.0], [24.9, 338.0], [25.0, 339.0], [25.1, 339.0], [25.2, 340.0], [25.3, 340.0], [25.4, 340.0], [25.5, 340.0], [25.6, 341.0], [25.7, 341.0], [25.8, 341.0], [25.9, 341.0], [26.0, 342.0], [26.1, 342.0], [26.2, 342.0], [26.3, 342.0], [26.4, 344.0], [26.5, 344.0], [26.6, 345.0], [26.7, 345.0], [26.8, 345.0], [26.9, 345.0], [27.0, 346.0], [27.1, 346.0], [27.2, 348.0], [27.3, 348.0], [27.4, 348.0], [27.5, 348.0], [27.6, 349.0], [27.7, 349.0], [27.8, 351.0], [27.9, 351.0], [28.0, 352.0], [28.1, 352.0], [28.2, 352.0], [28.3, 352.0], [28.4, 352.0], [28.5, 352.0], [28.6, 355.0], [28.7, 355.0], [28.8, 356.0], [28.9, 356.0], [29.0, 357.0], [29.1, 357.0], [29.2, 358.0], [29.3, 358.0], [29.4, 358.0], [29.5, 358.0], [29.6, 359.0], [29.7, 359.0], [29.8, 359.0], [29.9, 359.0], [30.0, 359.0], [30.1, 359.0], [30.2, 360.0], [30.3, 360.0], [30.4, 360.0], [30.5, 360.0], [30.6, 360.0], [30.7, 360.0], [30.8, 360.0], [30.9, 360.0], [31.0, 362.0], [31.1, 362.0], [31.2, 364.0], [31.3, 364.0], [31.4, 367.0], [31.5, 367.0], [31.6, 369.0], [31.7, 369.0], [31.8, 372.0], [31.9, 372.0], [32.0, 378.0], [32.1, 378.0], [32.2, 380.0], [32.3, 380.0], [32.4, 380.0], [32.5, 380.0], [32.6, 381.0], [32.7, 381.0], [32.8, 381.0], [32.9, 381.0], [33.0, 383.0], [33.1, 383.0], [33.2, 384.0], [33.3, 384.0], [33.4, 386.0], [33.5, 386.0], [33.6, 386.0], [33.7, 386.0], [33.8, 388.0], [33.9, 388.0], [34.0, 392.0], [34.1, 392.0], [34.2, 393.0], [34.3, 393.0], [34.4, 396.0], [34.5, 396.0], [34.6, 397.0], [34.7, 397.0], [34.8, 398.0], [34.9, 398.0], [35.0, 398.0], [35.1, 398.0], [35.2, 399.0], [35.3, 399.0], [35.4, 402.0], [35.5, 402.0], [35.6, 412.0], [35.7, 412.0], [35.8, 415.0], [35.9, 415.0], [36.0, 418.0], [36.1, 418.0], [36.2, 421.0], [36.3, 421.0], [36.4, 424.0], [36.5, 424.0], [36.6, 430.0], [36.7, 430.0], [36.8, 434.0], [36.9, 434.0], [37.0, 436.0], [37.1, 436.0], [37.2, 436.0], [37.3, 436.0], [37.4, 439.0], [37.5, 439.0], [37.6, 442.0], [37.7, 442.0], [37.8, 442.0], [37.9, 443.0], [38.0, 443.0], [38.1, 445.0], [38.2, 445.0], [38.3, 448.0], [38.4, 448.0], [38.5, 451.0], [38.6, 451.0], [38.7, 454.0], [38.8, 454.0], [38.9, 454.0], [39.0, 454.0], [39.1, 457.0], [39.2, 457.0], [39.3, 458.0], [39.4, 458.0], [39.5, 458.0], [39.6, 458.0], [39.7, 460.0], [39.8, 460.0], [39.9, 461.0], [40.0, 461.0], [40.1, 462.0], [40.2, 462.0], [40.3, 463.0], [40.4, 463.0], [40.5, 464.0], [40.6, 464.0], [40.7, 465.0], [40.8, 465.0], [40.9, 465.0], [41.0, 465.0], [41.1, 466.0], [41.2, 466.0], [41.3, 467.0], [41.4, 467.0], [41.5, 469.0], [41.6, 469.0], [41.7, 470.0], [41.8, 470.0], [41.9, 475.0], [42.0, 475.0], [42.1, 476.0], [42.2, 476.0], [42.3, 477.0], [42.4, 477.0], [42.5, 478.0], [42.6, 478.0], [42.7, 483.0], [42.8, 483.0], [42.9, 484.0], [43.0, 484.0], [43.1, 487.0], [43.2, 487.0], [43.3, 489.0], [43.4, 489.0], [43.5, 489.0], [43.6, 489.0], [43.7, 490.0], [43.8, 490.0], [43.9, 491.0], [44.0, 491.0], [44.1, 492.0], [44.2, 492.0], [44.3, 493.0], [44.4, 493.0], [44.5, 493.0], [44.6, 493.0], [44.7, 493.0], [44.8, 493.0], [44.9, 494.0], [45.0, 494.0], [45.1, 494.0], [45.2, 494.0], [45.3, 495.0], [45.4, 495.0], [45.5, 496.0], [45.6, 496.0], [45.7, 497.0], [45.8, 497.0], [45.9, 498.0], [46.0, 498.0], [46.1, 498.0], [46.2, 498.0], [46.3, 498.0], [46.4, 498.0], [46.5, 501.0], [46.6, 501.0], [46.7, 501.0], [46.8, 501.0], [46.9, 502.0], [47.0, 502.0], [47.1, 502.0], [47.2, 502.0], [47.3, 503.0], [47.4, 503.0], [47.5, 503.0], [47.6, 503.0], [47.7, 504.0], [47.8, 504.0], [47.9, 505.0], [48.0, 505.0], [48.1, 506.0], [48.2, 506.0], [48.3, 507.0], [48.4, 507.0], [48.5, 507.0], [48.6, 507.0], [48.7, 507.0], [48.8, 507.0], [48.9, 509.0], [49.0, 509.0], [49.1, 510.0], [49.2, 510.0], [49.3, 512.0], [49.4, 512.0], [49.5, 512.0], [49.6, 512.0], [49.7, 512.0], [49.8, 512.0], [49.9, 514.0], [50.0, 514.0], [50.1, 514.0], [50.2, 514.0], [50.3, 514.0], [50.4, 514.0], [50.5, 515.0], [50.6, 515.0], [50.7, 515.0], [50.8, 515.0], [50.9, 515.0], [51.0, 515.0], [51.1, 515.0], [51.2, 515.0], [51.3, 516.0], [51.4, 516.0], [51.5, 517.0], [51.6, 517.0], [51.7, 518.0], [51.8, 518.0], [51.9, 520.0], [52.0, 520.0], [52.1, 520.0], [52.2, 520.0], [52.3, 520.0], [52.4, 520.0], [52.5, 521.0], [52.6, 521.0], [52.7, 522.0], [52.8, 522.0], [52.9, 522.0], [53.0, 522.0], [53.1, 523.0], [53.2, 523.0], [53.3, 523.0], [53.4, 523.0], [53.5, 523.0], [53.6, 523.0], [53.7, 524.0], [53.8, 524.0], [53.9, 524.0], [54.0, 524.0], [54.1, 525.0], [54.2, 525.0], [54.3, 525.0], [54.4, 525.0], [54.5, 526.0], [54.6, 526.0], [54.7, 526.0], [54.8, 526.0], [54.9, 527.0], [55.0, 527.0], [55.1, 528.0], [55.2, 528.0], [55.3, 529.0], [55.4, 529.0], [55.5, 530.0], [55.6, 530.0], [55.7, 530.0], [55.8, 530.0], [55.9, 530.0], [56.0, 530.0], [56.1, 531.0], [56.2, 531.0], [56.3, 531.0], [56.4, 531.0], [56.5, 533.0], [56.6, 533.0], [56.7, 534.0], [56.8, 534.0], [56.9, 535.0], [57.0, 535.0], [57.1, 535.0], [57.2, 535.0], [57.3, 535.0], [57.4, 535.0], [57.5, 536.0], [57.6, 536.0], [57.7, 536.0], [57.8, 536.0], [57.9, 537.0], [58.0, 537.0], [58.1, 537.0], [58.2, 537.0], [58.3, 538.0], [58.4, 538.0], [58.5, 538.0], [58.6, 538.0], [58.7, 538.0], [58.8, 538.0], [58.9, 538.0], [59.0, 538.0], [59.1, 538.0], [59.2, 538.0], [59.3, 538.0], [59.4, 538.0], [59.5, 538.0], [59.6, 538.0], [59.7, 538.0], [59.8, 538.0], [59.9, 539.0], [60.0, 539.0], [60.1, 541.0], [60.2, 541.0], [60.3, 541.0], [60.4, 541.0], [60.5, 543.0], [60.6, 543.0], [60.7, 544.0], [60.8, 544.0], [60.9, 544.0], [61.0, 544.0], [61.1, 544.0], [61.2, 544.0], [61.3, 544.0], [61.4, 544.0], [61.5, 547.0], [61.6, 547.0], [61.7, 548.0], [61.8, 548.0], [61.9, 548.0], [62.0, 548.0], [62.1, 548.0], [62.2, 548.0], [62.3, 549.0], [62.4, 549.0], [62.5, 549.0], [62.6, 549.0], [62.7, 551.0], [62.8, 551.0], [62.9, 552.0], [63.0, 552.0], [63.1, 553.0], [63.2, 553.0], [63.3, 554.0], [63.4, 554.0], [63.5, 555.0], [63.6, 555.0], [63.7, 555.0], [63.8, 555.0], [63.9, 555.0], [64.0, 555.0], [64.1, 556.0], [64.2, 556.0], [64.3, 556.0], [64.4, 556.0], [64.5, 556.0], [64.6, 556.0], [64.7, 557.0], [64.8, 557.0], [64.9, 558.0], [65.0, 558.0], [65.1, 558.0], [65.2, 558.0], [65.3, 558.0], [65.4, 558.0], [65.5, 561.0], [65.6, 561.0], [65.7, 561.0], [65.8, 561.0], [65.9, 564.0], [66.0, 564.0], [66.1, 566.0], [66.2, 566.0], [66.3, 566.0], [66.4, 566.0], [66.5, 567.0], [66.6, 567.0], [66.7, 568.0], [66.8, 568.0], [66.9, 571.0], [67.0, 571.0], [67.1, 571.0], [67.2, 571.0], [67.3, 571.0], [67.4, 571.0], [67.5, 572.0], [67.6, 572.0], [67.7, 573.0], [67.8, 573.0], [67.9, 573.0], [68.0, 573.0], [68.1, 573.0], [68.2, 573.0], [68.3, 574.0], [68.4, 574.0], [68.5, 575.0], [68.6, 575.0], [68.7, 575.0], [68.8, 575.0], [68.9, 577.0], [69.0, 577.0], [69.1, 578.0], [69.2, 578.0], [69.3, 579.0], [69.4, 579.0], [69.5, 579.0], [69.6, 579.0], [69.7, 579.0], [69.8, 579.0], [69.9, 579.0], [70.0, 579.0], [70.1, 579.0], [70.2, 579.0], [70.3, 580.0], [70.4, 580.0], [70.5, 584.0], [70.6, 584.0], [70.7, 585.0], [70.8, 585.0], [70.9, 585.0], [71.0, 585.0], [71.1, 585.0], [71.2, 585.0], [71.3, 586.0], [71.4, 586.0], [71.5, 588.0], [71.6, 588.0], [71.7, 591.0], [71.8, 591.0], [71.9, 595.0], [72.0, 595.0], [72.1, 602.0], [72.2, 602.0], [72.3, 606.0], [72.4, 606.0], [72.5, 607.0], [72.6, 607.0], [72.7, 608.0], [72.8, 608.0], [72.9, 608.0], [73.0, 608.0], [73.1, 610.0], [73.2, 610.0], [73.3, 613.0], [73.4, 613.0], [73.5, 614.0], [73.6, 614.0], [73.7, 615.0], [73.8, 615.0], [73.9, 616.0], [74.0, 616.0], [74.1, 617.0], [74.2, 617.0], [74.3, 617.0], [74.4, 617.0], [74.5, 619.0], [74.6, 619.0], [74.7, 620.0], [74.8, 620.0], [74.9, 621.0], [75.0, 621.0], [75.1, 621.0], [75.2, 621.0], [75.3, 622.0], [75.4, 622.0], [75.5, 625.0], [75.6, 625.0], [75.7, 630.0], [75.8, 630.0], [75.9, 630.0], [76.0, 630.0], [76.1, 630.0], [76.2, 630.0], [76.3, 634.0], [76.4, 634.0], [76.5, 635.0], [76.6, 635.0], [76.7, 635.0], [76.8, 635.0], [76.9, 639.0], [77.0, 639.0], [77.1, 640.0], [77.2, 640.0], [77.3, 641.0], [77.4, 641.0], [77.5, 641.0], [77.6, 641.0], [77.7, 646.0], [77.8, 646.0], [77.9, 647.0], [78.0, 647.0], [78.1, 648.0], [78.2, 648.0], [78.3, 650.0], [78.4, 650.0], [78.5, 652.0], [78.6, 652.0], [78.7, 652.0], [78.8, 652.0], [78.9, 653.0], [79.0, 653.0], [79.1, 659.0], [79.2, 659.0], [79.3, 660.0], [79.4, 660.0], [79.5, 664.0], [79.6, 664.0], [79.7, 665.0], [79.8, 665.0], [79.9, 668.0], [80.0, 668.0], [80.1, 674.0], [80.2, 674.0], [80.3, 675.0], [80.4, 675.0], [80.5, 684.0], [80.6, 684.0], [80.7, 690.0], [80.8, 690.0], [80.9, 697.0], [81.0, 697.0], [81.1, 699.0], [81.2, 699.0], [81.3, 712.0], [81.4, 712.0], [81.5, 713.0], [81.6, 713.0], [81.7, 727.0], [81.8, 727.0], [81.9, 739.0], [82.0, 739.0], [82.1, 749.0], [82.2, 749.0], [82.3, 751.0], [82.4, 751.0], [82.5, 756.0], [82.6, 756.0], [82.7, 761.0], [82.8, 761.0], [82.9, 764.0], [83.0, 764.0], [83.1, 764.0], [83.2, 764.0], [83.3, 765.0], [83.4, 765.0], [83.5, 771.0], [83.6, 771.0], [83.7, 790.0], [83.8, 790.0], [83.9, 880.0], [84.0, 880.0], [84.1, 882.0], [84.2, 882.0], [84.3, 888.0], [84.4, 888.0], [84.5, 923.0], [84.6, 923.0], [84.7, 941.0], [84.8, 941.0], [84.9, 967.0], [85.0, 967.0], [85.1, 971.0], [85.2, 971.0], [85.3, 978.0], [85.4, 978.0], [85.5, 1007.0], [85.6, 1007.0], [85.7, 1026.0], [85.8, 1026.0], [85.9, 1029.0], [86.0, 1029.0], [86.1, 1044.0], [86.2, 1044.0], [86.3, 1076.0], [86.4, 1076.0], [86.5, 1089.0], [86.6, 1089.0], [86.7, 1111.0], [86.8, 1111.0], [86.9, 1126.0], [87.0, 1126.0], [87.1, 1223.0], [87.2, 1223.0], [87.3, 1231.0], [87.4, 1231.0], [87.5, 1253.0], [87.6, 1253.0], [87.7, 1256.0], [87.8, 1256.0], [87.9, 1256.0], [88.0, 1256.0], [88.1, 1260.0], [88.2, 1260.0], [88.3, 1303.0], [88.4, 1303.0], [88.5, 1304.0], [88.6, 1304.0], [88.7, 1313.0], [88.8, 1313.0], [88.9, 1316.0], [89.0, 1316.0], [89.1, 1329.0], [89.2, 1329.0], [89.3, 1358.0], [89.4, 1358.0], [89.5, 1366.0], [89.6, 1366.0], [89.7, 1372.0], [89.8, 1372.0], [89.9, 1406.0], [90.0, 1406.0], [90.1, 1421.0], [90.2, 1421.0], [90.3, 1423.0], [90.4, 1423.0], [90.5, 1430.0], [90.6, 1430.0], [90.7, 1447.0], [90.8, 1447.0], [90.9, 1455.0], [91.0, 1455.0], [91.1, 1455.0], [91.2, 1455.0], [91.3, 1462.0], [91.4, 1462.0], [91.5, 1466.0], [91.6, 1466.0], [91.7, 1472.0], [91.8, 1472.0], [91.9, 1478.0], [92.0, 1478.0], [92.1, 1484.0], [92.2, 1484.0], [92.3, 1487.0], [92.4, 1487.0], [92.5, 1506.0], [92.6, 1506.0], [92.7, 1510.0], [92.8, 1510.0], [92.9, 1533.0], [93.0, 1533.0], [93.1, 1540.0], [93.2, 1540.0], [93.3, 1541.0], [93.4, 1541.0], [93.5, 1551.0], [93.6, 1551.0], [93.7, 1555.0], [93.8, 1555.0], [93.9, 1568.0], [94.0, 1568.0], [94.1, 1570.0], [94.2, 1570.0], [94.3, 1573.0], [94.4, 1573.0], [94.5, 1576.0], [94.6, 1576.0], [94.7, 1587.0], [94.8, 1587.0], [94.9, 1589.0], [95.0, 1589.0], [95.1, 1601.0], [95.2, 1601.0], [95.3, 1602.0], [95.4, 1602.0], [95.5, 1602.0], [95.6, 1602.0], [95.7, 1610.0], [95.8, 1610.0], [95.9, 1612.0], [96.0, 1612.0], [96.1, 1621.0], [96.2, 1621.0], [96.3, 1646.0], [96.4, 1646.0], [96.5, 1663.0], [96.6, 1663.0], [96.7, 1686.0], [96.8, 1686.0], [96.9, 1721.0], [97.0, 1721.0], [97.1, 1726.0], [97.2, 1726.0], [97.3, 1741.0], [97.4, 1741.0], [97.5, 1744.0], [97.6, 1744.0], [97.7, 1756.0], [97.8, 1756.0], [97.9, 1757.0], [98.0, 1757.0], [98.1, 1763.0], [98.2, 1763.0], [98.3, 1782.0], [98.4, 1782.0], [98.5, 1783.0], [98.6, 1783.0], [98.7, 1805.0], [98.8, 1805.0], [98.9, 1821.0], [99.0, 1821.0], [99.1, 1829.0], [99.2, 1829.0], [99.3, 1870.0], [99.4, 1870.0], [99.5, 1880.0], [99.6, 1880.0], [99.7, 1939.0], [99.8, 1939.0], [99.9, 2126.0], [100.0, 2126.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 78.0], [0.1, 78.0], [0.2, 83.0], [0.3, 83.0], [0.4, 88.0], [0.5, 88.0], [0.6, 88.0], [0.7, 89.0], [0.8, 90.0], [0.9, 90.0], [1.0, 91.0], [1.1, 91.0], [1.2, 92.0], [1.3, 92.0], [1.4, 94.0], [1.5, 94.0], [1.6, 98.0], [1.7, 98.0], [1.8, 99.0], [1.9, 99.0], [2.0, 102.0], [2.1, 102.0], [2.2, 103.0], [2.3, 103.0], [2.4, 106.0], [2.5, 106.0], [2.6, 107.0], [2.7, 107.0], [2.8, 107.0], [2.9, 107.0], [3.0, 107.0], [3.1, 107.0], [3.2, 111.0], [3.3, 111.0], [3.4, 111.0], [3.5, 111.0], [3.6, 113.0], [3.7, 113.0], [3.8, 113.0], [3.9, 113.0], [4.0, 113.0], [4.1, 113.0], [4.2, 114.0], [4.3, 114.0], [4.4, 114.0], [4.5, 114.0], [4.6, 114.0], [4.7, 114.0], [4.8, 114.0], [4.9, 114.0], [5.0, 115.0], [5.1, 115.0], [5.2, 117.0], [5.3, 117.0], [5.4, 117.0], [5.5, 117.0], [5.6, 117.0], [5.7, 120.0], [5.8, 120.0], [5.9, 121.0], [6.0, 121.0], [6.1, 122.0], [6.2, 122.0], [6.3, 123.0], [6.4, 123.0], [6.5, 124.0], [6.6, 124.0], [6.7, 125.0], [6.8, 125.0], [6.9, 125.0], [7.0, 125.0], [7.1, 126.0], [7.2, 126.0], [7.3, 127.0], [7.4, 127.0], [7.5, 128.0], [7.6, 128.0], [7.7, 129.0], [7.8, 129.0], [7.9, 130.0], [8.0, 130.0], [8.1, 133.0], [8.2, 133.0], [8.3, 133.0], [8.4, 133.0], [8.5, 134.0], [8.6, 134.0], [8.7, 134.0], [8.8, 134.0], [8.9, 136.0], [9.0, 136.0], [9.1, 136.0], [9.2, 136.0], [9.3, 136.0], [9.4, 136.0], [9.5, 137.0], [9.6, 137.0], [9.7, 138.0], [9.8, 139.0], [9.9, 139.0], [10.0, 141.0], [10.1, 141.0], [10.2, 142.0], [10.3, 142.0], [10.4, 144.0], [10.5, 144.0], [10.6, 144.0], [10.7, 144.0], [10.8, 145.0], [10.9, 145.0], [11.0, 145.0], [11.1, 145.0], [11.2, 147.0], [11.3, 147.0], [11.4, 148.0], [11.5, 148.0], [11.6, 148.0], [11.7, 148.0], [11.8, 149.0], [11.9, 149.0], [12.0, 151.0], [12.1, 151.0], [12.2, 152.0], [12.3, 152.0], [12.4, 152.0], [12.5, 152.0], [12.6, 152.0], [12.7, 152.0], [12.8, 152.0], [12.9, 152.0], [13.0, 153.0], [13.1, 153.0], [13.2, 155.0], [13.3, 155.0], [13.4, 156.0], [13.5, 156.0], [13.6, 156.0], [13.7, 156.0], [13.8, 157.0], [13.9, 157.0], [14.0, 158.0], [14.1, 158.0], [14.2, 159.0], [14.3, 159.0], [14.4, 159.0], [14.5, 159.0], [14.6, 159.0], [14.7, 159.0], [14.8, 161.0], [14.9, 161.0], [15.0, 162.0], [15.1, 162.0], [15.2, 163.0], [15.3, 163.0], [15.4, 164.0], [15.5, 164.0], [15.6, 164.0], [15.7, 164.0], [15.8, 165.0], [15.9, 165.0], [16.0, 165.0], [16.1, 165.0], [16.2, 166.0], [16.3, 166.0], [16.4, 166.0], [16.5, 166.0], [16.6, 166.0], [16.7, 166.0], [16.8, 167.0], [16.9, 167.0], [17.0, 167.0], [17.1, 167.0], [17.2, 167.0], [17.3, 167.0], [17.4, 167.0], [17.5, 167.0], [17.6, 168.0], [17.7, 168.0], [17.8, 168.0], [17.9, 168.0], [18.0, 170.0], [18.1, 170.0], [18.2, 171.0], [18.3, 171.0], [18.4, 171.0], [18.5, 171.0], [18.6, 173.0], [18.7, 173.0], [18.8, 173.0], [18.9, 173.0], [19.0, 174.0], [19.1, 174.0], [19.2, 174.0], [19.3, 174.0], [19.4, 175.0], [19.5, 175.0], [19.6, 177.0], [19.7, 177.0], [19.8, 178.0], [19.9, 178.0], [20.0, 180.0], [20.1, 180.0], [20.2, 181.0], [20.3, 181.0], [20.4, 181.0], [20.5, 181.0], [20.6, 182.0], [20.7, 182.0], [20.8, 182.0], [20.9, 182.0], [21.0, 182.0], [21.1, 182.0], [21.2, 183.0], [21.3, 183.0], [21.4, 183.0], [21.5, 183.0], [21.6, 184.0], [21.7, 184.0], [21.8, 184.0], [21.9, 184.0], [22.0, 186.0], [22.1, 186.0], [22.2, 186.0], [22.3, 186.0], [22.4, 187.0], [22.5, 187.0], [22.6, 187.0], [22.7, 187.0], [22.8, 188.0], [22.9, 188.0], [23.0, 190.0], [23.1, 190.0], [23.2, 190.0], [23.3, 190.0], [23.4, 190.0], [23.5, 190.0], [23.6, 191.0], [23.7, 191.0], [23.8, 191.0], [23.9, 191.0], [24.0, 191.0], [24.1, 191.0], [24.2, 193.0], [24.3, 193.0], [24.4, 194.0], [24.5, 194.0], [24.6, 195.0], [24.7, 195.0], [24.8, 197.0], [24.9, 197.0], [25.0, 197.0], [25.1, 197.0], [25.2, 199.0], [25.3, 199.0], [25.4, 199.0], [25.5, 199.0], [25.6, 199.0], [25.7, 199.0], [25.8, 200.0], [25.9, 200.0], [26.0, 200.0], [26.1, 200.0], [26.2, 200.0], [26.3, 200.0], [26.4, 201.0], [26.5, 201.0], [26.6, 202.0], [26.7, 202.0], [26.8, 202.0], [26.9, 202.0], [27.0, 203.0], [27.1, 203.0], [27.2, 203.0], [27.3, 203.0], [27.4, 204.0], [27.5, 204.0], [27.6, 204.0], [27.7, 204.0], [27.8, 206.0], [27.9, 206.0], [28.0, 206.0], [28.1, 206.0], [28.2, 206.0], [28.3, 206.0], [28.4, 207.0], [28.5, 207.0], [28.6, 208.0], [28.7, 208.0], [28.8, 208.0], [28.9, 208.0], [29.0, 208.0], [29.1, 208.0], [29.2, 209.0], [29.3, 209.0], [29.4, 211.0], [29.5, 211.0], [29.6, 212.0], [29.7, 212.0], [29.8, 213.0], [29.9, 213.0], [30.0, 214.0], [30.1, 214.0], [30.2, 214.0], [30.3, 214.0], [30.4, 215.0], [30.5, 215.0], [30.6, 215.0], [30.7, 215.0], [30.8, 217.0], [30.9, 217.0], [31.0, 218.0], [31.1, 218.0], [31.2, 219.0], [31.3, 219.0], [31.4, 219.0], [31.5, 219.0], [31.6, 219.0], [31.7, 219.0], [31.8, 219.0], [31.9, 219.0], [32.0, 220.0], [32.1, 220.0], [32.2, 223.0], [32.3, 223.0], [32.4, 224.0], [32.5, 224.0], [32.6, 229.0], [32.7, 229.0], [32.8, 230.0], [32.9, 230.0], [33.0, 230.0], [33.1, 230.0], [33.2, 231.0], [33.3, 231.0], [33.4, 232.0], [33.5, 232.0], [33.6, 232.0], [33.7, 232.0], [33.8, 232.0], [33.9, 232.0], [34.0, 233.0], [34.1, 233.0], [34.2, 235.0], [34.3, 235.0], [34.4, 236.0], [34.5, 236.0], [34.6, 237.0], [34.7, 237.0], [34.8, 237.0], [34.9, 237.0], [35.0, 241.0], [35.1, 241.0], [35.2, 241.0], [35.3, 241.0], [35.4, 242.0], [35.5, 242.0], [35.6, 244.0], [35.7, 244.0], [35.8, 245.0], [35.9, 245.0], [36.0, 251.0], [36.1, 251.0], [36.2, 254.0], [36.3, 254.0], [36.4, 254.0], [36.5, 255.0], [36.6, 255.0], [36.7, 256.0], [36.8, 256.0], [36.9, 256.0], [37.0, 256.0], [37.1, 256.0], [37.2, 256.0], [37.3, 257.0], [37.4, 257.0], [37.5, 258.0], [37.6, 258.0], [37.7, 259.0], [37.8, 259.0], [37.9, 260.0], [38.0, 260.0], [38.1, 261.0], [38.2, 261.0], [38.3, 261.0], [38.4, 261.0], [38.5, 262.0], [38.6, 262.0], [38.7, 262.0], [38.8, 262.0], [38.9, 263.0], [39.0, 263.0], [39.1, 265.0], [39.2, 265.0], [39.3, 266.0], [39.4, 266.0], [39.5, 267.0], [39.6, 267.0], [39.7, 267.0], [39.8, 267.0], [39.9, 269.0], [40.0, 269.0], [40.1, 270.0], [40.2, 270.0], [40.3, 270.0], [40.4, 270.0], [40.5, 272.0], [40.6, 272.0], [40.7, 273.0], [40.8, 273.0], [40.9, 274.0], [41.0, 274.0], [41.1, 275.0], [41.2, 275.0], [41.3, 276.0], [41.4, 276.0], [41.5, 276.0], [41.6, 276.0], [41.7, 277.0], [41.8, 277.0], [41.9, 280.0], [42.0, 280.0], [42.1, 280.0], [42.2, 280.0], [42.3, 281.0], [42.4, 281.0], [42.5, 281.0], [42.6, 281.0], [42.7, 281.0], [42.8, 281.0], [42.9, 282.0], [43.0, 282.0], [43.1, 282.0], [43.2, 282.0], [43.3, 282.0], [43.4, 282.0], [43.5, 283.0], [43.6, 283.0], [43.7, 283.0], [43.8, 283.0], [43.9, 284.0], [44.0, 284.0], [44.1, 285.0], [44.2, 285.0], [44.3, 285.0], [44.4, 285.0], [44.5, 286.0], [44.6, 286.0], [44.7, 286.0], [44.8, 286.0], [44.9, 287.0], [45.0, 287.0], [45.1, 287.0], [45.2, 287.0], [45.3, 288.0], [45.4, 288.0], [45.5, 289.0], [45.6, 289.0], [45.7, 289.0], [45.8, 289.0], [45.9, 289.0], [46.0, 289.0], [46.1, 290.0], [46.2, 290.0], [46.3, 291.0], [46.4, 291.0], [46.5, 293.0], [46.6, 293.0], [46.7, 293.0], [46.8, 293.0], [46.9, 294.0], [47.0, 294.0], [47.1, 294.0], [47.2, 294.0], [47.3, 294.0], [47.4, 294.0], [47.5, 295.0], [47.6, 295.0], [47.7, 296.0], [47.8, 296.0], [47.9, 296.0], [48.0, 296.0], [48.1, 296.0], [48.2, 296.0], [48.3, 297.0], [48.4, 297.0], [48.5, 297.0], [48.6, 297.0], [48.7, 297.0], [48.8, 297.0], [48.9, 298.0], [49.0, 298.0], [49.1, 298.0], [49.2, 298.0], [49.3, 299.0], [49.4, 299.0], [49.5, 300.0], [49.6, 300.0], [49.7, 300.0], [49.8, 300.0], [49.9, 300.0], [50.0, 300.0], [50.1, 301.0], [50.2, 301.0], [50.3, 301.0], [50.4, 301.0], [50.5, 301.0], [50.6, 301.0], [50.7, 301.0], [50.8, 301.0], [50.9, 301.0], [51.0, 301.0], [51.1, 301.0], [51.2, 301.0], [51.3, 304.0], [51.4, 304.0], [51.5, 304.0], [51.6, 304.0], [51.7, 304.0], [51.8, 304.0], [51.9, 305.0], [52.0, 305.0], [52.1, 305.0], [52.2, 305.0], [52.3, 305.0], [52.4, 305.0], [52.5, 306.0], [52.6, 306.0], [52.7, 306.0], [52.8, 306.0], [52.9, 306.0], [53.0, 306.0], [53.1, 310.0], [53.2, 310.0], [53.3, 313.0], [53.4, 313.0], [53.5, 314.0], [53.6, 314.0], [53.7, 315.0], [53.8, 315.0], [53.9, 316.0], [54.0, 316.0], [54.1, 316.0], [54.2, 316.0], [54.3, 317.0], [54.4, 317.0], [54.5, 317.0], [54.6, 317.0], [54.7, 317.0], [54.8, 317.0], [54.9, 317.0], [55.0, 317.0], [55.1, 318.0], [55.2, 318.0], [55.3, 318.0], [55.4, 318.0], [55.5, 318.0], [55.6, 318.0], [55.7, 318.0], [55.8, 318.0], [55.9, 321.0], [56.0, 321.0], [56.1, 321.0], [56.2, 321.0], [56.3, 323.0], [56.4, 323.0], [56.5, 323.0], [56.6, 323.0], [56.7, 324.0], [56.8, 324.0], [56.9, 324.0], [57.0, 324.0], [57.1, 326.0], [57.2, 326.0], [57.3, 326.0], [57.4, 326.0], [57.5, 327.0], [57.6, 327.0], [57.7, 328.0], [57.8, 328.0], [57.9, 328.0], [58.0, 328.0], [58.1, 330.0], [58.2, 330.0], [58.3, 331.0], [58.4, 331.0], [58.5, 332.0], [58.6, 332.0], [58.7, 333.0], [58.8, 333.0], [58.9, 334.0], [59.0, 334.0], [59.1, 335.0], [59.2, 335.0], [59.3, 335.0], [59.4, 335.0], [59.5, 336.0], [59.6, 336.0], [59.7, 337.0], [59.8, 337.0], [59.9, 338.0], [60.0, 338.0], [60.1, 339.0], [60.2, 339.0], [60.3, 340.0], [60.4, 340.0], [60.5, 341.0], [60.6, 341.0], [60.7, 341.0], [60.8, 341.0], [60.9, 343.0], [61.0, 343.0], [61.1, 343.0], [61.2, 343.0], [61.3, 344.0], [61.4, 344.0], [61.5, 344.0], [61.6, 344.0], [61.7, 344.0], [61.8, 344.0], [61.9, 344.0], [62.0, 344.0], [62.1, 346.0], [62.2, 346.0], [62.3, 348.0], [62.4, 348.0], [62.5, 349.0], [62.6, 349.0], [62.7, 350.0], [62.8, 350.0], [62.9, 350.0], [63.0, 350.0], [63.1, 352.0], [63.2, 352.0], [63.3, 352.0], [63.4, 352.0], [63.5, 354.0], [63.6, 354.0], [63.7, 356.0], [63.8, 356.0], [63.9, 363.0], [64.0, 363.0], [64.1, 363.0], [64.2, 363.0], [64.3, 364.0], [64.4, 364.0], [64.5, 364.0], [64.6, 364.0], [64.7, 364.0], [64.8, 364.0], [64.9, 365.0], [65.0, 365.0], [65.1, 365.0], [65.2, 365.0], [65.3, 368.0], [65.4, 368.0], [65.5, 369.0], [65.6, 369.0], [65.7, 369.0], [65.8, 369.0], [65.9, 370.0], [66.0, 370.0], [66.1, 370.0], [66.2, 370.0], [66.3, 370.0], [66.4, 370.0], [66.5, 370.0], [66.6, 370.0], [66.7, 371.0], [66.8, 371.0], [66.9, 372.0], [67.0, 372.0], [67.1, 372.0], [67.2, 372.0], [67.3, 372.0], [67.4, 372.0], [67.5, 373.0], [67.6, 373.0], [67.7, 374.0], [67.8, 374.0], [67.9, 375.0], [68.0, 375.0], [68.1, 375.0], [68.2, 375.0], [68.3, 376.0], [68.4, 376.0], [68.5, 377.0], [68.6, 377.0], [68.7, 377.0], [68.8, 377.0], [68.9, 380.0], [69.0, 380.0], [69.1, 380.0], [69.2, 380.0], [69.3, 382.0], [69.4, 382.0], [69.5, 383.0], [69.6, 383.0], [69.7, 383.0], [69.8, 383.0], [69.9, 384.0], [70.0, 384.0], [70.1, 385.0], [70.2, 385.0], [70.3, 386.0], [70.4, 386.0], [70.5, 387.0], [70.6, 387.0], [70.7, 387.0], [70.8, 387.0], [70.9, 387.0], [71.0, 387.0], [71.1, 388.0], [71.2, 388.0], [71.3, 391.0], [71.4, 391.0], [71.5, 392.0], [71.6, 392.0], [71.7, 393.0], [71.8, 393.0], [71.9, 393.0], [72.0, 393.0], [72.1, 393.0], [72.2, 393.0], [72.3, 394.0], [72.4, 394.0], [72.5, 397.0], [72.6, 397.0], [72.7, 398.0], [72.8, 398.0], [72.9, 399.0], [73.0, 399.0], [73.1, 399.0], [73.2, 399.0], [73.3, 401.0], [73.4, 401.0], [73.5, 402.0], [73.6, 402.0], [73.7, 403.0], [73.8, 403.0], [73.9, 403.0], [74.0, 403.0], [74.1, 404.0], [74.2, 404.0], [74.3, 405.0], [74.4, 405.0], [74.5, 405.0], [74.6, 405.0], [74.7, 405.0], [74.8, 405.0], [74.9, 406.0], [75.0, 406.0], [75.1, 406.0], [75.2, 406.0], [75.3, 407.0], [75.4, 407.0], [75.5, 408.0], [75.6, 408.0], [75.7, 410.0], [75.8, 410.0], [75.9, 411.0], [76.0, 411.0], [76.1, 411.0], [76.2, 411.0], [76.3, 411.0], [76.4, 411.0], [76.5, 412.0], [76.6, 412.0], [76.7, 413.0], [76.8, 413.0], [76.9, 413.0], [77.0, 413.0], [77.1, 413.0], [77.2, 413.0], [77.3, 414.0], [77.4, 414.0], [77.5, 415.0], [77.6, 415.0], [77.7, 415.0], [77.8, 415.0], [77.9, 417.0], [78.0, 417.0], [78.1, 417.0], [78.2, 417.0], [78.3, 417.0], [78.4, 417.0], [78.5, 417.0], [78.6, 417.0], [78.7, 418.0], [78.8, 418.0], [78.9, 419.0], [79.0, 419.0], [79.1, 421.0], [79.2, 421.0], [79.3, 421.0], [79.4, 421.0], [79.5, 421.0], [79.6, 421.0], [79.7, 424.0], [79.8, 424.0], [79.9, 426.0], [80.0, 426.0], [80.1, 431.0], [80.2, 431.0], [80.3, 431.0], [80.4, 431.0], [80.5, 431.0], [80.6, 431.0], [80.7, 433.0], [80.8, 433.0], [80.9, 435.0], [81.0, 435.0], [81.1, 436.0], [81.2, 436.0], [81.3, 437.0], [81.4, 437.0], [81.5, 438.0], [81.6, 438.0], [81.7, 441.0], [81.8, 441.0], [81.9, 441.0], [82.0, 441.0], [82.1, 441.0], [82.2, 441.0], [82.3, 442.0], [82.4, 442.0], [82.5, 442.0], [82.6, 442.0], [82.7, 443.0], [82.8, 443.0], [82.9, 443.0], [83.0, 443.0], [83.1, 445.0], [83.2, 445.0], [83.3, 447.0], [83.4, 447.0], [83.5, 448.0], [83.6, 448.0], [83.7, 449.0], [83.8, 449.0], [83.9, 449.0], [84.0, 449.0], [84.1, 452.0], [84.2, 452.0], [84.3, 453.0], [84.4, 453.0], [84.5, 453.0], [84.6, 453.0], [84.7, 456.0], [84.8, 456.0], [84.9, 457.0], [85.0, 457.0], [85.1, 457.0], [85.2, 457.0], [85.3, 458.0], [85.4, 458.0], [85.5, 458.0], [85.6, 458.0], [85.7, 459.0], [85.8, 459.0], [85.9, 459.0], [86.0, 459.0], [86.1, 460.0], [86.2, 460.0], [86.3, 462.0], [86.4, 462.0], [86.5, 463.0], [86.6, 463.0], [86.7, 464.0], [86.8, 464.0], [86.9, 464.0], [87.0, 464.0], [87.1, 464.0], [87.2, 464.0], [87.3, 465.0], [87.4, 465.0], [87.5, 465.0], [87.6, 465.0], [87.7, 466.0], [87.8, 466.0], [87.9, 466.0], [88.0, 466.0], [88.1, 468.0], [88.2, 468.0], [88.3, 471.0], [88.4, 471.0], [88.5, 471.0], [88.6, 471.0], [88.7, 472.0], [88.8, 472.0], [88.9, 473.0], [89.0, 473.0], [89.1, 474.0], [89.2, 474.0], [89.3, 476.0], [89.4, 476.0], [89.5, 477.0], [89.6, 477.0], [89.7, 478.0], [89.8, 478.0], [89.9, 479.0], [90.0, 479.0], [90.1, 485.0], [90.2, 485.0], [90.3, 487.0], [90.4, 487.0], [90.5, 488.0], [90.6, 488.0], [90.7, 489.0], [90.8, 489.0], [90.9, 491.0], [91.0, 491.0], [91.1, 491.0], [91.2, 491.0], [91.3, 492.0], [91.4, 492.0], [91.5, 493.0], [91.6, 493.0], [91.7, 494.0], [91.8, 494.0], [91.9, 495.0], [92.0, 495.0], [92.1, 497.0], [92.2, 497.0], [92.3, 497.0], [92.4, 497.0], [92.5, 499.0], [92.6, 499.0], [92.7, 499.0], [92.8, 499.0], [92.9, 500.0], [93.0, 500.0], [93.1, 502.0], [93.2, 502.0], [93.3, 502.0], [93.4, 502.0], [93.5, 504.0], [93.6, 504.0], [93.7, 506.0], [93.8, 506.0], [93.9, 506.0], [94.0, 506.0], [94.1, 507.0], [94.2, 507.0], [94.3, 512.0], [94.4, 512.0], [94.5, 514.0], [94.6, 514.0], [94.7, 516.0], [94.8, 516.0], [94.9, 517.0], [95.0, 517.0], [95.1, 518.0], [95.2, 518.0], [95.3, 519.0], [95.4, 519.0], [95.5, 527.0], [95.6, 527.0], [95.7, 531.0], [95.8, 531.0], [95.9, 535.0], [96.0, 535.0], [96.1, 542.0], [96.2, 542.0], [96.3, 543.0], [96.4, 543.0], [96.5, 548.0], [96.6, 548.0], [96.7, 555.0], [96.8, 555.0], [96.9, 558.0], [97.0, 558.0], [97.1, 566.0], [97.2, 566.0], [97.3, 583.0], [97.4, 583.0], [97.5, 584.0], [97.6, 584.0], [97.7, 591.0], [97.8, 591.0], [97.9, 606.0], [98.0, 606.0], [98.1, 625.0], [98.2, 625.0], [98.3, 648.0], [98.4, 648.0], [98.5, 816.0], [98.6, 816.0], [98.7, 834.0], [98.8, 834.0], [98.9, 837.0], [99.0, 837.0], [99.1, 1366.0], [99.2, 1366.0], [99.3, 1369.0], [99.4, 1369.0], [99.5, 1380.0], [99.6, 1380.0], [99.7, 1402.0], [99.8, 1402.0], [99.9, 3529.0], [100.0, 3529.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 258.0], [0.1, 258.0], [0.2, 267.0], [0.3, 267.0], [0.4, 269.0], [0.5, 269.0], [0.6, 269.0], [0.7, 287.0], [0.8, 288.0], [0.9, 288.0], [1.0, 293.0], [1.1, 293.0], [1.2, 393.0], [1.3, 393.0], [1.4, 398.0], [1.5, 398.0], [1.6, 408.0], [1.7, 408.0], [1.8, 408.0], [1.9, 408.0], [2.0, 413.0], [2.1, 413.0], [2.2, 416.0], [2.3, 416.0], [2.4, 416.0], [2.5, 422.0], [2.6, 422.0], [2.7, 423.0], [2.8, 423.0], [2.9, 423.0], [3.0, 423.0], [3.1, 424.0], [3.2, 424.0], [3.3, 427.0], [3.4, 427.0], [3.5, 428.0], [3.6, 428.0], [3.7, 430.0], [3.8, 430.0], [3.9, 430.0], [4.0, 430.0], [4.1, 431.0], [4.2, 431.0], [4.3, 433.0], [4.4, 433.0], [4.5, 435.0], [4.6, 435.0], [4.7, 438.0], [4.8, 438.0], [4.9, 438.0], [5.0, 438.0], [5.1, 438.0], [5.2, 438.0], [5.3, 439.0], [5.4, 439.0], [5.5, 439.0], [5.6, 439.0], [5.7, 440.0], [5.8, 440.0], [5.9, 440.0], [6.0, 440.0], [6.1, 440.0], [6.2, 440.0], [6.3, 441.0], [6.4, 441.0], [6.5, 444.0], [6.6, 444.0], [6.7, 444.0], [6.8, 444.0], [6.9, 446.0], [7.0, 446.0], [7.1, 448.0], [7.2, 448.0], [7.3, 448.0], [7.4, 448.0], [7.5, 448.0], [7.6, 448.0], [7.7, 452.0], [7.8, 452.0], [7.9, 453.0], [8.0, 453.0], [8.1, 453.0], [8.2, 453.0], [8.3, 453.0], [8.4, 453.0], [8.5, 453.0], [8.6, 453.0], [8.7, 454.0], [8.8, 454.0], [8.9, 454.0], [9.0, 454.0], [9.1, 454.0], [9.2, 454.0], [9.3, 454.0], [9.4, 454.0], [9.5, 455.0], [9.6, 455.0], [9.7, 456.0], [9.8, 456.0], [9.9, 456.0], [10.0, 456.0], [10.1, 457.0], [10.2, 457.0], [10.3, 459.0], [10.4, 460.0], [10.5, 460.0], [10.6, 460.0], [10.7, 460.0], [10.8, 461.0], [10.9, 461.0], [11.0, 462.0], [11.1, 462.0], [11.2, 463.0], [11.3, 463.0], [11.4, 463.0], [11.5, 463.0], [11.6, 463.0], [11.7, 463.0], [11.8, 469.0], [11.9, 469.0], [12.0, 469.0], [12.1, 469.0], [12.2, 472.0], [12.3, 472.0], [12.4, 472.0], [12.5, 472.0], [12.6, 475.0], [12.7, 475.0], [12.8, 476.0], [12.9, 476.0], [13.0, 477.0], [13.1, 477.0], [13.2, 477.0], [13.3, 477.0], [13.4, 478.0], [13.5, 478.0], [13.6, 478.0], [13.7, 478.0], [13.8, 478.0], [13.9, 478.0], [14.0, 478.0], [14.1, 478.0], [14.2, 479.0], [14.3, 479.0], [14.4, 481.0], [14.5, 481.0], [14.6, 482.0], [14.7, 482.0], [14.8, 484.0], [14.9, 484.0], [15.0, 488.0], [15.1, 488.0], [15.2, 488.0], [15.3, 488.0], [15.4, 489.0], [15.5, 489.0], [15.6, 490.0], [15.7, 490.0], [15.8, 492.0], [15.9, 492.0], [16.0, 492.0], [16.1, 492.0], [16.2, 495.0], [16.3, 495.0], [16.4, 496.0], [16.5, 496.0], [16.6, 496.0], [16.7, 496.0], [16.8, 499.0], [16.9, 499.0], [17.0, 501.0], [17.1, 501.0], [17.2, 501.0], [17.3, 501.0], [17.4, 503.0], [17.5, 503.0], [17.6, 504.0], [17.7, 504.0], [17.8, 504.0], [17.9, 504.0], [18.0, 507.0], [18.1, 507.0], [18.2, 507.0], [18.3, 507.0], [18.4, 507.0], [18.5, 507.0], [18.6, 508.0], [18.7, 508.0], [18.8, 509.0], [18.9, 509.0], [19.0, 509.0], [19.1, 509.0], [19.2, 511.0], [19.3, 511.0], [19.4, 511.0], [19.5, 511.0], [19.6, 514.0], [19.7, 514.0], [19.8, 515.0], [19.9, 515.0], [20.0, 515.0], [20.1, 515.0], [20.2, 519.0], [20.3, 519.0], [20.4, 519.0], [20.5, 519.0], [20.6, 520.0], [20.7, 520.0], [20.8, 521.0], [20.9, 521.0], [21.0, 521.0], [21.1, 521.0], [21.2, 524.0], [21.3, 524.0], [21.4, 524.0], [21.5, 524.0], [21.6, 524.0], [21.7, 524.0], [21.8, 524.0], [21.9, 524.0], [22.0, 528.0], [22.1, 528.0], [22.2, 529.0], [22.3, 529.0], [22.4, 529.0], [22.5, 529.0], [22.6, 530.0], [22.7, 530.0], [22.8, 531.0], [22.9, 531.0], [23.0, 531.0], [23.1, 531.0], [23.2, 533.0], [23.3, 533.0], [23.4, 536.0], [23.5, 536.0], [23.6, 537.0], [23.7, 537.0], [23.8, 539.0], [23.9, 539.0], [24.0, 539.0], [24.1, 539.0], [24.2, 541.0], [24.3, 541.0], [24.4, 542.0], [24.5, 542.0], [24.6, 542.0], [24.7, 542.0], [24.8, 545.0], [24.9, 545.0], [25.0, 553.0], [25.1, 553.0], [25.2, 556.0], [25.3, 556.0], [25.4, 556.0], [25.5, 556.0], [25.6, 557.0], [25.7, 557.0], [25.8, 558.0], [25.9, 558.0], [26.0, 576.0], [26.1, 576.0], [26.2, 576.0], [26.3, 576.0], [26.4, 590.0], [26.5, 590.0], [26.6, 598.0], [26.7, 598.0], [26.8, 602.0], [26.9, 602.0], [27.0, 603.0], [27.1, 603.0], [27.2, 609.0], [27.3, 609.0], [27.4, 622.0], [27.5, 622.0], [27.6, 634.0], [27.7, 634.0], [27.8, 639.0], [27.9, 639.0], [28.0, 639.0], [28.1, 639.0], [28.2, 640.0], [28.3, 640.0], [28.4, 640.0], [28.5, 640.0], [28.6, 642.0], [28.7, 642.0], [28.8, 645.0], [28.9, 645.0], [29.0, 646.0], [29.1, 646.0], [29.2, 647.0], [29.3, 647.0], [29.4, 649.0], [29.5, 649.0], [29.6, 655.0], [29.7, 655.0], [29.8, 655.0], [29.9, 655.0], [30.0, 656.0], [30.1, 656.0], [30.2, 656.0], [30.3, 656.0], [30.4, 657.0], [30.5, 657.0], [30.6, 657.0], [30.7, 657.0], [30.8, 659.0], [30.9, 659.0], [31.0, 660.0], [31.1, 660.0], [31.2, 661.0], [31.3, 661.0], [31.4, 665.0], [31.5, 665.0], [31.6, 670.0], [31.7, 670.0], [31.8, 675.0], [31.9, 675.0], [32.0, 678.0], [32.1, 678.0], [32.2, 679.0], [32.3, 679.0], [32.4, 681.0], [32.5, 681.0], [32.6, 685.0], [32.7, 685.0], [32.8, 689.0], [32.9, 689.0], [33.0, 689.0], [33.1, 689.0], [33.2, 689.0], [33.3, 689.0], [33.4, 690.0], [33.5, 690.0], [33.6, 692.0], [33.7, 692.0], [33.8, 694.0], [33.9, 694.0], [34.0, 696.0], [34.1, 696.0], [34.2, 704.0], [34.3, 704.0], [34.4, 704.0], [34.5, 704.0], [34.6, 704.0], [34.7, 704.0], [34.8, 705.0], [34.9, 705.0], [35.0, 706.0], [35.1, 706.0], [35.2, 710.0], [35.3, 710.0], [35.4, 711.0], [35.5, 711.0], [35.6, 718.0], [35.7, 718.0], [35.8, 721.0], [35.9, 721.0], [36.0, 722.0], [36.1, 722.0], [36.2, 722.0], [36.3, 722.0], [36.4, 727.0], [36.5, 727.0], [36.6, 734.0], [36.7, 734.0], [36.8, 739.0], [36.9, 739.0], [37.0, 740.0], [37.1, 740.0], [37.2, 740.0], [37.3, 740.0], [37.4, 744.0], [37.5, 744.0], [37.6, 748.0], [37.7, 748.0], [37.8, 748.0], [37.9, 748.0], [38.0, 756.0], [38.1, 756.0], [38.2, 757.0], [38.3, 757.0], [38.4, 761.0], [38.5, 761.0], [38.6, 764.0], [38.7, 764.0], [38.8, 764.0], [38.9, 766.0], [39.0, 766.0], [39.1, 766.0], [39.2, 766.0], [39.3, 766.0], [39.4, 766.0], [39.5, 767.0], [39.6, 767.0], [39.7, 769.0], [39.8, 769.0], [39.9, 769.0], [40.0, 769.0], [40.1, 773.0], [40.2, 773.0], [40.3, 774.0], [40.4, 774.0], [40.5, 777.0], [40.6, 777.0], [40.7, 777.0], [40.8, 777.0], [40.9, 780.0], [41.0, 780.0], [41.1, 783.0], [41.2, 783.0], [41.3, 788.0], [41.4, 788.0], [41.5, 790.0], [41.6, 790.0], [41.7, 795.0], [41.8, 795.0], [41.9, 796.0], [42.0, 796.0], [42.1, 799.0], [42.2, 799.0], [42.3, 800.0], [42.4, 800.0], [42.5, 800.0], [42.6, 800.0], [42.7, 803.0], [42.8, 803.0], [42.9, 804.0], [43.0, 804.0], [43.1, 808.0], [43.2, 808.0], [43.3, 810.0], [43.4, 810.0], [43.5, 816.0], [43.6, 816.0], [43.7, 816.0], [43.8, 816.0], [43.9, 821.0], [44.0, 821.0], [44.1, 823.0], [44.2, 823.0], [44.3, 824.0], [44.4, 824.0], [44.5, 825.0], [44.6, 825.0], [44.7, 825.0], [44.8, 825.0], [44.9, 830.0], [45.0, 830.0], [45.1, 831.0], [45.2, 831.0], [45.3, 832.0], [45.4, 832.0], [45.5, 833.0], [45.6, 833.0], [45.7, 836.0], [45.8, 836.0], [45.9, 836.0], [46.0, 836.0], [46.1, 837.0], [46.2, 837.0], [46.3, 837.0], [46.4, 837.0], [46.5, 839.0], [46.6, 839.0], [46.7, 840.0], [46.8, 840.0], [46.9, 840.0], [47.0, 840.0], [47.1, 842.0], [47.2, 842.0], [47.3, 842.0], [47.4, 842.0], [47.5, 846.0], [47.6, 846.0], [47.7, 846.0], [47.8, 846.0], [47.9, 848.0], [48.0, 848.0], [48.1, 849.0], [48.2, 849.0], [48.3, 851.0], [48.4, 851.0], [48.5, 851.0], [48.6, 851.0], [48.7, 852.0], [48.8, 852.0], [48.9, 856.0], [49.0, 856.0], [49.1, 857.0], [49.2, 857.0], [49.3, 857.0], [49.4, 857.0], [49.5, 860.0], [49.6, 860.0], [49.7, 860.0], [49.8, 860.0], [49.9, 862.0], [50.0, 862.0], [50.1, 866.0], [50.2, 866.0], [50.3, 867.0], [50.4, 867.0], [50.5, 867.0], [50.6, 867.0], [50.7, 869.0], [50.8, 869.0], [50.9, 870.0], [51.0, 870.0], [51.1, 872.0], [51.2, 872.0], [51.3, 876.0], [51.4, 876.0], [51.5, 877.0], [51.6, 877.0], [51.7, 879.0], [51.8, 879.0], [51.9, 880.0], [52.0, 880.0], [52.1, 881.0], [52.2, 881.0], [52.3, 881.0], [52.4, 881.0], [52.5, 882.0], [52.6, 882.0], [52.7, 883.0], [52.8, 883.0], [52.9, 884.0], [53.0, 884.0], [53.1, 884.0], [53.2, 884.0], [53.3, 885.0], [53.4, 885.0], [53.5, 889.0], [53.6, 889.0], [53.7, 891.0], [53.8, 891.0], [53.9, 891.0], [54.0, 891.0], [54.1, 894.0], [54.2, 894.0], [54.3, 902.0], [54.4, 902.0], [54.5, 902.0], [54.6, 902.0], [54.7, 903.0], [54.8, 903.0], [54.9, 903.0], [55.0, 903.0], [55.1, 904.0], [55.2, 904.0], [55.3, 907.0], [55.4, 907.0], [55.5, 908.0], [55.6, 908.0], [55.7, 908.0], [55.8, 908.0], [55.9, 909.0], [56.0, 909.0], [56.1, 909.0], [56.2, 909.0], [56.3, 909.0], [56.4, 909.0], [56.5, 911.0], [56.6, 911.0], [56.7, 912.0], [56.8, 912.0], [56.9, 912.0], [57.0, 912.0], [57.1, 913.0], [57.2, 913.0], [57.3, 915.0], [57.4, 915.0], [57.5, 915.0], [57.6, 915.0], [57.7, 917.0], [57.8, 917.0], [57.9, 922.0], [58.0, 922.0], [58.1, 929.0], [58.2, 929.0], [58.3, 931.0], [58.4, 931.0], [58.5, 932.0], [58.6, 932.0], [58.7, 934.0], [58.8, 934.0], [58.9, 935.0], [59.0, 935.0], [59.1, 935.0], [59.2, 935.0], [59.3, 936.0], [59.4, 936.0], [59.5, 936.0], [59.6, 936.0], [59.7, 937.0], [59.8, 937.0], [59.9, 937.0], [60.0, 937.0], [60.1, 939.0], [60.2, 939.0], [60.3, 939.0], [60.4, 939.0], [60.5, 940.0], [60.6, 940.0], [60.7, 942.0], [60.8, 942.0], [60.9, 942.0], [61.0, 942.0], [61.1, 945.0], [61.2, 945.0], [61.3, 947.0], [61.4, 947.0], [61.5, 947.0], [61.6, 947.0], [61.7, 949.0], [61.8, 949.0], [61.9, 949.0], [62.0, 949.0], [62.1, 951.0], [62.2, 951.0], [62.3, 952.0], [62.4, 952.0], [62.5, 953.0], [62.6, 953.0], [62.7, 954.0], [62.8, 954.0], [62.9, 954.0], [63.0, 954.0], [63.1, 955.0], [63.2, 955.0], [63.3, 956.0], [63.4, 956.0], [63.5, 958.0], [63.6, 958.0], [63.7, 958.0], [63.8, 958.0], [63.9, 959.0], [64.0, 959.0], [64.1, 959.0], [64.2, 959.0], [64.3, 960.0], [64.4, 960.0], [64.5, 960.0], [64.6, 960.0], [64.7, 962.0], [64.8, 962.0], [64.9, 963.0], [65.0, 963.0], [65.1, 963.0], [65.2, 963.0], [65.3, 963.0], [65.4, 963.0], [65.5, 964.0], [65.6, 964.0], [65.7, 965.0], [65.8, 965.0], [65.9, 966.0], [66.0, 966.0], [66.1, 970.0], [66.2, 970.0], [66.3, 972.0], [66.4, 972.0], [66.5, 972.0], [66.6, 972.0], [66.7, 973.0], [66.8, 973.0], [66.9, 974.0], [67.0, 974.0], [67.1, 974.0], [67.2, 974.0], [67.3, 976.0], [67.4, 976.0], [67.5, 977.0], [67.6, 977.0], [67.7, 978.0], [67.8, 978.0], [67.9, 979.0], [68.0, 979.0], [68.1, 979.0], [68.2, 979.0], [68.3, 979.0], [68.4, 979.0], [68.5, 981.0], [68.6, 981.0], [68.7, 983.0], [68.8, 983.0], [68.9, 984.0], [69.0, 984.0], [69.1, 990.0], [69.2, 990.0], [69.3, 991.0], [69.4, 991.0], [69.5, 993.0], [69.6, 993.0], [69.7, 995.0], [69.8, 995.0], [69.9, 996.0], [70.0, 996.0], [70.1, 996.0], [70.2, 996.0], [70.3, 997.0], [70.4, 997.0], [70.5, 998.0], [70.6, 998.0], [70.7, 1000.0], [70.8, 1000.0], [70.9, 1001.0], [71.0, 1001.0], [71.1, 1002.0], [71.2, 1002.0], [71.3, 1007.0], [71.4, 1007.0], [71.5, 1009.0], [71.6, 1009.0], [71.7, 1010.0], [71.8, 1010.0], [71.9, 1011.0], [72.0, 1011.0], [72.1, 1011.0], [72.2, 1011.0], [72.3, 1012.0], [72.4, 1012.0], [72.5, 1012.0], [72.6, 1012.0], [72.7, 1012.0], [72.8, 1012.0], [72.9, 1014.0], [73.0, 1014.0], [73.1, 1016.0], [73.2, 1016.0], [73.3, 1017.0], [73.4, 1017.0], [73.5, 1017.0], [73.6, 1017.0], [73.7, 1019.0], [73.8, 1019.0], [73.9, 1019.0], [74.0, 1019.0], [74.1, 1021.0], [74.2, 1021.0], [74.3, 1024.0], [74.4, 1024.0], [74.5, 1024.0], [74.6, 1024.0], [74.7, 1026.0], [74.8, 1026.0], [74.9, 1027.0], [75.0, 1027.0], [75.1, 1028.0], [75.2, 1028.0], [75.3, 1029.0], [75.4, 1029.0], [75.5, 1033.0], [75.6, 1033.0], [75.7, 1034.0], [75.8, 1034.0], [75.9, 1035.0], [76.0, 1035.0], [76.1, 1036.0], [76.2, 1036.0], [76.3, 1037.0], [76.4, 1037.0], [76.5, 1038.0], [76.6, 1038.0], [76.7, 1039.0], [76.8, 1039.0], [76.9, 1041.0], [77.0, 1041.0], [77.1, 1043.0], [77.2, 1043.0], [77.3, 1043.0], [77.4, 1043.0], [77.5, 1050.0], [77.6, 1050.0], [77.7, 1055.0], [77.8, 1055.0], [77.9, 1062.0], [78.0, 1062.0], [78.1, 1064.0], [78.2, 1064.0], [78.3, 1065.0], [78.4, 1065.0], [78.5, 1071.0], [78.6, 1071.0], [78.7, 1074.0], [78.8, 1074.0], [78.9, 1075.0], [79.0, 1075.0], [79.1, 1087.0], [79.2, 1087.0], [79.3, 1090.0], [79.4, 1090.0], [79.5, 1093.0], [79.6, 1093.0], [79.7, 1104.0], [79.8, 1104.0], [79.9, 1114.0], [80.0, 1114.0], [80.1, 1115.0], [80.2, 1115.0], [80.3, 1116.0], [80.4, 1116.0], [80.5, 1119.0], [80.6, 1119.0], [80.7, 1132.0], [80.8, 1132.0], [80.9, 1133.0], [81.0, 1133.0], [81.1, 1139.0], [81.2, 1139.0], [81.3, 1143.0], [81.4, 1143.0], [81.5, 1148.0], [81.6, 1148.0], [81.7, 1159.0], [81.8, 1159.0], [81.9, 1162.0], [82.0, 1162.0], [82.1, 1169.0], [82.2, 1169.0], [82.3, 1170.0], [82.4, 1170.0], [82.5, 1174.0], [82.6, 1174.0], [82.7, 1184.0], [82.8, 1184.0], [82.9, 1188.0], [83.0, 1188.0], [83.1, 1217.0], [83.2, 1217.0], [83.3, 1218.0], [83.4, 1218.0], [83.5, 1219.0], [83.6, 1219.0], [83.7, 1228.0], [83.8, 1228.0], [83.9, 1289.0], [84.0, 1289.0], [84.1, 1307.0], [84.2, 1307.0], [84.3, 1316.0], [84.4, 1316.0], [84.5, 1334.0], [84.6, 1334.0], [84.7, 1391.0], [84.8, 1391.0], [84.9, 1394.0], [85.0, 1394.0], [85.1, 1397.0], [85.2, 1397.0], [85.3, 1405.0], [85.4, 1405.0], [85.5, 1405.0], [85.6, 1405.0], [85.7, 1426.0], [85.8, 1426.0], [85.9, 1427.0], [86.0, 1427.0], [86.1, 1473.0], [86.2, 1473.0], [86.3, 1474.0], [86.4, 1474.0], [86.5, 1479.0], [86.6, 1479.0], [86.7, 1480.0], [86.8, 1480.0], [86.9, 1506.0], [87.0, 1506.0], [87.1, 1509.0], [87.2, 1509.0], [87.3, 1512.0], [87.4, 1512.0], [87.5, 1513.0], [87.6, 1513.0], [87.7, 1526.0], [87.8, 1526.0], [87.9, 1528.0], [88.0, 1528.0], [88.1, 1536.0], [88.2, 1536.0], [88.3, 1543.0], [88.4, 1543.0], [88.5, 1588.0], [88.6, 1588.0], [88.7, 1590.0], [88.8, 1590.0], [88.9, 1598.0], [89.0, 1598.0], [89.1, 1605.0], [89.2, 1605.0], [89.3, 1621.0], [89.4, 1621.0], [89.5, 1644.0], [89.6, 1644.0], [89.7, 1656.0], [89.8, 1656.0], [89.9, 1661.0], [90.0, 1661.0], [90.1, 1677.0], [90.2, 1677.0], [90.3, 1726.0], [90.4, 1726.0], [90.5, 1734.0], [90.6, 1734.0], [90.7, 1766.0], [90.8, 1766.0], [90.9, 1780.0], [91.0, 1780.0], [91.1, 1833.0], [91.2, 1833.0], [91.3, 1839.0], [91.4, 1839.0], [91.5, 1841.0], [91.6, 1841.0], [91.7, 1846.0], [91.8, 1846.0], [91.9, 1848.0], [92.0, 1848.0], [92.1, 1853.0], [92.2, 1853.0], [92.3, 1863.0], [92.4, 1863.0], [92.5, 1869.0], [92.6, 1869.0], [92.7, 1885.0], [92.8, 1885.0], [92.9, 1886.0], [93.0, 1886.0], [93.1, 1890.0], [93.2, 1890.0], [93.3, 1893.0], [93.4, 1893.0], [93.5, 1893.0], [93.6, 1893.0], [93.7, 1895.0], [93.8, 1895.0], [93.9, 1911.0], [94.0, 1911.0], [94.1, 1926.0], [94.2, 1926.0], [94.3, 1927.0], [94.4, 1927.0], [94.5, 1929.0], [94.6, 1929.0], [94.7, 1932.0], [94.8, 1932.0], [94.9, 1936.0], [95.0, 1936.0], [95.1, 1950.0], [95.2, 1950.0], [95.3, 1965.0], [95.4, 1965.0], [95.5, 1991.0], [95.6, 1991.0], [95.7, 2001.0], [95.8, 2001.0], [95.9, 2034.0], [96.0, 2034.0], [96.1, 2042.0], [96.2, 2042.0], [96.3, 2063.0], [96.4, 2063.0], [96.5, 2077.0], [96.6, 2077.0], [96.7, 2081.0], [96.8, 2081.0], [96.9, 2082.0], [97.0, 2082.0], [97.1, 2110.0], [97.2, 2110.0], [97.3, 2142.0], [97.4, 2142.0], [97.5, 2147.0], [97.6, 2147.0], [97.7, 2149.0], [97.8, 2149.0], [97.9, 2152.0], [98.0, 2152.0], [98.1, 2153.0], [98.2, 2153.0], [98.3, 2156.0], [98.4, 2156.0], [98.5, 2157.0], [98.6, 2157.0], [98.7, 2193.0], [98.8, 2193.0], [98.9, 2202.0], [99.0, 2202.0], [99.1, 2205.0], [99.2, 2205.0], [99.3, 2208.0], [99.4, 2208.0], [99.5, 2245.0], [99.6, 2245.0], [99.7, 2444.0], [99.8, 2444.0], [99.9, 4056.0], [100.0, 4056.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 128.0, "series": [{"data": [[2100.0, 1.0], [600.0, 46.0], [700.0, 13.0], [200.0, 57.0], [800.0, 3.0], [900.0, 5.0], [1000.0, 6.0], [1100.0, 2.0], [1200.0, 6.0], [300.0, 107.0], [1300.0, 8.0], [1400.0, 13.0], [1500.0, 13.0], [400.0, 55.0], [1600.0, 9.0], [100.0, 13.0], [1700.0, 9.0], [1800.0, 5.0], [1900.0, 1.0], [500.0, 128.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 10.0], [300.0, 119.0], [600.0, 3.0], [1300.0, 3.0], [1400.0, 1.0], [100.0, 119.0], [200.0, 118.0], [400.0, 98.0], [800.0, 3.0], [3500.0, 1.0], [500.0, 25.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[2100.0, 9.0], [2200.0, 4.0], [600.0, 37.0], [2400.0, 1.0], [700.0, 40.0], [800.0, 60.0], [200.0, 6.0], [900.0, 82.0], [1000.0, 45.0], [4000.0, 1.0], [1100.0, 17.0], [1200.0, 5.0], [300.0, 2.0], [1300.0, 6.0], [1400.0, 8.0], [1500.0, 11.0], [1600.0, 6.0], [400.0, 77.0], [1700.0, 4.0], [1800.0, 14.0], [1900.0, 9.0], [500.0, 49.0], [2000.0, 7.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 105.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 782.0, "series": [{"data": [[0.0, 782.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 613.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 105.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 43.91313868613138, "minX": 1.7242749E12, "maxY": 50.84615384615383, "series": [{"data": [[1.7242749E12, 50.84615384615383], [1.72427496E12, 43.91313868613138]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427496E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 127.0, "minX": 1.0, "maxY": 1415.0, "series": [{"data": [[2.0, 1223.0], [3.0, 129.0], [4.0, 135.0], [5.0, 135.0], [6.0, 133.0], [7.0, 134.0], [8.0, 127.0], [9.0, 175.0], [10.0, 164.0], [11.0, 205.0], [12.0, 319.0], [13.0, 322.0], [14.0, 324.0], [15.0, 334.0], [16.0, 359.0], [17.0, 322.0], [18.0, 348.5], [19.0, 351.0], [20.0, 452.6666666666667], [21.0, 532.0], [22.0, 324.375], [23.0, 644.1111111111111], [24.0, 631.7142857142858], [25.0, 425.1111111111111], [26.0, 300.57142857142856], [27.0, 572.5384615384615], [28.0, 458.7692307692308], [29.0, 449.35714285714283], [30.0, 377.7857142857143], [31.0, 639.4], [33.0, 528.8333333333334], [32.0, 529.8], [35.0, 568.1], [34.0, 742.6666666666666], [37.0, 615.6], [36.0, 494.625], [39.0, 742.2222222222223], [38.0, 439.5], [41.0, 777.0], [40.0, 808.6666666666666], [43.0, 1013.6], [42.0, 1102.8333333333333], [45.0, 690.4545454545455], [44.0, 700.7777777777778], [47.0, 767.875], [46.0, 721.375], [49.0, 787.3333333333333], [48.0, 726.1666666666666], [51.0, 631.6666666666666], [50.0, 655.625], [53.0, 671.5], [52.0, 681.8333333333334], [55.0, 733.9090909090909], [54.0, 582.25], [57.0, 583.1428571428572], [56.0, 605.6666666666666], [59.0, 548.5882352941177], [58.0, 582.8947368421051], [61.0, 596.7857142857144], [60.0, 631.6153846153845], [63.0, 822.5], [62.0, 750.1111111111111], [67.0, 679.7142857142858], [66.0, 572.2857142857142], [65.0, 659.6], [64.0, 689.0], [71.0, 697.75], [70.0, 584.6], [69.0, 649.5], [68.0, 540.5], [72.0, 602.75], [73.0, 592.3333333333334], [75.0, 566.0], [74.0, 652.0], [79.0, 522.0], [78.0, 544.5], [76.0, 534.0], [82.0, 538.0], [81.0, 529.0], [80.0, 543.0], [1.0, 1231.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[44.514, 608.1960000000009]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 182.0], [3.0, 129.0], [4.0, 157.0], [5.0, 134.0], [6.0, 134.0], [7.0, 152.0], [8.0, 161.0], [9.0, 294.0], [10.0, 265.0], [11.0, 371.0], [12.0, 212.0], [13.0, 208.0], [14.0, 204.0], [15.0, 193.0], [16.0, 165.0], [17.0, 199.0], [18.0, 166.5], [19.0, 158.5], [20.0, 257.2222222222223], [21.0, 253.42857142857147], [22.0, 172.5], [23.0, 198.0], [24.0, 142.0], [25.0, 183.11111111111111], [26.0, 344.0], [27.0, 195.15384615384613], [28.0, 228.0769230769231], [29.0, 240.35714285714286], [30.0, 244.35714285714286], [31.0, 287.40000000000003], [33.0, 279.5], [32.0, 281.0], [35.0, 294.8999999999999], [34.0, 281.0], [37.0, 319.29999999999995], [36.0, 286.0], [39.0, 451.22222222222223], [38.0, 333.1], [41.0, 515.5714285714286], [40.0, 454.8333333333333], [43.0, 375.79999999999995], [42.0, 311.5833333333333], [45.0, 334.4545454545455], [44.0, 376.8888888888889], [47.0, 395.375], [46.0, 377.375], [49.0, 378.16666666666663], [48.0, 398.33333333333337], [51.0, 351.83333333333337], [50.0, 373.5], [53.0, 377.0], [52.0, 343.1666666666667], [55.0, 447.4545454545455], [54.0, 366.0], [57.0, 399.0], [56.0, 593.5833333333334], [59.0, 340.8235294117647], [58.0, 374.8947368421052], [61.0, 348.6428571428571], [60.0, 322.46153846153845], [63.0, 352.33333333333337], [62.0, 361.77777777777777], [67.0, 290.28571428571433], [66.0, 311.2857142857143], [65.0, 271.1], [64.0, 267.6666666666667], [71.0, 322.0], [70.0, 263.8], [69.0, 438.5], [68.0, 259.25], [72.0, 281.0], [73.0, 461.0], [75.0, 328.0], [74.0, 355.5], [79.0, 317.0], [78.0, 345.0], [76.0, 341.5], [82.0, 365.0], [81.0, 323.0], [80.0, 316.0], [1.0, 166.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[44.514, 321.14199999999977]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 1405.0], [3.0, 258.0], [4.0, 293.0], [5.0, 269.0], [6.0, 267.0], [7.0, 287.0], [8.0, 288.0], [9.0, 469.0], [10.0, 430.0], [11.0, 576.0], [12.0, 531.0], [13.0, 531.0], [14.0, 529.0], [15.0, 528.0], [16.0, 524.0], [17.0, 521.0], [18.0, 515.0], [19.0, 510.0], [20.0, 710.3333333333334], [21.0, 785.7142857142857], [22.0, 497.25], [23.0, 842.3333333333334], [24.0, 774.2857142857142], [25.0, 608.5555555555555], [26.0, 645.1428571428571], [27.0, 768.1538461538463], [28.0, 694.6923076923077], [29.0, 690.3571428571429], [30.0, 622.7857142857142], [31.0, 927.5999999999999], [33.0, 809.0], [32.0, 811.2], [35.0, 863.4000000000001], [34.0, 1023.6666666666666], [37.0, 935.9000000000002], [36.0, 781.0], [39.0, 1193.888888888889], [38.0, 773.2], [41.0, 1293.0000000000002], [40.0, 1263.8333333333335], [43.0, 1391.6], [42.0, 1415.0], [45.0, 1025.6363636363635], [44.0, 1078.5555555555557], [47.0, 1163.5], [46.0, 1100.0], [49.0, 1166.1666666666665], [48.0, 1124.8333333333333], [51.0, 984.1666666666666], [50.0, 1030.375], [53.0, 1049.0], [52.0, 1025.6666666666667], [55.0, 1186.6363636363637], [54.0, 948.75], [57.0, 982.6428571428573], [56.0, 1199.9999999999998], [59.0, 890.0000000000001], [58.0, 958.2105263157895], [61.0, 946.2142857142857], [60.0, 954.4615384615385], [63.0, 1180.0], [62.0, 1114.4444444444443], [67.0, 970.2857142857142], [66.0, 884.1428571428571], [65.0, 931.4], [64.0, 957.6666666666666], [71.0, 1020.75], [70.0, 849.0], [69.0, 1091.75], [68.0, 800.75], [72.0, 884.75], [73.0, 1054.0], [75.0, 894.0], [74.0, 1008.0], [79.0, 840.0], [78.0, 890.0], [76.0, 876.0], [82.0, 904.0], [81.0, 852.0], [80.0, 860.0], [1.0, 1397.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[44.514, 930.3520000000003]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 82.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 318.0, "minX": 1.7242749E12, "maxY": 134580.96666666667, "series": [{"data": [[1.7242749E12, 8821.666666666666], [1.72427496E12, 134580.96666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7242749E12, 318.0], [1.72427496E12, 3682.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427496E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 269.9444444444444, "minX": 1.7242749E12, "maxY": 1278.9999999999998, "series": [{"data": [[1.7242749E12, 1026.1379310344828], [1.72427496E12, 582.462845010616]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7242749E12, 269.9444444444444], [1.72427496E12, 329.7546728971963]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7242749E12, 1278.9999999999998], [1.72427496E12, 908.8853503184718]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427496E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 247.79310344827587, "minX": 1.7242749E12, "maxY": 1021.3793103448277, "series": [{"data": [[1.7242749E12, 1021.3793103448277], [1.72427496E12, 580.7070063694264]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7242749E12, 266.7361111111111], [1.72427496E12, 329.7009345794392]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7242749E12, 247.79310344827587], [1.72427496E12, 325.11889596602987]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427496E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 65.3793103448276, "minX": 1.7242749E12, "maxY": 787.0344827586206, "series": [{"data": [[1.7242749E12, 787.0344827586206], [1.72427496E12, 415.67940552017063]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7242749E12, 67.61111111111109], [1.72427496E12, 129.22663551401874]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7242749E12, 65.3793103448276], [1.72427496E12, 123.73885350318456]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427496E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 78.0, "minX": 1.7242749E12, "maxY": 4056.0, "series": [{"data": [[1.7242749E12, 1895.0], [1.72427496E12, 4056.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7242749E12, 1539.7000000000003], [1.72427496E12, 1157.900000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7242749E12, 1894.38], [1.72427496E12, 2147.58]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7242749E12, 1836.6], [1.72427496E12, 1607.2500000000002]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7242749E12, 78.0], [1.72427496E12, 91.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7242749E12, 475.0], [1.72427496E12, 491.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427496E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 231.5, "minX": 26.0, "maxY": 1421.0, "series": [{"data": [[68.0, 1016.5], [143.0, 1421.0], [138.0, 518.5], [152.0, 308.5], [162.0, 513.5], [170.0, 576.5], [168.0, 644.0], [179.0, 322.0], [26.0, 231.5], [232.0, 459.0], [62.0, 276.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 232.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 154.5, "minX": 26.0, "maxY": 496.0, "series": [{"data": [[68.0, 431.5], [143.0, 343.0], [138.0, 382.0], [152.0, 206.0], [162.0, 441.0], [170.0, 450.5], [168.0, 496.0], [179.0, 204.0], [26.0, 154.5], [232.0, 313.5], [62.0, 276.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 232.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6666666666666665, "minX": 1.7242749E12, "maxY": 21.333333333333332, "series": [{"data": [[1.7242749E12, 3.6666666666666665], [1.72427496E12, 21.333333333333332]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427496E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9666666666666667, "minX": 1.7242749E12, "maxY": 15.7, "series": [{"data": [[1.7242749E12, 0.9666666666666667], [1.72427496E12, 15.7]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7242749E12, 1.2], [1.72427496E12, 7.133333333333334]], "isOverall": false, "label": "301", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72427496E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.48333333333333334, "minX": 1.7242749E12, "maxY": 7.85, "series": [{"data": [[1.7242749E12, 0.48333333333333334], [1.72427496E12, 7.85]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7242749E12, 1.2], [1.72427496E12, 7.133333333333334]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.7242749E12, 0.48333333333333334], [1.72427496E12, 7.85]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427496E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.1666666666666665, "minX": 1.7242749E12, "maxY": 22.833333333333332, "series": [{"data": [[1.7242749E12, 2.1666666666666665], [1.72427496E12, 22.833333333333332]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72427496E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

