/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "maxY": 19642.0, "series": [{"data": [[0.0, 120.0], [0.1, 127.0], [0.2, 128.0], [0.3, 129.0], [0.4, 129.0], [0.5, 130.0], [0.6, 130.0], [0.7, 130.0], [0.8, 131.0], [0.9, 131.0], [1.0, 131.0], [1.1, 131.0], [1.2, 131.0], [1.3, 131.0], [1.4, 132.0], [1.5, 132.0], [1.6, 132.0], [1.7, 132.0], [1.8, 132.0], [1.9, 132.0], [2.0, 132.0], [2.1, 132.0], [2.2, 133.0], [2.3, 133.0], [2.4, 133.0], [2.5, 133.0], [2.6, 133.0], [2.7, 133.0], [2.8, 133.0], [2.9, 133.0], [3.0, 133.0], [3.1, 133.0], [3.2, 133.0], [3.3, 134.0], [3.4, 134.0], [3.5, 134.0], [3.6, 134.0], [3.7, 134.0], [3.8, 134.0], [3.9, 134.0], [4.0, 134.0], [4.1, 134.0], [4.2, 134.0], [4.3, 134.0], [4.4, 134.0], [4.5, 134.0], [4.6, 134.0], [4.7, 134.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 135.0], [5.2, 135.0], [5.3, 135.0], [5.4, 135.0], [5.5, 135.0], [5.6, 135.0], [5.7, 135.0], [5.8, 135.0], [5.9, 135.0], [6.0, 135.0], [6.1, 135.0], [6.2, 135.0], [6.3, 135.0], [6.4, 135.0], [6.5, 135.0], [6.6, 135.0], [6.7, 136.0], [6.8, 136.0], [6.9, 136.0], [7.0, 136.0], [7.1, 136.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 136.0], [7.8, 136.0], [7.9, 136.0], [8.0, 136.0], [8.1, 136.0], [8.2, 136.0], [8.3, 136.0], [8.4, 136.0], [8.5, 136.0], [8.6, 136.0], [8.7, 136.0], [8.8, 136.0], [8.9, 136.0], [9.0, 137.0], [9.1, 137.0], [9.2, 137.0], [9.3, 137.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 137.0], [9.8, 137.0], [9.9, 137.0], [10.0, 137.0], [10.1, 137.0], [10.2, 137.0], [10.3, 137.0], [10.4, 137.0], [10.5, 137.0], [10.6, 137.0], [10.7, 137.0], [10.8, 137.0], [10.9, 137.0], [11.0, 137.0], [11.1, 137.0], [11.2, 137.0], [11.3, 137.0], [11.4, 137.0], [11.5, 137.0], [11.6, 137.0], [11.7, 137.0], [11.8, 137.0], [11.9, 137.0], [12.0, 138.0], [12.1, 138.0], [12.2, 138.0], [12.3, 138.0], [12.4, 138.0], [12.5, 138.0], [12.6, 138.0], [12.7, 138.0], [12.8, 138.0], [12.9, 138.0], [13.0, 138.0], [13.1, 138.0], [13.2, 138.0], [13.3, 138.0], [13.4, 138.0], [13.5, 138.0], [13.6, 138.0], [13.7, 138.0], [13.8, 138.0], [13.9, 138.0], [14.0, 138.0], [14.1, 138.0], [14.2, 138.0], [14.3, 138.0], [14.4, 138.0], [14.5, 138.0], [14.6, 138.0], [14.7, 138.0], [14.8, 138.0], [14.9, 138.0], [15.0, 138.0], [15.1, 138.0], [15.2, 139.0], [15.3, 139.0], [15.4, 139.0], [15.5, 139.0], [15.6, 139.0], [15.7, 139.0], [15.8, 139.0], [15.9, 139.0], [16.0, 139.0], [16.1, 139.0], [16.2, 139.0], [16.3, 139.0], [16.4, 139.0], [16.5, 139.0], [16.6, 139.0], [16.7, 139.0], [16.8, 139.0], [16.9, 139.0], [17.0, 139.0], [17.1, 139.0], [17.2, 139.0], [17.3, 139.0], [17.4, 139.0], [17.5, 139.0], [17.6, 139.0], [17.7, 139.0], [17.8, 139.0], [17.9, 139.0], [18.0, 139.0], [18.1, 139.0], [18.2, 139.0], [18.3, 139.0], [18.4, 139.0], [18.5, 139.0], [18.6, 139.0], [18.7, 140.0], [18.8, 140.0], [18.9, 140.0], [19.0, 140.0], [19.1, 140.0], [19.2, 140.0], [19.3, 140.0], [19.4, 140.0], [19.5, 140.0], [19.6, 140.0], [19.7, 140.0], [19.8, 140.0], [19.9, 140.0], [20.0, 140.0], [20.1, 140.0], [20.2, 140.0], [20.3, 140.0], [20.4, 140.0], [20.5, 140.0], [20.6, 140.0], [20.7, 140.0], [20.8, 140.0], [20.9, 140.0], [21.0, 140.0], [21.1, 140.0], [21.2, 140.0], [21.3, 140.0], [21.4, 140.0], [21.5, 140.0], [21.6, 140.0], [21.7, 140.0], [21.8, 140.0], [21.9, 140.0], [22.0, 140.0], [22.1, 140.0], [22.2, 140.0], [22.3, 140.0], [22.4, 140.0], [22.5, 140.0], [22.6, 141.0], [22.7, 141.0], [22.8, 141.0], [22.9, 141.0], [23.0, 141.0], [23.1, 141.0], [23.2, 141.0], [23.3, 141.0], [23.4, 141.0], [23.5, 141.0], [23.6, 141.0], [23.7, 141.0], [23.8, 141.0], [23.9, 141.0], [24.0, 141.0], [24.1, 141.0], [24.2, 141.0], [24.3, 141.0], [24.4, 141.0], [24.5, 141.0], [24.6, 141.0], [24.7, 141.0], [24.8, 141.0], [24.9, 141.0], [25.0, 141.0], [25.1, 141.0], [25.2, 141.0], [25.3, 141.0], [25.4, 141.0], [25.5, 141.0], [25.6, 141.0], [25.7, 141.0], [25.8, 141.0], [25.9, 141.0], [26.0, 141.0], [26.1, 141.0], [26.2, 141.0], [26.3, 141.0], [26.4, 141.0], [26.5, 141.0], [26.6, 141.0], [26.7, 141.0], [26.8, 142.0], [26.9, 142.0], [27.0, 142.0], [27.1, 142.0], [27.2, 142.0], [27.3, 142.0], [27.4, 142.0], [27.5, 142.0], [27.6, 142.0], [27.7, 142.0], [27.8, 142.0], [27.9, 142.0], [28.0, 142.0], [28.1, 142.0], [28.2, 142.0], [28.3, 142.0], [28.4, 142.0], [28.5, 142.0], [28.6, 142.0], [28.7, 142.0], [28.8, 142.0], [28.9, 142.0], [29.0, 142.0], [29.1, 142.0], [29.2, 142.0], [29.3, 142.0], [29.4, 142.0], [29.5, 142.0], [29.6, 142.0], [29.7, 142.0], [29.8, 142.0], [29.9, 142.0], [30.0, 142.0], [30.1, 142.0], [30.2, 142.0], [30.3, 142.0], [30.4, 142.0], [30.5, 142.0], [30.6, 142.0], [30.7, 142.0], [30.8, 142.0], [30.9, 142.0], [31.0, 142.0], [31.1, 142.0], [31.2, 143.0], [31.3, 143.0], [31.4, 143.0], [31.5, 143.0], [31.6, 143.0], [31.7, 143.0], [31.8, 143.0], [31.9, 143.0], [32.0, 143.0], [32.1, 143.0], [32.2, 143.0], [32.3, 143.0], [32.4, 143.0], [32.5, 143.0], [32.6, 143.0], [32.7, 143.0], [32.8, 143.0], [32.9, 143.0], [33.0, 143.0], [33.1, 143.0], [33.2, 143.0], [33.3, 143.0], [33.4, 143.0], [33.5, 143.0], [33.6, 143.0], [33.7, 143.0], [33.8, 143.0], [33.9, 143.0], [34.0, 143.0], [34.1, 143.0], [34.2, 143.0], [34.3, 143.0], [34.4, 143.0], [34.5, 143.0], [34.6, 143.0], [34.7, 143.0], [34.8, 143.0], [34.9, 143.0], [35.0, 143.0], [35.1, 143.0], [35.2, 143.0], [35.3, 143.0], [35.4, 144.0], [35.5, 144.0], [35.6, 144.0], [35.7, 144.0], [35.8, 144.0], [35.9, 144.0], [36.0, 144.0], [36.1, 144.0], [36.2, 144.0], [36.3, 144.0], [36.4, 144.0], [36.5, 144.0], [36.6, 144.0], [36.7, 144.0], [36.8, 144.0], [36.9, 144.0], [37.0, 144.0], [37.1, 144.0], [37.2, 144.0], [37.3, 144.0], [37.4, 144.0], [37.5, 144.0], [37.6, 144.0], [37.7, 144.0], [37.8, 144.0], [37.9, 144.0], [38.0, 144.0], [38.1, 144.0], [38.2, 144.0], [38.3, 144.0], [38.4, 144.0], [38.5, 144.0], [38.6, 144.0], [38.7, 144.0], [38.8, 144.0], [38.9, 144.0], [39.0, 144.0], [39.1, 144.0], [39.2, 144.0], [39.3, 144.0], [39.4, 144.0], [39.5, 144.0], [39.6, 145.0], [39.7, 145.0], [39.8, 145.0], [39.9, 145.0], [40.0, 145.0], [40.1, 145.0], [40.2, 145.0], [40.3, 145.0], [40.4, 145.0], [40.5, 145.0], [40.6, 145.0], [40.7, 145.0], [40.8, 145.0], [40.9, 145.0], [41.0, 145.0], [41.1, 145.0], [41.2, 145.0], [41.3, 145.0], [41.4, 145.0], [41.5, 145.0], [41.6, 145.0], [41.7, 145.0], [41.8, 145.0], [41.9, 145.0], [42.0, 145.0], [42.1, 145.0], [42.2, 145.0], [42.3, 145.0], [42.4, 145.0], [42.5, 145.0], [42.6, 145.0], [42.7, 145.0], [42.8, 145.0], [42.9, 145.0], [43.0, 145.0], [43.1, 145.0], [43.2, 145.0], [43.3, 145.0], [43.4, 145.0], [43.5, 146.0], [43.6, 146.0], [43.7, 146.0], [43.8, 146.0], [43.9, 146.0], [44.0, 146.0], [44.1, 146.0], [44.2, 146.0], [44.3, 146.0], [44.4, 146.0], [44.5, 146.0], [44.6, 146.0], [44.7, 146.0], [44.8, 146.0], [44.9, 146.0], [45.0, 146.0], [45.1, 146.0], [45.2, 146.0], [45.3, 146.0], [45.4, 146.0], [45.5, 146.0], [45.6, 146.0], [45.7, 146.0], [45.8, 146.0], [45.9, 146.0], [46.0, 146.0], [46.1, 146.0], [46.2, 146.0], [46.3, 146.0], [46.4, 146.0], [46.5, 146.0], [46.6, 146.0], [46.7, 146.0], [46.8, 146.0], [46.9, 146.0], [47.0, 146.0], [47.1, 146.0], [47.2, 147.0], [47.3, 147.0], [47.4, 147.0], [47.5, 147.0], [47.6, 147.0], [47.7, 147.0], [47.8, 147.0], [47.9, 147.0], [48.0, 147.0], [48.1, 147.0], [48.2, 147.0], [48.3, 147.0], [48.4, 147.0], [48.5, 147.0], [48.6, 147.0], [48.7, 147.0], [48.8, 147.0], [48.9, 147.0], [49.0, 147.0], [49.1, 147.0], [49.2, 147.0], [49.3, 147.0], [49.4, 147.0], [49.5, 147.0], [49.6, 147.0], [49.7, 147.0], [49.8, 147.0], [49.9, 147.0], [50.0, 147.0], [50.1, 147.0], [50.2, 147.0], [50.3, 147.0], [50.4, 147.0], [50.5, 148.0], [50.6, 148.0], [50.7, 148.0], [50.8, 148.0], [50.9, 148.0], [51.0, 148.0], [51.1, 148.0], [51.2, 148.0], [51.3, 148.0], [51.4, 148.0], [51.5, 148.0], [51.6, 148.0], [51.7, 148.0], [51.8, 148.0], [51.9, 148.0], [52.0, 148.0], [52.1, 148.0], [52.2, 148.0], [52.3, 148.0], [52.4, 148.0], [52.5, 148.0], [52.6, 148.0], [52.7, 148.0], [52.8, 148.0], [52.9, 148.0], [53.0, 148.0], [53.1, 148.0], [53.2, 148.0], [53.3, 148.0], [53.4, 148.0], [53.5, 148.0], [53.6, 149.0], [53.7, 149.0], [53.8, 149.0], [53.9, 149.0], [54.0, 149.0], [54.1, 149.0], [54.2, 149.0], [54.3, 149.0], [54.4, 149.0], [54.5, 149.0], [54.6, 149.0], [54.7, 149.0], [54.8, 149.0], [54.9, 149.0], [55.0, 149.0], [55.1, 149.0], [55.2, 149.0], [55.3, 149.0], [55.4, 149.0], [55.5, 149.0], [55.6, 149.0], [55.7, 149.0], [55.8, 149.0], [55.9, 149.0], [56.0, 149.0], [56.1, 149.0], [56.2, 149.0], [56.3, 149.0], [56.4, 150.0], [56.5, 150.0], [56.6, 150.0], [56.7, 150.0], [56.8, 150.0], [56.9, 150.0], [57.0, 150.0], [57.1, 150.0], [57.2, 150.0], [57.3, 150.0], [57.4, 150.0], [57.5, 150.0], [57.6, 150.0], [57.7, 150.0], [57.8, 150.0], [57.9, 150.0], [58.0, 150.0], [58.1, 150.0], [58.2, 150.0], [58.3, 150.0], [58.4, 150.0], [58.5, 150.0], [58.6, 150.0], [58.7, 150.0], [58.8, 150.0], [58.9, 151.0], [59.0, 151.0], [59.1, 151.0], [59.2, 151.0], [59.3, 151.0], [59.4, 151.0], [59.5, 151.0], [59.6, 151.0], [59.7, 151.0], [59.8, 151.0], [59.9, 151.0], [60.0, 151.0], [60.1, 151.0], [60.2, 151.0], [60.3, 151.0], [60.4, 151.0], [60.5, 151.0], [60.6, 151.0], [60.7, 151.0], [60.8, 151.0], [60.9, 151.0], [61.0, 151.0], [61.1, 151.0], [61.2, 152.0], [61.3, 152.0], [61.4, 152.0], [61.5, 152.0], [61.6, 152.0], [61.7, 152.0], [61.8, 152.0], [61.9, 152.0], [62.0, 152.0], [62.1, 152.0], [62.2, 152.0], [62.3, 152.0], [62.4, 152.0], [62.5, 152.0], [62.6, 152.0], [62.7, 152.0], [62.8, 152.0], [62.9, 152.0], [63.0, 152.0], [63.1, 152.0], [63.2, 152.0], [63.3, 153.0], [63.4, 153.0], [63.5, 153.0], [63.6, 153.0], [63.7, 153.0], [63.8, 153.0], [63.9, 153.0], [64.0, 153.0], [64.1, 153.0], [64.2, 153.0], [64.3, 153.0], [64.4, 153.0], [64.5, 153.0], [64.6, 153.0], [64.7, 153.0], [64.8, 153.0], [64.9, 153.0], [65.0, 153.0], [65.1, 153.0], [65.2, 154.0], [65.3, 154.0], [65.4, 154.0], [65.5, 154.0], [65.6, 154.0], [65.7, 154.0], [65.8, 154.0], [65.9, 154.0], [66.0, 154.0], [66.1, 154.0], [66.2, 154.0], [66.3, 154.0], [66.4, 154.0], [66.5, 154.0], [66.6, 154.0], [66.7, 154.0], [66.8, 154.0], [66.9, 155.0], [67.0, 155.0], [67.1, 155.0], [67.2, 155.0], [67.3, 155.0], [67.4, 155.0], [67.5, 155.0], [67.6, 155.0], [67.7, 155.0], [67.8, 155.0], [67.9, 155.0], [68.0, 155.0], [68.1, 155.0], [68.2, 155.0], [68.3, 155.0], [68.4, 156.0], [68.5, 156.0], [68.6, 156.0], [68.7, 156.0], [68.8, 156.0], [68.9, 156.0], [69.0, 156.0], [69.1, 156.0], [69.2, 156.0], [69.3, 156.0], [69.4, 156.0], [69.5, 156.0], [69.6, 156.0], [69.7, 156.0], [69.8, 157.0], [69.9, 157.0], [70.0, 157.0], [70.1, 157.0], [70.2, 157.0], [70.3, 157.0], [70.4, 157.0], [70.5, 157.0], [70.6, 157.0], [70.7, 157.0], [70.8, 157.0], [70.9, 157.0], [71.0, 157.0], [71.1, 158.0], [71.2, 158.0], [71.3, 158.0], [71.4, 158.0], [71.5, 158.0], [71.6, 158.0], [71.7, 158.0], [71.8, 158.0], [71.9, 158.0], [72.0, 158.0], [72.1, 158.0], [72.2, 159.0], [72.3, 159.0], [72.4, 159.0], [72.5, 159.0], [72.6, 159.0], [72.7, 159.0], [72.8, 159.0], [72.9, 159.0], [73.0, 159.0], [73.1, 159.0], [73.2, 159.0], [73.3, 160.0], [73.4, 160.0], [73.5, 160.0], [73.6, 160.0], [73.7, 160.0], [73.8, 160.0], [73.9, 160.0], [74.0, 160.0], [74.1, 160.0], [74.2, 161.0], [74.3, 161.0], [74.4, 161.0], [74.5, 161.0], [74.6, 161.0], [74.7, 161.0], [74.8, 161.0], [74.9, 161.0], [75.0, 161.0], [75.1, 162.0], [75.2, 162.0], [75.3, 162.0], [75.4, 162.0], [75.5, 162.0], [75.6, 162.0], [75.7, 162.0], [75.8, 162.0], [75.9, 163.0], [76.0, 163.0], [76.1, 163.0], [76.2, 163.0], [76.3, 163.0], [76.4, 163.0], [76.5, 164.0], [76.6, 164.0], [76.7, 164.0], [76.8, 164.0], [76.9, 164.0], [77.0, 164.0], [77.1, 164.0], [77.2, 165.0], [77.3, 165.0], [77.4, 165.0], [77.5, 165.0], [77.6, 165.0], [77.7, 165.0], [77.8, 166.0], [77.9, 166.0], [78.0, 166.0], [78.1, 166.0], [78.2, 166.0], [78.3, 166.0], [78.4, 167.0], [78.5, 167.0], [78.6, 167.0], [78.7, 167.0], [78.8, 167.0], [78.9, 168.0], [79.0, 168.0], [79.1, 168.0], [79.2, 168.0], [79.3, 168.0], [79.4, 169.0], [79.5, 169.0], [79.6, 169.0], [79.7, 169.0], [79.8, 169.0], [79.9, 170.0], [80.0, 170.0], [80.1, 170.0], [80.2, 170.0], [80.3, 171.0], [80.4, 171.0], [80.5, 171.0], [80.6, 171.0], [80.7, 172.0], [80.8, 172.0], [80.9, 172.0], [81.0, 172.0], [81.1, 173.0], [81.2, 173.0], [81.3, 173.0], [81.4, 174.0], [81.5, 174.0], [81.6, 174.0], [81.7, 174.0], [81.8, 175.0], [81.9, 175.0], [82.0, 175.0], [82.1, 176.0], [82.2, 176.0], [82.3, 176.0], [82.4, 177.0], [82.5, 177.0], [82.6, 177.0], [82.7, 177.0], [82.8, 178.0], [82.9, 178.0], [83.0, 178.0], [83.1, 179.0], [83.2, 179.0], [83.3, 179.0], [83.4, 180.0], [83.5, 180.0], [83.6, 180.0], [83.7, 181.0], [83.8, 181.0], [83.9, 182.0], [84.0, 182.0], [84.1, 182.0], [84.2, 183.0], [84.3, 183.0], [84.4, 184.0], [84.5, 184.0], [84.6, 185.0], [84.7, 185.0], [84.8, 186.0], [84.9, 186.0], [85.0, 187.0], [85.1, 187.0], [85.2, 188.0], [85.3, 188.0], [85.4, 189.0], [85.5, 189.0], [85.6, 190.0], [85.7, 190.0], [85.8, 191.0], [85.9, 192.0], [86.0, 192.0], [86.1, 193.0], [86.2, 193.0], [86.3, 194.0], [86.4, 195.0], [86.5, 195.0], [86.6, 196.0], [86.7, 196.0], [86.8, 197.0], [86.9, 198.0], [87.0, 198.0], [87.1, 199.0], [87.2, 200.0], [87.3, 201.0], [87.4, 202.0], [87.5, 203.0], [87.6, 203.0], [87.7, 204.0], [87.8, 205.0], [87.9, 206.0], [88.0, 207.0], [88.1, 208.0], [88.2, 209.0], [88.3, 210.0], [88.4, 211.0], [88.5, 212.0], [88.6, 213.0], [88.7, 214.0], [88.8, 215.0], [88.9, 215.0], [89.0, 216.0], [89.1, 218.0], [89.2, 219.0], [89.3, 219.0], [89.4, 221.0], [89.5, 222.0], [89.6, 223.0], [89.7, 224.0], [89.8, 225.0], [89.9, 226.0], [90.0, 228.0], [90.1, 229.0], [90.2, 230.0], [90.3, 232.0], [90.4, 233.0], [90.5, 234.0], [90.6, 235.0], [90.7, 237.0], [90.8, 238.0], [90.9, 240.0], [91.0, 241.0], [91.1, 242.0], [91.2, 244.0], [91.3, 245.0], [91.4, 247.0], [91.5, 248.0], [91.6, 250.0], [91.7, 252.0], [91.8, 253.0], [91.9, 254.0], [92.0, 256.0], [92.1, 258.0], [92.2, 260.0], [92.3, 262.0], [92.4, 264.0], [92.5, 266.0], [92.6, 268.0], [92.7, 270.0], [92.8, 272.0], [92.9, 274.0], [93.0, 276.0], [93.1, 279.0], [93.2, 281.0], [93.3, 284.0], [93.4, 286.0], [93.5, 288.0], [93.6, 291.0], [93.7, 294.0], [93.8, 297.0], [93.9, 300.0], [94.0, 303.0], [94.1, 307.0], [94.2, 310.0], [94.3, 314.0], [94.4, 317.0], [94.5, 320.0], [94.6, 324.0], [94.7, 327.0], [94.8, 330.0], [94.9, 334.0], [95.0, 338.0], [95.1, 342.0], [95.2, 346.0], [95.3, 349.0], [95.4, 354.0], [95.5, 360.0], [95.6, 365.0], [95.7, 371.0], [95.8, 376.0], [95.9, 385.0], [96.0, 392.0], [96.1, 400.0], [96.2, 409.0], [96.3, 417.0], [96.4, 424.0], [96.5, 433.0], [96.6, 440.0], [96.7, 449.0], [96.8, 458.0], [96.9, 466.0], [97.0, 472.0], [97.1, 478.0], [97.2, 485.0], [97.3, 492.0], [97.4, 503.0], [97.5, 519.0], [97.6, 546.0], [97.7, 571.0], [97.8, 600.0], [97.9, 627.0], [98.0, 669.0], [98.1, 720.0], [98.2, 779.0], [98.3, 988.0], [98.4, 1152.0], [98.5, 1182.0], [98.6, 1237.0], [98.7, 1329.0], [98.8, 1430.0], [98.9, 1574.0], [99.0, 1920.0], [99.1, 2358.0], [99.2, 3478.0], [99.3, 4597.0], [99.4, 5965.0], [99.5, 7050.0], [99.6, 8549.0], [99.7, 10121.0], [99.8, 12002.0], [99.9, 13551.0], [100.0, 19642.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 46182.0, "series": [{"data": [[100.0, 46182.0], [200.0, 3580.0], [300.0, 1166.0], [400.0, 675.0], [500.0, 230.0], [600.0, 142.0], [700.0, 78.0], [800.0, 29.0], [900.0, 19.0], [1000.0, 23.0], [1100.0, 99.0], [1200.0, 74.0], [1300.0, 58.0], [1400.0, 40.0], [1500.0, 26.0], [1600.0, 21.0], [1700.0, 10.0], [1800.0, 14.0], [1900.0, 14.0], [2000.0, 13.0], [2100.0, 10.0], [2300.0, 9.0], [2200.0, 13.0], [2400.0, 12.0], [2500.0, 1.0], [2600.0, 4.0], [2800.0, 3.0], [2700.0, 6.0], [2900.0, 4.0], [3000.0, 1.0], [3100.0, 4.0], [3200.0, 3.0], [3300.0, 5.0], [3400.0, 11.0], [3500.0, 13.0], [3700.0, 6.0], [3600.0, 2.0], [3800.0, 1.0], [3900.0, 3.0], [4000.0, 5.0], [4100.0, 1.0], [4300.0, 5.0], [4200.0, 5.0], [4600.0, 1.0], [4400.0, 2.0], [4500.0, 7.0], [4700.0, 6.0], [4800.0, 3.0], [4900.0, 4.0], [5000.0, 3.0], [5300.0, 2.0], [5200.0, 1.0], [5400.0, 5.0], [5600.0, 5.0], [5500.0, 12.0], [5700.0, 3.0], [5800.0, 4.0], [5900.0, 9.0], [6000.0, 7.0], [6100.0, 5.0], [6200.0, 6.0], [6300.0, 3.0], [6400.0, 5.0], [6500.0, 6.0], [6600.0, 2.0], [6800.0, 3.0], [6900.0, 6.0], [6700.0, 3.0], [7000.0, 8.0], [7100.0, 4.0], [7400.0, 5.0], [7200.0, 1.0], [7300.0, 4.0], [7600.0, 3.0], [7500.0, 5.0], [7700.0, 3.0], [7900.0, 1.0], [7800.0, 2.0], [8000.0, 4.0], [8100.0, 2.0], [8500.0, 3.0], [8300.0, 9.0], [8700.0, 6.0], [8600.0, 6.0], [8200.0, 1.0], [8400.0, 1.0], [8800.0, 4.0], [9100.0, 3.0], [8900.0, 3.0], [9000.0, 2.0], [9200.0, 3.0], [9700.0, 4.0], [9400.0, 3.0], [9300.0, 5.0], [9500.0, 3.0], [9600.0, 1.0], [10100.0, 3.0], [9900.0, 2.0], [10200.0, 3.0], [10000.0, 3.0], [9800.0, 2.0], [10700.0, 4.0], [10300.0, 5.0], [10600.0, 3.0], [10400.0, 2.0], [10500.0, 3.0], [11200.0, 3.0], [11100.0, 2.0], [10800.0, 2.0], [11000.0, 5.0], [10900.0, 1.0], [11400.0, 4.0], [11600.0, 3.0], [11500.0, 5.0], [11300.0, 2.0], [12000.0, 4.0], [11900.0, 1.0], [11800.0, 3.0], [12200.0, 4.0], [12100.0, 1.0], [12500.0, 5.0], [12700.0, 3.0], [12600.0, 7.0], [12400.0, 4.0], [13000.0, 5.0], [13100.0, 3.0], [12800.0, 1.0], [12900.0, 1.0], [13200.0, 8.0], [13300.0, 4.0], [13500.0, 1.0], [13400.0, 3.0], [13700.0, 2.0], [13800.0, 1.0], [13600.0, 1.0], [14300.0, 2.0], [14100.0, 3.0], [14000.0, 1.0], [14200.0, 2.0], [14800.0, 1.0], [14700.0, 2.0], [14400.0, 4.0], [14500.0, 4.0], [14600.0, 5.0], [14900.0, 3.0], [15000.0, 3.0], [15200.0, 3.0], [15300.0, 1.0], [15700.0, 1.0], [15400.0, 1.0], [15500.0, 1.0], [16200.0, 1.0], [16300.0, 1.0], [17100.0, 1.0], [17500.0, 1.0], [17900.0, 1.0], [17700.0, 1.0], [18400.0, 1.0], [19100.0, 1.0], [18500.0, 1.0], [19400.0, 1.0], [19600.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 605.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 51609.0, "series": [{"data": [[0.0, 51609.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 786.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 605.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.207861425716196, "minX": 1.72911798E12, "maxY": 125.59225512528502, "series": [{"data": [[1.72911822E12, 9.127454242928447], [1.72911852E12, 8.457553475935832], [1.72911876E12, 9.293132328308207], [1.72911816E12, 11.353871499176247], [1.72911846E12, 8.207861425716196], [1.72911882E12, 9.626949883836733], [1.7291181E12, 9.692462311557788], [1.7291184E12, 9.526824391869399], [1.72911888E12, 9.367037411526798], [1.72911804E12, 11.722333333333323], [1.72911834E12, 13.968788249693967], [1.72911894E12, 8.841479524438594], [1.72911798E12, 125.59225512528502], [1.72911864E12, 8.589470176607785], [1.72911828E12, 8.426793557833118], [1.72911858E12, 8.79015630196208], [1.729119E12, 8.463965884861421], [1.7291187E12, 8.600000000000009]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.729119E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 146.84629027490396, "minX": 1.0, "maxY": 7322.0, "series": [{"data": [[2.0, 166.8110599078341], [3.0, 174.63855421686736], [4.0, 159.34374999999997], [5.0, 161.02265861027166], [6.0, 160.55929824561392], [7.0, 146.84629027490396], [8.0, 150.62671883733958], [9.0, 159.75201254573892], [10.0, 169.75301764159718], [11.0, 180.68894493484618], [12.0, 191.90232558139493], [13.0, 198.7541589648798], [14.0, 239.2445859872611], [15.0, 241.3613707165111], [16.0, 232.3766730401529], [17.0, 258.986956521739], [18.0, 273.9017857142858], [19.0, 278.5087719298245], [20.0, 300.75428571428574], [21.0, 315.2108843537417], [22.0, 469.983870967742], [23.0, 659.4356435643565], [24.0, 346.19999999999993], [25.0, 421.83950617283944], [26.0, 639.7083333333331], [27.0, 1042.1929824561407], [28.0, 646.3793103448276], [29.0, 919.454545454546], [30.0, 338.7619047619048], [31.0, 916.7450980392156], [33.0, 1209.8478260869565], [32.0, 586.8085106382978], [35.0, 993.5161290322582], [34.0, 1701.5121951219517], [37.0, 668.3793103448276], [36.0, 811.1250000000001], [39.0, 1139.047619047619], [38.0, 352.2045454545455], [41.0, 1012.7142857142858], [40.0, 407.94444444444446], [43.0, 3098.8181818181815], [42.0, 413.76190476190476], [44.0, 2227.2307692307686], [45.0, 1742.6666666666667], [46.0, 382.2631578947369], [47.0, 385.4117647058824], [49.0, 400.00000000000006], [48.0, 1389.8461538461538], [51.0, 301.57142857142856], [50.0, 1349.4444444444443], [53.0, 446.6363636363636], [52.0, 835.0588235294117], [55.0, 6309.545454545456], [54.0, 4036.636363636364], [57.0, 1695.0], [56.0, 1384.4], [58.0, 1173.0833333333335], [59.0, 481.30769230769226], [61.0, 3944.8749999999995], [60.0, 3042.0], [63.0, 395.55555555555554], [62.0, 604.0], [67.0, 3546.0909090909095], [66.0, 4665.476190476191], [65.0, 2657.157894736841], [64.0, 2430.461538461538], [71.0, 1054.9230769230774], [70.0, 2822.5], [69.0, 3767.8750000000005], [68.0, 3541.571428571429], [75.0, 2321.0], [74.0, 284.77777777777777], [73.0, 2054.9999999999995], [72.0, 2686.75], [78.0, 279.75], [77.0, 297.4], [76.0, 3010.0000000000005], [79.0, 514.5], [82.0, 234.57142857142858], [81.0, 1453.8749999999998], [80.0, 2270.0], [83.0, 607.8333333333333], [87.0, 3016.428571428571], [86.0, 3037.4], [85.0, 4269.777777777777], [84.0, 3011.133333333333], [91.0, 893.75], [90.0, 3949.5], [89.0, 5936.333333333333], [88.0, 2244.0], [95.0, 2475.714285714286], [94.0, 3280.8], [92.0, 4413.0], [93.0, 7104.250000000001], [99.0, 383.5], [98.0, 3586.4285714285716], [97.0, 7322.0], [96.0, 378.16666666666663], [103.0, 1878.0], [102.0, 3762.153846153846], [101.0, 2221.571428571428], [100.0, 3216.000000000001], [107.0, 2392.916666666667], [106.0, 960.0909090909092], [105.0, 694.3333333333334], [104.0, 3144.6249999999995], [111.0, 346.8], [109.0, 4121.416666666667], [108.0, 2531.714285714286], [110.0, 4540.0], [115.0, 312.5714285714286], [114.0, 325.55555555555554], [113.0, 1904.2], [112.0, 2411.5], [119.0, 374.25], [118.0, 3485.0], [117.0, 3930.5714285714284], [116.0, 1444.5714285714287], [123.0, 327.2857142857143], [122.0, 1977.5], [121.0, 3210.5], [120.0, 3647.7500000000005], [127.0, 3712.2999999999997], [126.0, 1224.8333333333335], [125.0, 275.0], [124.0, 2840.125], [135.0, 259.0], [134.0, 315.0], [133.0, 1621.0], [132.0, 1615.8], [131.0, 2705.714285714286], [129.0, 2225.8], [128.0, 3365.1333333333337], [130.0, 264.8], [143.0, 4110.0], [142.0, 383.0], [141.0, 252.33333333333334], [140.0, 4096.0], [139.0, 262.5], [138.0, 3644.1666666666665], [136.0, 2498.25], [137.0, 201.0], [151.0, 317.2], [149.0, 301.6666666666667], [147.0, 346.4285714285714], [145.0, 5020.5], [144.0, 3375.0], [146.0, 469.49999999999994], [148.0, 4187.2], [150.0, 2290.0], [159.0, 6300.333333333334], [158.0, 4488.666666666666], [156.0, 423.5], [155.0, 335.0], [154.0, 356.0], [152.0, 3229.142857142857], [153.0, 4998.285714285714], [157.0, 305.0], [167.0, 1918.0], [166.0, 338.3333333333333], [164.0, 930.6666666666666], [162.0, 326.5], [161.0, 520.0], [160.0, 1784.75], [165.0, 238.0], [163.0, 237.0], [175.0, 3156.25], [174.0, 2276.285714285714], [173.0, 3696.5], [172.0, 2257.1666666666665], [171.0, 4195.444444444444], [170.0, 1762.6666666666667], [169.0, 3629.6250000000005], [168.0, 1147.1666666666667], [183.0, 2417.333333333333], [182.0, 2390.333333333333], [181.0, 397.5], [180.0, 592.5555555555555], [179.0, 3460.625], [178.0, 596.1], [177.0, 4481.5], [176.0, 790.4545454545455], [189.0, 1064.25], [188.0, 2943.25], [187.0, 1936.2857142857142], [186.0, 2701.4], [185.0, 1798.6923076923076], [184.0, 3375.125], [191.0, 2681.625], [190.0, 2486.833333333333], [199.0, 4241.0], [198.0, 443.0], [197.0, 402.0], [196.0, 4813.666666666666], [195.0, 550.3333333333334], [194.0, 366.40000000000003], [193.0, 2022.142857142857], [192.0, 536.8], [207.0, 2372.166666666667], [206.0, 3167.5], [205.0, 1137.4], [204.0, 395.7142857142857], [203.0, 367.71428571428567], [200.0, 352.0], [202.0, 428.375], [201.0, 364.5], [215.0, 2011.8181818181815], [214.0, 1719.7500000000002], [213.0, 2534.9047619047624], [212.0, 2167.0], [211.0, 1456.0], [210.0, 1004.8], [209.0, 2332.444444444445], [208.0, 4477.333333333333], [216.0, 3080.066666666666], [221.0, 1988.6799999999994], [220.0, 2069.0], [219.0, 2423.521739130434], [223.0, 2999.1874999999995], [222.0, 3644.5], [218.0, 2526.3125000000005], [217.0, 2221.916666666666], [226.0, 2236.4999999999995], [225.0, 2967.75], [224.0, 2941.0000000000005], [231.0, 2289.5], [230.0, 2869.1], [229.0, 3852.388888888889], [228.0, 3085.117647058823], [227.0, 3257.4761904761904], [236.0, 2141.904761904762], [235.0, 2429.6428571428573], [234.0, 3108.2631578947367], [238.0, 2804.3333333333335], [237.0, 2086.4545454545455], [233.0, 2698.222222222222], [232.0, 3007.25], [239.0, 2661.888888888889], [241.0, 2626.0], [242.0, 1300.0], [246.0, 3128.230769230769], [245.0, 4279.416666666667], [244.0, 1869.1250000000002], [243.0, 2429.5], [240.0, 2163.166666666667], [247.0, 3342.7142857142862], [249.0, 1966.7142857142858], [248.0, 2066.75], [255.0, 1335.3333333333335], [254.0, 1897.0], [253.0, 933.2500000000001], [252.0, 1900.6666666666665], [251.0, 865.6666666666667], [250.0, 793.7142857142858], [270.0, 1885.0], [256.0, 2746.0], [257.0, 908.5000000000001], [259.0, 583.8333333333333], [258.0, 3081.5], [263.0, 1521.0], [262.0, 1697.75], [261.0, 539.2727272727273], [260.0, 722.5], [271.0, 1838.6], [269.0, 1888.5], [268.0, 1284.6666666666665], [267.0, 2154.0], [266.0, 1862.5], [265.0, 1873.0], [264.0, 1055.75], [286.0, 250.4], [273.0, 1492.3333333333335], [272.0, 1178.75], [279.0, 378.25], [277.0, 312.5], [276.0, 276.0], [287.0, 330.8], [285.0, 330.0], [284.0, 372.8], [275.0, 248.66666666666666], [274.0, 228.0], [283.0, 363.0], [282.0, 289.0], [281.0, 288.5], [280.0, 254.0], [302.0, 501.0], [303.0, 312.0], [301.0, 503.0], [300.0, 316.6666666666667], [299.0, 525.0], [298.0, 282.6666666666667], [297.0, 333.0], [296.0, 329.0], [295.0, 379.5], [289.0, 330.0], [288.0, 331.5], [291.0, 353.0], [290.0, 259.0], [294.0, 297.0], [293.0, 341.3333333333333], [292.0, 440.5], [317.0, 269.0], [316.0, 260.3333333333333], [307.0, 298.0], [306.0, 252.83333333333334], [305.0, 384.0], [304.0, 341.0], [315.0, 217.66666666666666], [314.0, 269.125], [313.0, 270.5], [312.0, 238.4], [311.0, 259.5], [310.0, 311.85714285714283], [309.0, 292.5], [308.0, 364.25], [1.0, 189.1100917431193]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[15.342849056603791, 251.51566037735964]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 317.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5979.75, "minX": 1.72911798E12, "maxY": 2296470.816666667, "series": [{"data": [[1.72911822E12, 2111643.45], [1.72911852E12, 2102526.466666667], [1.72911876E12, 2097574.6666666665], [1.72911816E12, 2132708.466666667], [1.72911846E12, 2109552.9833333334], [1.72911882E12, 2117264.15], [1.7291181E12, 2097560.8833333333], [1.7291184E12, 2108849.5], [1.72911888E12, 2084947.3666666667], [1.72911804E12, 2108057.8], [1.72911834E12, 2296470.816666667], [1.72911894E12, 2127818.4833333334], [1.72911798E12, 1850838.25], [1.72911864E12, 2108759.7], [1.72911828E12, 1919810.9666666666], [1.72911858E12, 2112959.4], [1.729119E12, 1647866.6833333333], [1.7291187E12, 2108103.1666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72911822E12, 7662.75], [1.72911852E12, 7629.6], [1.72911876E12, 7611.75], [1.72911816E12, 7739.25], [1.72911846E12, 7655.1], [1.72911882E12, 7683.15], [1.7291181E12, 7611.75], [1.7291184E12, 7652.55], [1.72911888E12, 7565.85], [1.72911804E12, 7650.0], [1.72911834E12, 8333.4], [1.72911894E12, 7721.4], [1.72911798E12, 6716.7], [1.72911864E12, 7652.55], [1.72911828E12, 6966.6], [1.72911858E12, 7667.85], [1.729119E12, 5979.75], [1.7291187E12, 7650.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.729119E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 152.28571428571433, "minX": 1.72911798E12, "maxY": 1860.3078967350093, "series": [{"data": [[1.72911822E12, 167.40499168053256], [1.72911852E12, 157.31885026737913], [1.72911876E12, 153.0753768844219], [1.72911816E12, 194.67182866556814], [1.72911846E12, 153.49533644237135], [1.72911882E12, 157.49286425489512], [1.7291181E12, 174.82378559464044], [1.7291184E12, 164.50383205598175], [1.72911888E12, 155.43208628244034], [1.72911804E12, 219.8856666666662], [1.72911834E12, 201.85495716034274], [1.72911894E12, 156.8860634081902], [1.72911798E12, 1860.3078967350093], [1.72911864E12, 155.36154615128274], [1.72911828E12, 156.8147877013177], [1.72911858E12, 158.65547056867268], [1.729119E12, 152.28571428571433], [1.7291187E12, 157.84800000000038]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.729119E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 130.7782515991471, "minX": 1.72911798E12, "maxY": 1480.844722854976, "series": [{"data": [[1.72911822E12, 143.32545757071566], [1.72911852E12, 135.52172459893086], [1.72911876E12, 132.8998324958129], [1.72911816E12, 167.82537067545297], [1.72911846E12, 133.04863424383774], [1.72911882E12, 135.5200796548288], [1.7291181E12, 151.47102177554447], [1.7291184E12, 142.06497834055278], [1.72911888E12, 133.19009100101133], [1.72911804E12, 187.59733333333278], [1.72911834E12, 164.884638922889], [1.72911894E12, 133.68791281373842], [1.72911798E12, 1480.844722854976], [1.72911864E12, 135.40186604465174], [1.72911828E12, 136.39275256222567], [1.72911858E12, 137.0462254738939], [1.729119E12, 130.7782515991471], [1.7291187E12, 136.70866666666683]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.729119E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 86.52110874200449, "minX": 1.72911798E12, "maxY": 1267.6025056947592, "series": [{"data": [[1.72911822E12, 95.31647254575698], [1.72911852E12, 90.26537433155077], [1.72911876E12, 88.34103852596309], [1.72911816E12, 116.64744645799023], [1.72911846E12, 88.6675549633578], [1.72911882E12, 90.2708264188515], [1.7291181E12, 101.28777219430465], [1.7291184E12, 95.79206931023002], [1.72911888E12, 88.50724637681184], [1.72911804E12, 128.71533333333318], [1.72911834E12, 112.29039167686672], [1.72911894E12, 88.77443857331578], [1.72911798E12, 1267.6025056947592], [1.72911864E12, 90.26024658447182], [1.72911828E12, 90.70863836017561], [1.72911858E12, 91.0801463252413], [1.729119E12, 86.52110874200449], [1.7291187E12, 91.53766666666655]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.729119E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.72911798E12, "maxY": 19642.0, "series": [{"data": [[1.72911822E12, 1215.0], [1.72911852E12, 1158.0], [1.72911876E12, 1170.0], [1.72911816E12, 2249.0], [1.72911846E12, 2013.0], [1.72911882E12, 1156.0], [1.7291181E12, 1338.0], [1.7291184E12, 1180.0], [1.72911888E12, 2280.0], [1.72911804E12, 1707.0], [1.72911834E12, 2330.0], [1.72911894E12, 1239.0], [1.72911798E12, 19642.0], [1.72911864E12, 1174.0], [1.72911828E12, 749.0], [1.72911858E12, 1246.0], [1.729119E12, 1225.0], [1.7291187E12, 1495.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72911822E12, 227.0], [1.72911852E12, 180.0], [1.72911876E12, 168.0], [1.72911816E12, 266.0], [1.72911846E12, 165.0], [1.72911882E12, 179.0], [1.7291181E12, 235.0], [1.7291184E12, 181.80000000000018], [1.72911888E12, 172.0], [1.72911804E12, 323.0], [1.72911834E12, 212.0999999999999], [1.72911894E12, 177.0], [1.72911798E12, 7088.0], [1.72911864E12, 173.0], [1.72911828E12, 174.0], [1.72911858E12, 182.0], [1.729119E12, 163.4000000000001], [1.7291187E12, 175.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72911822E12, 425.40000000000055], [1.72911852E12, 345.07000000000016], [1.72911876E12, 309.3999999999987], [1.72911816E12, 1188.0], [1.72911846E12, 295.9099999999994], [1.72911882E12, 403.8600000000001], [1.7291181E12, 559.4199999999996], [1.7291184E12, 510.0], [1.72911888E12, 462.6400000000003], [1.72911804E12, 1169.9899999999998], [1.72911834E12, 1454.0299999999993], [1.72911894E12, 472.1300000000001], [1.72911798E12, 14851.45000000001], [1.72911864E12, 312.96000000000004], [1.72911828E12, 412.6800000000003], [1.72911858E12, 409.3600000000024], [1.729119E12, 410.47999999999956], [1.7291187E12, 418.97999999999956]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72911822E12, 297.6999999999998], [1.72911852E12, 204.3499999999999], [1.72911876E12, 190.0], [1.72911816E12, 419.39999999999964], [1.72911846E12, 181.0], [1.72911882E12, 224.29999999999973], [1.7291181E12, 299.0], [1.7291184E12, 243.0], [1.72911888E12, 198.0], [1.72911804E12, 423.0], [1.72911834E12, 409.3999999999978], [1.72911894E12, 213.09999999999945], [1.72911798E12, 11066.0], [1.72911864E12, 210.0], [1.72911828E12, 203.0], [1.72911858E12, 220.0], [1.729119E12, 185.69999999999982], [1.7291187E12, 219.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72911822E12, 125.0], [1.72911852E12, 125.0], [1.72911876E12, 126.0], [1.72911816E12, 120.0], [1.72911846E12, 125.0], [1.72911882E12, 124.0], [1.7291181E12, 126.0], [1.7291184E12, 125.0], [1.72911888E12, 125.0], [1.72911804E12, 130.0], [1.72911834E12, 125.0], [1.72911894E12, 126.0], [1.72911798E12, 127.0], [1.72911864E12, 123.0], [1.72911828E12, 125.0], [1.72911858E12, 124.0], [1.729119E12, 127.0], [1.7291187E12, 125.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72911822E12, 147.0], [1.72911852E12, 146.0], [1.72911876E12, 145.0], [1.72911816E12, 150.0], [1.72911846E12, 146.0], [1.72911882E12, 145.0], [1.7291181E12, 151.0], [1.7291184E12, 145.0], [1.72911888E12, 145.0], [1.72911804E12, 175.0], [1.72911834E12, 149.0], [1.72911894E12, 145.0], [1.72911798E12, 346.0], [1.72911864E12, 145.0], [1.72911828E12, 146.0], [1.72911858E12, 147.0], [1.729119E12, 144.0], [1.7291187E12, 144.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.729119E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 140.0, "minX": 1.0, "maxY": 9314.5, "series": [{"data": [[4.0, 140.0], [5.0, 151.0], [7.0, 145.5], [10.0, 150.0], [12.0, 152.0], [13.0, 163.0], [15.0, 190.0], [16.0, 142.0], [18.0, 143.0], [19.0, 144.0], [21.0, 144.0], [22.0, 182.5], [23.0, 141.0], [25.0, 145.0], [26.0, 380.5], [27.0, 146.0], [28.0, 214.0], [29.0, 1230.0], [30.0, 143.0], [31.0, 159.0], [32.0, 168.0], [33.0, 156.0], [35.0, 146.0], [34.0, 211.5], [36.0, 146.0], [37.0, 148.0], [38.0, 147.0], [39.0, 151.0], [41.0, 152.0], [40.0, 149.0], [42.0, 147.0], [43.0, 145.0], [44.0, 145.0], [45.0, 146.0], [46.0, 151.0], [47.0, 147.0], [48.0, 146.0], [49.0, 145.0], [51.0, 146.0], [50.0, 145.0], [52.0, 147.0], [53.0, 147.0], [54.0, 147.0], [55.0, 148.0], [56.0, 145.0], [57.0, 150.0], [59.0, 156.0], [58.0, 149.0], [60.0, 147.0], [61.0, 150.0], [63.0, 158.0], [62.0, 156.0], [65.0, 151.0], [66.0, 153.0], [67.0, 147.0], [64.0, 141.0], [68.0, 291.0], [70.0, 198.0], [69.0, 293.0], [71.0, 146.0], [73.0, 158.0], [72.0, 166.0], [75.0, 145.0], [76.0, 271.0], [78.0, 240.0], [77.0, 181.5], [79.0, 160.0], [83.0, 177.0], [82.0, 164.5], [87.0, 345.0], [86.0, 250.0], [85.0, 566.0], [84.0, 240.5], [90.0, 194.0], [92.0, 254.0], [101.0, 219.0], [105.0, 265.0], [120.0, 197.0], [130.0, 996.5], [1.0, 9314.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 130.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 125.0, "minX": 1.0, "maxY": 5354.0, "series": [{"data": [[4.0, 126.0], [5.0, 133.5], [7.0, 128.0], [10.0, 132.0], [12.0, 132.5], [13.0, 138.0], [15.0, 141.5], [16.0, 126.0], [18.0, 126.0], [19.0, 128.0], [21.0, 128.0], [22.0, 151.0], [23.0, 125.0], [25.0, 128.0], [26.0, 202.0], [27.0, 128.0], [28.0, 157.5], [29.0, 344.0], [30.0, 126.0], [31.0, 136.0], [32.0, 147.0], [33.0, 136.0], [35.0, 129.0], [34.0, 180.0], [36.0, 129.0], [37.0, 131.0], [38.0, 129.0], [39.0, 133.0], [41.0, 133.0], [40.0, 132.0], [42.0, 130.0], [43.0, 129.0], [44.0, 128.0], [45.0, 129.0], [46.0, 133.0], [47.0, 130.0], [48.0, 129.0], [49.0, 128.0], [51.0, 129.0], [50.0, 128.0], [52.0, 130.0], [53.0, 130.0], [54.0, 130.0], [55.0, 131.0], [56.0, 128.0], [57.0, 133.0], [59.0, 138.0], [58.0, 131.0], [60.0, 130.0], [61.0, 133.0], [63.0, 138.0], [62.0, 136.5], [65.0, 133.0], [66.0, 135.0], [67.0, 131.0], [64.0, 125.0], [68.0, 212.0], [70.0, 165.5], [69.0, 228.5], [71.0, 128.0], [73.0, 140.0], [72.0, 144.5], [75.0, 128.0], [76.0, 229.5], [78.0, 211.5], [77.0, 153.5], [79.0, 137.0], [83.0, 162.0], [82.0, 146.0], [87.0, 302.0], [86.0, 206.0], [85.0, 433.0], [84.0, 175.5], [90.0, 152.0], [92.0, 185.0], [101.0, 205.0], [105.0, 237.0], [120.0, 160.0], [130.0, 340.0], [1.0, 5354.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 130.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 38.916666666666664, "minX": 1.72911798E12, "maxY": 54.35, "series": [{"data": [[1.72911822E12, 50.06666666666667], [1.72911852E12, 49.916666666666664], [1.72911876E12, 49.78333333333333], [1.72911816E12, 50.1], [1.72911846E12, 50.0], [1.72911882E12, 50.083333333333336], [1.7291181E12, 50.15], [1.7291184E12, 50.0], [1.72911888E12, 49.61666666666667], [1.72911804E12, 50.03333333333333], [1.72911834E12, 54.35], [1.72911894E12, 50.45], [1.72911798E12, 44.083333333333336], [1.72911864E12, 50.0], [1.72911828E12, 45.68333333333333], [1.72911858E12, 50.1], [1.729119E12, 38.916666666666664], [1.7291187E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.729119E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 39.083333333333336, "minX": 1.72911798E12, "maxY": 54.46666666666667, "series": [{"data": [[1.72911822E12, 50.083333333333336], [1.72911852E12, 49.86666666666667], [1.72911876E12, 49.75], [1.72911816E12, 50.583333333333336], [1.72911846E12, 50.03333333333333], [1.72911882E12, 50.21666666666667], [1.7291181E12, 49.75], [1.7291184E12, 50.016666666666666], [1.72911888E12, 49.45], [1.72911804E12, 50.0], [1.72911834E12, 54.46666666666667], [1.72911894E12, 50.46666666666667], [1.72911798E12, 43.9], [1.72911864E12, 50.016666666666666], [1.72911828E12, 45.53333333333333], [1.72911858E12, 50.11666666666667], [1.729119E12, 39.083333333333336], [1.7291187E12, 50.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.729119E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 39.083333333333336, "minX": 1.72911798E12, "maxY": 54.46666666666667, "series": [{"data": [[1.72911822E12, 50.083333333333336], [1.72911852E12, 49.86666666666667], [1.72911876E12, 49.75], [1.72911816E12, 50.583333333333336], [1.72911846E12, 50.03333333333333], [1.72911882E12, 50.21666666666667], [1.7291181E12, 49.75], [1.7291184E12, 50.016666666666666], [1.72911888E12, 49.45], [1.72911804E12, 50.0], [1.72911834E12, 54.46666666666667], [1.72911894E12, 50.46666666666667], [1.72911798E12, 43.9], [1.72911864E12, 50.016666666666666], [1.72911828E12, 45.53333333333333], [1.72911858E12, 50.11666666666667], [1.729119E12, 39.083333333333336], [1.7291187E12, 50.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.729119E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 39.083333333333336, "minX": 1.72911798E12, "maxY": 54.46666666666667, "series": [{"data": [[1.72911822E12, 50.083333333333336], [1.72911852E12, 49.86666666666667], [1.72911876E12, 49.75], [1.72911816E12, 50.583333333333336], [1.72911846E12, 50.03333333333333], [1.72911882E12, 50.21666666666667], [1.7291181E12, 49.75], [1.7291184E12, 50.016666666666666], [1.72911888E12, 49.45], [1.72911804E12, 50.0], [1.72911834E12, 54.46666666666667], [1.72911894E12, 50.46666666666667], [1.72911798E12, 43.9], [1.72911864E12, 50.016666666666666], [1.72911828E12, 45.53333333333333], [1.72911858E12, 50.11666666666667], [1.729119E12, 39.083333333333336], [1.7291187E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.729119E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

