/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 115.0, "minX": 0.0, "maxY": 139227.0, "series": [{"data": [[0.0, 115.0], [0.1, 126.0], [0.2, 127.0], [0.3, 128.0], [0.4, 129.0], [0.5, 129.0], [0.6, 130.0], [0.7, 130.0], [0.8, 130.0], [0.9, 131.0], [1.0, 131.0], [1.1, 131.0], [1.2, 131.0], [1.3, 131.0], [1.4, 132.0], [1.5, 132.0], [1.6, 132.0], [1.7, 132.0], [1.8, 132.0], [1.9, 132.0], [2.0, 133.0], [2.1, 133.0], [2.2, 133.0], [2.3, 133.0], [2.4, 133.0], [2.5, 133.0], [2.6, 133.0], [2.7, 133.0], [2.8, 133.0], [2.9, 134.0], [3.0, 134.0], [3.1, 134.0], [3.2, 134.0], [3.3, 134.0], [3.4, 134.0], [3.5, 134.0], [3.6, 134.0], [3.7, 134.0], [3.8, 134.0], [3.9, 134.0], [4.0, 134.0], [4.1, 135.0], [4.2, 135.0], [4.3, 135.0], [4.4, 135.0], [4.5, 135.0], [4.6, 135.0], [4.7, 135.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 135.0], [5.2, 135.0], [5.3, 135.0], [5.4, 135.0], [5.5, 135.0], [5.6, 135.0], [5.7, 135.0], [5.8, 136.0], [5.9, 136.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 136.0], [6.6, 136.0], [6.7, 136.0], [6.8, 136.0], [6.9, 136.0], [7.0, 136.0], [7.1, 136.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 137.0], [7.8, 137.0], [7.9, 137.0], [8.0, 137.0], [8.1, 137.0], [8.2, 137.0], [8.3, 137.0], [8.4, 137.0], [8.5, 137.0], [8.6, 137.0], [8.7, 137.0], [8.8, 137.0], [8.9, 137.0], [9.0, 137.0], [9.1, 137.0], [9.2, 137.0], [9.3, 137.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 137.0], [9.8, 137.0], [9.9, 137.0], [10.0, 138.0], [10.1, 138.0], [10.2, 138.0], [10.3, 138.0], [10.4, 138.0], [10.5, 138.0], [10.6, 138.0], [10.7, 138.0], [10.8, 138.0], [10.9, 138.0], [11.0, 138.0], [11.1, 138.0], [11.2, 138.0], [11.3, 138.0], [11.4, 138.0], [11.5, 138.0], [11.6, 138.0], [11.7, 138.0], [11.8, 138.0], [11.9, 138.0], [12.0, 138.0], [12.1, 138.0], [12.2, 138.0], [12.3, 138.0], [12.4, 138.0], [12.5, 138.0], [12.6, 138.0], [12.7, 139.0], [12.8, 139.0], [12.9, 139.0], [13.0, 139.0], [13.1, 139.0], [13.2, 139.0], [13.3, 139.0], [13.4, 139.0], [13.5, 139.0], [13.6, 139.0], [13.7, 139.0], [13.8, 139.0], [13.9, 139.0], [14.0, 139.0], [14.1, 139.0], [14.2, 139.0], [14.3, 139.0], [14.4, 139.0], [14.5, 139.0], [14.6, 139.0], [14.7, 139.0], [14.8, 139.0], [14.9, 139.0], [15.0, 139.0], [15.1, 139.0], [15.2, 139.0], [15.3, 139.0], [15.4, 139.0], [15.5, 139.0], [15.6, 139.0], [15.7, 140.0], [15.8, 140.0], [15.9, 140.0], [16.0, 140.0], [16.1, 140.0], [16.2, 140.0], [16.3, 140.0], [16.4, 140.0], [16.5, 140.0], [16.6, 140.0], [16.7, 140.0], [16.8, 140.0], [16.9, 140.0], [17.0, 140.0], [17.1, 140.0], [17.2, 140.0], [17.3, 140.0], [17.4, 140.0], [17.5, 140.0], [17.6, 140.0], [17.7, 140.0], [17.8, 140.0], [17.9, 140.0], [18.0, 140.0], [18.1, 140.0], [18.2, 140.0], [18.3, 140.0], [18.4, 140.0], [18.5, 140.0], [18.6, 140.0], [18.7, 140.0], [18.8, 140.0], [18.9, 140.0], [19.0, 141.0], [19.1, 141.0], [19.2, 141.0], [19.3, 141.0], [19.4, 141.0], [19.5, 141.0], [19.6, 141.0], [19.7, 141.0], [19.8, 141.0], [19.9, 141.0], [20.0, 141.0], [20.1, 141.0], [20.2, 141.0], [20.3, 141.0], [20.4, 141.0], [20.5, 141.0], [20.6, 141.0], [20.7, 141.0], [20.8, 141.0], [20.9, 141.0], [21.0, 141.0], [21.1, 141.0], [21.2, 141.0], [21.3, 141.0], [21.4, 141.0], [21.5, 141.0], [21.6, 141.0], [21.7, 141.0], [21.8, 141.0], [21.9, 141.0], [22.0, 141.0], [22.1, 141.0], [22.2, 141.0], [22.3, 141.0], [22.4, 142.0], [22.5, 142.0], [22.6, 142.0], [22.7, 142.0], [22.8, 142.0], [22.9, 142.0], [23.0, 142.0], [23.1, 142.0], [23.2, 142.0], [23.3, 142.0], [23.4, 142.0], [23.5, 142.0], [23.6, 142.0], [23.7, 142.0], [23.8, 142.0], [23.9, 142.0], [24.0, 142.0], [24.1, 142.0], [24.2, 142.0], [24.3, 142.0], [24.4, 142.0], [24.5, 142.0], [24.6, 142.0], [24.7, 142.0], [24.8, 142.0], [24.9, 142.0], [25.0, 142.0], [25.1, 142.0], [25.2, 142.0], [25.3, 142.0], [25.4, 142.0], [25.5, 142.0], [25.6, 142.0], [25.7, 142.0], [25.8, 143.0], [25.9, 143.0], [26.0, 143.0], [26.1, 143.0], [26.2, 143.0], [26.3, 143.0], [26.4, 143.0], [26.5, 143.0], [26.6, 143.0], [26.7, 143.0], [26.8, 143.0], [26.9, 143.0], [27.0, 143.0], [27.1, 143.0], [27.2, 143.0], [27.3, 143.0], [27.4, 143.0], [27.5, 143.0], [27.6, 143.0], [27.7, 143.0], [27.8, 143.0], [27.9, 143.0], [28.0, 143.0], [28.1, 143.0], [28.2, 143.0], [28.3, 143.0], [28.4, 143.0], [28.5, 143.0], [28.6, 143.0], [28.7, 143.0], [28.8, 143.0], [28.9, 143.0], [29.0, 143.0], [29.1, 143.0], [29.2, 143.0], [29.3, 143.0], [29.4, 144.0], [29.5, 144.0], [29.6, 144.0], [29.7, 144.0], [29.8, 144.0], [29.9, 144.0], [30.0, 144.0], [30.1, 144.0], [30.2, 144.0], [30.3, 144.0], [30.4, 144.0], [30.5, 144.0], [30.6, 144.0], [30.7, 144.0], [30.8, 144.0], [30.9, 144.0], [31.0, 144.0], [31.1, 144.0], [31.2, 144.0], [31.3, 144.0], [31.4, 144.0], [31.5, 144.0], [31.6, 144.0], [31.7, 144.0], [31.8, 144.0], [31.9, 144.0], [32.0, 144.0], [32.1, 144.0], [32.2, 144.0], [32.3, 144.0], [32.4, 144.0], [32.5, 144.0], [32.6, 144.0], [32.7, 144.0], [32.8, 145.0], [32.9, 145.0], [33.0, 145.0], [33.1, 145.0], [33.2, 145.0], [33.3, 145.0], [33.4, 145.0], [33.5, 145.0], [33.6, 145.0], [33.7, 145.0], [33.8, 145.0], [33.9, 145.0], [34.0, 145.0], [34.1, 145.0], [34.2, 145.0], [34.3, 145.0], [34.4, 145.0], [34.5, 145.0], [34.6, 145.0], [34.7, 145.0], [34.8, 145.0], [34.9, 145.0], [35.0, 145.0], [35.1, 145.0], [35.2, 145.0], [35.3, 145.0], [35.4, 145.0], [35.5, 145.0], [35.6, 145.0], [35.7, 145.0], [35.8, 145.0], [35.9, 145.0], [36.0, 146.0], [36.1, 146.0], [36.2, 146.0], [36.3, 146.0], [36.4, 146.0], [36.5, 146.0], [36.6, 146.0], [36.7, 146.0], [36.8, 146.0], [36.9, 146.0], [37.0, 146.0], [37.1, 146.0], [37.2, 146.0], [37.3, 146.0], [37.4, 146.0], [37.5, 146.0], [37.6, 146.0], [37.7, 146.0], [37.8, 146.0], [37.9, 146.0], [38.0, 146.0], [38.1, 146.0], [38.2, 146.0], [38.3, 146.0], [38.4, 146.0], [38.5, 146.0], [38.6, 146.0], [38.7, 146.0], [38.8, 146.0], [38.9, 147.0], [39.0, 147.0], [39.1, 147.0], [39.2, 147.0], [39.3, 147.0], [39.4, 147.0], [39.5, 147.0], [39.6, 147.0], [39.7, 147.0], [39.8, 147.0], [39.9, 147.0], [40.0, 147.0], [40.1, 147.0], [40.2, 147.0], [40.3, 147.0], [40.4, 147.0], [40.5, 147.0], [40.6, 147.0], [40.7, 147.0], [40.8, 147.0], [40.9, 147.0], [41.0, 147.0], [41.1, 147.0], [41.2, 147.0], [41.3, 147.0], [41.4, 147.0], [41.5, 147.0], [41.6, 147.0], [41.7, 147.0], [41.8, 148.0], [41.9, 148.0], [42.0, 148.0], [42.1, 148.0], [42.2, 148.0], [42.3, 148.0], [42.4, 148.0], [42.5, 148.0], [42.6, 148.0], [42.7, 148.0], [42.8, 148.0], [42.9, 148.0], [43.0, 148.0], [43.1, 148.0], [43.2, 148.0], [43.3, 148.0], [43.4, 148.0], [43.5, 148.0], [43.6, 148.0], [43.7, 148.0], [43.8, 148.0], [43.9, 148.0], [44.0, 148.0], [44.1, 148.0], [44.2, 148.0], [44.3, 149.0], [44.4, 149.0], [44.5, 149.0], [44.6, 149.0], [44.7, 149.0], [44.8, 149.0], [44.9, 149.0], [45.0, 149.0], [45.1, 149.0], [45.2, 149.0], [45.3, 149.0], [45.4, 149.0], [45.5, 149.0], [45.6, 149.0], [45.7, 149.0], [45.8, 149.0], [45.9, 149.0], [46.0, 149.0], [46.1, 149.0], [46.2, 149.0], [46.3, 149.0], [46.4, 149.0], [46.5, 149.0], [46.6, 149.0], [46.7, 150.0], [46.8, 150.0], [46.9, 150.0], [47.0, 150.0], [47.1, 150.0], [47.2, 150.0], [47.3, 150.0], [47.4, 150.0], [47.5, 150.0], [47.6, 150.0], [47.7, 150.0], [47.8, 150.0], [47.9, 150.0], [48.0, 150.0], [48.1, 150.0], [48.2, 150.0], [48.3, 150.0], [48.4, 150.0], [48.5, 150.0], [48.6, 150.0], [48.7, 151.0], [48.8, 151.0], [48.9, 151.0], [49.0, 151.0], [49.1, 151.0], [49.2, 151.0], [49.3, 151.0], [49.4, 151.0], [49.5, 151.0], [49.6, 151.0], [49.7, 151.0], [49.8, 151.0], [49.9, 151.0], [50.0, 151.0], [50.1, 151.0], [50.2, 151.0], [50.3, 151.0], [50.4, 151.0], [50.5, 151.0], [50.6, 151.0], [50.7, 152.0], [50.8, 152.0], [50.9, 152.0], [51.0, 152.0], [51.1, 152.0], [51.2, 152.0], [51.3, 152.0], [51.4, 152.0], [51.5, 152.0], [51.6, 152.0], [51.7, 152.0], [51.8, 152.0], [51.9, 152.0], [52.0, 152.0], [52.1, 152.0], [52.2, 152.0], [52.3, 152.0], [52.4, 153.0], [52.5, 153.0], [52.6, 153.0], [52.7, 153.0], [52.8, 153.0], [52.9, 153.0], [53.0, 153.0], [53.1, 153.0], [53.2, 153.0], [53.3, 153.0], [53.4, 153.0], [53.5, 153.0], [53.6, 153.0], [53.7, 153.0], [53.8, 153.0], [53.9, 153.0], [54.0, 154.0], [54.1, 154.0], [54.2, 154.0], [54.3, 154.0], [54.4, 154.0], [54.5, 154.0], [54.6, 154.0], [54.7, 154.0], [54.8, 154.0], [54.9, 154.0], [55.0, 154.0], [55.1, 154.0], [55.2, 154.0], [55.3, 155.0], [55.4, 155.0], [55.5, 155.0], [55.6, 155.0], [55.7, 155.0], [55.8, 155.0], [55.9, 155.0], [56.0, 155.0], [56.1, 155.0], [56.2, 155.0], [56.3, 155.0], [56.4, 155.0], [56.5, 155.0], [56.6, 156.0], [56.7, 156.0], [56.8, 156.0], [56.9, 156.0], [57.0, 156.0], [57.1, 156.0], [57.2, 156.0], [57.3, 156.0], [57.4, 156.0], [57.5, 156.0], [57.6, 156.0], [57.7, 156.0], [57.8, 156.0], [57.9, 157.0], [58.0, 157.0], [58.1, 157.0], [58.2, 157.0], [58.3, 157.0], [58.4, 157.0], [58.5, 157.0], [58.6, 157.0], [58.7, 157.0], [58.8, 157.0], [58.9, 158.0], [59.0, 158.0], [59.1, 158.0], [59.2, 158.0], [59.3, 158.0], [59.4, 158.0], [59.5, 158.0], [59.6, 158.0], [59.7, 158.0], [59.8, 158.0], [59.9, 159.0], [60.0, 159.0], [60.1, 159.0], [60.2, 159.0], [60.3, 159.0], [60.4, 159.0], [60.5, 159.0], [60.6, 159.0], [60.7, 159.0], [60.8, 160.0], [60.9, 160.0], [61.0, 160.0], [61.1, 160.0], [61.2, 160.0], [61.3, 160.0], [61.4, 160.0], [61.5, 160.0], [61.6, 161.0], [61.7, 161.0], [61.8, 161.0], [61.9, 161.0], [62.0, 161.0], [62.1, 161.0], [62.2, 161.0], [62.3, 161.0], [62.4, 162.0], [62.5, 162.0], [62.6, 162.0], [62.7, 162.0], [62.8, 162.0], [62.9, 162.0], [63.0, 162.0], [63.1, 163.0], [63.2, 163.0], [63.3, 163.0], [63.4, 163.0], [63.5, 163.0], [63.6, 163.0], [63.7, 163.0], [63.8, 164.0], [63.9, 164.0], [64.0, 164.0], [64.1, 164.0], [64.2, 164.0], [64.3, 164.0], [64.4, 165.0], [64.5, 165.0], [64.6, 165.0], [64.7, 165.0], [64.8, 165.0], [64.9, 165.0], [65.0, 165.0], [65.1, 166.0], [65.2, 166.0], [65.3, 166.0], [65.4, 166.0], [65.5, 166.0], [65.6, 167.0], [65.7, 167.0], [65.8, 167.0], [65.9, 167.0], [66.0, 167.0], [66.1, 167.0], [66.2, 168.0], [66.3, 168.0], [66.4, 168.0], [66.5, 168.0], [66.6, 168.0], [66.7, 169.0], [66.8, 169.0], [66.9, 169.0], [67.0, 169.0], [67.1, 169.0], [67.2, 170.0], [67.3, 170.0], [67.4, 170.0], [67.5, 170.0], [67.6, 171.0], [67.7, 171.0], [67.8, 171.0], [67.9, 171.0], [68.0, 172.0], [68.1, 172.0], [68.2, 172.0], [68.3, 172.0], [68.4, 173.0], [68.5, 173.0], [68.6, 173.0], [68.7, 173.0], [68.8, 174.0], [68.9, 174.0], [69.0, 174.0], [69.1, 174.0], [69.2, 175.0], [69.3, 175.0], [69.4, 175.0], [69.5, 176.0], [69.6, 176.0], [69.7, 176.0], [69.8, 176.0], [69.9, 177.0], [70.0, 177.0], [70.1, 177.0], [70.2, 178.0], [70.3, 178.0], [70.4, 178.0], [70.5, 179.0], [70.6, 179.0], [70.7, 179.0], [70.8, 180.0], [70.9, 180.0], [71.0, 180.0], [71.1, 181.0], [71.2, 181.0], [71.3, 182.0], [71.4, 182.0], [71.5, 182.0], [71.6, 183.0], [71.7, 183.0], [71.8, 184.0], [71.9, 184.0], [72.0, 184.0], [72.1, 185.0], [72.2, 185.0], [72.3, 186.0], [72.4, 186.0], [72.5, 187.0], [72.6, 187.0], [72.7, 188.0], [72.8, 188.0], [72.9, 189.0], [73.0, 189.0], [73.1, 190.0], [73.2, 191.0], [73.3, 192.0], [73.4, 192.0], [73.5, 193.0], [73.6, 193.0], [73.7, 194.0], [73.8, 195.0], [73.9, 196.0], [74.0, 196.0], [74.1, 197.0], [74.2, 198.0], [74.3, 199.0], [74.4, 200.0], [74.5, 201.0], [74.6, 201.0], [74.7, 202.0], [74.8, 203.0], [74.9, 204.0], [75.0, 205.0], [75.1, 206.0], [75.2, 207.0], [75.3, 208.0], [75.4, 209.0], [75.5, 210.0], [75.6, 211.0], [75.7, 213.0], [75.8, 214.0], [75.9, 216.0], [76.0, 217.0], [76.1, 218.0], [76.2, 220.0], [76.3, 221.0], [76.4, 223.0], [76.5, 224.0], [76.6, 226.0], [76.7, 228.0], [76.8, 230.0], [76.9, 232.0], [77.0, 234.0], [77.1, 236.0], [77.2, 238.0], [77.3, 240.0], [77.4, 242.0], [77.5, 245.0], [77.6, 247.0], [77.7, 249.0], [77.8, 252.0], [77.9, 255.0], [78.0, 258.0], [78.1, 261.0], [78.2, 264.0], [78.3, 267.0], [78.4, 271.0], [78.5, 275.0], [78.6, 279.0], [78.7, 283.0], [78.8, 287.0], [78.9, 291.0], [79.0, 295.0], [79.1, 299.0], [79.2, 304.0], [79.3, 309.0], [79.4, 315.0], [79.5, 321.0], [79.6, 329.0], [79.7, 339.0], [79.8, 348.0], [79.9, 357.0], [80.0, 369.0], [80.1, 380.0], [80.2, 386.0], [80.3, 391.0], [80.4, 395.0], [80.5, 397.0], [80.6, 400.0], [80.7, 402.0], [80.8, 404.0], [80.9, 406.0], [81.0, 409.0], [81.1, 411.0], [81.2, 413.0], [81.3, 416.0], [81.4, 418.0], [81.5, 420.0], [81.6, 422.0], [81.7, 424.0], [81.8, 426.0], [81.9, 428.0], [82.0, 430.0], [82.1, 432.0], [82.2, 433.0], [82.3, 435.0], [82.4, 436.0], [82.5, 437.0], [82.6, 439.0], [82.7, 440.0], [82.8, 441.0], [82.9, 442.0], [83.0, 443.0], [83.1, 444.0], [83.2, 445.0], [83.3, 447.0], [83.4, 448.0], [83.5, 449.0], [83.6, 450.0], [83.7, 451.0], [83.8, 452.0], [83.9, 453.0], [84.0, 454.0], [84.1, 455.0], [84.2, 456.0], [84.3, 457.0], [84.4, 458.0], [84.5, 460.0], [84.6, 461.0], [84.7, 462.0], [84.8, 463.0], [84.9, 464.0], [85.0, 465.0], [85.1, 466.0], [85.2, 466.0], [85.3, 467.0], [85.4, 468.0], [85.5, 469.0], [85.6, 470.0], [85.7, 471.0], [85.8, 472.0], [85.9, 473.0], [86.0, 474.0], [86.1, 475.0], [86.2, 475.0], [86.3, 476.0], [86.4, 477.0], [86.5, 478.0], [86.6, 479.0], [86.7, 480.0], [86.8, 481.0], [86.9, 482.0], [87.0, 483.0], [87.1, 484.0], [87.2, 485.0], [87.3, 486.0], [87.4, 487.0], [87.5, 488.0], [87.6, 489.0], [87.7, 491.0], [87.8, 492.0], [87.9, 494.0], [88.0, 495.0], [88.1, 497.0], [88.2, 499.0], [88.3, 502.0], [88.4, 504.0], [88.5, 507.0], [88.6, 510.0], [88.7, 514.0], [88.8, 519.0], [88.9, 524.0], [89.0, 531.0], [89.1, 541.0], [89.2, 552.0], [89.3, 563.0], [89.4, 575.0], [89.5, 589.0], [89.6, 608.0], [89.7, 623.0], [89.8, 646.0], [89.9, 666.0], [90.0, 685.0], [90.1, 703.0], [90.2, 714.0], [90.3, 721.0], [90.4, 731.0], [90.5, 740.0], [90.6, 747.0], [90.7, 753.0], [90.8, 762.0], [90.9, 770.0], [91.0, 780.0], [91.1, 790.0], [91.2, 807.0], [91.3, 826.0], [91.4, 841.0], [91.5, 853.0], [91.6, 867.0], [91.7, 880.0], [91.8, 912.0], [91.9, 948.0], [92.0, 1010.0], [92.1, 1078.0], [92.2, 1132.0], [92.3, 1138.0], [92.4, 1140.0], [92.5, 1142.0], [92.6, 1143.0], [92.7, 1144.0], [92.8, 1145.0], [92.9, 1146.0], [93.0, 1146.0], [93.1, 1147.0], [93.2, 1148.0], [93.3, 1149.0], [93.4, 1150.0], [93.5, 1150.0], [93.6, 1151.0], [93.7, 1152.0], [93.8, 1152.0], [93.9, 1153.0], [94.0, 1154.0], [94.1, 1155.0], [94.2, 1155.0], [94.3, 1156.0], [94.4, 1157.0], [94.5, 1158.0], [94.6, 1159.0], [94.7, 1160.0], [94.8, 1161.0], [94.9, 1162.0], [95.0, 1163.0], [95.1, 1165.0], [95.2, 1166.0], [95.3, 1168.0], [95.4, 1170.0], [95.5, 1172.0], [95.6, 1176.0], [95.7, 1180.0], [95.8, 1184.0], [95.9, 1192.0], [96.0, 1200.0], [96.1, 1209.0], [96.2, 1222.0], [96.3, 1236.0], [96.4, 1252.0], [96.5, 1269.0], [96.6, 1293.0], [96.7, 1318.0], [96.8, 1341.0], [96.9, 1367.0], [97.0, 1404.0], [97.1, 1428.0], [97.2, 1447.0], [97.3, 1459.0], [97.4, 1471.0], [97.5, 1481.0], [97.6, 1493.0], [97.7, 1507.0], [97.8, 1560.0], [97.9, 1628.0], [98.0, 1694.0], [98.1, 1760.0], [98.2, 1812.0], [98.3, 1929.0], [98.4, 2048.0], [98.5, 2255.0], [98.6, 2472.0], [98.7, 2719.0], [98.8, 3145.0], [98.9, 3161.0], [99.0, 3174.0], [99.1, 3336.0], [99.2, 3491.0], [99.3, 4010.0], [99.4, 4900.0], [99.5, 6009.0], [99.6, 7057.0], [99.7, 8051.0], [99.8, 10520.0], [99.9, 13562.0], [100.0, 139227.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 43138.0, "series": [{"data": [[139200.0, 1.0], [132900.0, 1.0], [100.0, 43138.0], [48900.0, 1.0], [200.0, 2746.0], [300.0, 855.0], [400.0, 4417.0], [500.0, 786.0], [600.0, 301.0], [700.0, 636.0], [800.0, 350.0], [900.0, 120.0], [1000.0, 89.0], [1100.0, 2241.0], [1200.0, 363.0], [1300.0, 210.0], [1400.0, 382.0], [1500.0, 132.0], [1600.0, 76.0], [1700.0, 103.0], [1800.0, 60.0], [1900.0, 43.0], [2000.0, 45.0], [2100.0, 24.0], [2300.0, 23.0], [2200.0, 25.0], [2400.0, 40.0], [2500.0, 27.0], [2600.0, 11.0], [2700.0, 16.0], [2800.0, 10.0], [2900.0, 14.0], [3000.0, 7.0], [3100.0, 154.0], [3200.0, 24.0], [3300.0, 23.0], [3400.0, 48.0], [3500.0, 25.0], [3600.0, 7.0], [3700.0, 3.0], [3800.0, 10.0], [3900.0, 8.0], [4000.0, 6.0], [4200.0, 3.0], [4300.0, 6.0], [4100.0, 6.0], [4400.0, 8.0], [4500.0, 9.0], [4600.0, 6.0], [4700.0, 9.0], [4800.0, 6.0], [4900.0, 6.0], [5100.0, 8.0], [5000.0, 5.0], [5300.0, 10.0], [5200.0, 10.0], [5600.0, 3.0], [5400.0, 1.0], [5500.0, 5.0], [5800.0, 5.0], [5700.0, 4.0], [6000.0, 6.0], [6100.0, 4.0], [5900.0, 1.0], [6300.0, 7.0], [6200.0, 1.0], [6600.0, 6.0], [6400.0, 3.0], [6500.0, 4.0], [6900.0, 5.0], [6800.0, 10.0], [6700.0, 4.0], [7000.0, 21.0], [7100.0, 10.0], [7200.0, 9.0], [7500.0, 5.0], [7600.0, 3.0], [7900.0, 7.0], [7700.0, 4.0], [7800.0, 3.0], [8100.0, 4.0], [8000.0, 7.0], [8600.0, 11.0], [8500.0, 5.0], [8700.0, 4.0], [8800.0, 2.0], [8900.0, 6.0], [9000.0, 3.0], [9100.0, 2.0], [9200.0, 1.0], [9500.0, 4.0], [9300.0, 3.0], [9600.0, 1.0], [9700.0, 1.0], [10000.0, 4.0], [9800.0, 2.0], [10100.0, 1.0], [10200.0, 1.0], [10700.0, 2.0], [10500.0, 2.0], [10600.0, 1.0], [10800.0, 2.0], [11200.0, 2.0], [10900.0, 1.0], [11000.0, 2.0], [11100.0, 3.0], [11500.0, 4.0], [11600.0, 5.0], [11700.0, 3.0], [11400.0, 2.0], [12000.0, 1.0], [12100.0, 2.0], [12200.0, 1.0], [11800.0, 2.0], [12500.0, 2.0], [12700.0, 3.0], [12600.0, 2.0], [12300.0, 1.0], [13200.0, 3.0], [12900.0, 3.0], [13100.0, 5.0], [13300.0, 2.0], [13000.0, 1.0], [13800.0, 1.0], [13500.0, 2.0], [13700.0, 1.0], [13400.0, 1.0], [14300.0, 1.0], [14100.0, 1.0], [14200.0, 2.0], [14500.0, 2.0], [14800.0, 1.0], [14700.0, 3.0], [15000.0, 2.0], [14900.0, 2.0], [15100.0, 3.0], [15600.0, 1.0], [15700.0, 2.0], [15800.0, 2.0], [16100.0, 1.0], [16500.0, 1.0], [17100.0, 1.0], [17400.0, 1.0], [18200.0, 2.0], [18400.0, 1.0], [18500.0, 1.0], [18800.0, 1.0], [19800.0, 1.0], [19600.0, 1.0], [20300.0, 1.0], [19700.0, 1.0], [21400.0, 1.0], [22400.0, 1.0], [22300.0, 1.0], [22500.0, 1.0], [23400.0, 1.0], [23100.0, 2.0], [22900.0, 1.0], [24500.0, 1.0], [24200.0, 1.0], [23600.0, 1.0], [26200.0, 1.0], [27000.0, 1.0], [27900.0, 1.0], [27700.0, 1.0], [34800.0, 1.0], [76000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 139200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 51187.0, "series": [{"data": [[0.0, 51187.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5457.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1355.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.25075025008336, "minX": 1.72918422E12, "maxY": 147.33092224231473, "series": [{"data": [[1.72918446E12, 15.54782608695652], [1.72918476E12, 14.357807308970118], [1.72918506E12, 14.904409289801439], [1.72918536E12, 14.524374176548092], [1.7291844E12, 14.788704318936885], [1.7291847E12, 20.220100502512523], [1.729185E12, 13.802666666666626], [1.7291853E12, 14.854956753160343], [1.72918434E12, 18.188911022576317], [1.72918464E12, 15.163224516988668], [1.72918494E12, 14.323558813728775], [1.72918524E12, 13.25075025008336], [1.72918428E12, 31.56210873146617], [1.72918458E12, 15.31561461794019], [1.72918488E12, 15.017028380634388], [1.72918518E12, 14.156646626586536], [1.72918422E12, 147.33092224231473], [1.72918452E12, 15.197805851063851], [1.72918482E12, 14.548118548118538], [1.72918512E12, 14.336300692383766]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918536E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 225.2, "minX": 1.0, "maxY": 12168.75, "series": [{"data": [[2.0, 609.4117647058824], [3.0, 551.9677419354839], [4.0, 517.5454545454545], [5.0, 416.45794392523356], [6.0, 529.105590062112], [7.0, 355.28682170542623], [8.0, 272.9760956175299], [9.0, 248.1529080675422], [10.0, 248.68648648648625], [11.0, 237.83215010141956], [12.0, 248.6663629737607], [13.0, 262.8844111215247], [14.0, 287.1110319270238], [15.0, 278.19911504424687], [16.0, 279.2582053072626], [17.0, 289.74699331848564], [18.0, 299.79350567465383], [19.0, 315.30242119689376], [20.0, 316.9967595593], [21.0, 333.8127896200186], [22.0, 531.9223803363515], [23.0, 473.0684931506843], [24.0, 467.2626582278483], [25.0, 697.1269230769229], [26.0, 343.5684647302906], [27.0, 424.2850000000001], [28.0, 491.69696969696923], [29.0, 334.4013157894734], [30.0, 353.33606557377055], [31.0, 575.6806722689079], [33.0, 597.677685950413], [32.0, 371.5793650793649], [35.0, 844.7232142857144], [34.0, 438.37190082644616], [37.0, 631.7894736842106], [36.0, 411.5421686746989], [39.0, 401.1764705882353], [38.0, 799.6956521739129], [41.0, 342.325], [40.0, 1114.1379310344823], [43.0, 1106.5777777777776], [42.0, 444.01724137931035], [45.0, 1014.2162162162164], [44.0, 1069.526315789474], [47.0, 1787.7441860465105], [46.0, 1378.8611111111118], [49.0, 1174.9799999999998], [48.0, 1815.8095238095236], [51.0, 678.404255319149], [50.0, 1567.982758620689], [53.0, 2039.1714285714286], [52.0, 1628.636363636364], [55.0, 1220.4117647058827], [54.0, 497.80769230769226], [57.0, 625.0384615384615], [56.0, 1595.9444444444441], [59.0, 436.95000000000005], [58.0, 891.3333333333331], [61.0, 1389.636363636364], [60.0, 584.2142857142858], [63.0, 2722.3333333333335], [62.0, 1502.8], [67.0, 1161.0], [66.0, 670.6666666666666], [65.0, 655.75], [64.0, 453.125], [71.0, 1279.8], [70.0, 225.2], [69.0, 400.55555555555554], [68.0, 555.0], [75.0, 1915.1666666666667], [74.0, 1172.6666666666665], [73.0, 535.8749999999999], [72.0, 1330.3333333333335], [78.0, 761.1], [77.0, 1747.2], [79.0, 1699.7142857142858], [76.0, 716.2], [83.0, 764.4], [82.0, 1612.5384615384617], [81.0, 2132.0000000000005], [80.0, 1604.1666666666665], [87.0, 1247.6000000000001], [86.0, 1316.1000000000001], [85.0, 1121.8750000000002], [84.0, 573.9230769230769], [91.0, 543.8333333333334], [90.0, 1662.6250000000002], [89.0, 2438.4444444444443], [88.0, 1031.2], [95.0, 1722.4545454545453], [94.0, 1624.0], [92.0, 3123.833333333333], [93.0, 833.0], [99.0, 1187.75], [98.0, 1043.75], [97.0, 615.6666666666666], [96.0, 782.0909090909091], [103.0, 780.25], [102.0, 926.5], [101.0, 923.0], [100.0, 704.8], [107.0, 8485.0], [106.0, 265.0], [105.0, 550.25], [104.0, 1404.0], [111.0, 9457.0], [110.0, 900.5], [109.0, 1460.75], [108.0, 1070.0], [115.0, 989.5], [114.0, 1008.5], [113.0, 2810.25], [112.0, 2859.4], [119.0, 984.3333333333333], [118.0, 7956.2], [117.0, 1826.4], [116.0, 1823.0], [123.0, 2187.3333333333335], [122.0, 1288.7142857142858], [121.0, 7378.333333333334], [120.0, 593.6666666666666], [127.0, 2727.8], [125.0, 1658.6666666666667], [124.0, 1602.2], [126.0, 1397.0], [135.0, 1515.0], [134.0, 1046.0], [133.0, 466.0], [132.0, 1112.0], [131.0, 1752.0], [129.0, 1482.4], [128.0, 1680.0], [130.0, 1387.0], [143.0, 1700.2], [142.0, 1588.0], [141.0, 1541.75], [140.0, 1596.1666666666665], [139.0, 1288.5], [138.0, 2402.0], [137.0, 1743.5], [136.0, 586.0], [151.0, 2425.2], [150.0, 2598.777777777778], [149.0, 1499.25], [147.0, 1188.6666666666667], [146.0, 1580.0], [145.0, 3576.8750000000005], [144.0, 1710.0], [148.0, 1224.0], [159.0, 2099.6], [157.0, 2948.777777777778], [158.0, 1673.3333333333335], [156.0, 1292.5], [155.0, 2369.3333333333335], [154.0, 1575.8333333333333], [153.0, 2796.2857142857147], [152.0, 1981.4], [167.0, 1387.25], [166.0, 1108.0000000000002], [165.0, 1000.0], [164.0, 1211.2], [163.0, 1194.6], [162.0, 3819.2499999999995], [161.0, 1700.0], [160.0, 1131.6], [175.0, 982.5], [174.0, 4513.0], [173.0, 1240.6666666666667], [172.0, 1127.6666666666667], [171.0, 1201.4285714285716], [170.0, 975.75], [169.0, 1135.7142857142858], [168.0, 1399.0], [183.0, 6239.333333333333], [182.0, 1426.2], [181.0, 1531.3333333333333], [180.0, 1540.0], [179.0, 3383.5], [178.0, 1349.5], [176.0, 2955.5], [177.0, 1641.5], [191.0, 1571.0], [190.0, 2292.0], [189.0, 4387.75], [188.0, 3917.0], [187.0, 5131.5], [186.0, 3000.5], [185.0, 2059.6666666666665], [184.0, 2099.5], [198.0, 2120.0], [197.0, 2619.5], [196.0, 2256.25], [195.0, 1651.0], [194.0, 1459.6666666666667], [193.0, 2202.3333333333335], [199.0, 347.5], [192.0, 1315.0], [207.0, 3161.0], [206.0, 2029.0], [205.0, 2596.5], [204.0, 2603.5], [203.0, 2017.5], [202.0, 3708.333333333333], [201.0, 5742.0], [200.0, 3484.0], [215.0, 4520.333333333333], [214.0, 6056.5], [213.0, 7361.0], [212.0, 6561.0], [211.0, 6941.5], [210.0, 8678.5], [209.0, 4413.666666666667], [208.0, 6666.75], [223.0, 8579.0], [222.0, 5198.6], [221.0, 7692.4], [220.0, 12168.75], [219.0, 4219.666666666667], [218.0, 6420.0], [217.0, 2510.6666666666665], [216.0, 5519.0], [231.0, 4742.2307692307695], [230.0, 4929.461538461538], [229.0, 2909.363636363636], [228.0, 5351.166666666666], [227.0, 6024.666666666666], [226.0, 6296.5], [225.0, 5381.8], [224.0, 5705.0], [233.0, 4458.266666666666], [232.0, 4394.6875], [239.0, 3975.3], [238.0, 3827.454545454546], [237.0, 5288.555555555556], [236.0, 5860.7], [235.0, 4532.799999999999], [234.0, 4588.666666666667], [240.0, 3845.3], [247.0, 3373.555555555556], [246.0, 4246.8], [245.0, 3929.714285714286], [244.0, 3812.4999999999995], [243.0, 5083.375], [242.0, 2303.6666666666665], [241.0, 3207.375], [249.0, 2679.1428571428573], [248.0, 5440.818181818182], [255.0, 3354.333333333333], [254.0, 7182.5], [253.0, 5302.624999999999], [252.0, 5118.0], [251.0, 2601.8], [250.0, 3112.285714285714], [270.0, 4706.307692307692], [271.0, 2664.714285714286], [269.0, 4049.777777777778], [268.0, 3599.75], [267.0, 5436.0], [266.0, 2714.625], [265.0, 3928.3333333333335], [264.0, 1646.166666666667], [263.0, 2755.25], [257.0, 1062.25], [256.0, 2812.1666666666665], [259.0, 2016.0], [258.0, 4041.6666666666665], [262.0, 3797.625], [260.0, 1846.0], [261.0, 1324.2], [275.0, 3165.0], [285.0, 1114.0], [287.0, 1556.25], [284.0, 1122.5], [282.0, 4367.5], [280.0, 1110.5], [278.0, 2408.0], [277.0, 1952.0], [276.0, 1151.0], [274.0, 5793.666666666667], [273.0, 4643.25], [272.0, 4102.0], [302.0, 6902.666666666667], [292.0, 7462.333333333333], [294.0, 8754.0], [293.0, 7504.0], [295.0, 6233.666666666667], [303.0, 5744.5], [301.0, 8548.333333333334], [300.0, 5261.5], [291.0, 4501.25], [289.0, 7281.333333333333], [288.0, 8920.0], [290.0, 2637.0], [299.0, 1972.0], [298.0, 2440.0], [297.0, 2474.0], [296.0, 8504.0], [308.0, 6594.0], [307.0, 8600.0], [306.0, 6459.0], [305.0, 8608.0], [304.0, 7860.0], [349.0, 3972.0], [345.0, 1150.0], [367.0, 1672.0], [365.0, 1960.0], [361.0, 1986.0], [357.0, 1060.0], [353.0, 1297.0], [368.0, 4149.908396946565], [1.0, 1156.625]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[19.785862068965656, 365.6395689655182]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 368.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4230.45, "minX": 1.72918422E12, "maxY": 2132642.3666666667, "series": [{"data": [[1.72918446E12, 2101096.0166666666], [1.72918476E12, 2115175.683333333], [1.72918506E12, 2087744.2833333334], [1.72918536E12, 1600084.2], [1.7291844E12, 2115136.6666666665], [1.7291847E12, 2097606.75], [1.729185E12, 2108109.566666667], [1.7291853E12, 2112363.2], [1.72918434E12, 2115877.683333333], [1.72918464E12, 2109551.1], [1.72918494E12, 2108794.6], [1.72918524E12, 2107441.45], [1.72918428E12, 2132642.3666666667], [1.72918458E12, 2115168.716666667], [1.72918488E12, 2104533.2666666666], [1.72918518E12, 2103925.2], [1.72918422E12, 1165721.6666666667], [1.72918452E12, 2113757.8833333333], [1.72918482E12, 2110184.05], [1.72918512E12, 2131325.7333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72918446E12, 7624.5], [1.72918476E12, 7675.5], [1.72918506E12, 7576.05], [1.72918536E12, 5806.35], [1.7291844E12, 7675.5], [1.7291847E12, 7611.75], [1.729185E12, 7650.0], [1.7291853E12, 7665.3], [1.72918434E12, 7678.05], [1.72918464E12, 7655.1], [1.72918494E12, 7652.55], [1.72918524E12, 7647.45], [1.72918428E12, 7739.25], [1.72918458E12, 7675.5], [1.72918488E12, 7637.25], [1.72918518E12, 7634.7], [1.72918422E12, 4230.45], [1.72918452E12, 7670.4], [1.72918482E12, 7657.65], [1.72918512E12, 7734.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918536E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 246.031677225742, "minX": 1.72918422E12, "maxY": 2741.1880650994563, "series": [{"data": [[1.72918446E12, 287.6364548494984], [1.72918476E12, 276.07142857142924], [1.72918506E12, 284.54695388758006], [1.72918536E12, 274.3034694773825], [1.7291844E12, 270.46445182724267], [1.7291847E12, 296.4465661641547], [1.729185E12, 264.82133333333377], [1.7291853E12, 271.62907518296726], [1.72918434E12, 406.78950863213845], [1.72918464E12, 269.65589606928745], [1.72918494E12, 271.790403198934], [1.72918524E12, 246.031677225742], [1.72918428E12, 525.9999999999997], [1.72918458E12, 295.3524916943516], [1.72918488E12, 284.05575959933356], [1.72918518E12, 263.0901803607222], [1.72918422E12, 2741.1880650994563], [1.72918452E12, 285.2031249999992], [1.72918482E12, 277.1914751914754], [1.72918512E12, 259.18232772832255]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918536E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 213.3551183727908, "minX": 1.72918422E12, "maxY": 1839.3261000602743, "series": [{"data": [[1.72918446E12, 252.3642140468229], [1.72918476E12, 244.3365448504983], [1.72918506E12, 255.200942443622], [1.72918536E12, 244.09310496267022], [1.7291844E12, 236.17342192690984], [1.7291847E12, 262.5996649916248], [1.729185E12, 232.8539999999995], [1.7291853E12, 238.3213572854293], [1.72918434E12, 264.90537848605544], [1.72918464E12, 238.92538307794769], [1.72918494E12, 239.99166944351904], [1.72918524E12, 213.3551183727908], [1.72918428E12, 380.3278418451405], [1.72918458E12, 260.44883720930187], [1.72918488E12, 248.9709515859766], [1.72918518E12, 227.86005344021382], [1.72918422E12, 1839.3261000602743], [1.72918452E12, 249.25598404255274], [1.72918482E12, 243.63403263403282], [1.72918512E12, 227.59643916913936]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918536E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 152.93764588196078, "minX": 1.72918422E12, "maxY": 1515.5394816154312, "series": [{"data": [[1.72918446E12, 183.49130434782631], [1.72918476E12, 178.99202657807297], [1.72918506E12, 185.3460114439584], [1.72918536E12, 177.268335529205], [1.7291844E12, 170.34285714285693], [1.7291847E12, 192.99061976549396], [1.729185E12, 165.25666666666638], [1.7291853E12, 172.5469061876242], [1.72918434E12, 201.65305444887082], [1.72918464E12, 175.92771485676198], [1.72918494E12, 174.9506831056316], [1.72918524E12, 152.93764588196078], [1.72918428E12, 283.41021416804057], [1.72918458E12, 189.21495016611306], [1.72918488E12, 180.99565943238701], [1.72918518E12, 162.90414161656662], [1.72918422E12, 1515.5394816154312], [1.72918452E12, 184.70046542553183], [1.72918482E12, 176.31734931734917], [1.72918512E12, 165.93273986152317]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918536E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 115.0, "minX": 1.72918422E12, "maxY": 139227.0, "series": [{"data": [[1.72918446E12, 7523.0], [1.72918476E12, 16120.0], [1.72918506E12, 3800.0], [1.72918536E12, 3507.0], [1.7291844E12, 3612.0], [1.7291847E12, 7167.0], [1.729185E12, 3412.0], [1.7291853E12, 7184.0], [1.72918434E12, 139227.0], [1.72918464E12, 7520.0], [1.72918494E12, 7176.0], [1.72918524E12, 3221.0], [1.72918428E12, 76072.0], [1.72918458E12, 7248.0], [1.72918488E12, 7171.0], [1.72918518E12, 4176.0], [1.72918422E12, 27966.0], [1.72918452E12, 7276.0], [1.72918482E12, 7179.0], [1.72918512E12, 3901.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72918446E12, 525.0], [1.72918476E12, 490.0], [1.72918506E12, 515.0], [1.72918536E12, 485.0], [1.7291844E12, 495.9000000000001], [1.7291847E12, 591.2000000000003], [1.729185E12, 487.0], [1.7291853E12, 491.0], [1.72918434E12, 617.0], [1.72918464E12, 482.0], [1.72918494E12, 484.0], [1.72918524E12, 470.0], [1.72918428E12, 1271.4], [1.72918458E12, 561.9000000000001], [1.72918488E12, 505.4000000000001], [1.72918518E12, 474.0], [1.72918422E12, 8065.0], [1.72918452E12, 494.0], [1.72918482E12, 490.5999999999999], [1.72918512E12, 476.5999999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72918446E12, 1498.1800000000003], [1.72918476E12, 1470.8899999999999], [1.72918506E12, 1500.5200000000018], [1.72918536E12, 1759.099999999999], [1.7291844E12, 1447.0], [1.7291847E12, 1974.3399999999833], [1.729185E12, 1461.9899999999998], [1.7291853E12, 1448.0], [1.72918434E12, 1638.3200000000015], [1.72918464E12, 1482.7899999999986], [1.72918494E12, 1472.98], [1.72918524E12, 1227.0], [1.72918428E12, 3535.5199999999977], [1.72918458E12, 1516.1299999999978], [1.72918488E12, 1481.04], [1.72918518E12, 1525.200000000008], [1.72918422E12, 20031.200000000044], [1.72918452E12, 1513.3799999999974], [1.72918482E12, 1479.92], [1.72918512E12, 1473.3199999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72918446E12, 1152.4499999999998], [1.72918476E12, 1149.0], [1.72918506E12, 1153.0], [1.72918536E12, 1147.0], [1.7291844E12, 1146.4499999999998], [1.7291847E12, 1158.0], [1.729185E12, 1147.0], [1.7291853E12, 1146.0], [1.72918434E12, 1161.4], [1.72918464E12, 1148.85], [1.72918494E12, 1146.9], [1.72918524E12, 1132.0], [1.72918428E12, 1660.199999999999], [1.72918458E12, 1152.0], [1.72918488E12, 1152.1999999999998], [1.72918518E12, 1145.0], [1.72918422E12, 11730.0], [1.72918452E12, 1150.0], [1.72918482E12, 1150.7999999999997], [1.72918512E12, 1147.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72918446E12, 126.0], [1.72918476E12, 125.0], [1.72918506E12, 124.0], [1.72918536E12, 125.0], [1.7291844E12, 124.0], [1.7291847E12, 115.0], [1.729185E12, 123.0], [1.7291853E12, 122.0], [1.72918434E12, 120.0], [1.72918464E12, 122.0], [1.72918494E12, 125.0], [1.72918524E12, 124.0], [1.72918428E12, 130.0], [1.72918458E12, 123.0], [1.72918488E12, 124.0], [1.72918518E12, 116.0], [1.72918422E12, 132.0], [1.72918452E12, 122.0], [1.72918482E12, 121.0], [1.72918512E12, 127.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72918446E12, 153.0], [1.72918476E12, 149.0], [1.72918506E12, 148.0], [1.72918536E12, 146.0], [1.7291844E12, 154.0], [1.7291847E12, 153.0], [1.729185E12, 150.0], [1.7291853E12, 149.0], [1.72918434E12, 172.0], [1.72918464E12, 148.0], [1.72918494E12, 149.0], [1.72918524E12, 146.0], [1.72918428E12, 189.0], [1.72918458E12, 149.0], [1.72918488E12, 149.0], [1.72918518E12, 147.0], [1.72918422E12, 1132.0], [1.72918452E12, 149.0], [1.72918482E12, 150.0], [1.72918512E12, 148.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918536E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 138.5, "minX": 1.0, "maxY": 19731.0, "series": [{"data": [[2.0, 138.5], [5.0, 1245.0], [6.0, 1668.5], [7.0, 153.0], [10.0, 178.0], [11.0, 156.0], [12.0, 146.5], [15.0, 176.0], [16.0, 149.5], [17.0, 258.0], [18.0, 147.5], [19.0, 178.0], [20.0, 453.0], [21.0, 163.0], [23.0, 144.0], [24.0, 153.0], [25.0, 204.0], [27.0, 146.0], [28.0, 402.0], [29.0, 149.0], [30.0, 147.5], [31.0, 143.0], [32.0, 210.0], [33.0, 237.5], [34.0, 154.5], [35.0, 161.0], [36.0, 149.5], [37.0, 151.0], [39.0, 159.5], [38.0, 148.0], [41.0, 166.5], [40.0, 147.0], [43.0, 148.0], [42.0, 162.0], [44.0, 149.0], [45.0, 150.0], [46.0, 148.0], [47.0, 148.0], [49.0, 149.0], [48.0, 150.0], [51.0, 149.0], [50.0, 148.0], [52.0, 149.0], [53.0, 150.0], [54.0, 150.0], [55.0, 150.0], [57.0, 155.0], [56.0, 155.0], [58.0, 155.0], [59.0, 156.0], [61.0, 158.0], [60.0, 152.0], [62.0, 173.0], [63.0, 151.0], [64.0, 176.5], [66.0, 196.0], [65.0, 158.0], [67.0, 148.0], [70.0, 156.0], [68.0, 207.5], [71.0, 187.0], [69.0, 148.0], [73.0, 165.0], [72.0, 167.0], [74.0, 158.0], [75.0, 147.0], [76.0, 223.5], [78.0, 149.0], [81.0, 518.0], [83.0, 1218.0], [85.0, 230.0], [84.0, 161.5], [89.0, 2949.0], [88.0, 912.5], [95.0, 1568.0], [104.0, 161.5], [114.0, 706.5], [115.0, 160.0], [118.0, 163.0], [123.0, 162.0], [120.0, 177.0], [130.0, 4371.5], [131.0, 168.0], [1.0, 3156.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[39.0, 19731.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 131.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3610.0, "series": [{"data": [[2.0, 122.5], [5.0, 1021.0], [6.0, 1646.0], [7.0, 135.0], [10.0, 153.5], [11.0, 139.0], [12.0, 129.0], [15.0, 132.0], [16.0, 130.0], [17.0, 214.0], [18.0, 131.0], [19.0, 154.0], [20.0, 252.5], [21.0, 141.0], [23.0, 126.0], [24.0, 132.0], [25.0, 155.0], [27.0, 129.0], [28.0, 261.0], [29.0, 131.0], [30.0, 130.0], [31.0, 127.0], [32.0, 161.5], [33.0, 200.5], [34.0, 135.0], [35.0, 139.0], [36.0, 131.0], [37.0, 132.0], [39.0, 137.0], [38.0, 131.0], [41.0, 142.0], [40.0, 130.0], [43.0, 131.0], [42.0, 138.5], [44.0, 131.0], [45.0, 132.0], [46.0, 131.0], [47.0, 131.0], [49.0, 131.0], [48.0, 132.0], [51.0, 131.0], [50.0, 131.0], [52.0, 131.0], [53.0, 132.0], [54.0, 132.0], [55.0, 132.0], [57.0, 136.0], [56.0, 136.0], [58.0, 134.0], [59.0, 135.0], [61.0, 137.0], [60.0, 133.0], [62.0, 146.5], [63.0, 132.5], [64.0, 142.0], [66.0, 158.5], [65.0, 138.0], [67.0, 131.0], [70.0, 136.5], [68.0, 169.5], [71.0, 163.0], [69.0, 131.0], [73.0, 139.0], [72.0, 144.5], [74.0, 140.5], [75.0, 130.0], [76.0, 196.5], [78.0, 132.5], [81.0, 300.0], [83.0, 936.0], [85.0, 192.0], [84.0, 143.0], [89.0, 1811.0], [88.0, 776.0], [95.0, 749.0], [104.0, 136.0], [114.0, 558.0], [115.0, 142.0], [118.0, 145.0], [123.0, 141.0], [120.0, 149.5], [130.0, 3610.0], [131.0, 147.0], [1.0, 3139.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[39.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 131.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.183333333333334, "minX": 1.72918422E12, "maxY": 50.65, "series": [{"data": [[1.72918446E12, 49.85], [1.72918476E12, 50.28333333333333], [1.72918506E12, 49.35], [1.72918536E12, 37.8], [1.7291844E12, 50.2], [1.7291847E12, 49.733333333333334], [1.729185E12, 50.0], [1.7291853E12, 50.166666666666664], [1.72918434E12, 50.13333333333333], [1.72918464E12, 49.983333333333334], [1.72918494E12, 50.083333333333336], [1.72918524E12, 49.916666666666664], [1.72918428E12, 50.28333333333333], [1.72918458E12, 50.18333333333333], [1.72918488E12, 49.916666666666664], [1.72918518E12, 49.833333333333336], [1.72918422E12, 28.183333333333334], [1.72918452E12, 50.11666666666667], [1.72918482E12, 50.0], [1.72918512E12, 50.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918536E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918422E12, "maxY": 50.583333333333336, "series": [{"data": [[1.72918446E12, 49.833333333333336], [1.72918476E12, 50.166666666666664], [1.72918506E12, 49.516666666666666], [1.72918536E12, 37.95], [1.7291844E12, 50.166666666666664], [1.7291847E12, 49.75], [1.729185E12, 50.0], [1.7291853E12, 50.1], [1.72918434E12, 50.18333333333333], [1.72918464E12, 50.03333333333333], [1.72918494E12, 50.016666666666666], [1.72918524E12, 49.983333333333334], [1.72918428E12, 50.583333333333336], [1.72918458E12, 50.166666666666664], [1.72918488E12, 49.916666666666664], [1.72918518E12, 49.9], [1.72918422E12, 27.65], [1.72918452E12, 50.13333333333333], [1.72918482E12, 50.05], [1.72918512E12, 50.55]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72918434E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918536E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918422E12, "maxY": 50.583333333333336, "series": [{"data": [[1.72918446E12, 49.833333333333336], [1.72918476E12, 50.166666666666664], [1.72918506E12, 49.516666666666666], [1.72918536E12, 37.95], [1.7291844E12, 50.166666666666664], [1.7291847E12, 49.75], [1.729185E12, 50.0], [1.7291853E12, 50.1], [1.72918434E12, 50.18333333333333], [1.72918464E12, 50.03333333333333], [1.72918494E12, 50.016666666666666], [1.72918524E12, 49.983333333333334], [1.72918428E12, 50.583333333333336], [1.72918458E12, 50.166666666666664], [1.72918488E12, 49.916666666666664], [1.72918518E12, 49.9], [1.72918422E12, 27.65], [1.72918452E12, 50.13333333333333], [1.72918482E12, 50.05], [1.72918512E12, 50.55]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72918434E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918536E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918422E12, "maxY": 50.583333333333336, "series": [{"data": [[1.72918446E12, 49.833333333333336], [1.72918476E12, 50.166666666666664], [1.72918506E12, 49.516666666666666], [1.72918536E12, 37.95], [1.7291844E12, 50.166666666666664], [1.7291847E12, 49.75], [1.729185E12, 50.0], [1.7291853E12, 50.1], [1.72918434E12, 50.18333333333333], [1.72918464E12, 50.03333333333333], [1.72918494E12, 50.016666666666666], [1.72918524E12, 49.983333333333334], [1.72918428E12, 50.583333333333336], [1.72918458E12, 50.166666666666664], [1.72918488E12, 49.916666666666664], [1.72918518E12, 49.9], [1.72918422E12, 27.65], [1.72918452E12, 50.13333333333333], [1.72918482E12, 50.05], [1.72918512E12, 50.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72918434E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918536E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

