/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 155.0, "minX": 0.0, "maxY": 403800.0, "series": [{"data": [[0.0, 155.0], [0.1, 162.0], [0.2, 164.0], [0.3, 165.0], [0.4, 166.0], [0.5, 167.0], [0.6, 167.0], [0.7, 167.0], [0.8, 168.0], [0.9, 168.0], [1.0, 168.0], [1.1, 169.0], [1.2, 169.0], [1.3, 169.0], [1.4, 169.0], [1.5, 169.0], [1.6, 170.0], [1.7, 170.0], [1.8, 170.0], [1.9, 170.0], [2.0, 170.0], [2.1, 170.0], [2.2, 171.0], [2.3, 171.0], [2.4, 171.0], [2.5, 171.0], [2.6, 171.0], [2.7, 171.0], [2.8, 171.0], [2.9, 171.0], [3.0, 171.0], [3.1, 172.0], [3.2, 172.0], [3.3, 172.0], [3.4, 172.0], [3.5, 172.0], [3.6, 172.0], [3.7, 172.0], [3.8, 172.0], [3.9, 172.0], [4.0, 172.0], [4.1, 173.0], [4.2, 173.0], [4.3, 173.0], [4.4, 173.0], [4.5, 173.0], [4.6, 173.0], [4.7, 173.0], [4.8, 173.0], [4.9, 173.0], [5.0, 173.0], [5.1, 173.0], [5.2, 173.0], [5.3, 174.0], [5.4, 174.0], [5.5, 174.0], [5.6, 174.0], [5.7, 174.0], [5.8, 174.0], [5.9, 174.0], [6.0, 174.0], [6.1, 174.0], [6.2, 174.0], [6.3, 174.0], [6.4, 174.0], [6.5, 174.0], [6.6, 174.0], [6.7, 174.0], [6.8, 174.0], [6.9, 175.0], [7.0, 175.0], [7.1, 175.0], [7.2, 175.0], [7.3, 175.0], [7.4, 175.0], [7.5, 175.0], [7.6, 175.0], [7.7, 175.0], [7.8, 175.0], [7.9, 175.0], [8.0, 175.0], [8.1, 175.0], [8.2, 175.0], [8.3, 175.0], [8.4, 175.0], [8.5, 175.0], [8.6, 175.0], [8.7, 176.0], [8.8, 176.0], [8.9, 176.0], [9.0, 176.0], [9.1, 176.0], [9.2, 176.0], [9.3, 176.0], [9.4, 176.0], [9.5, 176.0], [9.6, 176.0], [9.7, 176.0], [9.8, 176.0], [9.9, 176.0], [10.0, 176.0], [10.1, 176.0], [10.2, 176.0], [10.3, 176.0], [10.4, 176.0], [10.5, 176.0], [10.6, 176.0], [10.7, 177.0], [10.8, 177.0], [10.9, 177.0], [11.0, 177.0], [11.1, 177.0], [11.2, 177.0], [11.3, 177.0], [11.4, 177.0], [11.5, 177.0], [11.6, 177.0], [11.7, 177.0], [11.8, 177.0], [11.9, 177.0], [12.0, 177.0], [12.1, 177.0], [12.2, 177.0], [12.3, 177.0], [12.4, 177.0], [12.5, 177.0], [12.6, 177.0], [12.7, 177.0], [12.8, 177.0], [12.9, 178.0], [13.0, 178.0], [13.1, 178.0], [13.2, 178.0], [13.3, 178.0], [13.4, 178.0], [13.5, 178.0], [13.6, 178.0], [13.7, 178.0], [13.8, 178.0], [13.9, 178.0], [14.0, 178.0], [14.1, 178.0], [14.2, 178.0], [14.3, 178.0], [14.4, 178.0], [14.5, 178.0], [14.6, 178.0], [14.7, 178.0], [14.8, 178.0], [14.9, 178.0], [15.0, 178.0], [15.1, 178.0], [15.2, 178.0], [15.3, 179.0], [15.4, 179.0], [15.5, 179.0], [15.6, 179.0], [15.7, 179.0], [15.8, 179.0], [15.9, 179.0], [16.0, 179.0], [16.1, 179.0], [16.2, 179.0], [16.3, 179.0], [16.4, 179.0], [16.5, 179.0], [16.6, 179.0], [16.7, 179.0], [16.8, 179.0], [16.9, 179.0], [17.0, 179.0], [17.1, 179.0], [17.2, 179.0], [17.3, 179.0], [17.4, 179.0], [17.5, 179.0], [17.6, 179.0], [17.7, 179.0], [17.8, 180.0], [17.9, 180.0], [18.0, 180.0], [18.1, 180.0], [18.2, 180.0], [18.3, 180.0], [18.4, 180.0], [18.5, 180.0], [18.6, 180.0], [18.7, 180.0], [18.8, 180.0], [18.9, 180.0], [19.0, 180.0], [19.1, 180.0], [19.2, 180.0], [19.3, 180.0], [19.4, 180.0], [19.5, 180.0], [19.6, 180.0], [19.7, 180.0], [19.8, 180.0], [19.9, 180.0], [20.0, 180.0], [20.1, 181.0], [20.2, 181.0], [20.3, 181.0], [20.4, 181.0], [20.5, 181.0], [20.6, 181.0], [20.7, 181.0], [20.8, 181.0], [20.9, 181.0], [21.0, 181.0], [21.1, 181.0], [21.2, 181.0], [21.3, 181.0], [21.4, 181.0], [21.5, 181.0], [21.6, 181.0], [21.7, 181.0], [21.8, 181.0], [21.9, 181.0], [22.0, 181.0], [22.1, 181.0], [22.2, 181.0], [22.3, 181.0], [22.4, 181.0], [22.5, 181.0], [22.6, 181.0], [22.7, 182.0], [22.8, 182.0], [22.9, 182.0], [23.0, 182.0], [23.1, 182.0], [23.2, 182.0], [23.3, 182.0], [23.4, 182.0], [23.5, 182.0], [23.6, 182.0], [23.7, 182.0], [23.8, 182.0], [23.9, 182.0], [24.0, 182.0], [24.1, 182.0], [24.2, 182.0], [24.3, 182.0], [24.4, 182.0], [24.5, 182.0], [24.6, 182.0], [24.7, 182.0], [24.8, 182.0], [24.9, 182.0], [25.0, 182.0], [25.1, 182.0], [25.2, 183.0], [25.3, 183.0], [25.4, 183.0], [25.5, 183.0], [25.6, 183.0], [25.7, 183.0], [25.8, 183.0], [25.9, 183.0], [26.0, 183.0], [26.1, 183.0], [26.2, 183.0], [26.3, 183.0], [26.4, 183.0], [26.5, 183.0], [26.6, 183.0], [26.7, 183.0], [26.8, 183.0], [26.9, 183.0], [27.0, 183.0], [27.1, 183.0], [27.2, 183.0], [27.3, 183.0], [27.4, 183.0], [27.5, 183.0], [27.6, 183.0], [27.7, 184.0], [27.8, 184.0], [27.9, 184.0], [28.0, 184.0], [28.1, 184.0], [28.2, 184.0], [28.3, 184.0], [28.4, 184.0], [28.5, 184.0], [28.6, 184.0], [28.7, 184.0], [28.8, 184.0], [28.9, 184.0], [29.0, 184.0], [29.1, 184.0], [29.2, 184.0], [29.3, 184.0], [29.4, 184.0], [29.5, 184.0], [29.6, 184.0], [29.7, 184.0], [29.8, 184.0], [29.9, 184.0], [30.0, 184.0], [30.1, 184.0], [30.2, 185.0], [30.3, 185.0], [30.4, 185.0], [30.5, 185.0], [30.6, 185.0], [30.7, 185.0], [30.8, 185.0], [30.9, 185.0], [31.0, 185.0], [31.1, 185.0], [31.2, 185.0], [31.3, 185.0], [31.4, 185.0], [31.5, 185.0], [31.6, 185.0], [31.7, 185.0], [31.8, 185.0], [31.9, 185.0], [32.0, 185.0], [32.1, 185.0], [32.2, 185.0], [32.3, 185.0], [32.4, 185.0], [32.5, 186.0], [32.6, 186.0], [32.7, 186.0], [32.8, 186.0], [32.9, 186.0], [33.0, 186.0], [33.1, 186.0], [33.2, 186.0], [33.3, 186.0], [33.4, 186.0], [33.5, 186.0], [33.6, 186.0], [33.7, 186.0], [33.8, 186.0], [33.9, 186.0], [34.0, 186.0], [34.1, 186.0], [34.2, 186.0], [34.3, 186.0], [34.4, 186.0], [34.5, 186.0], [34.6, 186.0], [34.7, 187.0], [34.8, 187.0], [34.9, 187.0], [35.0, 187.0], [35.1, 187.0], [35.2, 187.0], [35.3, 187.0], [35.4, 187.0], [35.5, 187.0], [35.6, 187.0], [35.7, 187.0], [35.8, 187.0], [35.9, 187.0], [36.0, 187.0], [36.1, 187.0], [36.2, 187.0], [36.3, 187.0], [36.4, 187.0], [36.5, 187.0], [36.6, 187.0], [36.7, 187.0], [36.8, 187.0], [36.9, 188.0], [37.0, 188.0], [37.1, 188.0], [37.2, 188.0], [37.3, 188.0], [37.4, 188.0], [37.5, 188.0], [37.6, 188.0], [37.7, 188.0], [37.8, 188.0], [37.9, 188.0], [38.0, 188.0], [38.1, 188.0], [38.2, 188.0], [38.3, 188.0], [38.4, 188.0], [38.5, 188.0], [38.6, 188.0], [38.7, 188.0], [38.8, 188.0], [38.9, 189.0], [39.0, 189.0], [39.1, 189.0], [39.2, 189.0], [39.3, 189.0], [39.4, 189.0], [39.5, 189.0], [39.6, 189.0], [39.7, 189.0], [39.8, 189.0], [39.9, 189.0], [40.0, 189.0], [40.1, 189.0], [40.2, 189.0], [40.3, 189.0], [40.4, 189.0], [40.5, 189.0], [40.6, 189.0], [40.7, 189.0], [40.8, 190.0], [40.9, 190.0], [41.0, 190.0], [41.1, 190.0], [41.2, 190.0], [41.3, 190.0], [41.4, 190.0], [41.5, 190.0], [41.6, 190.0], [41.7, 190.0], [41.8, 190.0], [41.9, 190.0], [42.0, 190.0], [42.1, 190.0], [42.2, 190.0], [42.3, 190.0], [42.4, 190.0], [42.5, 190.0], [42.6, 190.0], [42.7, 191.0], [42.8, 191.0], [42.9, 191.0], [43.0, 191.0], [43.1, 191.0], [43.2, 191.0], [43.3, 191.0], [43.4, 191.0], [43.5, 191.0], [43.6, 191.0], [43.7, 191.0], [43.8, 191.0], [43.9, 191.0], [44.0, 191.0], [44.1, 191.0], [44.2, 191.0], [44.3, 191.0], [44.4, 192.0], [44.5, 192.0], [44.6, 192.0], [44.7, 192.0], [44.8, 192.0], [44.9, 192.0], [45.0, 192.0], [45.1, 192.0], [45.2, 192.0], [45.3, 192.0], [45.4, 192.0], [45.5, 192.0], [45.6, 192.0], [45.7, 192.0], [45.8, 192.0], [45.9, 193.0], [46.0, 193.0], [46.1, 193.0], [46.2, 193.0], [46.3, 193.0], [46.4, 193.0], [46.5, 193.0], [46.6, 193.0], [46.7, 193.0], [46.8, 193.0], [46.9, 193.0], [47.0, 193.0], [47.1, 193.0], [47.2, 193.0], [47.3, 193.0], [47.4, 194.0], [47.5, 194.0], [47.6, 194.0], [47.7, 194.0], [47.8, 194.0], [47.9, 194.0], [48.0, 194.0], [48.1, 194.0], [48.2, 194.0], [48.3, 194.0], [48.4, 194.0], [48.5, 194.0], [48.6, 194.0], [48.7, 194.0], [48.8, 195.0], [48.9, 195.0], [49.0, 195.0], [49.1, 195.0], [49.2, 195.0], [49.3, 195.0], [49.4, 195.0], [49.5, 195.0], [49.6, 195.0], [49.7, 195.0], [49.8, 195.0], [49.9, 195.0], [50.0, 195.0], [50.1, 196.0], [50.2, 196.0], [50.3, 196.0], [50.4, 196.0], [50.5, 196.0], [50.6, 196.0], [50.7, 196.0], [50.8, 196.0], [50.9, 196.0], [51.0, 196.0], [51.1, 196.0], [51.2, 196.0], [51.3, 196.0], [51.4, 197.0], [51.5, 197.0], [51.6, 197.0], [51.7, 197.0], [51.8, 197.0], [51.9, 197.0], [52.0, 197.0], [52.1, 197.0], [52.2, 197.0], [52.3, 197.0], [52.4, 197.0], [52.5, 197.0], [52.6, 198.0], [52.7, 198.0], [52.8, 198.0], [52.9, 198.0], [53.0, 198.0], [53.1, 198.0], [53.2, 198.0], [53.3, 198.0], [53.4, 198.0], [53.5, 198.0], [53.6, 198.0], [53.7, 199.0], [53.8, 199.0], [53.9, 199.0], [54.0, 199.0], [54.1, 199.0], [54.2, 199.0], [54.3, 199.0], [54.4, 199.0], [54.5, 199.0], [54.6, 199.0], [54.7, 199.0], [54.8, 200.0], [54.9, 200.0], [55.0, 200.0], [55.1, 200.0], [55.2, 200.0], [55.3, 200.0], [55.4, 200.0], [55.5, 200.0], [55.6, 200.0], [55.7, 200.0], [55.8, 200.0], [55.9, 201.0], [56.0, 201.0], [56.1, 201.0], [56.2, 201.0], [56.3, 201.0], [56.4, 201.0], [56.5, 201.0], [56.6, 201.0], [56.7, 201.0], [56.8, 201.0], [56.9, 202.0], [57.0, 202.0], [57.1, 202.0], [57.2, 202.0], [57.3, 202.0], [57.4, 202.0], [57.5, 202.0], [57.6, 202.0], [57.7, 202.0], [57.8, 202.0], [57.9, 203.0], [58.0, 203.0], [58.1, 203.0], [58.2, 203.0], [58.3, 203.0], [58.4, 203.0], [58.5, 203.0], [58.6, 203.0], [58.7, 203.0], [58.8, 203.0], [58.9, 203.0], [59.0, 204.0], [59.1, 204.0], [59.2, 204.0], [59.3, 204.0], [59.4, 204.0], [59.5, 204.0], [59.6, 204.0], [59.7, 204.0], [59.8, 205.0], [59.9, 205.0], [60.0, 205.0], [60.1, 205.0], [60.2, 205.0], [60.3, 205.0], [60.4, 205.0], [60.5, 205.0], [60.6, 205.0], [60.7, 206.0], [60.8, 206.0], [60.9, 206.0], [61.0, 206.0], [61.1, 206.0], [61.2, 206.0], [61.3, 206.0], [61.4, 206.0], [61.5, 206.0], [61.6, 207.0], [61.7, 207.0], [61.8, 207.0], [61.9, 207.0], [62.0, 207.0], [62.1, 207.0], [62.2, 207.0], [62.3, 208.0], [62.4, 208.0], [62.5, 208.0], [62.6, 208.0], [62.7, 208.0], [62.8, 208.0], [62.9, 208.0], [63.0, 209.0], [63.1, 209.0], [63.2, 209.0], [63.3, 209.0], [63.4, 209.0], [63.5, 209.0], [63.6, 209.0], [63.7, 210.0], [63.8, 210.0], [63.9, 210.0], [64.0, 210.0], [64.1, 210.0], [64.2, 210.0], [64.3, 210.0], [64.4, 211.0], [64.5, 211.0], [64.6, 211.0], [64.7, 211.0], [64.8, 211.0], [64.9, 211.0], [65.0, 211.0], [65.1, 212.0], [65.2, 212.0], [65.3, 212.0], [65.4, 212.0], [65.5, 212.0], [65.6, 212.0], [65.7, 213.0], [65.8, 213.0], [65.9, 213.0], [66.0, 213.0], [66.1, 213.0], [66.2, 213.0], [66.3, 213.0], [66.4, 214.0], [66.5, 214.0], [66.6, 214.0], [66.7, 214.0], [66.8, 214.0], [66.9, 214.0], [67.0, 215.0], [67.1, 215.0], [67.2, 215.0], [67.3, 215.0], [67.4, 215.0], [67.5, 216.0], [67.6, 216.0], [67.7, 216.0], [67.8, 216.0], [67.9, 216.0], [68.0, 217.0], [68.1, 217.0], [68.2, 217.0], [68.3, 217.0], [68.4, 217.0], [68.5, 218.0], [68.6, 218.0], [68.7, 218.0], [68.8, 218.0], [68.9, 219.0], [69.0, 219.0], [69.1, 219.0], [69.2, 219.0], [69.3, 219.0], [69.4, 220.0], [69.5, 220.0], [69.6, 220.0], [69.7, 220.0], [69.8, 221.0], [69.9, 221.0], [70.0, 221.0], [70.1, 221.0], [70.2, 222.0], [70.3, 222.0], [70.4, 222.0], [70.5, 222.0], [70.6, 223.0], [70.7, 223.0], [70.8, 223.0], [70.9, 223.0], [71.0, 224.0], [71.1, 224.0], [71.2, 224.0], [71.3, 225.0], [71.4, 225.0], [71.5, 225.0], [71.6, 225.0], [71.7, 226.0], [71.8, 226.0], [71.9, 226.0], [72.0, 227.0], [72.1, 227.0], [72.2, 227.0], [72.3, 228.0], [72.4, 228.0], [72.5, 228.0], [72.6, 229.0], [72.7, 229.0], [72.8, 229.0], [72.9, 230.0], [73.0, 230.0], [73.1, 231.0], [73.2, 231.0], [73.3, 231.0], [73.4, 232.0], [73.5, 232.0], [73.6, 233.0], [73.7, 233.0], [73.8, 233.0], [73.9, 234.0], [74.0, 234.0], [74.1, 235.0], [74.2, 235.0], [74.3, 235.0], [74.4, 236.0], [74.5, 236.0], [74.6, 237.0], [74.7, 237.0], [74.8, 238.0], [74.9, 239.0], [75.0, 239.0], [75.1, 240.0], [75.2, 240.0], [75.3, 241.0], [75.4, 241.0], [75.5, 242.0], [75.6, 242.0], [75.7, 243.0], [75.8, 243.0], [75.9, 244.0], [76.0, 245.0], [76.1, 245.0], [76.2, 246.0], [76.3, 247.0], [76.4, 247.0], [76.5, 248.0], [76.6, 249.0], [76.7, 249.0], [76.8, 250.0], [76.9, 251.0], [77.0, 252.0], [77.1, 252.0], [77.2, 253.0], [77.3, 254.0], [77.4, 255.0], [77.5, 255.0], [77.6, 256.0], [77.7, 257.0], [77.8, 258.0], [77.9, 259.0], [78.0, 260.0], [78.1, 261.0], [78.2, 262.0], [78.3, 263.0], [78.4, 264.0], [78.5, 266.0], [78.6, 267.0], [78.7, 268.0], [78.8, 269.0], [78.9, 271.0], [79.0, 272.0], [79.1, 274.0], [79.2, 275.0], [79.3, 277.0], [79.4, 279.0], [79.5, 280.0], [79.6, 282.0], [79.7, 283.0], [79.8, 285.0], [79.9, 287.0], [80.0, 289.0], [80.1, 291.0], [80.2, 293.0], [80.3, 296.0], [80.4, 298.0], [80.5, 300.0], [80.6, 302.0], [80.7, 303.0], [80.8, 306.0], [80.9, 308.0], [81.0, 310.0], [81.1, 312.0], [81.2, 314.0], [81.3, 317.0], [81.4, 319.0], [81.5, 322.0], [81.6, 325.0], [81.7, 327.0], [81.8, 330.0], [81.9, 332.0], [82.0, 335.0], [82.1, 338.0], [82.2, 340.0], [82.3, 343.0], [82.4, 347.0], [82.5, 349.0], [82.6, 352.0], [82.7, 356.0], [82.8, 359.0], [82.9, 363.0], [83.0, 367.0], [83.1, 372.0], [83.2, 376.0], [83.3, 381.0], [83.4, 385.0], [83.5, 390.0], [83.6, 395.0], [83.7, 401.0], [83.8, 406.0], [83.9, 410.0], [84.0, 415.0], [84.1, 420.0], [84.2, 425.0], [84.3, 431.0], [84.4, 437.0], [84.5, 442.0], [84.6, 447.0], [84.7, 452.0], [84.8, 457.0], [84.9, 461.0], [85.0, 467.0], [85.1, 471.0], [85.2, 476.0], [85.3, 480.0], [85.4, 485.0], [85.5, 488.0], [85.6, 492.0], [85.7, 496.0], [85.8, 500.0], [85.9, 504.0], [86.0, 508.0], [86.1, 512.0], [86.2, 516.0], [86.3, 519.0], [86.4, 522.0], [86.5, 526.0], [86.6, 531.0], [86.7, 535.0], [86.8, 539.0], [86.9, 544.0], [87.0, 547.0], [87.1, 553.0], [87.2, 558.0], [87.3, 564.0], [87.4, 570.0], [87.5, 580.0], [87.6, 586.0], [87.7, 593.0], [87.8, 600.0], [87.9, 608.0], [88.0, 617.0], [88.1, 623.0], [88.2, 630.0], [88.3, 638.0], [88.4, 646.0], [88.5, 655.0], [88.6, 664.0], [88.7, 672.0], [88.8, 682.0], [88.9, 690.0], [89.0, 699.0], [89.1, 708.0], [89.2, 717.0], [89.3, 727.0], [89.4, 736.0], [89.5, 747.0], [89.6, 756.0], [89.7, 767.0], [89.8, 778.0], [89.9, 790.0], [90.0, 806.0], [90.1, 819.0], [90.2, 837.0], [90.3, 855.0], [90.4, 874.0], [90.5, 898.0], [90.6, 919.0], [90.7, 942.0], [90.8, 966.0], [90.9, 1004.0], [91.0, 1047.0], [91.1, 1090.0], [91.2, 1128.0], [91.3, 1163.0], [91.4, 1178.0], [91.5, 1182.0], [91.6, 1185.0], [91.7, 1187.0], [91.8, 1189.0], [91.9, 1192.0], [92.0, 1194.0], [92.1, 1196.0], [92.2, 1199.0], [92.3, 1202.0], [92.4, 1205.0], [92.5, 1208.0], [92.6, 1212.0], [92.7, 1216.0], [92.8, 1220.0], [92.9, 1226.0], [93.0, 1233.0], [93.1, 1243.0], [93.2, 1254.0], [93.3, 1263.0], [93.4, 1273.0], [93.5, 1285.0], [93.6, 1296.0], [93.7, 1310.0], [93.8, 1323.0], [93.9, 1336.0], [94.0, 1345.0], [94.1, 1357.0], [94.2, 1367.0], [94.3, 1379.0], [94.4, 1393.0], [94.5, 1407.0], [94.6, 1423.0], [94.7, 1446.0], [94.8, 1472.0], [94.9, 1499.0], [95.0, 1533.0], [95.1, 1568.0], [95.2, 1605.0], [95.3, 1635.0], [95.4, 1662.0], [95.5, 1693.0], [95.6, 1738.0], [95.7, 1783.0], [95.8, 1827.0], [95.9, 1889.0], [96.0, 1951.0], [96.1, 2013.0], [96.2, 2101.0], [96.3, 2228.0], [96.4, 2324.0], [96.5, 2422.0], [96.6, 2524.0], [96.7, 2685.0], [96.8, 2845.0], [96.9, 3049.0], [97.0, 3197.0], [97.1, 3233.0], [97.2, 3331.0], [97.3, 3376.0], [97.4, 3441.0], [97.5, 3528.0], [97.6, 3665.0], [97.7, 3786.0], [97.8, 3915.0], [97.9, 4057.0], [98.0, 4296.0], [98.1, 4463.0], [98.2, 4747.0], [98.3, 5099.0], [98.4, 5578.0], [98.5, 6124.0], [98.6, 6755.0], [98.7, 7340.0], [98.8, 7736.0], [98.9, 8366.0], [99.0, 9635.0], [99.1, 10988.0], [99.2, 12571.0], [99.3, 14114.0], [99.4, 15662.0], [99.5, 17091.0], [99.6, 20467.0], [99.7, 23592.0], [99.8, 36262.0], [99.9, 52879.0], [100.0, 403800.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 34472.0, "series": [{"data": [[173600.0, 1.0], [66700.0, 2.0], [82700.0, 1.0], [90700.0, 1.0], [97100.0, 1.0], [101900.0, 1.0], [100.0, 34472.0], [33700.0, 2.0], [32900.0, 1.0], [36100.0, 1.0], [37700.0, 1.0], [40900.0, 1.0], [44900.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [47300.0, 2.0], [200.0, 16237.0], [52100.0, 1.0], [56100.0, 2.0], [56900.0, 1.0], [57700.0, 1.0], [60900.0, 1.0], [63300.0, 1.0], [300.0, 2005.0], [403800.0, 1.0], [400.0, 1331.0], [500.0, 1263.0], [600.0, 768.0], [700.0, 598.0], [800.0, 344.0], [900.0, 241.0], [1000.0, 147.0], [1100.0, 697.0], [1200.0, 884.0], [1300.0, 516.0], [1400.0, 284.0], [1500.0, 170.0], [1600.0, 219.0], [1700.0, 131.0], [1800.0, 122.0], [1900.0, 98.0], [2000.0, 78.0], [2100.0, 52.0], [2300.0, 68.0], [2200.0, 55.0], [2400.0, 65.0], [2500.0, 39.0], [2600.0, 41.0], [2800.0, 36.0], [2700.0, 42.0], [360300.0, 1.0], [2900.0, 28.0], [3000.0, 31.0], [3100.0, 59.0], [3200.0, 92.0], [3300.0, 114.0], [3400.0, 81.0], [3500.0, 54.0], [3600.0, 44.0], [3700.0, 52.0], [3800.0, 50.0], [3900.0, 46.0], [4000.0, 37.0], [4100.0, 22.0], [4300.0, 33.0], [4200.0, 30.0], [4500.0, 23.0], [4600.0, 18.0], [4400.0, 37.0], [4700.0, 26.0], [4800.0, 14.0], [4900.0, 21.0], [5100.0, 10.0], [5000.0, 14.0], [5200.0, 16.0], [5300.0, 10.0], [5600.0, 13.0], [5400.0, 10.0], [5500.0, 20.0], [87300.0, 1.0], [5800.0, 13.0], [5700.0, 12.0], [6100.0, 13.0], [6000.0, 9.0], [5900.0, 6.0], [6300.0, 8.0], [6200.0, 10.0], [6500.0, 11.0], [6600.0, 11.0], [6400.0, 10.0], [6700.0, 9.0], [6900.0, 7.0], [6800.0, 10.0], [7000.0, 6.0], [7100.0, 7.0], [7200.0, 19.0], [7300.0, 27.0], [7400.0, 13.0], [7500.0, 15.0], [7600.0, 16.0], [7700.0, 10.0], [7900.0, 13.0], [7800.0, 6.0], [8000.0, 16.0], [8100.0, 7.0], [8200.0, 10.0], [8400.0, 7.0], [8600.0, 7.0], [9000.0, 2.0], [9200.0, 4.0], [8800.0, 5.0], [9600.0, 10.0], [9400.0, 3.0], [10200.0, 4.0], [10000.0, 3.0], [10600.0, 6.0], [10400.0, 1.0], [11200.0, 6.0], [11000.0, 5.0], [10800.0, 4.0], [11400.0, 5.0], [11600.0, 1.0], [12200.0, 4.0], [11800.0, 1.0], [12000.0, 1.0], [195000.0, 1.0], [12400.0, 6.0], [12600.0, 5.0], [12800.0, 3.0], [13000.0, 3.0], [13200.0, 6.0], [13400.0, 4.0], [13600.0, 7.0], [14200.0, 4.0], [14000.0, 2.0], [14800.0, 3.0], [14600.0, 2.0], [15200.0, 15.0], [15000.0, 1.0], [15600.0, 7.0], [15800.0, 10.0], [15400.0, 2.0], [16000.0, 3.0], [16200.0, 3.0], [16400.0, 8.0], [16800.0, 1.0], [17200.0, 3.0], [17600.0, 3.0], [18000.0, 4.0], [18800.0, 1.0], [20000.0, 4.0], [20400.0, 1.0], [21200.0, 7.0], [22400.0, 1.0], [21600.0, 6.0], [22000.0, 1.0], [24400.0, 2.0], [23600.0, 1.0], [25200.0, 1.0], [24800.0, 1.0], [26000.0, 1.0], [25600.0, 1.0], [26400.0, 1.0], [26800.0, 1.0], [28800.0, 1.0], [29600.0, 1.0], [36800.0, 1.0], [37600.0, 1.0], [39200.0, 1.0], [43200.0, 3.0], [48800.0, 1.0], [50400.0, 1.0], [52800.0, 1.0], [56000.0, 1.0], [56800.0, 2.0], [59200.0, 1.0], [65600.0, 1.0], [110400.0, 1.0], [86300.0, 1.0], [116700.0, 1.0], [34700.0, 1.0], [37900.0, 1.0], [40300.0, 1.0], [41900.0, 1.0], [46700.0, 1.0], [45100.0, 1.0], [51500.0, 1.0], [55500.0, 2.0], [60300.0, 1.0], [61100.0, 1.0], [59500.0, 1.0], [71000.0, 1.0], [126100.0, 1.0], [16500.0, 4.0], [16900.0, 4.0], [17300.0, 3.0], [18100.0, 3.0], [17700.0, 2.0], [18900.0, 3.0], [18500.0, 2.0], [19300.0, 1.0], [20100.0, 4.0], [20500.0, 1.0], [21300.0, 1.0], [22500.0, 1.0], [22100.0, 1.0], [23300.0, 1.0], [22900.0, 1.0], [24100.0, 1.0], [23700.0, 3.0], [25300.0, 1.0], [26500.0, 1.0], [25700.0, 1.0], [27300.0, 1.0], [27700.0, 1.0], [28900.0, 1.0], [29300.0, 1.0], [29700.0, 1.0], [30500.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [32500.0, 1.0], [36200.0, 2.0], [37000.0, 1.0], [37800.0, 1.0], [41000.0, 1.0], [41800.0, 1.0], [45000.0, 1.0], [48200.0, 3.0], [52200.0, 1.0], [51400.0, 1.0], [54600.0, 1.0], [55400.0, 1.0], [61800.0, 1.0], [65000.0, 1.0], [82000.0, 1.0], [195300.0, 1.0], [201700.0, 1.0], [34900.0, 1.0], [38100.0, 1.0], [295900.0, 1.0], [42100.0, 1.0], [50900.0, 1.0], [63700.0, 1.0], [68200.0, 1.0], [67300.0, 1.0], [8300.0, 9.0], [8500.0, 8.0], [8700.0, 1.0], [8900.0, 9.0], [9100.0, 4.0], [9700.0, 7.0], [9500.0, 1.0], [9300.0, 4.0], [9900.0, 6.0], [10100.0, 6.0], [10500.0, 5.0], [10300.0, 6.0], [10700.0, 4.0], [10900.0, 6.0], [11100.0, 3.0], [11300.0, 4.0], [11700.0, 4.0], [11500.0, 5.0], [12100.0, 5.0], [11900.0, 5.0], [12500.0, 6.0], [12700.0, 2.0], [12300.0, 2.0], [13300.0, 4.0], [13100.0, 5.0], [12900.0, 4.0], [13500.0, 4.0], [13700.0, 3.0], [13900.0, 9.0], [14100.0, 1.0], [14300.0, 2.0], [14700.0, 2.0], [14500.0, 2.0], [15300.0, 16.0], [14900.0, 2.0], [15100.0, 2.0], [15500.0, 5.0], [15700.0, 8.0], [16100.0, 4.0], [15900.0, 6.0], [16300.0, 3.0], [16600.0, 3.0], [17000.0, 2.0], [17400.0, 2.0], [17800.0, 1.0], [18600.0, 2.0], [19000.0, 1.0], [20200.0, 6.0], [19800.0, 1.0], [20600.0, 2.0], [21000.0, 3.0], [21400.0, 5.0], [22200.0, 1.0], [21800.0, 2.0], [23000.0, 2.0], [22600.0, 2.0], [23800.0, 1.0], [24200.0, 1.0], [25000.0, 2.0], [25400.0, 1.0], [24600.0, 1.0], [26200.0, 1.0], [28600.0, 1.0], [29000.0, 1.0], [29800.0, 1.0], [30600.0, 1.0], [31000.0, 1.0], [32200.0, 1.0], [32600.0, 1.0], [33200.0, 1.0], [36400.0, 1.0], [38800.0, 2.0], [40400.0, 1.0], [43600.0, 1.0], [47600.0, 1.0], [49200.0, 1.0], [52400.0, 2.0], [62800.0, 1.0], [76000.0, 1.0], [74300.0, 1.0], [77500.0, 1.0], [33500.0, 1.0], [34300.0, 1.0], [35900.0, 1.0], [39100.0, 1.0], [41500.0, 1.0], [43900.0, 1.0], [51900.0, 3.0], [52700.0, 1.0], [61500.0, 2.0], [78200.0, 1.0], [102200.0, 1.0], [67700.0, 1.0], [69300.0, 1.0], [85300.0, 1.0], [91700.0, 1.0], [98100.0, 1.0], [123700.0, 1.0], [17100.0, 3.0], [16700.0, 2.0], [17500.0, 2.0], [18300.0, 2.0], [17900.0, 1.0], [19100.0, 1.0], [18700.0, 1.0], [19900.0, 2.0], [20300.0, 2.0], [19500.0, 2.0], [21500.0, 12.0], [20700.0, 1.0], [21100.0, 1.0], [21900.0, 4.0], [22300.0, 2.0], [23500.0, 2.0], [22700.0, 1.0], [23100.0, 2.0], [23900.0, 2.0], [26300.0, 1.0], [25900.0, 1.0], [27100.0, 1.0], [28300.0, 1.0], [28700.0, 1.0], [31100.0, 1.0], [33400.0, 1.0], [35800.0, 1.0], [37400.0, 1.0], [38200.0, 1.0], [148700.0, 1.0], [40600.0, 1.0], [39000.0, 1.0], [41400.0, 1.0], [42200.0, 1.0], [43800.0, 1.0], [45400.0, 1.0], [46200.0, 1.0], [47800.0, 1.0], [51800.0, 1.0], [54200.0, 1.0], [59000.0, 2.0], [66800.0, 1.0], [74800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 403800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3211.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 54068.0, "series": [{"data": [[0.0, 54068.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5721.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3211.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 8.5, "minX": 1.7291799E12, "maxY": 292.2934782608696, "series": [{"data": [[1.72918122E12, 8.5], [1.72918026E12, 17.699934123847154], [1.72918056E12, 11.798131464798134], [1.72918062E12, 11.568954030646239], [1.72918092E12, 12.263087695898639], [1.72917996E12, 284.97865759356665], [1.7291805E12, 12.262632978723374], [1.7291808E12, 11.769153897401726], [1.72918086E12, 12.141286237920685], [1.7291799E12, 292.2934782608696], [1.72918116E12, 87.31365872115022], [1.7291802E12, 25.037940379403835], [1.72918074E12, 11.974299065420587], [1.72918104E12, 12.511674449633059], [1.72918008E12, 48.51968243466764], [1.7291811E12, 24.624238320920767], [1.72918014E12, 22.914780292942705], [1.72918044E12, 12.965977318212119], [1.72918098E12, 12.509169723241088], [1.72918002E12, 38.32596502804358], [1.72918032E12, 13.873169107856185], [1.72918038E12, 14.221853204915288], [1.72918068E12, 11.910029990003334]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918122E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 204.09128946367434, "minX": 1.0, "maxY": 41439.333333333336, "series": [{"data": [[2.0, 774.6981132075471], [3.0, 474.71428571428555], [4.0, 387.7463768115943], [5.0, 321.04864864864874], [6.0, 300.7918088737201], [7.0, 265.5215605749487], [8.0, 236.80890336590662], [9.0, 204.09128946367434], [10.0, 206.33187205715245], [11.0, 214.75633391710426], [12.0, 224.14435360245255], [13.0, 228.24518592297525], [14.0, 293.29781962338956], [15.0, 529.2349310094397], [16.0, 376.9435951502375], [17.0, 409.7750352609308], [18.0, 304.59689119170986], [19.0, 299.2437673130193], [20.0, 325.94728434504805], [21.0, 365.57858376511257], [22.0, 358.32108317214636], [23.0, 594.6673228346451], [24.0, 377.2669404517454], [25.0, 446.6760259179265], [26.0, 439.44622425629257], [27.0, 824.924485125859], [28.0, 679.2458233890212], [29.0, 454.537662337662], [30.0, 441.77586206896575], [31.0, 965.3735632183909], [33.0, 772.0063897763575], [32.0, 687.8140243902438], [35.0, 2189.797872340425], [34.0, 449.04984423676035], [37.0, 1847.2573839662452], [36.0, 512.2332015810277], [39.0, 855.5948275862075], [38.0, 1287.461206896552], [41.0, 1853.1061452513964], [40.0, 706.3348623853213], [43.0, 1308.1790123456788], [42.0, 688.611111111111], [45.0, 638.3872832369942], [44.0, 1492.8647058823526], [47.0, 2407.3461538461547], [46.0, 540.1625], [49.0, 2620.4191176470576], [48.0, 1677.1578947368419], [51.0, 642.3636363636364], [50.0, 588.5000000000001], [53.0, 1481.770000000001], [52.0, 2053.9007633587776], [55.0, 806.1832061068702], [54.0, 1841.6831683168318], [57.0, 881.264150943396], [56.0, 1317.0413223140497], [59.0, 1491.9809523809529], [58.0, 1722.4799999999993], [61.0, 2775.802469135803], [60.0, 2203.33628318584], [63.0, 3374.846153846154], [62.0, 1001.4556962025317], [67.0, 1145.4216867469884], [66.0, 1334.7674418604647], [65.0, 1121.8020833333335], [64.0, 904.2631578947368], [71.0, 1724.4810126582277], [70.0, 1040.0], [69.0, 1913.8484848484854], [68.0, 1867.2142857142853], [75.0, 3237.610738255033], [74.0, 1103.324786324786], [73.0, 1003.7909090909092], [72.0, 1656.8901098901101], [79.0, 1674.4233576642337], [78.0, 1230.0891089108911], [77.0, 2205.449275362318], [76.0, 1681.874074074075], [83.0, 1313.8958333333328], [82.0, 1098.5126050420167], [81.0, 1398.6822429906538], [80.0, 1289.014598540146], [86.0, 1142.76923076923], [85.0, 1201.8720930232562], [84.0, 1290.0808080808079], [87.0, 1709.4126984126983], [91.0, 1139.684210526316], [90.0, 1420.3035714285713], [89.0, 990.3260869565216], [88.0, 2537.8714285714295], [95.0, 2841.1842105263154], [94.0, 2698.595238095238], [93.0, 2450.0000000000005], [92.0, 924.3555555555554], [99.0, 3558.7142857142862], [98.0, 1329.2], [97.0, 1397.941176470588], [96.0, 5075.179487179488], [103.0, 1303.0294117647056], [102.0, 896.7037037037038], [101.0, 1709.783783783784], [100.0, 1042.5757575757573], [106.0, 1592.1190476190477], [105.0, 952.8749999999999], [107.0, 1907.3333333333342], [104.0, 1280.263157894737], [111.0, 4227.16], [110.0, 3917.1176470588234], [109.0, 3019.3902439024405], [108.0, 1778.5806451612905], [115.0, 1398.1351351351348], [114.0, 3160.4814814814813], [113.0, 1466.84], [112.0, 3250.46875], [119.0, 1282.0212765957447], [118.0, 2344.9464285714284], [117.0, 1029.6000000000001], [116.0, 1156.8648648648652], [123.0, 2124.029411764706], [121.0, 2528.021739130435], [120.0, 2128.2], [122.0, 3826.8974358974324], [127.0, 1416.2250000000006], [126.0, 3290.0638297872333], [125.0, 2671.7083333333335], [124.0, 3267.2380952380954], [134.0, 6500.272727272727], [135.0, 6691.25], [133.0, 985.3478260869565], [132.0, 3715.1666666666656], [131.0, 5833.41379310345], [130.0, 4049.7500000000005], [129.0, 1978.6222222222225], [128.0, 1788.5806451612902], [143.0, 1439.2222222222222], [142.0, 1112.0588235294117], [141.0, 3392.2222222222217], [140.0, 1285.4285714285713], [139.0, 1090.875], [138.0, 923.6666666666666], [137.0, 3802.052631578948], [136.0, 737.0], [151.0, 10263.666666666666], [150.0, 1194.2857142857144], [149.0, 1132.2857142857144], [148.0, 4105.058823529413], [147.0, 2101.733333333333], [146.0, 756.5], [145.0, 5763.799999999998], [144.0, 972.65], [159.0, 1117.0], [158.0, 775.4], [157.0, 1349.6], [156.0, 11267.666666666666], [155.0, 5472.5], [154.0, 3198.285714285714], [153.0, 1436.6666666666667], [152.0, 1084.2222222222222], [167.0, 1523.8], [166.0, 21599.0], [165.0, 1383.8], [164.0, 784.5], [163.0, 4353.2], [162.0, 1111.8], [161.0, 921.25], [160.0, 464.3333333333333], [175.0, 1999.75], [174.0, 971.0], [173.0, 1611.75], [172.0, 1854.25], [171.0, 638.3333333333333], [170.0, 1101.4], [169.0, 841.4285714285714], [168.0, 1119.8], [183.0, 10348.25], [182.0, 311.0], [181.0, 3280.375], [180.0, 7900.222222222221], [179.0, 452.3333333333333], [178.0, 600.6666666666666], [177.0, 1801.8], [176.0, 5354.75], [191.0, 1002.5999999999999], [190.0, 7582.615384615384], [189.0, 5451.7], [188.0, 5795.11111111111], [187.0, 1415.875], [186.0, 1180.3333333333333], [185.0, 2789.5714285714284], [184.0, 41439.333333333336], [199.0, 2313.8333333333335], [198.0, 9783.4], [197.0, 8535.125], [196.0, 10466.75], [195.0, 3170.3571428571427], [194.0, 3444.826086956522], [193.0, 5358.636363636363], [192.0, 5971.368421052632], [207.0, 7480.666666666666], [206.0, 256.0], [205.0, 850.0], [204.0, 10450.75], [203.0, 1308.0], [202.0, 1117.0], [201.0, 3723.3], [200.0, 3291.1428571428573], [215.0, 1181.7142857142858], [214.0, 1223.0], [213.0, 558.75], [212.0, 8570.6], [211.0, 7342.500000000001], [210.0, 632.6666666666666], [209.0, 2238.0], [208.0, 1456.6666666666665], [223.0, 718.5], [222.0, 1817.3333333333333], [221.0, 778.25], [220.0, 371.3333333333333], [219.0, 26213.333333333336], [218.0, 14852.0], [217.0, 268.5], [216.0, 7903.8], [231.0, 834.75], [230.0, 1645.5], [229.0, 6398.714285714285], [228.0, 1500.857142857143], [227.0, 6071.0], [226.0, 1063.2], [225.0, 2006.8333333333333], [224.0, 737.6666666666666], [238.0, 3542.0], [237.0, 922.5], [236.0, 896.0], [235.0, 1039.5], [234.0, 1503.0], [233.0, 5280.0], [232.0, 12812.0], [247.0, 1691.0], [246.0, 1834.0], [245.0, 6375.5], [244.0, 2066.0], [243.0, 2378.5], [242.0, 3067.2], [241.0, 17661.5], [240.0, 1039.0], [255.0, 7676.0], [254.0, 291.5], [253.0, 15359.0], [252.0, 4496.0], [251.0, 8684.0], [250.0, 1640.6666666666665], [249.0, 826.0], [248.0, 1392.5], [259.0, 7166.0], [266.0, 7094.249999999999], [267.0, 1168.0], [265.0, 1664.0], [264.0, 760.0], [263.0, 2878.3333333333335], [262.0, 1828.3333333333335], [261.0, 2875.0], [260.0, 8629.0], [258.0, 3233.5], [257.0, 14547.5], [256.0, 272.0], [271.0, 592.25], [270.0, 8968.6], [269.0, 659.0], [268.0, 1334.0], [287.0, 2802.8], [285.0, 3022.8], [284.0, 2582.0], [275.0, 278.0], [274.0, 5568.4], [273.0, 2488.0], [272.0, 2348.5], [286.0, 4308.5], [283.0, 1673.3333333333333], [282.0, 2853.0], [281.0, 1309.0], [280.0, 1285.0], [279.0, 279.0], [278.0, 3641.0], [277.0, 8847.0], [276.0, 5606.75], [291.0, 2325.5], [297.0, 5160.153846153846], [292.0, 3757.3750000000005], [299.0, 2699.809523809524], [298.0, 3682.8235294117653], [296.0, 4071.866666666667], [303.0, 3090.6666666666665], [300.0, 6735.266666666666], [301.0, 2282.1875], [302.0, 6025.181818181818], [295.0, 2883.9285714285716], [294.0, 2304.0], [293.0, 5907.5], [290.0, 3196.5], [289.0, 2695.1666666666665], [288.0, 2506.5], [306.0, 7220.473684210526], [304.0, 2019.8], [308.0, 6564.249999999999], [307.0, 4227.749999999998], [316.0, 4386.8], [319.0, 1972.3333333333335], [318.0, 2748.75], [317.0, 2967.7777777777774], [305.0, 3902.3333333333326], [313.0, 2728.666666666667], [315.0, 3214.285714285714], [314.0, 5580.363636363636], [312.0, 2984.538461538462], [310.0, 1962.6666666666667], [311.0, 2975.3], [309.0, 4353.619047619048], [333.0, 7745.857142857143], [320.0, 2958.8888888888887], [327.0, 8179.2], [325.0, 2934.6666666666665], [324.0, 3885.3749999999995], [326.0, 1773.0000000000002], [329.0, 6182.777777777777], [328.0, 4425.4], [335.0, 3273.777777777778], [334.0, 12874.285714285716], [332.0, 5779.636363636363], [323.0, 1222.25], [322.0, 2022.2857142857142], [321.0, 1660.625], [331.0, 6069.333333333333], [330.0, 5422.500000000001], [350.0, 3527.5454545454545], [351.0, 4207.76923076923], [349.0, 6617.923076923076], [348.0, 7485.857142857143], [347.0, 4099.615384615385], [345.0, 5684.692307692308], [344.0, 6515.555555555557], [343.0, 2605.4444444444443], [337.0, 1863.4], [336.0, 1489.1666666666667], [339.0, 914.0], [338.0, 8322.333333333334], [342.0, 5928.0], [341.0, 8176.555555555556], [340.0, 10761.0], [346.0, 4269.363636363636], [367.0, 9533.5], [355.0, 4587.909090909091], [356.0, 2758.181818181818], [357.0, 2899.0], [359.0, 2363.8], [352.0, 2938.3636363636365], [354.0, 9040.000000000002], [353.0, 8835.6875], [358.0, 1612.25], [360.0, 2422.166666666667], [361.0, 4125.375], [366.0, 9790.0], [365.0, 3102.0], [364.0, 4786.0], [363.0, 3315.1249999999995], [362.0, 6397.166666666666], [368.0, 11422.0], [372.0, 8994.0], [371.0, 5928.0], [380.0, 5488.0], [382.0, 2778.0], [381.0, 5927.0], [370.0, 2765.8], [374.0, 9589.333333333332], [373.0, 2658.0], [369.0, 2841.75], [376.0, 3046.5], [377.0, 1368.3333333333333], [379.0, 10369.333333333332], [378.0, 9635.666666666666], [383.0, 3515.1428571428573], [375.0, 8106.0], [385.0, 4781.0], [389.0, 6425.666666666667], [390.0, 3603.0], [388.0, 4802.6], [386.0, 16163.5], [384.0, 2736.6666666666665], [391.0, 9105.0], [387.0, 6394.2], [399.0, 1654.5], [393.0, 9956.333333333334], [392.0, 1709.6666666666667], [395.0, 4952.0], [394.0, 12223.0], [398.0, 5170.5], [397.0, 1376.3333333333333], [396.0, 1747.5], [413.0, 2789.25], [404.0, 7112.333333333334], [406.0, 3533.5], [405.0, 3504.5], [415.0, 4964.666666666667], [414.0, 26853.0], [411.0, 3706.75], [412.0, 2616.0], [403.0, 2737.3333333333335], [401.0, 1504.5], [402.0, 3240.0], [400.0, 4274.666666666667], [410.0, 5479.5], [409.0, 3079.0], [408.0, 1536.0], [407.0, 2034.0], [431.0, 7752.5], [421.0, 13090.714285714286], [420.0, 8557.555555555555], [428.0, 3725.0], [419.0, 4114.0], [418.0, 18748.5], [417.0, 3235.0], [416.0, 3003.0], [423.0, 7012.857142857143], [422.0, 7053.5], [427.0, 4676.0], [430.0, 2409.2], [429.0, 4855.333333333334], [426.0, 3701.0], [425.0, 13888.5], [424.0, 4772.0], [446.0, 8413.285714285716], [433.0, 4698.5], [432.0, 6110.666666666667], [434.0, 2586.285714285714], [445.0, 4797.166666666667], [444.0, 10791.8], [440.0, 4141.0], [439.0, 2019.3333333333333], [438.0, 2068.0], [437.0, 5231.0], [436.0, 3908.0], [442.0, 8348.0], [443.0, 4691.0], [441.0, 11036.2], [447.0, 4133.428571428572], [462.0, 4000.5], [450.0, 5338.0], [449.0, 10007.2], [448.0, 4348.25], [451.0, 5528.799999999999], [455.0, 4721.0], [454.0, 7085.666666666667], [453.0, 5651.666666666667], [452.0, 6967.6], [458.0, 4096.333333333333], [457.0, 2575.0], [461.0, 4316.666666666667], [460.0, 3684.5], [463.0, 4330.0], [459.0, 2971.5], [456.0, 3652.3333333333335], [479.0, 4120.0], [472.0, 4411.0], [478.0, 6247.0], [477.0, 6762.5], [476.0, 4875.7], [467.0, 3922.0], [466.0, 3285.0], [465.0, 2226.0], [464.0, 3961.0], [475.0, 9412.0], [474.0, 5962.75], [473.0, 3874.0], [471.0, 5460.5], [470.0, 3591.0], [469.0, 2237.0], [468.0, 3911.0], [494.0, 10165.142857142857], [480.0, 6253.999999999999], [487.0, 5323.333333333333], [486.0, 8579.727272727272], [485.0, 4167.8], [484.0, 7050.666666666667], [489.0, 6618.499999999999], [488.0, 5810.818181818182], [495.0, 8604.6], [493.0, 6215.5], [492.0, 6921.5], [491.0, 9402.166666666666], [490.0, 10908.75], [482.0, 4726.222222222223], [483.0, 9816.4], [481.0, 8055.142857142857], [504.0, 6072.4], [508.0, 10954.666666666666], [511.0, 11163.2], [510.0, 5806.0], [509.0, 6811.333333333333], [507.0, 6114.75], [506.0, 8014.166666666667], [505.0, 7343.8], [503.0, 9122.333333333334], [502.0, 8324.0], [500.0, 5243.0], [501.0, 8554.0], [499.0, 7396.8], [497.0, 9133.8], [498.0, 8299.0], [496.0, 12521.166666666668], [517.0, 9846.666666666668], [529.0, 7036.833333333334], [512.0, 7012.5], [514.0, 6656.4], [513.0, 6315.333333333333], [515.0, 3148.5], [516.0, 2913.3333333333335], [518.0, 9936.4], [523.0, 7234.749999999999], [522.0, 8144.75], [521.0, 7254.0], [520.0, 6776.5], [525.0, 3363.6], [524.0, 7369.0], [527.0, 5203.142857142857], [526.0, 6581.142857142857], [531.0, 6781.5], [533.0, 7718.166666666666], [535.0, 7930.5], [534.0, 8646.875], [532.0, 5217.5], [530.0, 7928.3], [528.0, 5732.777777777777], [543.0, 10228.142857142857], [542.0, 7337.250000000001], [541.0, 9722.0], [540.0, 8681.2], [539.0, 15297.666666666666], [538.0, 12520.75], [537.0, 9536.999999999998], [536.0, 8307.714285714286], [519.0, 8882.8], [549.0, 4926.0], [551.0, 6132.875], [550.0, 12350.0], [569.0, 8782.0], [568.0, 8803.6], [571.0, 10945.333333333334], [570.0, 7496.4], [574.0, 3683.0], [573.0, 3932.3333333333335], [560.0, 10548.0], [575.0, 11385.5], [562.0, 7242.8], [561.0, 7809.2], [548.0, 6740.444444444444], [547.0, 4785.714285714286], [546.0, 8322.25], [545.0, 6972.125], [544.0, 8937.125000000002], [559.0, 11726.666666666668], [558.0, 11578.5], [557.0, 7910.0], [556.0, 7474.666666666667], [555.0, 7792.75], [554.0, 11917.666666666666], [553.0, 8140.2], [552.0, 9913.75], [564.0, 6145.5], [566.0, 12487.0], [567.0, 10713.8], [565.0, 9966.0], [563.0, 11736.0], [588.0, 11391.0], [589.0, 8288.0], [578.0, 7991.0], [576.0, 5878.0], [587.0, 5834.0], [586.0, 11426.0], [585.0, 10167.0], [584.0, 4513.0], [583.0, 4524.0], [581.0, 4512.0], [580.0, 4508.0], [579.0, 4533.0], [1.0, 3899.789473684211]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[34.86871428571426, 681.4101746031803]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 589.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 34.13333333333333, "minX": 1.7291799E12, "maxY": 5231076.166666667, "series": [{"data": [[1.72918122E12, 25888.516666666666], [1.72918026E12, 4912439.433333334], [1.72918056E12, 4849222.166666667], [1.72918062E12, 4857354.95], [1.72918092E12, 4852575.75], [1.72917996E12, 5231076.166666667], [1.7291805E12, 4867134.6], [1.7291808E12, 4857414.066666666], [1.72918086E12, 4855806.45], [1.7291799E12, 148856.11666666667], [1.72918116E12, 4276437.4], [1.7291802E12, 4776514.633333334], [1.72918074E12, 4847694.7], [1.72918104E12, 4850962.0], [1.72918008E12, 4891366.233333333], [1.7291811E12, 4779761.433333334], [1.72918014E12, 4860638.683333334], [1.72918044E12, 4850962.3], [1.72918098E12, 4852578.683333334], [1.72918002E12, 4904277.45], [1.72918032E12, 4860667.7], [1.72918038E12, 4871996.05], [1.72918068E12, 4855772.1]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72918122E12, 34.13333333333333], [1.72918026E12, 6476.8], [1.72918056E12, 6393.6], [1.72918062E12, 6404.266666666666], [1.72918092E12, 6397.866666666667], [1.72917996E12, 6897.066666666667], [1.7291805E12, 6417.066666666667], [1.7291808E12, 6404.266666666666], [1.72918086E12, 6402.133333333333], [1.7291799E12, 196.26666666666668], [1.72918116E12, 5638.4], [1.7291802E12, 6297.6], [1.72918074E12, 6391.466666666666], [1.72918104E12, 6395.733333333334], [1.72918008E12, 6449.066666666667], [1.7291811E12, 6301.866666666667], [1.72918014E12, 6408.533333333334], [1.72918044E12, 6395.733333333334], [1.72918098E12, 6397.866666666667], [1.72918002E12, 6466.133333333333], [1.72918032E12, 6408.533333333334], [1.72918038E12, 6423.466666666666], [1.72918068E12, 6402.133333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918122E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 215.30697364030658, "minX": 1.7291799E12, "maxY": 20298.1875, "series": [{"data": [[1.72918122E12, 20298.1875], [1.72918026E12, 424.0378787878798], [1.72918056E12, 215.30697364030658], [1.72918062E12, 215.84210526315806], [1.72918092E12, 222.19439813271077], [1.72917996E12, 5010.449118465813], [1.7291805E12, 227.4823803191484], [1.7291808E12, 219.75749500333086], [1.72918086E12, 225.57714095301537], [1.7291799E12, 3118.4565217391314], [1.72918116E12, 1808.163828982218], [1.7291802E12, 417.9657859078589], [1.72918074E12, 221.9682910547395], [1.72918104E12, 226.18278852568378], [1.72918008E12, 942.8031756533238], [1.7291811E12, 399.1848341232216], [1.72918014E12, 543.7356857523321], [1.72918044E12, 243.26751167444937], [1.72918098E12, 223.84561520506827], [1.72918002E12, 1259.8139227977579], [1.72918032E12, 383.64946737683044], [1.72918038E12, 262.9176353370973], [1.72918068E12, 222.80406531156257]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918122E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 155.21488154821475, "minX": 1.7291799E12, "maxY": 14829.687500000002, "series": [{"data": [[1.72918122E12, 14829.687500000002], [1.72918026E12, 229.98748353096167], [1.72918056E12, 155.21488154821475], [1.72918062E12, 156.83677548301117], [1.72918092E12, 163.32077359119697], [1.72917996E12, 2709.9415403649796], [1.7291805E12, 165.60704787234076], [1.7291808E12, 158.4013990672884], [1.72918086E12, 165.95334888370573], [1.7291799E12, 2427.9130434782605], [1.72918116E12, 1343.4581914491118], [1.7291802E12, 236.7835365853661], [1.72918074E12, 160.62249666221626], [1.72918104E12, 166.6094062708471], [1.72918008E12, 576.7016209063852], [1.7291811E12, 291.02132701421795], [1.72918014E12, 340.21438082556585], [1.72918044E12, 179.01534356237485], [1.72918098E12, 165.49649883294438], [1.72918002E12, 541.9175189706348], [1.72918032E12, 184.89747003994725], [1.72918038E12, 189.97741614081667], [1.72918068E12, 163.15328223925343]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918122E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 104.74941608274945, "minX": 1.7291799E12, "maxY": 14691.9375, "series": [{"data": [[1.72918122E12, 14691.9375], [1.72918026E12, 171.1564558629776], [1.72918056E12, 104.74941608274945], [1.72918062E12, 106.05063291139228], [1.72918092E12, 111.99399799933339], [1.72917996E12, 1873.0324775750123], [1.7291805E12, 113.6240026595743], [1.7291808E12, 105.70219853431051], [1.72918086E12, 115.31889370209923], [1.7291799E12, 1725.934782608696], [1.72918116E12, 1225.0321604237602], [1.7291802E12, 172.17818428184276], [1.72918074E12, 108.30841121495322], [1.72918104E12, 113.96864576384256], [1.72918008E12, 410.6083360899762], [1.7291811E12, 222.63744075829354], [1.72918014E12, 232.71005326231725], [1.72918044E12, 124.56104069379599], [1.72918098E12, 114.09303101033703], [1.72918002E12, 283.60046189376413], [1.72918032E12, 130.2020639147809], [1.72918038E12, 133.9083361009628], [1.72918068E12, 109.64511829390197]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918122E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 155.0, "minX": 1.7291799E12, "maxY": 403800.0, "series": [{"data": [[1.72918122E12, 69381.0], [1.72918026E12, 360314.0], [1.72918056E12, 1535.0], [1.72918062E12, 3207.0], [1.72918092E12, 3257.0], [1.72917996E12, 61895.0], [1.7291805E12, 1724.0], [1.7291808E12, 1576.0], [1.72918086E12, 3201.0], [1.7291799E12, 6782.0], [1.72918116E12, 24438.0], [1.7291802E12, 295954.0], [1.72918074E12, 4064.0], [1.72918104E12, 3198.0], [1.72918008E12, 173675.0], [1.7291811E12, 15249.0], [1.72918014E12, 201729.0], [1.72918044E12, 3203.0], [1.72918098E12, 3188.0], [1.72918002E12, 116712.0], [1.72918032E12, 403800.0], [1.72918038E12, 3342.0], [1.72918068E12, 1542.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72918122E12, 37385.40000000003], [1.72918026E12, 482.0], [1.72918056E12, 234.0], [1.72918062E12, 234.0], [1.72918092E12, 228.0], [1.72917996E12, 13928.2], [1.7291805E12, 234.0], [1.7291808E12, 238.0], [1.72918086E12, 226.80000000000018], [1.7291799E12, 5386.900000000001], [1.72918116E12, 3857.1999999999966], [1.7291802E12, 625.1000000000008], [1.72918074E12, 230.0], [1.72918104E12, 236.0], [1.72918008E12, 1649.0], [1.7291811E12, 847.0], [1.72918014E12, 760.5], [1.72918044E12, 254.0999999999999], [1.72918098E12, 226.0], [1.72918002E12, 652.8000000000002], [1.72918032E12, 265.0], [1.72918038E12, 439.0], [1.72918068E12, 227.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72918122E12, 69381.0], [1.72918026E12, 1931.4500000000016], [1.72918056E12, 1192.0], [1.72918062E12, 1187.9699999999998], [1.72918092E12, 1189.0], [1.72917996E12, 48268.079999999994], [1.7291805E12, 1204.1899999999987], [1.7291808E12, 1186.9699999999998], [1.72918086E12, 1195.0], [1.7291799E12, 6782.0], [1.72918116E12, 15898.559999999998], [1.7291802E12, 1660.2199999999948], [1.72918074E12, 1193.0300000000002], [1.72918104E12, 1195.0199999999995], [1.72918008E12, 7621.719999999954], [1.7291811E12, 2808.249999999999], [1.72918014E12, 2189.9999999999964], [1.72918044E12, 1225.0099999999998], [1.72918098E12, 1200.0], [1.72918002E12, 62431.07999999978], [1.72918032E12, 1251.4999999999982], [1.72918038E12, 1263.4000000000033], [1.72918068E12, 1192.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72918122E12, 69381.0], [1.72918026E12, 1183.15], [1.72918056E12, 288.0], [1.72918062E12, 337.0], [1.72918092E12, 312.0], [1.72917996E12, 21561.19999999999], [1.7291805E12, 447.0], [1.7291808E12, 279.8499999999999], [1.72918086E12, 459.7000000000003], [1.7291799E12, 5956.099999999999], [1.72918116E12, 7348.4], [1.7291802E12, 1193.35], [1.72918074E12, 439.3000000000002], [1.72918104E12, 445.1499999999992], [1.72918008E12, 2317.3999999999937], [1.7291811E12, 1270.5], [1.72918014E12, 1192.0], [1.72918044E12, 569.1499999999992], [1.72918098E12, 328.0], [1.72918002E12, 1262.4], [1.72918032E12, 573.75], [1.72918038E12, 688.8000000000006], [1.72918068E12, 480.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72918122E12, 14655.0], [1.72918026E12, 161.0], [1.72918056E12, 158.0], [1.72918062E12, 158.0], [1.72918092E12, 161.0], [1.72917996E12, 171.0], [1.7291805E12, 161.0], [1.7291808E12, 161.0], [1.72918086E12, 157.0], [1.7291799E12, 713.0], [1.72918116E12, 167.0], [1.7291802E12, 162.0], [1.72918074E12, 161.0], [1.72918104E12, 155.0], [1.72918008E12, 161.0], [1.7291811E12, 157.0], [1.72918014E12, 159.0], [1.72918044E12, 156.0], [1.72918098E12, 157.0], [1.72918002E12, 169.0], [1.72918032E12, 158.0], [1.72918038E12, 157.0], [1.72918068E12, 157.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72918122E12, 15477.0], [1.72918026E12, 192.0], [1.72918056E12, 188.0], [1.72918062E12, 187.0], [1.72918092E12, 189.0], [1.72917996E12, 1603.0], [1.7291805E12, 189.0], [1.7291808E12, 193.0], [1.72918086E12, 186.0], [1.7291799E12, 2672.5], [1.72918116E12, 763.0], [1.7291802E12, 195.0], [1.72918074E12, 186.0], [1.72918104E12, 189.0], [1.72918008E12, 313.0], [1.7291811E12, 213.0], [1.72918014E12, 198.0], [1.72918044E12, 188.0], [1.72918098E12, 188.0], [1.72918002E12, 228.0], [1.72918032E12, 189.0], [1.72918038E12, 193.0], [1.72918068E12, 187.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918122E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 175.5, "minX": 1.0, "maxY": 19249.0, "series": [{"data": [[2.0, 15346.0], [3.0, 15447.0], [4.0, 3153.0], [5.0, 192.0], [6.0, 919.5], [7.0, 15761.0], [8.0, 175.5], [9.0, 1632.0], [11.0, 7340.0], [12.0, 185.5], [13.0, 5294.0], [14.0, 207.5], [15.0, 1495.0], [16.0, 740.0], [17.0, 194.5], [18.0, 1460.5], [19.0, 194.0], [20.0, 472.0], [21.0, 334.5], [22.0, 1469.5], [23.0, 198.0], [24.0, 682.0], [25.0, 188.0], [26.0, 275.5], [27.0, 188.0], [28.0, 230.5], [29.0, 215.5], [30.0, 460.0], [31.0, 202.0], [33.0, 585.0], [32.0, 332.5], [35.0, 524.0], [34.0, 201.5], [37.0, 191.0], [36.0, 188.0], [38.0, 224.5], [39.0, 206.5], [41.0, 209.0], [40.0, 219.0], [42.0, 194.0], [43.0, 213.0], [45.0, 195.0], [44.0, 196.0], [46.0, 198.0], [47.0, 188.0], [49.0, 187.0], [48.0, 193.0], [50.0, 187.0], [51.0, 190.0], [52.0, 190.0], [53.0, 192.0], [55.0, 195.0], [54.0, 192.0], [57.0, 199.0], [56.0, 198.0], [58.0, 201.0], [59.0, 196.0], [60.0, 218.0], [61.0, 216.0], [62.0, 201.0], [63.0, 209.0], [67.0, 318.5], [65.0, 222.0], [66.0, 300.5], [64.0, 259.5], [70.0, 221.5], [71.0, 457.0], [69.0, 271.0], [68.0, 469.0], [73.0, 315.0], [75.0, 283.0], [72.0, 228.0], [74.0, 399.5], [79.0, 6322.0], [77.0, 215.0], [76.0, 214.5], [78.0, 392.5], [81.0, 474.5], [80.0, 215.0], [82.0, 195.0], [87.0, 925.0], [84.0, 462.5], [85.0, 223.0], [86.0, 209.0], [90.0, 534.0], [89.0, 513.0], [88.0, 219.0], [92.0, 551.0], [96.0, 1230.0], [102.0, 3872.5], [103.0, 1809.0], [105.0, 6529.0], [113.0, 638.0], [1.0, 19249.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 113.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 126.0, "minX": 1.0, "maxY": 16409.0, "series": [{"data": [[2.0, 14120.5], [3.0, 15203.0], [4.0, 1689.0], [5.0, 134.5], [6.0, 216.0], [7.0, 15195.0], [8.0, 126.0], [9.0, 925.0], [11.0, 4491.0], [12.0, 134.0], [13.0, 3553.0], [14.0, 142.5], [15.0, 927.0], [16.0, 543.5], [17.0, 142.0], [18.0, 1129.0], [19.0, 136.5], [20.0, 277.0], [21.0, 222.0], [22.0, 1333.0], [23.0, 138.0], [24.0, 307.5], [25.0, 134.0], [26.0, 195.0], [27.0, 133.0], [28.0, 157.0], [29.0, 146.5], [30.0, 273.5], [31.0, 142.0], [33.0, 345.0], [32.0, 210.5], [35.0, 330.0], [34.0, 142.0], [37.0, 136.0], [36.0, 135.0], [38.0, 159.5], [39.0, 141.0], [41.0, 144.0], [40.0, 149.0], [42.0, 137.0], [43.0, 147.0], [45.0, 138.0], [44.0, 138.0], [46.0, 139.0], [47.0, 134.5], [49.0, 133.0], [48.0, 137.0], [50.0, 133.5], [51.0, 135.0], [52.0, 135.0], [53.0, 136.0], [55.0, 138.0], [54.0, 137.0], [57.0, 140.0], [56.0, 139.0], [58.0, 141.0], [59.0, 139.0], [60.0, 150.0], [61.0, 149.0], [62.0, 142.0], [63.0, 146.0], [67.0, 171.5], [65.0, 155.0], [66.0, 181.0], [64.0, 166.0], [70.0, 156.0], [71.0, 220.5], [69.0, 175.0], [68.0, 299.5], [73.0, 213.0], [75.0, 180.0], [72.0, 157.0], [74.0, 222.5], [79.0, 3197.0], [77.0, 148.0], [76.0, 151.0], [78.0, 251.0], [81.0, 280.0], [80.0, 150.5], [82.0, 137.0], [87.0, 559.0], [84.0, 247.0], [85.0, 174.0], [86.0, 143.5], [90.0, 379.5], [89.0, 282.0], [88.0, 154.0], [92.0, 350.0], [96.0, 1158.0], [102.0, 2872.5], [103.0, 1168.0], [105.0, 3629.0], [113.0, 368.0], [1.0, 16409.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 113.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.416666666666667, "minX": 1.7291799E12, "maxY": 50.25, "series": [{"data": [[1.72918026E12, 49.86666666666667], [1.72918056E12, 49.983333333333334], [1.72918062E12, 50.03333333333333], [1.72918092E12, 49.96666666666667], [1.72917996E12, 50.0], [1.7291805E12, 50.05], [1.7291808E12, 50.0], [1.72918086E12, 50.0], [1.7291799E12, 6.416666666666667], [1.72918116E12, 43.38333333333333], [1.7291802E12, 49.9], [1.72918074E12, 50.0], [1.72918104E12, 49.96666666666667], [1.72918008E12, 50.25], [1.7291811E12, 49.983333333333334], [1.72918014E12, 50.016666666666666], [1.72918044E12, 50.0], [1.72918098E12, 50.016666666666666], [1.72918002E12, 49.95], [1.72918032E12, 50.016666666666666], [1.72918038E12, 50.2], [1.72918068E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918116E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.7291799E12, "maxY": 53.88333333333333, "series": [{"data": [[1.72918122E12, 0.26666666666666666], [1.72918026E12, 50.6], [1.72918056E12, 49.95], [1.72918062E12, 50.03333333333333], [1.72918092E12, 49.983333333333334], [1.72917996E12, 53.88333333333333], [1.7291805E12, 50.13333333333333], [1.7291808E12, 50.03333333333333], [1.72918086E12, 50.016666666666666], [1.7291799E12, 1.5333333333333334], [1.72918116E12, 44.05], [1.7291802E12, 49.2], [1.72918074E12, 49.93333333333333], [1.72918104E12, 49.96666666666667], [1.72918008E12, 50.38333333333333], [1.7291811E12, 49.233333333333334], [1.72918014E12, 50.06666666666667], [1.72918044E12, 49.96666666666667], [1.72918098E12, 49.983333333333334], [1.72918002E12, 50.516666666666666], [1.72918032E12, 50.06666666666667], [1.72918038E12, 50.18333333333333], [1.72918068E12, 50.016666666666666]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918122E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.7291799E12, "maxY": 53.88333333333333, "series": [{"data": [[1.72918122E12, 0.26666666666666666], [1.72918026E12, 50.6], [1.72918056E12, 49.95], [1.72918062E12, 50.03333333333333], [1.72918092E12, 49.983333333333334], [1.72917996E12, 53.88333333333333], [1.7291805E12, 50.13333333333333], [1.7291808E12, 50.03333333333333], [1.72918086E12, 50.016666666666666], [1.7291799E12, 1.5333333333333334], [1.72918116E12, 44.05], [1.7291802E12, 49.2], [1.72918074E12, 49.93333333333333], [1.72918104E12, 49.96666666666667], [1.72918008E12, 50.38333333333333], [1.7291811E12, 49.233333333333334], [1.72918014E12, 50.06666666666667], [1.72918044E12, 49.96666666666667], [1.72918098E12, 49.983333333333334], [1.72918002E12, 50.516666666666666], [1.72918032E12, 50.06666666666667], [1.72918038E12, 50.18333333333333], [1.72918068E12, 50.016666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918122E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.7291799E12, "maxY": 53.88333333333333, "series": [{"data": [[1.72918122E12, 0.26666666666666666], [1.72918026E12, 50.6], [1.72918056E12, 49.95], [1.72918062E12, 50.03333333333333], [1.72918092E12, 49.983333333333334], [1.72917996E12, 53.88333333333333], [1.7291805E12, 50.13333333333333], [1.7291808E12, 50.03333333333333], [1.72918086E12, 50.016666666666666], [1.7291799E12, 1.5333333333333334], [1.72918116E12, 44.05], [1.7291802E12, 49.2], [1.72918074E12, 49.93333333333333], [1.72918104E12, 49.96666666666667], [1.72918008E12, 50.38333333333333], [1.7291811E12, 49.233333333333334], [1.72918014E12, 50.06666666666667], [1.72918044E12, 49.96666666666667], [1.72918098E12, 49.983333333333334], [1.72918002E12, 50.516666666666666], [1.72918032E12, 50.06666666666667], [1.72918038E12, 50.18333333333333], [1.72918068E12, 50.016666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918122E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

