/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 155.0, "minX": 0.0, "maxY": 377603.0, "series": [{"data": [[0.0, 155.0], [0.1, 162.0], [0.2, 164.0], [0.3, 165.0], [0.4, 165.0], [0.5, 166.0], [0.6, 166.0], [0.7, 167.0], [0.8, 167.0], [0.9, 167.0], [1.0, 167.0], [1.1, 168.0], [1.2, 168.0], [1.3, 168.0], [1.4, 168.0], [1.5, 168.0], [1.6, 169.0], [1.7, 169.0], [1.8, 169.0], [1.9, 169.0], [2.0, 169.0], [2.1, 169.0], [2.2, 169.0], [2.3, 170.0], [2.4, 170.0], [2.5, 170.0], [2.6, 170.0], [2.7, 170.0], [2.8, 170.0], [2.9, 170.0], [3.0, 170.0], [3.1, 170.0], [3.2, 171.0], [3.3, 171.0], [3.4, 171.0], [3.5, 171.0], [3.6, 171.0], [3.7, 171.0], [3.8, 171.0], [3.9, 171.0], [4.0, 171.0], [4.1, 171.0], [4.2, 171.0], [4.3, 171.0], [4.4, 172.0], [4.5, 172.0], [4.6, 172.0], [4.7, 172.0], [4.8, 172.0], [4.9, 172.0], [5.0, 172.0], [5.1, 172.0], [5.2, 172.0], [5.3, 172.0], [5.4, 172.0], [5.5, 172.0], [5.6, 172.0], [5.7, 172.0], [5.8, 173.0], [5.9, 173.0], [6.0, 173.0], [6.1, 173.0], [6.2, 173.0], [6.3, 173.0], [6.4, 173.0], [6.5, 173.0], [6.6, 173.0], [6.7, 173.0], [6.8, 173.0], [6.9, 173.0], [7.0, 173.0], [7.1, 173.0], [7.2, 173.0], [7.3, 173.0], [7.4, 174.0], [7.5, 174.0], [7.6, 174.0], [7.7, 174.0], [7.8, 174.0], [7.9, 174.0], [8.0, 174.0], [8.1, 174.0], [8.2, 174.0], [8.3, 174.0], [8.4, 174.0], [8.5, 174.0], [8.6, 174.0], [8.7, 174.0], [8.8, 174.0], [8.9, 174.0], [9.0, 174.0], [9.1, 174.0], [9.2, 175.0], [9.3, 175.0], [9.4, 175.0], [9.5, 175.0], [9.6, 175.0], [9.7, 175.0], [9.8, 175.0], [9.9, 175.0], [10.0, 175.0], [10.1, 175.0], [10.2, 175.0], [10.3, 175.0], [10.4, 175.0], [10.5, 175.0], [10.6, 175.0], [10.7, 175.0], [10.8, 175.0], [10.9, 175.0], [11.0, 175.0], [11.1, 175.0], [11.2, 175.0], [11.3, 175.0], [11.4, 175.0], [11.5, 176.0], [11.6, 176.0], [11.7, 176.0], [11.8, 176.0], [11.9, 176.0], [12.0, 176.0], [12.1, 176.0], [12.2, 176.0], [12.3, 176.0], [12.4, 176.0], [12.5, 176.0], [12.6, 176.0], [12.7, 176.0], [12.8, 176.0], [12.9, 176.0], [13.0, 176.0], [13.1, 176.0], [13.2, 176.0], [13.3, 176.0], [13.4, 176.0], [13.5, 176.0], [13.6, 176.0], [13.7, 176.0], [13.8, 177.0], [13.9, 177.0], [14.0, 177.0], [14.1, 177.0], [14.2, 177.0], [14.3, 177.0], [14.4, 177.0], [14.5, 177.0], [14.6, 177.0], [14.7, 177.0], [14.8, 177.0], [14.9, 177.0], [15.0, 177.0], [15.1, 177.0], [15.2, 177.0], [15.3, 177.0], [15.4, 177.0], [15.5, 177.0], [15.6, 177.0], [15.7, 177.0], [15.8, 177.0], [15.9, 177.0], [16.0, 177.0], [16.1, 177.0], [16.2, 177.0], [16.3, 178.0], [16.4, 178.0], [16.5, 178.0], [16.6, 178.0], [16.7, 178.0], [16.8, 178.0], [16.9, 178.0], [17.0, 178.0], [17.1, 178.0], [17.2, 178.0], [17.3, 178.0], [17.4, 178.0], [17.5, 178.0], [17.6, 178.0], [17.7, 178.0], [17.8, 178.0], [17.9, 178.0], [18.0, 178.0], [18.1, 178.0], [18.2, 178.0], [18.3, 178.0], [18.4, 178.0], [18.5, 178.0], [18.6, 178.0], [18.7, 178.0], [18.8, 178.0], [18.9, 178.0], [19.0, 179.0], [19.1, 179.0], [19.2, 179.0], [19.3, 179.0], [19.4, 179.0], [19.5, 179.0], [19.6, 179.0], [19.7, 179.0], [19.8, 179.0], [19.9, 179.0], [20.0, 179.0], [20.1, 179.0], [20.2, 179.0], [20.3, 179.0], [20.4, 179.0], [20.5, 179.0], [20.6, 179.0], [20.7, 179.0], [20.8, 179.0], [20.9, 179.0], [21.0, 179.0], [21.1, 179.0], [21.2, 179.0], [21.3, 179.0], [21.4, 179.0], [21.5, 179.0], [21.6, 180.0], [21.7, 180.0], [21.8, 180.0], [21.9, 180.0], [22.0, 180.0], [22.1, 180.0], [22.2, 180.0], [22.3, 180.0], [22.4, 180.0], [22.5, 180.0], [22.6, 180.0], [22.7, 180.0], [22.8, 180.0], [22.9, 180.0], [23.0, 180.0], [23.1, 180.0], [23.2, 180.0], [23.3, 180.0], [23.4, 180.0], [23.5, 180.0], [23.6, 180.0], [23.7, 180.0], [23.8, 180.0], [23.9, 180.0], [24.0, 180.0], [24.1, 180.0], [24.2, 180.0], [24.3, 180.0], [24.4, 181.0], [24.5, 181.0], [24.6, 181.0], [24.7, 181.0], [24.8, 181.0], [24.9, 181.0], [25.0, 181.0], [25.1, 181.0], [25.2, 181.0], [25.3, 181.0], [25.4, 181.0], [25.5, 181.0], [25.6, 181.0], [25.7, 181.0], [25.8, 181.0], [25.9, 181.0], [26.0, 181.0], [26.1, 181.0], [26.2, 181.0], [26.3, 181.0], [26.4, 181.0], [26.5, 181.0], [26.6, 181.0], [26.7, 181.0], [26.8, 181.0], [26.9, 181.0], [27.0, 181.0], [27.1, 182.0], [27.2, 182.0], [27.3, 182.0], [27.4, 182.0], [27.5, 182.0], [27.6, 182.0], [27.7, 182.0], [27.8, 182.0], [27.9, 182.0], [28.0, 182.0], [28.1, 182.0], [28.2, 182.0], [28.3, 182.0], [28.4, 182.0], [28.5, 182.0], [28.6, 182.0], [28.7, 182.0], [28.8, 182.0], [28.9, 182.0], [29.0, 182.0], [29.1, 182.0], [29.2, 182.0], [29.3, 182.0], [29.4, 182.0], [29.5, 182.0], [29.6, 182.0], [29.7, 182.0], [29.8, 183.0], [29.9, 183.0], [30.0, 183.0], [30.1, 183.0], [30.2, 183.0], [30.3, 183.0], [30.4, 183.0], [30.5, 183.0], [30.6, 183.0], [30.7, 183.0], [30.8, 183.0], [30.9, 183.0], [31.0, 183.0], [31.1, 183.0], [31.2, 183.0], [31.3, 183.0], [31.4, 183.0], [31.5, 183.0], [31.6, 183.0], [31.7, 183.0], [31.8, 183.0], [31.9, 183.0], [32.0, 183.0], [32.1, 183.0], [32.2, 183.0], [32.3, 184.0], [32.4, 184.0], [32.5, 184.0], [32.6, 184.0], [32.7, 184.0], [32.8, 184.0], [32.9, 184.0], [33.0, 184.0], [33.1, 184.0], [33.2, 184.0], [33.3, 184.0], [33.4, 184.0], [33.5, 184.0], [33.6, 184.0], [33.7, 184.0], [33.8, 184.0], [33.9, 184.0], [34.0, 184.0], [34.1, 184.0], [34.2, 184.0], [34.3, 184.0], [34.4, 184.0], [34.5, 184.0], [34.6, 185.0], [34.7, 185.0], [34.8, 185.0], [34.9, 185.0], [35.0, 185.0], [35.1, 185.0], [35.2, 185.0], [35.3, 185.0], [35.4, 185.0], [35.5, 185.0], [35.6, 185.0], [35.7, 185.0], [35.8, 185.0], [35.9, 185.0], [36.0, 185.0], [36.1, 185.0], [36.2, 185.0], [36.3, 185.0], [36.4, 185.0], [36.5, 185.0], [36.6, 185.0], [36.7, 185.0], [36.8, 186.0], [36.9, 186.0], [37.0, 186.0], [37.1, 186.0], [37.2, 186.0], [37.3, 186.0], [37.4, 186.0], [37.5, 186.0], [37.6, 186.0], [37.7, 186.0], [37.8, 186.0], [37.9, 186.0], [38.0, 186.0], [38.1, 186.0], [38.2, 186.0], [38.3, 186.0], [38.4, 186.0], [38.5, 186.0], [38.6, 186.0], [38.7, 186.0], [38.8, 186.0], [38.9, 187.0], [39.0, 187.0], [39.1, 187.0], [39.2, 187.0], [39.3, 187.0], [39.4, 187.0], [39.5, 187.0], [39.6, 187.0], [39.7, 187.0], [39.8, 187.0], [39.9, 187.0], [40.0, 187.0], [40.1, 187.0], [40.2, 187.0], [40.3, 187.0], [40.4, 187.0], [40.5, 187.0], [40.6, 187.0], [40.7, 187.0], [40.8, 187.0], [40.9, 188.0], [41.0, 188.0], [41.1, 188.0], [41.2, 188.0], [41.3, 188.0], [41.4, 188.0], [41.5, 188.0], [41.6, 188.0], [41.7, 188.0], [41.8, 188.0], [41.9, 188.0], [42.0, 188.0], [42.1, 188.0], [42.2, 188.0], [42.3, 188.0], [42.4, 188.0], [42.5, 188.0], [42.6, 188.0], [42.7, 188.0], [42.8, 188.0], [42.9, 189.0], [43.0, 189.0], [43.1, 189.0], [43.2, 189.0], [43.3, 189.0], [43.4, 189.0], [43.5, 189.0], [43.6, 189.0], [43.7, 189.0], [43.8, 189.0], [43.9, 189.0], [44.0, 189.0], [44.1, 189.0], [44.2, 189.0], [44.3, 189.0], [44.4, 189.0], [44.5, 189.0], [44.6, 190.0], [44.7, 190.0], [44.8, 190.0], [44.9, 190.0], [45.0, 190.0], [45.1, 190.0], [45.2, 190.0], [45.3, 190.0], [45.4, 190.0], [45.5, 190.0], [45.6, 190.0], [45.7, 190.0], [45.8, 190.0], [45.9, 190.0], [46.0, 190.0], [46.1, 191.0], [46.2, 191.0], [46.3, 191.0], [46.4, 191.0], [46.5, 191.0], [46.6, 191.0], [46.7, 191.0], [46.8, 191.0], [46.9, 191.0], [47.0, 191.0], [47.1, 191.0], [47.2, 191.0], [47.3, 191.0], [47.4, 191.0], [47.5, 191.0], [47.6, 191.0], [47.7, 192.0], [47.8, 192.0], [47.9, 192.0], [48.0, 192.0], [48.1, 192.0], [48.2, 192.0], [48.3, 192.0], [48.4, 192.0], [48.5, 192.0], [48.6, 192.0], [48.7, 192.0], [48.8, 192.0], [48.9, 192.0], [49.0, 193.0], [49.1, 193.0], [49.2, 193.0], [49.3, 193.0], [49.4, 193.0], [49.5, 193.0], [49.6, 193.0], [49.7, 193.0], [49.8, 193.0], [49.9, 193.0], [50.0, 193.0], [50.1, 193.0], [50.2, 193.0], [50.3, 194.0], [50.4, 194.0], [50.5, 194.0], [50.6, 194.0], [50.7, 194.0], [50.8, 194.0], [50.9, 194.0], [51.0, 194.0], [51.1, 194.0], [51.2, 194.0], [51.3, 194.0], [51.4, 194.0], [51.5, 194.0], [51.6, 195.0], [51.7, 195.0], [51.8, 195.0], [51.9, 195.0], [52.0, 195.0], [52.1, 195.0], [52.2, 195.0], [52.3, 195.0], [52.4, 195.0], [52.5, 195.0], [52.6, 195.0], [52.7, 195.0], [52.8, 196.0], [52.9, 196.0], [53.0, 196.0], [53.1, 196.0], [53.2, 196.0], [53.3, 196.0], [53.4, 196.0], [53.5, 196.0], [53.6, 196.0], [53.7, 196.0], [53.8, 196.0], [53.9, 197.0], [54.0, 197.0], [54.1, 197.0], [54.2, 197.0], [54.3, 197.0], [54.4, 197.0], [54.5, 197.0], [54.6, 197.0], [54.7, 197.0], [54.8, 197.0], [54.9, 197.0], [55.0, 198.0], [55.1, 198.0], [55.2, 198.0], [55.3, 198.0], [55.4, 198.0], [55.5, 198.0], [55.6, 198.0], [55.7, 198.0], [55.8, 198.0], [55.9, 198.0], [56.0, 199.0], [56.1, 199.0], [56.2, 199.0], [56.3, 199.0], [56.4, 199.0], [56.5, 199.0], [56.6, 199.0], [56.7, 199.0], [56.8, 199.0], [56.9, 199.0], [57.0, 200.0], [57.1, 200.0], [57.2, 200.0], [57.3, 200.0], [57.4, 200.0], [57.5, 200.0], [57.6, 200.0], [57.7, 200.0], [57.8, 200.0], [57.9, 201.0], [58.0, 201.0], [58.1, 201.0], [58.2, 201.0], [58.3, 201.0], [58.4, 201.0], [58.5, 201.0], [58.6, 201.0], [58.7, 201.0], [58.8, 202.0], [58.9, 202.0], [59.0, 202.0], [59.1, 202.0], [59.2, 202.0], [59.3, 202.0], [59.4, 202.0], [59.5, 202.0], [59.6, 202.0], [59.7, 203.0], [59.8, 203.0], [59.9, 203.0], [60.0, 203.0], [60.1, 203.0], [60.2, 203.0], [60.3, 203.0], [60.4, 204.0], [60.5, 204.0], [60.6, 204.0], [60.7, 204.0], [60.8, 204.0], [60.9, 204.0], [61.0, 204.0], [61.1, 204.0], [61.2, 205.0], [61.3, 205.0], [61.4, 205.0], [61.5, 205.0], [61.6, 205.0], [61.7, 205.0], [61.8, 205.0], [61.9, 205.0], [62.0, 206.0], [62.1, 206.0], [62.2, 206.0], [62.3, 206.0], [62.4, 206.0], [62.5, 206.0], [62.6, 207.0], [62.7, 207.0], [62.8, 207.0], [62.9, 207.0], [63.0, 207.0], [63.1, 207.0], [63.2, 207.0], [63.3, 208.0], [63.4, 208.0], [63.5, 208.0], [63.6, 208.0], [63.7, 208.0], [63.8, 208.0], [63.9, 209.0], [64.0, 209.0], [64.1, 209.0], [64.2, 209.0], [64.3, 209.0], [64.4, 209.0], [64.5, 210.0], [64.6, 210.0], [64.7, 210.0], [64.8, 210.0], [64.9, 210.0], [65.0, 210.0], [65.1, 211.0], [65.2, 211.0], [65.3, 211.0], [65.4, 211.0], [65.5, 211.0], [65.6, 212.0], [65.7, 212.0], [65.8, 212.0], [65.9, 212.0], [66.0, 212.0], [66.1, 213.0], [66.2, 213.0], [66.3, 213.0], [66.4, 213.0], [66.5, 213.0], [66.6, 214.0], [66.7, 214.0], [66.8, 214.0], [66.9, 214.0], [67.0, 214.0], [67.1, 215.0], [67.2, 215.0], [67.3, 215.0], [67.4, 215.0], [67.5, 216.0], [67.6, 216.0], [67.7, 216.0], [67.8, 216.0], [67.9, 217.0], [68.0, 217.0], [68.1, 217.0], [68.2, 217.0], [68.3, 218.0], [68.4, 218.0], [68.5, 218.0], [68.6, 218.0], [68.7, 219.0], [68.8, 219.0], [68.9, 219.0], [69.0, 219.0], [69.1, 220.0], [69.2, 220.0], [69.3, 220.0], [69.4, 221.0], [69.5, 221.0], [69.6, 221.0], [69.7, 221.0], [69.8, 222.0], [69.9, 222.0], [70.0, 222.0], [70.1, 223.0], [70.2, 223.0], [70.3, 223.0], [70.4, 224.0], [70.5, 224.0], [70.6, 224.0], [70.7, 224.0], [70.8, 225.0], [70.9, 225.0], [71.0, 225.0], [71.1, 226.0], [71.2, 226.0], [71.3, 226.0], [71.4, 227.0], [71.5, 227.0], [71.6, 227.0], [71.7, 228.0], [71.8, 228.0], [71.9, 228.0], [72.0, 229.0], [72.1, 229.0], [72.2, 230.0], [72.3, 230.0], [72.4, 231.0], [72.5, 231.0], [72.6, 231.0], [72.7, 232.0], [72.8, 232.0], [72.9, 233.0], [73.0, 233.0], [73.1, 234.0], [73.2, 234.0], [73.3, 235.0], [73.4, 235.0], [73.5, 236.0], [73.6, 236.0], [73.7, 237.0], [73.8, 237.0], [73.9, 238.0], [74.0, 238.0], [74.1, 239.0], [74.2, 239.0], [74.3, 240.0], [74.4, 240.0], [74.5, 241.0], [74.6, 242.0], [74.7, 242.0], [74.8, 243.0], [74.9, 244.0], [75.0, 244.0], [75.1, 245.0], [75.2, 246.0], [75.3, 246.0], [75.4, 247.0], [75.5, 248.0], [75.6, 249.0], [75.7, 249.0], [75.8, 250.0], [75.9, 251.0], [76.0, 252.0], [76.1, 253.0], [76.2, 253.0], [76.3, 254.0], [76.4, 255.0], [76.5, 256.0], [76.6, 257.0], [76.7, 258.0], [76.8, 259.0], [76.9, 260.0], [77.0, 261.0], [77.1, 262.0], [77.2, 263.0], [77.3, 263.0], [77.4, 264.0], [77.5, 265.0], [77.6, 267.0], [77.7, 268.0], [77.8, 269.0], [77.9, 270.0], [78.0, 271.0], [78.1, 273.0], [78.2, 274.0], [78.3, 275.0], [78.4, 276.0], [78.5, 278.0], [78.6, 279.0], [78.7, 281.0], [78.8, 282.0], [78.9, 284.0], [79.0, 285.0], [79.1, 287.0], [79.2, 289.0], [79.3, 290.0], [79.4, 292.0], [79.5, 293.0], [79.6, 295.0], [79.7, 297.0], [79.8, 300.0], [79.9, 301.0], [80.0, 304.0], [80.1, 306.0], [80.2, 308.0], [80.3, 311.0], [80.4, 313.0], [80.5, 315.0], [80.6, 318.0], [80.7, 320.0], [80.8, 323.0], [80.9, 325.0], [81.0, 328.0], [81.1, 330.0], [81.2, 334.0], [81.3, 337.0], [81.4, 340.0], [81.5, 343.0], [81.6, 346.0], [81.7, 349.0], [81.8, 351.0], [81.9, 355.0], [82.0, 358.0], [82.1, 361.0], [82.2, 365.0], [82.3, 370.0], [82.4, 375.0], [82.5, 379.0], [82.6, 383.0], [82.7, 388.0], [82.8, 392.0], [82.9, 397.0], [83.0, 402.0], [83.1, 406.0], [83.2, 411.0], [83.3, 418.0], [83.4, 425.0], [83.5, 432.0], [83.6, 438.0], [83.7, 444.0], [83.8, 451.0], [83.9, 458.0], [84.0, 465.0], [84.1, 471.0], [84.2, 478.0], [84.3, 485.0], [84.4, 492.0], [84.5, 499.0], [84.6, 505.0], [84.7, 512.0], [84.8, 518.0], [84.9, 525.0], [85.0, 531.0], [85.1, 537.0], [85.2, 543.0], [85.3, 549.0], [85.4, 556.0], [85.5, 563.0], [85.6, 570.0], [85.7, 578.0], [85.8, 586.0], [85.9, 597.0], [86.0, 606.0], [86.1, 616.0], [86.2, 629.0], [86.3, 644.0], [86.4, 654.0], [86.5, 668.0], [86.6, 682.0], [86.7, 695.0], [86.8, 712.0], [86.9, 724.0], [87.0, 736.0], [87.1, 748.0], [87.2, 759.0], [87.3, 774.0], [87.4, 787.0], [87.5, 803.0], [87.6, 820.0], [87.7, 843.0], [87.8, 857.0], [87.9, 875.0], [88.0, 905.0], [88.1, 936.0], [88.2, 973.0], [88.3, 1003.0], [88.4, 1029.0], [88.5, 1070.0], [88.6, 1100.0], [88.7, 1133.0], [88.8, 1165.0], [88.9, 1179.0], [89.0, 1183.0], [89.1, 1187.0], [89.2, 1190.0], [89.3, 1193.0], [89.4, 1196.0], [89.5, 1200.0], [89.6, 1203.0], [89.7, 1207.0], [89.8, 1211.0], [89.9, 1215.0], [90.0, 1221.0], [90.1, 1230.0], [90.2, 1239.0], [90.3, 1250.0], [90.4, 1262.0], [90.5, 1272.0], [90.6, 1286.0], [90.7, 1303.0], [90.8, 1317.0], [90.9, 1334.0], [91.0, 1348.0], [91.1, 1366.0], [91.2, 1385.0], [91.3, 1405.0], [91.4, 1422.0], [91.5, 1443.0], [91.6, 1465.0], [91.7, 1488.0], [91.8, 1511.0], [91.9, 1538.0], [92.0, 1571.0], [92.1, 1604.0], [92.2, 1630.0], [92.3, 1673.0], [92.4, 1720.0], [92.5, 1764.0], [92.6, 1810.0], [92.7, 1862.0], [92.8, 1897.0], [92.9, 1949.0], [93.0, 1996.0], [93.1, 2044.0], [93.2, 2107.0], [93.3, 2186.0], [93.4, 2244.0], [93.5, 2321.0], [93.6, 2382.0], [93.7, 2447.0], [93.8, 2505.0], [93.9, 2596.0], [94.0, 2716.0], [94.1, 2801.0], [94.2, 2908.0], [94.3, 3009.0], [94.4, 3138.0], [94.5, 3204.0], [94.6, 3242.0], [94.7, 3340.0], [94.8, 3407.0], [94.9, 3497.0], [95.0, 3578.0], [95.1, 3662.0], [95.2, 3803.0], [95.3, 3912.0], [95.4, 4080.0], [95.5, 4212.0], [95.6, 4390.0], [95.7, 4637.0], [95.8, 4826.0], [95.9, 5140.0], [96.0, 5377.0], [96.1, 5754.0], [96.2, 6105.0], [96.3, 6438.0], [96.4, 6777.0], [96.5, 7125.0], [96.6, 7222.0], [96.7, 7517.0], [96.8, 7760.0], [96.9, 8114.0], [97.0, 8559.0], [97.1, 8888.0], [97.2, 9139.0], [97.3, 9733.0], [97.4, 9994.0], [97.5, 10320.0], [97.6, 10745.0], [97.7, 11496.0], [97.8, 12394.0], [97.9, 13439.0], [98.0, 14762.0], [98.1, 15234.0], [98.2, 15555.0], [98.3, 15908.0], [98.4, 16227.0], [98.5, 16616.0], [98.6, 17498.0], [98.7, 18624.0], [98.8, 19710.0], [98.9, 20916.0], [99.0, 21248.0], [99.1, 21406.0], [99.2, 21618.0], [99.3, 22856.0], [99.4, 25638.0], [99.5, 29646.0], [99.6, 36081.0], [99.7, 41975.0], [99.8, 53361.0], [99.9, 70073.0], [100.0, 377603.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 30194.0, "series": [{"data": [[76300.0, 1.0], [100.0, 30194.0], [34500.0, 2.0], [36100.0, 1.0], [37700.0, 1.0], [36900.0, 1.0], [40100.0, 2.0], [40900.0, 2.0], [42500.0, 2.0], [41700.0, 2.0], [47300.0, 1.0], [200.0, 12099.0], [51300.0, 1.0], [52900.0, 1.0], [57700.0, 2.0], [63300.0, 1.0], [64900.0, 1.0], [67400.0, 1.0], [72200.0, 2.0], [300.0, 1670.0], [400.0, 828.0], [500.0, 749.0], [600.0, 427.0], [700.0, 398.0], [800.0, 267.0], [900.0, 162.0], [1000.0, 163.0], [1100.0, 473.0], [1200.0, 631.0], [1300.0, 316.0], [1400.0, 254.0], [1500.0, 175.0], [1600.0, 140.0], [1700.0, 123.0], [1800.0, 118.0], [1900.0, 107.0], [2000.0, 97.0], [2100.0, 72.0], [2300.0, 83.0], [2200.0, 78.0], [139700.0, 1.0], [2400.0, 84.0], [2500.0, 59.0], [2600.0, 42.0], [2700.0, 63.0], [2800.0, 50.0], [2900.0, 49.0], [3000.0, 54.0], [3100.0, 54.0], [3300.0, 77.0], [3200.0, 84.0], [3400.0, 59.0], [3500.0, 61.0], [3600.0, 55.0], [3700.0, 38.0], [3800.0, 51.0], [3900.0, 38.0], [4000.0, 28.0], [4100.0, 40.0], [4200.0, 37.0], [4300.0, 22.0], [4500.0, 23.0], [4600.0, 20.0], [4400.0, 22.0], [4700.0, 32.0], [4800.0, 22.0], [74500.0, 1.0], [4900.0, 22.0], [5100.0, 18.0], [5000.0, 12.0], [5200.0, 19.0], [5300.0, 24.0], [5600.0, 13.0], [5500.0, 13.0], [5400.0, 16.0], [5700.0, 18.0], [5800.0, 7.0], [6000.0, 20.0], [6100.0, 13.0], [5900.0, 15.0], [6200.0, 24.0], [6300.0, 11.0], [6500.0, 13.0], [6400.0, 18.0], [6600.0, 17.0], [6800.0, 13.0], [6900.0, 9.0], [6700.0, 15.0], [7000.0, 23.0], [7100.0, 24.0], [112900.0, 1.0], [7400.0, 18.0], [7300.0, 7.0], [7200.0, 58.0], [117700.0, 1.0], [7500.0, 23.0], [7600.0, 19.0], [7800.0, 18.0], [7700.0, 22.0], [7900.0, 12.0], [8000.0, 12.0], [8100.0, 20.0], [8600.0, 11.0], [8400.0, 9.0], [8200.0, 10.0], [9200.0, 3.0], [8800.0, 22.0], [9000.0, 22.0], [9400.0, 9.0], [9600.0, 10.0], [10200.0, 14.0], [9800.0, 16.0], [10000.0, 21.0], [10400.0, 13.0], [10600.0, 8.0], [10800.0, 10.0], [11000.0, 6.0], [11200.0, 4.0], [11400.0, 10.0], [11600.0, 4.0], [12200.0, 4.0], [11800.0, 12.0], [12000.0, 3.0], [12400.0, 2.0], [12600.0, 8.0], [13200.0, 3.0], [12800.0, 4.0], [13000.0, 3.0], [13800.0, 1.0], [13400.0, 5.0], [13600.0, 6.0], [14000.0, 7.0], [14200.0, 5.0], [14600.0, 4.0], [14400.0, 4.0], [14800.0, 4.0], [15000.0, 3.0], [15200.0, 46.0], [15600.0, 17.0], [15800.0, 16.0], [15400.0, 23.0], [16200.0, 25.0], [16000.0, 14.0], [16800.0, 3.0], [17200.0, 7.0], [16400.0, 12.0], [17600.0, 3.0], [18000.0, 6.0], [18400.0, 2.0], [18800.0, 5.0], [19200.0, 8.0], [19600.0, 3.0], [20000.0, 2.0], [20400.0, 6.0], [21200.0, 66.0], [20800.0, 4.0], [22000.0, 6.0], [22400.0, 5.0], [21600.0, 5.0], [23200.0, 4.0], [22800.0, 3.0], [23600.0, 1.0], [24000.0, 1.0], [24400.0, 1.0], [25200.0, 1.0], [24800.0, 2.0], [26000.0, 2.0], [26400.0, 7.0], [25600.0, 2.0], [26800.0, 3.0], [28000.0, 1.0], [29600.0, 1.0], [30400.0, 2.0], [30800.0, 1.0], [32000.0, 1.0], [33600.0, 1.0], [32800.0, 1.0], [34400.0, 1.0], [36000.0, 2.0], [35200.0, 1.0], [36800.0, 1.0], [37600.0, 1.0], [38400.0, 1.0], [40800.0, 1.0], [41600.0, 1.0], [42400.0, 2.0], [43200.0, 1.0], [46400.0, 2.0], [45600.0, 1.0], [48800.0, 1.0], [50400.0, 1.0], [52000.0, 1.0], [52800.0, 2.0], [51200.0, 1.0], [56000.0, 1.0], [57600.0, 1.0], [63200.0, 1.0], [64000.0, 1.0], [377600.0, 1.0], [67100.0, 1.0], [73500.0, 1.0], [75100.0, 2.0], [103900.0, 1.0], [155400.0, 1.0], [33900.0, 2.0], [36300.0, 2.0], [38700.0, 2.0], [37100.0, 1.0], [40300.0, 1.0], [42700.0, 2.0], [41100.0, 1.0], [41900.0, 3.0], [45900.0, 3.0], [49100.0, 2.0], [49900.0, 1.0], [55500.0, 1.0], [57900.0, 1.0], [63500.0, 2.0], [69400.0, 1.0], [77400.0, 1.0], [82200.0, 1.0], [93400.0, 1.0], [127000.0, 1.0], [74900.0, 1.0], [76500.0, 2.0], [17300.0, 4.0], [16900.0, 7.0], [16500.0, 7.0], [17700.0, 10.0], [18100.0, 3.0], [18900.0, 2.0], [19300.0, 10.0], [18500.0, 3.0], [19700.0, 6.0], [20100.0, 4.0], [20900.0, 2.0], [21300.0, 33.0], [20500.0, 5.0], [21700.0, 8.0], [22100.0, 3.0], [22500.0, 1.0], [22900.0, 5.0], [23300.0, 3.0], [23700.0, 3.0], [25300.0, 2.0], [26100.0, 2.0], [26500.0, 2.0], [26900.0, 1.0], [28100.0, 2.0], [27700.0, 1.0], [29300.0, 4.0], [28900.0, 2.0], [31700.0, 1.0], [32100.0, 1.0], [33800.0, 1.0], [35400.0, 1.0], [36200.0, 2.0], [38600.0, 2.0], [44200.0, 2.0], [43400.0, 1.0], [45000.0, 1.0], [45800.0, 2.0], [46600.0, 1.0], [52200.0, 1.0], [53800.0, 1.0], [54600.0, 1.0], [57000.0, 1.0], [57800.0, 1.0], [64200.0, 1.0], [69200.0, 1.0], [72400.0, 1.0], [91600.0, 1.0], [72300.0, 1.0], [88300.0, 1.0], [94700.0, 1.0], [97900.0, 1.0], [101100.0, 1.0], [148200.0, 1.0], [209000.0, 1.0], [244200.0, 1.0], [34900.0, 1.0], [35700.0, 1.0], [36500.0, 1.0], [38100.0, 2.0], [39700.0, 1.0], [40500.0, 2.0], [41300.0, 1.0], [44500.0, 1.0], [54900.0, 1.0], [54100.0, 1.0], [53300.0, 1.0], [58100.0, 1.0], [61300.0, 1.0], [62100.0, 1.0], [62900.0, 2.0], [63700.0, 1.0], [74600.0, 2.0], [76200.0, 2.0], [90600.0, 1.0], [106600.0, 1.0], [67300.0, 1.0], [70500.0, 1.0], [75300.0, 1.0], [84900.0, 1.0], [8700.0, 15.0], [8500.0, 16.0], [8300.0, 8.0], [8900.0, 19.0], [9100.0, 20.0], [9300.0, 10.0], [9700.0, 23.0], [9500.0, 4.0], [9900.0, 22.0], [10100.0, 15.0], [10500.0, 19.0], [10300.0, 10.0], [10700.0, 13.0], [10900.0, 8.0], [11100.0, 5.0], [11300.0, 3.0], [11500.0, 6.0], [11700.0, 4.0], [11900.0, 8.0], [12100.0, 3.0], [12500.0, 13.0], [12300.0, 9.0], [12700.0, 4.0], [13300.0, 1.0], [12900.0, 6.0], [13100.0, 5.0], [13500.0, 7.0], [13700.0, 5.0], [14100.0, 3.0], [14300.0, 2.0], [13900.0, 1.0], [14500.0, 4.0], [14700.0, 2.0], [14900.0, 4.0], [15100.0, 10.0], [15300.0, 6.0], [15700.0, 10.0], [15500.0, 17.0], [16300.0, 15.0], [16100.0, 13.0], [15900.0, 21.0], [17400.0, 9.0], [16600.0, 7.0], [17000.0, 5.0], [18200.0, 10.0], [17800.0, 3.0], [18600.0, 4.0], [19400.0, 4.0], [19800.0, 4.0], [20200.0, 5.0], [20600.0, 1.0], [21400.0, 23.0], [21000.0, 2.0], [21800.0, 4.0], [22200.0, 3.0], [23400.0, 3.0], [22600.0, 4.0], [23000.0, 2.0], [24200.0, 5.0], [25000.0, 4.0], [25400.0, 1.0], [26600.0, 1.0], [27400.0, 1.0], [28600.0, 1.0], [28200.0, 2.0], [29000.0, 1.0], [29400.0, 2.0], [30600.0, 1.0], [30200.0, 1.0], [31400.0, 1.0], [31000.0, 1.0], [32200.0, 1.0], [31800.0, 2.0], [34000.0, 3.0], [33200.0, 2.0], [34800.0, 1.0], [35600.0, 2.0], [38000.0, 1.0], [41200.0, 1.0], [44400.0, 2.0], [43600.0, 1.0], [49200.0, 1.0], [52400.0, 1.0], [56400.0, 1.0], [60400.0, 2.0], [62000.0, 1.0], [76000.0, 1.0], [84000.0, 1.0], [96800.0, 1.0], [69500.0, 2.0], [72700.0, 1.0], [79100.0, 1.0], [106300.0, 1.0], [123900.0, 1.0], [34300.0, 2.0], [33500.0, 1.0], [35900.0, 2.0], [36700.0, 1.0], [37500.0, 2.0], [38300.0, 1.0], [40700.0, 1.0], [39100.0, 2.0], [42300.0, 1.0], [43100.0, 2.0], [47100.0, 1.0], [47900.0, 1.0], [50300.0, 2.0], [52700.0, 1.0], [55100.0, 1.0], [56700.0, 1.0], [58300.0, 1.0], [62300.0, 1.0], [63100.0, 1.0], [65500.0, 1.0], [71800.0, 1.0], [75000.0, 1.0], [72500.0, 1.0], [75700.0, 1.0], [17100.0, 8.0], [16700.0, 5.0], [17500.0, 5.0], [17900.0, 2.0], [18300.0, 4.0], [18700.0, 6.0], [19100.0, 4.0], [19500.0, 7.0], [19900.0, 5.0], [20300.0, 9.0], [21500.0, 29.0], [21100.0, 3.0], [20700.0, 2.0], [21900.0, 5.0], [22300.0, 5.0], [23100.0, 1.0], [22700.0, 5.0], [23900.0, 4.0], [24300.0, 2.0], [25100.0, 3.0], [24700.0, 2.0], [25500.0, 1.0], [25900.0, 1.0], [26300.0, 2.0], [27500.0, 2.0], [26700.0, 2.0], [27100.0, 2.0], [27900.0, 1.0], [29100.0, 2.0], [28700.0, 2.0], [29500.0, 2.0], [30700.0, 2.0], [29900.0, 1.0], [31100.0, 1.0], [31500.0, 2.0], [31900.0, 1.0], [32700.0, 1.0], [32300.0, 2.0], [34200.0, 4.0], [36600.0, 1.0], [37400.0, 1.0], [38200.0, 1.0], [39800.0, 2.0], [39000.0, 3.0], [42200.0, 1.0], [44600.0, 2.0], [45400.0, 1.0], [51000.0, 1.0], [209500.0, 1.0], [53400.0, 1.0], [56600.0, 1.0], [59000.0, 2.0], [59800.0, 2.0], [60600.0, 1.0], [61400.0, 1.0], [64600.0, 1.0], [68400.0, 1.0], [73200.0, 2.0], [70000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 377600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 116.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 44798.0, "series": [{"data": [[0.0, 44798.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3834.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4252.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 116.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.980006664445195, "minX": 1.7291205E12, "maxY": 273.8700617283951, "series": [{"data": [[1.72912098E12, 12.424282415044525], [1.72912128E12, 10.113928329952705], [1.72912068E12, 19.69169698974529], [1.72912134E12, 16.016787360105358], [1.72912074E12, 83.48181818181821], [1.72912104E12, 11.642761841227475], [1.7291211E12, 12.359546817727438], [1.7291214E12, 20.17125587642712], [1.72912146E12, 15.71804260985349], [1.7291205E12, 273.8700617283951], [1.7291208E12, 166.06236492744677], [1.72912086E12, 19.624331550802122], [1.72912116E12, 11.351999999999963], [1.72912056E12, 45.15668202764979], [1.72912122E12, 9.980006664445195], [1.72912152E12, 181.0006887052341], [1.72912158E12, 121.54958677685953], [1.72912062E12, 75.65099337748339], [1.72912092E12, 14.6160267111853]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912158E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 207.425964702363, "minX": 1.0, "maxY": 34256.0, "series": [{"data": [[2.0, 794.6499999999999], [3.0, 633.489010989011], [4.0, 631.4157894736842], [5.0, 942.2390438247012], [6.0, 483.43269230769226], [7.0, 288.96752136752133], [8.0, 264.5730129390014], [9.0, 207.425964702363], [10.0, 214.31316676024653], [11.0, 209.50032711808996], [12.0, 282.32228626320875], [13.0, 351.10090466249005], [14.0, 331.3827345309378], [15.0, 264.0262639527249], [16.0, 599.7020933977461], [17.0, 290.7157258064517], [18.0, 457.9297365119193], [19.0, 799.0299850074964], [20.0, 349.8087520259315], [21.0, 671.9979253112033], [22.0, 529.935866983373], [23.0, 327.42857142857144], [24.0, 389.89059080962807], [25.0, 374.69806763285], [26.0, 366.9430051813471], [27.0, 930.6454293628814], [28.0, 786.8058510638299], [29.0, 1064.845505617978], [30.0, 717.1866666666672], [31.0, 1349.2746666666665], [33.0, 786.9087591240875], [32.0, 1200.5245398773006], [35.0, 1157.6157024793388], [34.0, 1227.8170731707307], [37.0, 1581.3466666666664], [36.0, 551.1818181818182], [39.0, 521.943005181347], [38.0, 773.3828828828821], [41.0, 892.8037974683547], [40.0, 1845.5187500000006], [43.0, 615.0723684210529], [42.0, 2500.090322580646], [45.0, 644.0584415584415], [44.0, 1817.2905405405406], [47.0, 608.2838709677419], [46.0, 1991.0298507462699], [49.0, 1239.5859374999993], [48.0, 2904.260869565217], [51.0, 1964.4690265486722], [50.0, 1509.1842105263152], [53.0, 1977.4432989690717], [52.0, 2355.6822429906547], [55.0, 2520.1794871794873], [54.0, 907.0947368421049], [57.0, 779.0999999999997], [56.0, 1339.5057471264365], [59.0, 1764.030927835051], [58.0, 2392.038961038961], [61.0, 2952.2903225806444], [60.0, 2643.878048780488], [63.0, 2137.3670886075947], [62.0, 1322.5079365079366], [67.0, 2469.968253968254], [66.0, 938.5217391304348], [65.0, 2310.4415584415588], [64.0, 1876.9531249999998], [71.0, 1641.9555555555555], [70.0, 1034.2962962962965], [69.0, 3784.8787878787884], [68.0, 2927.4687499999995], [75.0, 1719.1698113207547], [74.0, 1686.5128205128203], [73.0, 2207.3720930232553], [72.0, 2615.8979591836733], [79.0, 2414.8437500000005], [78.0, 1290.5588235294117], [77.0, 4847.630769230767], [76.0, 2555.1090909090904], [83.0, 1266.840909090909], [82.0, 2184.4], [81.0, 2415.673913043478], [80.0, 3291.0925925925935], [87.0, 1619.1190476190475], [86.0, 5802.341463414633], [85.0, 4347.116279069767], [84.0, 3491.78431372549], [91.0, 2849.769230769231], [90.0, 3343.1071428571427], [89.0, 3285.083333333334], [88.0, 1419.404761904762], [94.0, 1813.5675675675675], [93.0, 2652.1111111111113], [92.0, 1697.4761904761904], [95.0, 2193.862068965517], [99.0, 4184.600000000001], [98.0, 1926.25], [97.0, 2447.2000000000003], [96.0, 2166.3636363636365], [103.0, 2736.4444444444443], [102.0, 3244.2], [100.0, 2181.1428571428573], [101.0, 2101.9285714285716], [107.0, 4680.826086956522], [106.0, 2189.7619047619046], [105.0, 5116.88], [104.0, 3481.3076923076924], [111.0, 2253.6451612903224], [110.0, 2053.15], [109.0, 1704.7105263157894], [108.0, 4839.425000000001], [115.0, 4622.470588235294], [114.0, 5189.0], [113.0, 2886.3076923076924], [112.0, 15134.999999999998], [119.0, 4270.5161290322585], [117.0, 6667.130434782609], [116.0, 8811.666666666666], [118.0, 8024.52], [123.0, 4873.0], [122.0, 2231.3809523809523], [121.0, 6965.590909090909], [120.0, 8076.483870967741], [127.0, 3027.5238095238096], [126.0, 7172.105263157897], [125.0, 6408.615384615385], [124.0, 2973.470588235294], [135.0, 5546.772727272727], [134.0, 1897.0800000000002], [133.0, 2459.217391304348], [132.0, 6570.142857142857], [131.0, 1976.2], [129.0, 2301.038461538462], [128.0, 8396.892857142855], [130.0, 2062.1666666666665], [143.0, 3857.5], [142.0, 3338.36], [141.0, 3040.0000000000005], [140.0, 2786.1538461538457], [138.0, 2734.8], [137.0, 2999.3684210526317], [136.0, 7881.434782608696], [139.0, 3832.4736842105262], [151.0, 7870.760000000002], [150.0, 3287.875], [149.0, 5112.033333333334], [148.0, 2380.406249999999], [147.0, 3685.249999999999], [146.0, 5625.885714285713], [145.0, 3968.518518518519], [144.0, 6507.333333333335], [159.0, 2432.1034482758623], [158.0, 3031.322580645161], [157.0, 2771.366666666667], [156.0, 2689.81081081081], [155.0, 5120.9375], [154.0, 1698.8076923076924], [152.0, 1979.25], [153.0, 2472.576923076923], [167.0, 3601.8235294117644], [166.0, 3844.6333333333337], [165.0, 2695.1481481481483], [164.0, 2380.233333333333], [163.0, 3793.5], [162.0, 2423.0], [161.0, 3421.4999999999995], [160.0, 1933.4411764705883], [175.0, 2041.2962962962965], [174.0, 5499.000000000002], [173.0, 1990.757575757576], [172.0, 4728.749999999999], [171.0, 2466.838709677419], [170.0, 4540.407407407407], [169.0, 2715.2], [168.0, 3387.7999999999997], [183.0, 4800.0526315789475], [182.0, 4838.967741935486], [181.0, 2453.102564102564], [180.0, 2525.7435897435894], [179.0, 2789.000000000001], [178.0, 4101.71052631579], [177.0, 4524.90625], [176.0, 6232.206896551723], [190.0, 2632.3809523809523], [191.0, 3371.125000000001], [189.0, 3626.3478260869565], [188.0, 5143.35], [187.0, 6889.833333333334], [186.0, 3333.0000000000005], [185.0, 4068.7826086956525], [184.0, 3021.5599999999995], [199.0, 6802.25], [198.0, 6352.299999999999], [197.0, 5724.866666666667], [196.0, 6434.083333333334], [195.0, 10172.25], [194.0, 5587.4285714285725], [192.0, 6805.37037037037], [193.0, 2717.181818181818], [207.0, 3469.166666666666], [206.0, 4143.714285714286], [205.0, 2838.8148148148143], [204.0, 4442.624999999999], [203.0, 5990.81818181818], [202.0, 5779.928571428571], [201.0, 1965.9500000000003], [200.0, 2338.2], [215.0, 9684.6], [214.0, 4268.625], [213.0, 2439.210526315789], [212.0, 2575.0476190476193], [211.0, 2047.0], [210.0, 1707.2222222222222], [209.0, 6855.411764705882], [208.0, 2730.9375], [223.0, 3898.084337349397], [222.0, 4098.230769230768], [221.0, 4480.418604651162], [220.0, 4964.799999999999], [219.0, 4085.8999999999996], [218.0, 2900.1612903225805], [216.0, 3252.4375], [217.0, 5747.6], [231.0, 4175.21568627451], [230.0, 4889.102564102563], [229.0, 3382.694444444445], [228.0, 7385.815789473682], [227.0, 2271.9], [226.0, 3500.5609756097556], [225.0, 4435.118811881189], [224.0, 2558.093023255814], [239.0, 4291.8200000000015], [238.0, 3577.0], [237.0, 3901.2], [236.0, 5051.847826086957], [235.0, 4921.155555555555], [234.0, 4233.492957746479], [233.0, 2940.202898550724], [232.0, 2462.4464285714294], [247.0, 3210.690721649485], [246.0, 5857.808988764046], [245.0, 3421.5733333333333], [244.0, 5323.750000000001], [243.0, 3939.953846153847], [242.0, 2492.129032258064], [241.0, 3958.7948717948716], [240.0, 4123.4745762711855], [255.0, 3935.536585365854], [254.0, 3183.509803921569], [253.0, 4056.3157894736837], [252.0, 3328.486111111111], [251.0, 2926.2808988764036], [250.0, 3300.7777777777783], [249.0, 4250.482142857142], [248.0, 5519.78205128205], [270.0, 7284.099999999999], [271.0, 5231.166666666667], [269.0, 2024.8181818181815], [268.0, 2360.5555555555557], [267.0, 3161.090909090909], [266.0, 3653.777777777778], [265.0, 4301.500000000001], [264.0, 1661.0], [263.0, 3704.0], [257.0, 2471.055555555556], [256.0, 3421.5172413793102], [259.0, 2291.2500000000005], [258.0, 4313.290322580647], [262.0, 5539.363636363636], [261.0, 7262.25], [260.0, 7811.944444444443], [285.0, 3856.090909090909], [284.0, 3738.875], [275.0, 2521.9166666666665], [274.0, 3707.4166666666665], [273.0, 3056.0000000000005], [272.0, 2387.6363636363635], [283.0, 3091.25], [282.0, 6656.384615384615], [281.0, 5195.923076923076], [280.0, 5026.941176470588], [287.0, 7506.416666666668], [286.0, 4614.363636363636], [279.0, 4333.9473684210525], [278.0, 5184.846153846154], [277.0, 3725.1428571428573], [276.0, 4478.9375], [301.0, 4035.2272727272725], [302.0, 3636.9523809523807], [303.0, 6573.933333333334], [300.0, 4974.249999999999], [291.0, 6727.333333333332], [290.0, 6190.047619047619], [288.0, 5820.222222222223], [289.0, 1972.058823529412], [299.0, 4849.166666666666], [298.0, 5341.842105263159], [297.0, 2185.333333333333], [296.0, 2978.444444444445], [295.0, 3746.235294117647], [294.0, 4908.971428571429], [292.0, 2998.142857142857], [293.0, 4809.950000000001], [318.0, 2905.3529411764703], [319.0, 5882.8], [316.0, 3203.3846153846152], [307.0, 8486.133333333333], [317.0, 3539.727272727273], [306.0, 5909.933333333333], [304.0, 4932.299999999999], [305.0, 4067.1], [315.0, 3901.2799999999997], [314.0, 2102.809523809524], [313.0, 4205.55], [312.0, 6199.25], [311.0, 4654.35294117647], [310.0, 6101.812500000001], [309.0, 5601.923076923076], [308.0, 6686.545454545453], [334.0, 4233.8], [335.0, 5342.5], [333.0, 4514.0], [332.0, 6452.75], [331.0, 4158.714285714285], [330.0, 5636.222222222223], [329.0, 2142.8181818181815], [328.0, 2641.4545454545455], [327.0, 3982.4285714285716], [321.0, 4248.999999999999], [320.0, 3645.368421052631], [323.0, 3305.7826086956525], [322.0, 7197.105263157894], [326.0, 7296.238095238096], [325.0, 5424.294117647059], [324.0, 3367.315789473684], [350.0, 5908.333333333333], [351.0, 4954.9], [349.0, 4182.714285714285], [348.0, 5422.625], [347.0, 3932.0], [346.0, 6607.124999999999], [345.0, 7627.181818181818], [344.0, 8095.625], [343.0, 5729.625], [337.0, 6855.250000000001], [336.0, 3709.4444444444443], [339.0, 2905.8888888888887], [338.0, 3803.8181818181815], [342.0, 3149.714285714286], [341.0, 5694.285714285715], [340.0, 5120.166666666666], [366.0, 8740.4], [367.0, 7094.6], [365.0, 6236.5], [364.0, 13146.0], [363.0, 8569.5], [362.0, 9581.8], [361.0, 14499.000000000002], [360.0, 7243.0], [359.0, 5743.0], [353.0, 12674.375], [352.0, 5869.444444444444], [355.0, 7261.0], [354.0, 5012.5], [358.0, 7448.2], [357.0, 12475.8], [356.0, 4215.75], [381.0, 5128.000000000001], [383.0, 4648.095238095238], [382.0, 4673.588235294118], [380.0, 3252.0909090909086], [371.0, 7086.5714285714275], [369.0, 5783.0], [370.0, 7697.857142857142], [368.0, 5658.428571428572], [375.0, 3694.0512820512827], [379.0, 4944.615384615385], [378.0, 6798.466666666666], [376.0, 6130.833333333333], [377.0, 7092.529411764706], [374.0, 5936.0], [373.0, 6253.400000000001], [372.0, 8916.5], [398.0, 3307.4], [399.0, 6647.166666666667], [397.0, 4400.11111111111], [387.0, 3181.4], [396.0, 5309.5], [394.0, 6658.625], [395.0, 7975.333333333333], [393.0, 2796.8888888888887], [392.0, 8524.909090909092], [391.0, 4475.777777777777], [390.0, 8141.875], [388.0, 4827.142857142856], [389.0, 6931.272727272728], [386.0, 5067.75], [384.0, 4774.722222222222], [385.0, 5248.642857142856], [401.0, 6519.5], [405.0, 5036.714285714285], [404.0, 4809.25], [402.0, 6913.0], [400.0, 6061.0], [407.0, 18281.0], [406.0, 7609.5], [403.0, 8039.0], [409.0, 5038.666666666666], [411.0, 5328.0], [410.0, 5183.5], [408.0, 9534.25], [415.0, 12968.0], [414.0, 10101.333333333334], [413.0, 4294.333333333334], [412.0, 13205.5], [429.0, 5898.0], [424.0, 14819.4], [425.0, 6829.333333333333], [431.0, 9653.5], [430.0, 9979.0], [428.0, 13786.5], [419.0, 7774.0], [418.0, 9746.333333333334], [417.0, 5758.0], [416.0, 4495.75], [427.0, 13612.5], [426.0, 7853.0], [423.0, 9723.714285714286], [422.0, 7101.75], [420.0, 7365.6], [421.0, 7584.5], [434.0, 5868.2], [436.0, 5020.75], [435.0, 9915.25], [445.0, 26896.0], [444.0, 13475.0], [433.0, 5139.0], [432.0, 7856.0], [439.0, 11559.25], [438.0, 8770.0], [437.0, 6429.0], [440.0, 4640.333333333334], [443.0, 11784.666666666666], [441.0, 5899.5], [442.0, 9740.0], [447.0, 5916.0], [446.0, 5539.333333333333], [461.0, 5297.142857142857], [463.0, 8265.666666666666], [450.0, 11297.0], [459.0, 6832.0], [462.0, 6773.571428571428], [460.0, 8130.714285714286], [451.0, 13030.6], [458.0, 11010.0], [456.0, 7389.5], [457.0, 8998.333333333334], [455.0, 9389.333333333334], [449.0, 13400.5], [448.0, 5934.5], [454.0, 5282.285714285714], [453.0, 15017.0], [452.0, 7168.285714285715], [465.0, 8727.666666666666], [467.0, 7240.714285714286], [468.0, 2986.2999999999997], [473.0, 8709.833333333332], [475.0, 6247.8], [474.0, 8952.0], [472.0, 3707.0], [479.0, 9519.5], [478.0, 5368.666666666667], [477.0, 10559.0], [476.0, 5267.0], [471.0, 5708.999999999999], [464.0, 6374.2], [470.0, 4831.666666666667], [469.0, 5527.8], [466.0, 7046.75], [482.0, 9503.166666666666], [481.0, 5264.714285714286], [480.0, 11140.333333333334], [483.0, 6661.166666666666], [492.0, 4063.3333333333335], [494.0, 5103.666666666667], [493.0, 4168.0], [484.0, 3692.0], [488.0, 4823.666666666666], [489.0, 5750.666666666667], [491.0, 4736.0], [490.0, 5285.0], [487.0, 5475.0], [486.0, 4083.3333333333335], [485.0, 4025.3333333333335], [495.0, 2399.0], [510.0, 6011.571428571428], [504.0, 4884.75], [505.0, 4279.333333333334], [509.0, 7861.428571428572], [511.0, 4424.8], [507.0, 7021.25], [508.0, 6029.5], [506.0, 5830.5], [503.0, 12248.5], [497.0, 7048.0], [496.0, 6433.666666666667], [499.0, 9217.333333333334], [498.0, 4619.0], [502.0, 7450.0], [501.0, 12053.5], [500.0, 9379.666666666666], [540.0, 7970.0], [515.0, 8737.666666666666], [512.0, 6575.0], [527.0, 8563.0], [526.0, 8562.0], [525.0, 8579.0], [524.0, 8610.0], [523.0, 8776.0], [522.0, 8666.0], [521.0, 8513.0], [520.0, 8795.5], [514.0, 7954.0], [513.0, 2686.6666666666665], [517.0, 5383.5], [516.0, 4897.5], [543.0, 7575.0], [529.0, 8987.0], [528.0, 8559.0], [531.0, 8112.0], [530.0, 8117.0], [533.0, 8292.0], [532.0, 8884.0], [535.0, 8078.0], [534.0, 8157.0], [542.0, 7894.0], [541.0, 8304.0], [538.0, 8246.0], [537.0, 8102.0], [536.0, 8164.0], [518.0, 8811.0], [572.0, 7393.0], [575.0, 7149.0], [560.0, 7483.0], [562.0, 8168.0], [561.0, 7620.0], [564.0, 7691.0], [563.0, 7618.0], [574.0, 7223.0], [573.0, 7851.0], [571.0, 7852.0], [570.0, 7890.0], [569.0, 7277.0], [568.0, 7420.5], [559.0, 7746.0], [544.0, 7949.0], [546.0, 7692.0], [545.0, 7879.0], [548.0, 7932.0], [547.0, 7791.0], [550.0, 8008.0], [549.0, 7859.0], [558.0, 7745.0], [557.0, 8234.0], [556.0, 7760.0], [555.0, 7671.0], [554.0, 8441.0], [553.0, 8293.0], [552.0, 8063.5], [566.0, 7413.0], [565.0, 7293.0], [604.0, 7508.0], [607.0, 6923.0], [592.0, 7098.0], [594.0, 7576.0], [593.0, 7071.0], [596.0, 7572.0], [595.0, 7134.0], [606.0, 6746.0], [605.0, 7522.0], [603.0, 6864.0], [602.0, 6651.0], [601.0, 7559.0], [600.0, 6711.0], [591.0, 7112.0], [577.0, 7146.0], [576.0, 7230.0], [579.0, 7922.0], [578.0, 7220.0], [581.0, 7643.0], [580.0, 7105.0], [583.0, 7652.0], [582.0, 7745.0], [590.0, 7647.0], [589.0, 7630.0], [588.0, 7464.0], [587.0, 7466.0], [586.0, 7384.0], [585.0, 7001.0], [584.0, 7470.0], [598.0, 7090.0], [597.0, 7079.0], [636.0, 6967.0], [639.0, 6204.0], [625.0, 6757.0], [624.0, 6698.0], [627.0, 6742.0], [626.0, 7238.0], [629.0, 7158.0], [628.0, 6738.0], [638.0, 6900.0], [637.0, 6261.0], [635.0, 6314.0], [634.0, 7017.0], [633.0, 7001.0], [632.0, 7051.0], [623.0, 6718.0], [608.0, 6901.0], [611.0, 7169.0], [609.0, 7231.0], [613.0, 6719.0], [612.0, 7194.0], [615.0, 6661.0], [614.0, 7191.0], [622.0, 6777.0], [621.0, 34200.0], [620.0, 7091.0], [619.0, 6837.0], [618.0, 7328.0], [617.0, 6877.0], [616.0, 6881.0], [631.0, 6605.0], [630.0, 7146.0], [668.0, 6034.0], [671.0, 6476.0], [656.0, 6376.0], [659.0, 6424.0], [657.0, 6671.0], [661.0, 6610.0], [660.0, 6162.0], [670.0, 6282.0], [669.0, 6521.0], [667.0, 6457.0], [666.0, 6564.0], [665.0, 6029.0], [664.0, 6590.0], [654.0, 6207.0], [640.0, 6204.0], [642.0, 6868.0], [641.0, 6931.0], [645.0, 6811.5], [643.0, 34256.0], [647.0, 6211.0], [646.0, 6791.0], [653.0, 6650.0], [652.0, 6362.0], [650.0, 6683.0], [649.0, 6674.0], [648.0, 5994.0], [663.0, 6051.0], [662.0, 6537.0], [700.0, 5813.0], [703.0, 5344.0], [689.0, 6073.0], [688.0, 5997.0], [691.0, 5944.0], [690.0, 5538.0], [693.0, 5997.0], [692.0, 33840.0], [702.0, 5682.0], [701.0, 5796.0], [699.0, 5812.0], [698.0, 5086.0], [697.0, 5826.0], [696.0, 5453.0], [687.0, 6016.0], [673.0, 5772.0], [672.0, 5883.0], [675.0, 6411.0], [674.0, 6301.0], [677.0, 6144.0], [676.0, 6150.0], [679.0, 5442.0], [678.0, 5788.0], [686.0, 6016.0], [685.0, 6020.0], [684.0, 5433.0], [683.0, 5460.0], [682.0, 6089.0], [681.0, 6238.0], [680.0, 5696.0], [695.0, 5446.0], [694.0, 5504.0], [732.0, 2944.0], [735.0, 3535.0], [721.0, 3827.0], [720.0, 3805.0], [723.0, 3040.0], [722.0, 3130.0], [725.0, 3662.0], [724.0, 3052.0], [734.0, 3510.0], [733.0, 2861.0], [731.0, 2863.0], [730.0, 2825.0], [729.0, 3590.0], [728.0, 3034.0], [719.0, 3306.0], [705.0, 4616.0], [704.0, 5350.0], [707.0, 4275.0], [706.0, 5245.0], [709.0, 4544.0], [708.0, 3920.0], [711.0, 3643.0], [710.0, 4382.0], [718.0, 3353.0], [717.0, 3337.0], [716.0, 3280.0], [715.0, 3290.0], [714.0, 3279.0], [713.0, 3579.0], [712.0, 4295.0], [727.0, 3034.0], [726.0, 3654.0], [740.0, 2856.0], [745.0, 2493.0], [744.0, 2805.0], [743.0, 2929.0], [742.0, 2606.0], [741.0, 3382.0], [739.0, 2852.0], [738.0, 2704.0], [737.0, 3478.0], [736.0, 2872.0], [1.0, 1208.7956989247311]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[53.475698113207535, 1112.4747547169784]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 745.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 516.2666666666667, "minX": 1.7291205E12, "maxY": 5239270.683333334, "series": [{"data": [[1.72912098E12, 4904358.983333333], [1.72912128E12, 4786209.283333333], [1.72912068E12, 4891382.616666666], [1.72912134E12, 4915666.55], [1.72912074E12, 4418399.8], [1.72912104E12, 4850955.45], [1.7291211E12, 4855693.383333334], [1.7291214E12, 4818591.783333333], [1.72912146E12, 4860665.083333333], [1.7291205E12, 5239270.683333334], [1.7291208E12, 5101824.9], [1.72912086E12, 4839686.066666666], [1.72912116E12, 4854119.583333333], [1.72912056E12, 4915603.083333333], [1.72912122E12, 4855772.1], [1.72912152E12, 2343169.6666666665], [1.72912158E12, 391571.65], [1.72912062E12, 4886512.9], [1.72912092E12, 4846107.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72912098E12, 6466.133333333333], [1.72912128E12, 6310.4], [1.72912068E12, 6449.066666666667], [1.72912134E12, 6481.066666666667], [1.72912074E12, 5824.0], [1.72912104E12, 6395.733333333334], [1.7291211E12, 6402.133333333333], [1.7291214E12, 6353.066666666667], [1.72912146E12, 6408.533333333334], [1.7291205E12, 6907.733333333334], [1.7291208E12, 6720.0], [1.72912086E12, 6380.8], [1.72912116E12, 6400.0], [1.72912056E12, 6481.066666666667], [1.72912122E12, 6402.133333333333], [1.72912152E12, 3089.0666666666666], [1.72912158E12, 516.2666666666667], [1.72912062E12, 6442.666666666667], [1.72912092E12, 6389.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912158E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 187.2875708097303, "minX": 1.7291205E12, "maxY": 21854.611570247926, "series": [{"data": [[1.72912098E12, 213.3282744968655], [1.72912128E12, 189.74678837052045], [1.72912068E12, 355.6635792259345], [1.72912134E12, 237.36208031599742], [1.72912074E12, 880.1385454545457], [1.72912104E12, 204.39759839893296], [1.7291211E12, 214.70043318893747], [1.7291214E12, 276.4513096037607], [1.72912146E12, 248.08022636484637], [1.7291205E12, 4661.741358024668], [1.7291208E12, 3694.8795924667947], [1.72912086E12, 798.3205213903756], [1.72912116E12, 201.97866666666678], [1.72912056E12, 1434.237327188941], [1.72912122E12, 187.2875708097303], [1.72912152E12, 3373.126033057852], [1.72912158E12, 21854.611570247926], [1.72912062E12, 1554.1251655629155], [1.72912092E12, 282.2858096828048]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912158E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 134.27257580806372, "minX": 1.7291205E12, "maxY": 18826.607438016523, "series": [{"data": [[1.72912098E12, 154.28604420983183], [1.72912128E12, 135.57538877619993], [1.72912068E12, 218.4197816738334], [1.72912134E12, 171.73041474654366], [1.72912074E12, 500.2025454545455], [1.72912104E12, 146.83855903935947], [1.7291211E12, 155.61346217927365], [1.7291214E12, 202.7421087978514], [1.72912146E12, 189.5119840213046], [1.7291205E12, 2978.551851851857], [1.7291208E12, 2738.430071009566], [1.72912086E12, 387.7489973262031], [1.72912116E12, 144.41800000000038], [1.72912056E12, 706.5042791310078], [1.72912122E12, 134.27257580806372], [1.72912152E12, 2638.8925619834718], [1.72912158E12, 18826.607438016523], [1.72912062E12, 937.1009933774804], [1.72912092E12, 208.45141903171958]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912158E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 87.69243585471511, "minX": 1.7291205E12, "maxY": 16215.727272727274, "series": [{"data": [[1.72912098E12, 104.82580006598461], [1.72912128E12, 88.39993238674758], [1.72912068E12, 157.65861726761494], [1.72912134E12, 120.99275839367986], [1.72912074E12, 457.22545454545417], [1.72912104E12, 97.53969312875266], [1.7291211E12, 106.03098967011006], [1.7291214E12, 146.7709872397583], [1.72912146E12, 141.2110519307591], [1.7291205E12, 2077.3475308641955], [1.7291208E12, 2531.9898116702693], [1.72912086E12, 156.36330213903733], [1.72912116E12, 95.68799999999989], [1.72912056E12, 281.98913759052], [1.72912122E12, 87.69243585471511], [1.72912152E12, 1986.0771349862239], [1.72912158E12, 16215.727272727274], [1.72912062E12, 693.8125827814565], [1.72912092E12, 150.14557595993358]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912158E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 155.0, "minX": 1.7291205E12, "maxY": 377603.0, "series": [{"data": [[1.72912098E12, 1390.0], [1.72912128E12, 1195.0], [1.72912068E12, 209510.0], [1.72912134E12, 1562.0], [1.72912074E12, 244283.0], [1.72912104E12, 1269.0], [1.7291211E12, 1424.0], [1.7291214E12, 7546.0], [1.72912146E12, 15275.0], [1.7291205E12, 62105.0], [1.7291208E12, 76065.0], [1.72912086E12, 377603.0], [1.72912116E12, 1286.0], [1.72912056E12, 117728.0], [1.72912122E12, 1211.0], [1.72912152E12, 39177.0], [1.72912158E12, 88331.0], [1.72912062E12, 155465.0], [1.72912092E12, 4712.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72912098E12, 219.0], [1.72912128E12, 201.0], [1.72912068E12, 409.5999999999999], [1.72912134E12, 262.0], [1.72912074E12, 638.6000000000004], [1.72912104E12, 223.0], [1.7291211E12, 233.0], [1.7291214E12, 303.2999999999997], [1.72912146E12, 225.0], [1.7291205E12, 14347.899999999989], [1.7291208E12, 10200.10000000002], [1.72912086E12, 302.0], [1.72912116E12, 216.0], [1.72912056E12, 1073.6999999999994], [1.72912122E12, 199.0], [1.72912152E12, 10153.900000000001], [1.72912158E12, 33914.1], [1.72912062E12, 3021.900000000001], [1.72912092E12, 318.2000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72912098E12, 1188.3599999999997], [1.72912128E12, 443.09999999999854], [1.72912068E12, 1611.6799999999957], [1.72912134E12, 1228.0], [1.72912074E12, 10842.280000000006], [1.72912104E12, 530.039999999999], [1.7291211E12, 1184.0], [1.7291214E12, 1833.4700000000003], [1.72912146E12, 1213.0], [1.7291205E12, 44367.47000000003], [1.7291208E12, 42399.82999999999], [1.72912086E12, 1510.08], [1.72912116E12, 650.9599999999991], [1.72912056E12, 61107.570000000094], [1.72912122E12, 238.0], [1.72912152E12, 14232.529999999999], [1.72912158E12, 75800.67999999998], [1.72912062E12, 14376.68999999997], [1.72912092E12, 1369.4799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72912098E12, 259.0], [1.72912128E12, 213.0], [1.72912068E12, 1082.3999999999978], [1.72912134E12, 451.0], [1.72912074E12, 1726.74999999999], [1.72912104E12, 265.0], [1.7291211E12, 330.9000000000001], [1.7291214E12, 1031.0499999999943], [1.72912146E12, 308.75], [1.7291205E12, 19712.549999999985], [1.7291208E12, 21245.45], [1.72912086E12, 543.2000000000003], [1.72912116E12, 234.0], [1.72912056E12, 1567.3999999999978], [1.72912122E12, 208.0], [1.72912152E12, 11724.449999999999], [1.72912158E12, 57373.399999999936], [1.72912062E12, 4403.099999999997], [1.72912092E12, 854.1999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72912098E12, 160.0], [1.72912128E12, 157.0], [1.72912068E12, 161.0], [1.72912134E12, 161.0], [1.72912074E12, 159.0], [1.72912104E12, 159.0], [1.7291211E12, 159.0], [1.7291214E12, 160.0], [1.72912146E12, 160.0], [1.7291205E12, 194.0], [1.7291208E12, 162.0], [1.72912086E12, 162.0], [1.72912116E12, 158.0], [1.72912056E12, 172.0], [1.72912122E12, 155.0], [1.72912152E12, 159.0], [1.72912158E12, 14022.0], [1.72912062E12, 163.0], [1.72912092E12, 161.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72912098E12, 185.0], [1.72912128E12, 181.0], [1.72912068E12, 193.0], [1.72912134E12, 187.0], [1.72912074E12, 196.0], [1.72912104E12, 186.0], [1.7291211E12, 185.0], [1.7291214E12, 185.0], [1.72912146E12, 185.0], [1.7291205E12, 1669.5], [1.7291208E12, 201.0], [1.72912086E12, 195.0], [1.72912116E12, 184.0], [1.72912056E12, 269.0], [1.72912122E12, 181.0], [1.72912152E12, 212.0], [1.72912158E12, 16450.5], [1.72912062E12, 514.0], [1.72912092E12, 199.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912158E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 177.0, "minX": 1.0, "maxY": 45688.0, "series": [{"data": [[2.0, 45688.0], [3.0, 15136.0], [4.0, 184.5], [5.0, 216.0], [6.0, 2555.0], [7.0, 185.0], [8.0, 177.0], [9.0, 10913.5], [10.0, 14560.0], [12.0, 1771.5], [13.0, 197.0], [14.0, 181.0], [16.0, 4291.5], [17.0, 2463.0], [18.0, 603.0], [19.0, 184.5], [20.0, 196.0], [21.0, 3045.0], [22.0, 912.0], [23.0, 269.0], [24.0, 246.0], [25.0, 215.0], [27.0, 556.0], [28.0, 1197.5], [29.0, 256.0], [30.0, 187.0], [31.0, 230.0], [32.0, 391.0], [33.0, 187.0], [35.0, 228.0], [34.0, 186.0], [36.0, 251.5], [37.0, 207.0], [38.0, 204.5], [39.0, 183.0], [41.0, 198.0], [40.0, 215.0], [42.0, 188.0], [43.0, 194.0], [44.0, 190.0], [45.0, 188.0], [46.0, 188.0], [47.0, 188.0], [49.0, 184.0], [48.0, 184.0], [51.0, 184.0], [50.0, 185.0], [52.0, 186.0], [53.0, 187.0], [55.0, 193.0], [54.0, 188.0], [57.0, 208.0], [56.0, 195.0], [58.0, 193.0], [59.0, 198.0], [60.0, 197.0], [61.0, 211.0], [63.0, 215.0], [62.0, 196.0], [66.0, 210.0], [65.0, 206.0], [67.0, 215.0], [64.0, 202.0], [71.0, 234.0], [70.0, 393.5], [68.0, 244.5], [69.0, 193.0], [74.0, 307.5], [75.0, 6050.0], [72.0, 229.0], [73.0, 277.0], [76.0, 1232.5], [79.0, 483.5], [77.0, 397.0], [78.0, 286.0], [82.0, 1385.0], [81.0, 347.0], [80.0, 333.5], [83.0, 1172.0], [87.0, 262.0], [85.0, 8702.0], [86.0, 220.0], [84.0, 196.0], [89.0, 215.0], [91.0, 217.0], [90.0, 195.0], [88.0, 16166.0], [95.0, 582.5], [93.0, 291.5], [92.0, 243.0], [96.0, 1374.5], [99.0, 882.0], [97.0, 1201.0], [100.0, 367.0], [108.0, 3634.0], [110.0, 10083.5], [1.0, 27793.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 22924.0], [39.0, 9912.0], [41.0, 9872.0], [42.0, 22357.0], [45.0, 19404.0], [46.0, 27762.0], [47.0, 24483.0], [49.0, 43144.0], [48.0, 19352.0], [51.0, 20432.0], [50.0, 22928.0], [53.0, 20071.0], [52.0, 27515.0], [54.0, 19889.5], [55.0, 26406.0], [56.0, 25368.0], [57.0, 20482.0], [58.0, 19738.0], [59.0, 30705.5], [60.0, 7766.5], [63.0, 21079.0], [64.0, 20300.0], [65.0, 22018.5], [67.0, 20280.0], [66.0, 22143.5], [77.0, 10774.0], [86.0, 10770.0], [110.0, 10870.5], [27.0, 18226.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 110.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 17043.5, "series": [{"data": [[2.0, 17043.5], [3.0, 1540.5], [4.0, 132.5], [5.0, 152.0], [6.0, 1367.5], [7.0, 131.0], [8.0, 129.0], [9.0, 10780.5], [10.0, 12022.0], [12.0, 1626.0], [13.0, 137.0], [14.0, 131.0], [16.0, 3604.0], [17.0, 1576.0], [18.0, 239.5], [19.0, 133.5], [20.0, 138.5], [21.0, 2267.5], [22.0, 481.5], [23.0, 165.0], [24.0, 173.0], [25.0, 142.0], [27.0, 320.0], [28.0, 685.0], [29.0, 165.0], [30.0, 134.5], [31.0, 157.0], [32.0, 253.5], [33.0, 134.0], [35.0, 150.0], [34.0, 134.0], [36.0, 170.0], [37.0, 148.0], [38.0, 144.0], [39.0, 132.0], [41.0, 140.0], [40.0, 152.0], [42.0, 134.0], [43.0, 139.0], [44.0, 137.0], [45.0, 134.0], [46.0, 135.0], [47.0, 135.0], [49.0, 132.0], [48.0, 132.0], [51.0, 132.0], [50.0, 133.0], [52.0, 133.0], [53.0, 134.0], [55.0, 138.0], [54.0, 135.0], [57.0, 146.0], [56.0, 139.0], [58.0, 139.0], [59.0, 141.0], [60.0, 141.0], [61.0, 149.0], [63.0, 154.0], [62.0, 140.0], [66.0, 151.0], [65.0, 147.0], [67.0, 147.0], [64.0, 143.0], [71.0, 158.0], [70.0, 235.0], [68.0, 156.0], [69.0, 138.0], [74.0, 203.5], [75.0, 3228.0], [72.0, 155.5], [73.0, 179.0], [76.0, 803.0], [79.0, 310.5], [77.0, 210.0], [78.0, 173.5], [82.0, 728.5], [81.0, 177.0], [80.0, 210.5], [83.0, 694.0], [87.0, 158.0], [85.0, 5295.5], [86.0, 152.0], [84.0, 138.5], [89.0, 153.0], [91.0, 152.0], [90.0, 139.0], [88.0, 15654.5], [95.0, 294.0], [93.0, 218.5], [92.0, 166.0], [96.0, 1240.0], [99.0, 445.0], [97.0, 399.0], [100.0, 265.0], [108.0, 1742.0], [110.0, 9233.0], [1.0, 15668.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 0.0], [39.0, 0.0], [41.0, 0.0], [42.0, 0.0], [45.0, 0.0], [46.0, 0.0], [47.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [54.0, 0.0], [55.0, 0.0], [56.0, 0.0], [57.0, 0.0], [58.0, 0.0], [59.0, 0.0], [60.0, 0.0], [63.0, 0.0], [64.0, 0.0], [65.0, 0.0], [67.0, 0.0], [66.0, 0.0], [77.0, 0.0], [86.0, 0.0], [110.0, 0.0], [27.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 110.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.45, "minX": 1.72912044E12, "maxY": 50.6, "series": [{"data": [[1.72912098E12, 50.483333333333334], [1.72912128E12, 49.36666666666667], [1.72912068E12, 50.11666666666667], [1.72912134E12, 50.6], [1.72912074E12, 49.81666666666667], [1.72912104E12, 49.983333333333334], [1.72912044E12, 5.45], [1.7291211E12, 50.0], [1.7291214E12, 49.766666666666666], [1.72912146E12, 49.766666666666666], [1.7291205E12, 49.86666666666667], [1.7291208E12, 50.25], [1.72912086E12, 49.96666666666667], [1.72912116E12, 50.0], [1.72912056E12, 49.78333333333333], [1.72912122E12, 50.016666666666666], [1.72912152E12, 28.216666666666665], [1.72912062E12, 50.333333333333336], [1.72912092E12, 49.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912152E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7291205E12, "maxY": 53.96666666666667, "series": [{"data": [[1.72912098E12, 50.516666666666666], [1.72912128E12, 49.3], [1.72912068E12, 50.38333333333333], [1.72912134E12, 50.63333333333333], [1.72912074E12, 45.5], [1.72912104E12, 49.96666666666667], [1.7291211E12, 50.016666666666666], [1.7291214E12, 49.63333333333333], [1.72912146E12, 50.06666666666667], [1.7291205E12, 53.96666666666667], [1.7291208E12, 52.5], [1.72912086E12, 49.85], [1.72912116E12, 50.0], [1.72912056E12, 50.63333333333333], [1.72912122E12, 50.016666666666666], [1.72912152E12, 24.133333333333333], [1.72912158E12, 4.033333333333333], [1.72912062E12, 50.333333333333336], [1.72912092E12, 49.916666666666664]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7291205E12, 0.03333333333333333], [1.7291208E12, 1.4833333333333334], [1.72912086E12, 0.016666666666666666], [1.72912074E12, 0.3333333333333333], [1.72912152E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912158E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7291205E12, "maxY": 53.96666666666667, "series": [{"data": [[1.72912098E12, 50.516666666666666], [1.72912128E12, 49.3], [1.72912068E12, 50.38333333333333], [1.72912134E12, 50.63333333333333], [1.72912074E12, 45.5], [1.72912104E12, 49.96666666666667], [1.7291211E12, 50.016666666666666], [1.7291214E12, 49.63333333333333], [1.72912146E12, 50.06666666666667], [1.7291205E12, 53.96666666666667], [1.7291208E12, 52.5], [1.72912086E12, 49.85], [1.72912116E12, 50.0], [1.72912056E12, 50.63333333333333], [1.72912122E12, 50.016666666666666], [1.72912152E12, 24.133333333333333], [1.72912158E12, 4.033333333333333], [1.72912062E12, 50.333333333333336], [1.72912092E12, 49.916666666666664]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7291205E12, 0.03333333333333333], [1.7291208E12, 1.4833333333333334], [1.72912086E12, 0.016666666666666666], [1.72912074E12, 0.3333333333333333], [1.72912152E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912158E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7291205E12, "maxY": 53.96666666666667, "series": [{"data": [[1.72912098E12, 50.516666666666666], [1.72912128E12, 49.3], [1.72912068E12, 50.38333333333333], [1.72912134E12, 50.63333333333333], [1.72912074E12, 45.5], [1.72912104E12, 49.96666666666667], [1.7291211E12, 50.016666666666666], [1.7291214E12, 49.63333333333333], [1.72912146E12, 50.06666666666667], [1.7291205E12, 53.96666666666667], [1.7291208E12, 52.5], [1.72912086E12, 49.85], [1.72912116E12, 50.0], [1.72912056E12, 50.63333333333333], [1.72912122E12, 50.016666666666666], [1.72912152E12, 24.133333333333333], [1.72912158E12, 4.033333333333333], [1.72912062E12, 50.333333333333336], [1.72912092E12, 49.916666666666664]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7291205E12, 0.03333333333333333], [1.7291208E12, 1.4833333333333334], [1.72912086E12, 0.016666666666666666], [1.72912074E12, 0.3333333333333333], [1.72912152E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912158E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

