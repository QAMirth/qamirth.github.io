/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 153.0, "minX": 0.0, "maxY": 291457.0, "series": [{"data": [[0.0, 153.0], [0.1, 162.0], [0.2, 164.0], [0.3, 165.0], [0.4, 166.0], [0.5, 167.0], [0.6, 167.0], [0.7, 168.0], [0.8, 168.0], [0.9, 169.0], [1.0, 169.0], [1.1, 169.0], [1.2, 170.0], [1.3, 170.0], [1.4, 170.0], [1.5, 170.0], [1.6, 170.0], [1.7, 171.0], [1.8, 171.0], [1.9, 171.0], [2.0, 171.0], [2.1, 171.0], [2.2, 171.0], [2.3, 172.0], [2.4, 172.0], [2.5, 172.0], [2.6, 172.0], [2.7, 172.0], [2.8, 172.0], [2.9, 173.0], [3.0, 173.0], [3.1, 173.0], [3.2, 173.0], [3.3, 173.0], [3.4, 173.0], [3.5, 173.0], [3.6, 173.0], [3.7, 173.0], [3.8, 174.0], [3.9, 174.0], [4.0, 174.0], [4.1, 174.0], [4.2, 174.0], [4.3, 174.0], [4.4, 174.0], [4.5, 174.0], [4.6, 174.0], [4.7, 174.0], [4.8, 175.0], [4.9, 175.0], [5.0, 175.0], [5.1, 175.0], [5.2, 175.0], [5.3, 175.0], [5.4, 175.0], [5.5, 175.0], [5.6, 175.0], [5.7, 175.0], [5.8, 176.0], [5.9, 176.0], [6.0, 176.0], [6.1, 176.0], [6.2, 176.0], [6.3, 176.0], [6.4, 176.0], [6.5, 176.0], [6.6, 176.0], [6.7, 176.0], [6.8, 176.0], [6.9, 176.0], [7.0, 177.0], [7.1, 177.0], [7.2, 177.0], [7.3, 177.0], [7.4, 177.0], [7.5, 177.0], [7.6, 177.0], [7.7, 177.0], [7.8, 177.0], [7.9, 177.0], [8.0, 177.0], [8.1, 177.0], [8.2, 177.0], [8.3, 177.0], [8.4, 178.0], [8.5, 178.0], [8.6, 178.0], [8.7, 178.0], [8.8, 178.0], [8.9, 178.0], [9.0, 178.0], [9.1, 178.0], [9.2, 178.0], [9.3, 178.0], [9.4, 178.0], [9.5, 178.0], [9.6, 178.0], [9.7, 178.0], [9.8, 178.0], [9.9, 179.0], [10.0, 179.0], [10.1, 179.0], [10.2, 179.0], [10.3, 179.0], [10.4, 179.0], [10.5, 179.0], [10.6, 179.0], [10.7, 179.0], [10.8, 179.0], [10.9, 179.0], [11.0, 179.0], [11.1, 179.0], [11.2, 179.0], [11.3, 179.0], [11.4, 180.0], [11.5, 180.0], [11.6, 180.0], [11.7, 180.0], [11.8, 180.0], [11.9, 180.0], [12.0, 180.0], [12.1, 180.0], [12.2, 180.0], [12.3, 180.0], [12.4, 180.0], [12.5, 180.0], [12.6, 180.0], [12.7, 180.0], [12.8, 180.0], [12.9, 181.0], [13.0, 181.0], [13.1, 181.0], [13.2, 181.0], [13.3, 181.0], [13.4, 181.0], [13.5, 181.0], [13.6, 181.0], [13.7, 181.0], [13.8, 181.0], [13.9, 181.0], [14.0, 181.0], [14.1, 181.0], [14.2, 181.0], [14.3, 181.0], [14.4, 181.0], [14.5, 181.0], [14.6, 182.0], [14.7, 182.0], [14.8, 182.0], [14.9, 182.0], [15.0, 182.0], [15.1, 182.0], [15.2, 182.0], [15.3, 182.0], [15.4, 182.0], [15.5, 182.0], [15.6, 182.0], [15.7, 182.0], [15.8, 182.0], [15.9, 182.0], [16.0, 182.0], [16.1, 182.0], [16.2, 183.0], [16.3, 183.0], [16.4, 183.0], [16.5, 183.0], [16.6, 183.0], [16.7, 183.0], [16.8, 183.0], [16.9, 183.0], [17.0, 183.0], [17.1, 183.0], [17.2, 183.0], [17.3, 183.0], [17.4, 183.0], [17.5, 183.0], [17.6, 183.0], [17.7, 183.0], [17.8, 183.0], [17.9, 184.0], [18.0, 184.0], [18.1, 184.0], [18.2, 184.0], [18.3, 184.0], [18.4, 184.0], [18.5, 184.0], [18.6, 184.0], [18.7, 184.0], [18.8, 184.0], [18.9, 184.0], [19.0, 184.0], [19.1, 184.0], [19.2, 184.0], [19.3, 184.0], [19.4, 184.0], [19.5, 184.0], [19.6, 185.0], [19.7, 185.0], [19.8, 185.0], [19.9, 185.0], [20.0, 185.0], [20.1, 185.0], [20.2, 185.0], [20.3, 185.0], [20.4, 185.0], [20.5, 185.0], [20.6, 185.0], [20.7, 185.0], [20.8, 185.0], [20.9, 185.0], [21.0, 185.0], [21.1, 186.0], [21.2, 186.0], [21.3, 186.0], [21.4, 186.0], [21.5, 186.0], [21.6, 186.0], [21.7, 186.0], [21.8, 186.0], [21.9, 186.0], [22.0, 186.0], [22.1, 186.0], [22.2, 186.0], [22.3, 186.0], [22.4, 186.0], [22.5, 187.0], [22.6, 187.0], [22.7, 187.0], [22.8, 187.0], [22.9, 187.0], [23.0, 187.0], [23.1, 187.0], [23.2, 187.0], [23.3, 187.0], [23.4, 187.0], [23.5, 187.0], [23.6, 187.0], [23.7, 187.0], [23.8, 187.0], [23.9, 187.0], [24.0, 188.0], [24.1, 188.0], [24.2, 188.0], [24.3, 188.0], [24.4, 188.0], [24.5, 188.0], [24.6, 188.0], [24.7, 188.0], [24.8, 188.0], [24.9, 188.0], [25.0, 188.0], [25.1, 188.0], [25.2, 188.0], [25.3, 188.0], [25.4, 188.0], [25.5, 189.0], [25.6, 189.0], [25.7, 189.0], [25.8, 189.0], [25.9, 189.0], [26.0, 189.0], [26.1, 189.0], [26.2, 189.0], [26.3, 189.0], [26.4, 189.0], [26.5, 189.0], [26.6, 189.0], [26.7, 189.0], [26.8, 189.0], [26.9, 190.0], [27.0, 190.0], [27.1, 190.0], [27.2, 190.0], [27.3, 190.0], [27.4, 190.0], [27.5, 190.0], [27.6, 190.0], [27.7, 190.0], [27.8, 190.0], [27.9, 190.0], [28.0, 190.0], [28.1, 190.0], [28.2, 190.0], [28.3, 191.0], [28.4, 191.0], [28.5, 191.0], [28.6, 191.0], [28.7, 191.0], [28.8, 191.0], [28.9, 191.0], [29.0, 191.0], [29.1, 191.0], [29.2, 191.0], [29.3, 191.0], [29.4, 191.0], [29.5, 191.0], [29.6, 191.0], [29.7, 192.0], [29.8, 192.0], [29.9, 192.0], [30.0, 192.0], [30.1, 192.0], [30.2, 192.0], [30.3, 192.0], [30.4, 192.0], [30.5, 192.0], [30.6, 192.0], [30.7, 192.0], [30.8, 192.0], [30.9, 193.0], [31.0, 193.0], [31.1, 193.0], [31.2, 193.0], [31.3, 193.0], [31.4, 193.0], [31.5, 193.0], [31.6, 193.0], [31.7, 193.0], [31.8, 193.0], [31.9, 193.0], [32.0, 193.0], [32.1, 193.0], [32.2, 194.0], [32.3, 194.0], [32.4, 194.0], [32.5, 194.0], [32.6, 194.0], [32.7, 194.0], [32.8, 194.0], [32.9, 194.0], [33.0, 194.0], [33.1, 194.0], [33.2, 194.0], [33.3, 194.0], [33.4, 195.0], [33.5, 195.0], [33.6, 195.0], [33.7, 195.0], [33.8, 195.0], [33.9, 195.0], [34.0, 195.0], [34.1, 195.0], [34.2, 195.0], [34.3, 195.0], [34.4, 195.0], [34.5, 195.0], [34.6, 196.0], [34.7, 196.0], [34.8, 196.0], [34.9, 196.0], [35.0, 196.0], [35.1, 196.0], [35.2, 196.0], [35.3, 196.0], [35.4, 196.0], [35.5, 196.0], [35.6, 196.0], [35.7, 197.0], [35.8, 197.0], [35.9, 197.0], [36.0, 197.0], [36.1, 197.0], [36.2, 197.0], [36.3, 197.0], [36.4, 197.0], [36.5, 197.0], [36.6, 197.0], [36.7, 197.0], [36.8, 197.0], [36.9, 198.0], [37.0, 198.0], [37.1, 198.0], [37.2, 198.0], [37.3, 198.0], [37.4, 198.0], [37.5, 198.0], [37.6, 198.0], [37.7, 198.0], [37.8, 198.0], [37.9, 198.0], [38.0, 199.0], [38.1, 199.0], [38.2, 199.0], [38.3, 199.0], [38.4, 199.0], [38.5, 199.0], [38.6, 199.0], [38.7, 199.0], [38.8, 199.0], [38.9, 199.0], [39.0, 199.0], [39.1, 199.0], [39.2, 200.0], [39.3, 200.0], [39.4, 200.0], [39.5, 200.0], [39.6, 200.0], [39.7, 200.0], [39.8, 200.0], [39.9, 200.0], [40.0, 200.0], [40.1, 200.0], [40.2, 201.0], [40.3, 201.0], [40.4, 201.0], [40.5, 201.0], [40.6, 201.0], [40.7, 201.0], [40.8, 201.0], [40.9, 201.0], [41.0, 201.0], [41.1, 201.0], [41.2, 201.0], [41.3, 202.0], [41.4, 202.0], [41.5, 202.0], [41.6, 202.0], [41.7, 202.0], [41.8, 202.0], [41.9, 202.0], [42.0, 202.0], [42.1, 202.0], [42.2, 202.0], [42.3, 203.0], [42.4, 203.0], [42.5, 203.0], [42.6, 203.0], [42.7, 203.0], [42.8, 203.0], [42.9, 203.0], [43.0, 203.0], [43.1, 203.0], [43.2, 203.0], [43.3, 204.0], [43.4, 204.0], [43.5, 204.0], [43.6, 204.0], [43.7, 204.0], [43.8, 204.0], [43.9, 204.0], [44.0, 204.0], [44.1, 204.0], [44.2, 205.0], [44.3, 205.0], [44.4, 205.0], [44.5, 205.0], [44.6, 205.0], [44.7, 205.0], [44.8, 205.0], [44.9, 205.0], [45.0, 205.0], [45.1, 205.0], [45.2, 206.0], [45.3, 206.0], [45.4, 206.0], [45.5, 206.0], [45.6, 206.0], [45.7, 206.0], [45.8, 206.0], [45.9, 206.0], [46.0, 206.0], [46.1, 206.0], [46.2, 207.0], [46.3, 207.0], [46.4, 207.0], [46.5, 207.0], [46.6, 207.0], [46.7, 207.0], [46.8, 207.0], [46.9, 207.0], [47.0, 207.0], [47.1, 208.0], [47.2, 208.0], [47.3, 208.0], [47.4, 208.0], [47.5, 208.0], [47.6, 208.0], [47.7, 208.0], [47.8, 208.0], [47.9, 208.0], [48.0, 209.0], [48.1, 209.0], [48.2, 209.0], [48.3, 209.0], [48.4, 209.0], [48.5, 209.0], [48.6, 209.0], [48.7, 209.0], [48.8, 209.0], [48.9, 209.0], [49.0, 210.0], [49.1, 210.0], [49.2, 210.0], [49.3, 210.0], [49.4, 210.0], [49.5, 210.0], [49.6, 210.0], [49.7, 210.0], [49.8, 210.0], [49.9, 211.0], [50.0, 211.0], [50.1, 211.0], [50.2, 211.0], [50.3, 211.0], [50.4, 211.0], [50.5, 211.0], [50.6, 211.0], [50.7, 212.0], [50.8, 212.0], [50.9, 212.0], [51.0, 212.0], [51.1, 212.0], [51.2, 212.0], [51.3, 212.0], [51.4, 212.0], [51.5, 213.0], [51.6, 213.0], [51.7, 213.0], [51.8, 213.0], [51.9, 213.0], [52.0, 213.0], [52.1, 213.0], [52.2, 213.0], [52.3, 213.0], [52.4, 214.0], [52.5, 214.0], [52.6, 214.0], [52.7, 214.0], [52.8, 214.0], [52.9, 214.0], [53.0, 214.0], [53.1, 214.0], [53.2, 215.0], [53.3, 215.0], [53.4, 215.0], [53.5, 215.0], [53.6, 215.0], [53.7, 215.0], [53.8, 215.0], [53.9, 216.0], [54.0, 216.0], [54.1, 216.0], [54.2, 216.0], [54.3, 216.0], [54.4, 216.0], [54.5, 216.0], [54.6, 216.0], [54.7, 217.0], [54.8, 217.0], [54.9, 217.0], [55.0, 217.0], [55.1, 217.0], [55.2, 217.0], [55.3, 217.0], [55.4, 217.0], [55.5, 218.0], [55.6, 218.0], [55.7, 218.0], [55.8, 218.0], [55.9, 218.0], [56.0, 218.0], [56.1, 219.0], [56.2, 219.0], [56.3, 219.0], [56.4, 219.0], [56.5, 219.0], [56.6, 219.0], [56.7, 220.0], [56.8, 220.0], [56.9, 220.0], [57.0, 220.0], [57.1, 220.0], [57.2, 220.0], [57.3, 220.0], [57.4, 221.0], [57.5, 221.0], [57.6, 221.0], [57.7, 221.0], [57.8, 221.0], [57.9, 221.0], [58.0, 222.0], [58.1, 222.0], [58.2, 222.0], [58.3, 222.0], [58.4, 222.0], [58.5, 222.0], [58.6, 223.0], [58.7, 223.0], [58.8, 223.0], [58.9, 223.0], [59.0, 223.0], [59.1, 223.0], [59.2, 223.0], [59.3, 224.0], [59.4, 224.0], [59.5, 224.0], [59.6, 224.0], [59.7, 224.0], [59.8, 224.0], [59.9, 225.0], [60.0, 225.0], [60.1, 225.0], [60.2, 225.0], [60.3, 225.0], [60.4, 225.0], [60.5, 226.0], [60.6, 226.0], [60.7, 226.0], [60.8, 226.0], [60.9, 226.0], [61.0, 226.0], [61.1, 227.0], [61.2, 227.0], [61.3, 227.0], [61.4, 227.0], [61.5, 227.0], [61.6, 227.0], [61.7, 228.0], [61.8, 228.0], [61.9, 228.0], [62.0, 228.0], [62.1, 228.0], [62.2, 229.0], [62.3, 229.0], [62.4, 229.0], [62.5, 229.0], [62.6, 229.0], [62.7, 229.0], [62.8, 230.0], [62.9, 230.0], [63.0, 230.0], [63.1, 230.0], [63.2, 230.0], [63.3, 231.0], [63.4, 231.0], [63.5, 231.0], [63.6, 231.0], [63.7, 231.0], [63.8, 232.0], [63.9, 232.0], [64.0, 232.0], [64.1, 232.0], [64.2, 233.0], [64.3, 233.0], [64.4, 233.0], [64.5, 233.0], [64.6, 233.0], [64.7, 234.0], [64.8, 234.0], [64.9, 234.0], [65.0, 234.0], [65.1, 234.0], [65.2, 235.0], [65.3, 235.0], [65.4, 235.0], [65.5, 235.0], [65.6, 235.0], [65.7, 236.0], [65.8, 236.0], [65.9, 236.0], [66.0, 236.0], [66.1, 237.0], [66.2, 237.0], [66.3, 237.0], [66.4, 237.0], [66.5, 238.0], [66.6, 238.0], [66.7, 238.0], [66.8, 238.0], [66.9, 239.0], [67.0, 239.0], [67.1, 239.0], [67.2, 239.0], [67.3, 240.0], [67.4, 240.0], [67.5, 240.0], [67.6, 240.0], [67.7, 241.0], [67.8, 241.0], [67.9, 241.0], [68.0, 242.0], [68.1, 242.0], [68.2, 242.0], [68.3, 242.0], [68.4, 243.0], [68.5, 243.0], [68.6, 243.0], [68.7, 243.0], [68.8, 244.0], [68.9, 244.0], [69.0, 244.0], [69.1, 245.0], [69.2, 245.0], [69.3, 245.0], [69.4, 246.0], [69.5, 246.0], [69.6, 246.0], [69.7, 247.0], [69.8, 247.0], [69.9, 247.0], [70.0, 248.0], [70.1, 248.0], [70.2, 248.0], [70.3, 249.0], [70.4, 249.0], [70.5, 249.0], [70.6, 250.0], [70.7, 250.0], [70.8, 250.0], [70.9, 251.0], [71.0, 251.0], [71.1, 251.0], [71.2, 252.0], [71.3, 252.0], [71.4, 252.0], [71.5, 253.0], [71.6, 253.0], [71.7, 253.0], [71.8, 254.0], [71.9, 254.0], [72.0, 254.0], [72.1, 255.0], [72.2, 255.0], [72.3, 256.0], [72.4, 256.0], [72.5, 257.0], [72.6, 257.0], [72.7, 257.0], [72.8, 258.0], [72.9, 258.0], [73.0, 259.0], [73.1, 259.0], [73.2, 259.0], [73.3, 260.0], [73.4, 260.0], [73.5, 261.0], [73.6, 261.0], [73.7, 261.0], [73.8, 262.0], [73.9, 262.0], [74.0, 263.0], [74.1, 263.0], [74.2, 264.0], [74.3, 264.0], [74.4, 264.0], [74.5, 265.0], [74.6, 265.0], [74.7, 266.0], [74.8, 267.0], [74.9, 267.0], [75.0, 268.0], [75.1, 268.0], [75.2, 269.0], [75.3, 269.0], [75.4, 270.0], [75.5, 270.0], [75.6, 271.0], [75.7, 271.0], [75.8, 272.0], [75.9, 272.0], [76.0, 273.0], [76.1, 274.0], [76.2, 274.0], [76.3, 275.0], [76.4, 275.0], [76.5, 276.0], [76.6, 277.0], [76.7, 277.0], [76.8, 278.0], [76.9, 279.0], [77.0, 279.0], [77.1, 280.0], [77.2, 281.0], [77.3, 281.0], [77.4, 282.0], [77.5, 283.0], [77.6, 284.0], [77.7, 285.0], [77.8, 285.0], [77.9, 286.0], [78.0, 287.0], [78.1, 288.0], [78.2, 289.0], [78.3, 290.0], [78.4, 290.0], [78.5, 291.0], [78.6, 292.0], [78.7, 293.0], [78.8, 294.0], [78.9, 295.0], [79.0, 296.0], [79.1, 297.0], [79.2, 298.0], [79.3, 299.0], [79.4, 300.0], [79.5, 301.0], [79.6, 302.0], [79.7, 303.0], [79.8, 304.0], [79.9, 305.0], [80.0, 307.0], [80.1, 308.0], [80.2, 309.0], [80.3, 310.0], [80.4, 312.0], [80.5, 313.0], [80.6, 314.0], [80.7, 316.0], [80.8, 317.0], [80.9, 318.0], [81.0, 320.0], [81.1, 321.0], [81.2, 323.0], [81.3, 324.0], [81.4, 325.0], [81.5, 327.0], [81.6, 328.0], [81.7, 330.0], [81.8, 331.0], [81.9, 333.0], [82.0, 335.0], [82.1, 336.0], [82.2, 338.0], [82.3, 339.0], [82.4, 341.0], [82.5, 343.0], [82.6, 345.0], [82.7, 347.0], [82.8, 349.0], [82.9, 351.0], [83.0, 352.0], [83.1, 354.0], [83.2, 356.0], [83.3, 358.0], [83.4, 360.0], [83.5, 363.0], [83.6, 365.0], [83.7, 368.0], [83.8, 371.0], [83.9, 373.0], [84.0, 375.0], [84.1, 378.0], [84.2, 380.0], [84.3, 383.0], [84.4, 386.0], [84.5, 388.0], [84.6, 391.0], [84.7, 395.0], [84.8, 397.0], [84.9, 400.0], [85.0, 404.0], [85.1, 408.0], [85.2, 412.0], [85.3, 415.0], [85.4, 419.0], [85.5, 423.0], [85.6, 427.0], [85.7, 431.0], [85.8, 435.0], [85.9, 440.0], [86.0, 443.0], [86.1, 446.0], [86.2, 450.0], [86.3, 454.0], [86.4, 459.0], [86.5, 462.0], [86.6, 466.0], [86.7, 471.0], [86.8, 475.0], [86.9, 480.0], [87.0, 484.0], [87.1, 488.0], [87.2, 493.0], [87.3, 498.0], [87.4, 502.0], [87.5, 505.0], [87.6, 509.0], [87.7, 513.0], [87.8, 517.0], [87.9, 521.0], [88.0, 526.0], [88.1, 531.0], [88.2, 536.0], [88.3, 541.0], [88.4, 548.0], [88.5, 553.0], [88.6, 559.0], [88.7, 565.0], [88.8, 575.0], [88.9, 581.0], [89.0, 590.0], [89.1, 601.0], [89.2, 610.0], [89.3, 618.0], [89.4, 624.0], [89.5, 633.0], [89.6, 642.0], [89.7, 653.0], [89.8, 666.0], [89.9, 676.0], [90.0, 687.0], [90.1, 701.0], [90.2, 714.0], [90.3, 729.0], [90.4, 741.0], [90.5, 756.0], [90.6, 771.0], [90.7, 786.0], [90.8, 801.0], [90.9, 817.0], [91.0, 833.0], [91.1, 855.0], [91.2, 873.0], [91.3, 895.0], [91.4, 917.0], [91.5, 938.0], [91.6, 963.0], [91.7, 987.0], [91.8, 1018.0], [91.9, 1055.0], [92.0, 1085.0], [92.1, 1121.0], [92.2, 1165.0], [92.3, 1180.0], [92.4, 1185.0], [92.5, 1188.0], [92.6, 1191.0], [92.7, 1194.0], [92.8, 1197.0], [92.9, 1201.0], [93.0, 1204.0], [93.1, 1208.0], [93.2, 1211.0], [93.3, 1216.0], [93.4, 1220.0], [93.5, 1224.0], [93.6, 1228.0], [93.7, 1232.0], [93.8, 1237.0], [93.9, 1244.0], [94.0, 1249.0], [94.1, 1256.0], [94.2, 1263.0], [94.3, 1269.0], [94.4, 1274.0], [94.5, 1280.0], [94.6, 1288.0], [94.7, 1296.0], [94.8, 1302.0], [94.9, 1311.0], [95.0, 1318.0], [95.1, 1326.0], [95.2, 1334.0], [95.3, 1342.0], [95.4, 1351.0], [95.5, 1359.0], [95.6, 1367.0], [95.7, 1375.0], [95.8, 1384.0], [95.9, 1394.0], [96.0, 1406.0], [96.1, 1419.0], [96.2, 1433.0], [96.3, 1451.0], [96.4, 1470.0], [96.5, 1488.0], [96.6, 1513.0], [96.7, 1541.0], [96.8, 1571.0], [96.9, 1618.0], [97.0, 1671.0], [97.1, 1728.0], [97.2, 1773.0], [97.3, 1837.0], [97.4, 1880.0], [97.5, 1961.0], [97.6, 2033.0], [97.7, 2138.0], [97.8, 2271.0], [97.9, 2413.0], [98.0, 2553.0], [98.1, 2735.0], [98.2, 3065.0], [98.3, 3232.0], [98.4, 3351.0], [98.5, 3434.0], [98.6, 3555.0], [98.7, 3727.0], [98.8, 4015.0], [98.9, 4454.0], [99.0, 4991.0], [99.1, 5811.0], [99.2, 7456.0], [99.3, 7797.0], [99.4, 8338.0], [99.5, 9805.0], [99.6, 12204.0], [99.7, 16063.0], [99.8, 21954.0], [99.9, 30522.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 27345.0, "series": [{"data": [[68300.0, 1.0], [291400.0, 1.0], [100.0, 26610.0], [33700.0, 2.0], [33300.0, 1.0], [36100.0, 1.0], [34900.0, 1.0], [36900.0, 1.0], [38500.0, 1.0], [44100.0, 1.0], [43300.0, 1.0], [45700.0, 1.0], [47300.0, 1.0], [200.0, 27345.0], [51300.0, 1.0], [63700.0, 2.0], [69000.0, 1.0], [300.0, 3768.0], [400.0, 1666.0], [108200.0, 1.0], [500.0, 1193.0], [600.0, 677.0], [700.0, 483.0], [800.0, 352.0], [900.0, 295.0], [1000.0, 201.0], [262000.0, 1.0], [1100.0, 561.0], [1200.0, 1285.0], [1300.0, 809.0], [1400.0, 410.0], [1500.0, 210.0], [1600.0, 130.0], [1700.0, 127.0], [1800.0, 128.0], [1900.0, 90.0], [2000.0, 77.0], [2100.0, 62.0], [2300.0, 44.0], [2200.0, 42.0], [2400.0, 51.0], [2500.0, 41.0], [2600.0, 39.0], [2700.0, 24.0], [2800.0, 23.0], [2900.0, 16.0], [3000.0, 24.0], [3100.0, 32.0], [3300.0, 71.0], [3200.0, 66.0], [3400.0, 65.0], [3500.0, 55.0], [3600.0, 34.0], [3700.0, 26.0], [3800.0, 23.0], [3900.0, 25.0], [4000.0, 21.0], [4100.0, 23.0], [4200.0, 15.0], [4300.0, 9.0], [4600.0, 13.0], [4400.0, 19.0], [4500.0, 11.0], [4800.0, 10.0], [4700.0, 14.0], [5000.0, 8.0], [4900.0, 6.0], [5100.0, 7.0], [5200.0, 10.0], [5300.0, 11.0], [5500.0, 6.0], [5400.0, 14.0], [5600.0, 5.0], [5700.0, 5.0], [5800.0, 10.0], [6000.0, 4.0], [6100.0, 4.0], [5900.0, 8.0], [6200.0, 6.0], [6300.0, 4.0], [6400.0, 1.0], [6600.0, 5.0], [6500.0, 3.0], [6700.0, 3.0], [6900.0, 5.0], [7000.0, 2.0], [7400.0, 12.0], [7200.0, 3.0], [7300.0, 6.0], [7500.0, 21.0], [7600.0, 16.0], [7700.0, 25.0], [7900.0, 10.0], [7800.0, 23.0], [8100.0, 9.0], [8000.0, 5.0], [8300.0, 12.0], [8600.0, 5.0], [8200.0, 13.0], [8700.0, 5.0], [8500.0, 8.0], [8400.0, 8.0], [9100.0, 4.0], [8800.0, 4.0], [8900.0, 7.0], [9000.0, 4.0], [9200.0, 5.0], [9300.0, 1.0], [9700.0, 6.0], [9600.0, 2.0], [9500.0, 1.0], [9400.0, 3.0], [10100.0, 6.0], [9800.0, 4.0], [9900.0, 5.0], [10000.0, 4.0], [10200.0, 1.0], [10300.0, 2.0], [10600.0, 3.0], [10700.0, 4.0], [10400.0, 1.0], [10500.0, 5.0], [10900.0, 5.0], [10800.0, 3.0], [11000.0, 3.0], [11500.0, 4.0], [11400.0, 3.0], [11300.0, 2.0], [11700.0, 2.0], [11600.0, 2.0], [12000.0, 3.0], [11800.0, 2.0], [12200.0, 5.0], [12100.0, 1.0], [11900.0, 3.0], [12600.0, 2.0], [12700.0, 1.0], [12500.0, 1.0], [12300.0, 1.0], [13000.0, 2.0], [13300.0, 1.0], [13200.0, 3.0], [13100.0, 1.0], [12800.0, 1.0], [13700.0, 1.0], [13800.0, 1.0], [13400.0, 1.0], [14000.0, 1.0], [14300.0, 1.0], [14800.0, 2.0], [14600.0, 1.0], [14500.0, 1.0], [14700.0, 1.0], [15000.0, 1.0], [15200.0, 2.0], [15300.0, 3.0], [15800.0, 3.0], [15400.0, 2.0], [15700.0, 12.0], [15600.0, 7.0], [15500.0, 3.0], [16100.0, 2.0], [16200.0, 2.0], [15900.0, 3.0], [16000.0, 6.0], [16800.0, 2.0], [16600.0, 2.0], [17200.0, 1.0], [17000.0, 2.0], [18400.0, 2.0], [17600.0, 3.0], [18000.0, 3.0], [17800.0, 1.0], [18200.0, 1.0], [18800.0, 2.0], [18600.0, 1.0], [19000.0, 1.0], [19400.0, 1.0], [20400.0, 1.0], [19800.0, 2.0], [20800.0, 1.0], [21000.0, 1.0], [22000.0, 4.0], [22200.0, 2.0], [21800.0, 4.0], [21600.0, 1.0], [23400.0, 2.0], [22600.0, 3.0], [22800.0, 2.0], [23000.0, 4.0], [24400.0, 2.0], [24000.0, 1.0], [24200.0, 1.0], [23600.0, 1.0], [24800.0, 1.0], [26200.0, 1.0], [26400.0, 1.0], [25600.0, 1.0], [26000.0, 1.0], [27400.0, 1.0], [26800.0, 1.0], [29000.0, 1.0], [30400.0, 3.0], [29800.0, 2.0], [30000.0, 2.0], [30600.0, 2.0], [33200.0, 1.0], [34400.0, 1.0], [36800.0, 1.0], [37200.0, 2.0], [37600.0, 1.0], [42000.0, 1.0], [54000.0, 1.0], [57600.0, 1.0], [58000.0, 1.0], [62400.0, 1.0], [123200.0, 1.0], [34300.0, 1.0], [36700.0, 2.0], [36300.0, 1.0], [37500.0, 1.0], [39100.0, 1.0], [44700.0, 1.0], [48700.0, 1.0], [51900.0, 1.0], [55900.0, 1.0], [57100.0, 1.0], [59900.0, 1.0], [71800.0, 1.0], [71000.0, 1.0], [116600.0, 1.0], [101300.0, 1.0], [16900.0, 3.0], [16500.0, 2.0], [16700.0, 5.0], [17300.0, 1.0], [17900.0, 4.0], [17500.0, 1.0], [18700.0, 2.0], [18500.0, 1.0], [18900.0, 2.0], [19900.0, 1.0], [20300.0, 1.0], [19700.0, 1.0], [21500.0, 5.0], [21900.0, 1.0], [22300.0, 7.0], [22100.0, 2.0], [21700.0, 1.0], [22500.0, 1.0], [22700.0, 1.0], [22900.0, 2.0], [23100.0, 2.0], [23300.0, 1.0], [24500.0, 1.0], [24100.0, 1.0], [23700.0, 1.0], [24300.0, 2.0], [25100.0, 1.0], [26300.0, 1.0], [27500.0, 1.0], [27300.0, 1.0], [28100.0, 1.0], [27700.0, 2.0], [29300.0, 1.0], [28900.0, 1.0], [30500.0, 1.0], [31700.0, 2.0], [31100.0, 1.0], [31900.0, 1.0], [32500.0, 1.0], [32100.0, 1.0], [34200.0, 1.0], [35000.0, 1.0], [36200.0, 1.0], [38200.0, 1.0], [38600.0, 1.0], [40200.0, 1.0], [40600.0, 2.0], [42600.0, 1.0], [45000.0, 1.0], [45400.0, 1.0], [52200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 291400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 59409.0, "series": [{"data": [[0.0, 59409.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6249.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2338.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.175978588156584, "minX": 1.72916508E12, "maxY": 390.57685352622065, "series": [{"data": [[1.72916604E12, 14.029345372460462], [1.72916508E12, 390.57685352622065], [1.72916574E12, 12.476523476523493], [1.72916568E12, 12.879373542152605], [1.72916634E12, 16.15890957446812], [1.72916538E12, 19.235351562499964], [1.72916628E12, 13.289869608826512], [1.72916532E12, 26.596147347076794], [1.72916598E12, 14.026407227241142], [1.72916592E12, 14.996663329996673], [1.72916562E12, 12.175978588156584], [1.72916556E12, 14.152173913043478], [1.72916622E12, 21.150315929497815], [1.72916526E12, 59.21861057998735], [1.72916616E12, 13.031511900771072], [1.7291652E12, 32.71926734765765], [1.72916586E12, 14.227333333333325], [1.7291658E12, 12.78025265957442], [1.72916646E12, 13.585343228200367], [1.7291655E12, 24.34261309712111], [1.7291664E12, 18.556882255389688], [1.72916544E12, 18.32029861357978], [1.7291661E12, 14.612839179351448], [1.72916514E12, 118.7741935483874]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916646E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 216.7256601491634, "minX": 1.0, "maxY": 27705.0, "series": [{"data": [[2.0, 313.95604395604397], [3.0, 298.5920000000002], [4.0, 255.38613861386133], [5.0, 272.0633333333332], [6.0, 252.2009237875289], [7.0, 251.94615384615366], [8.0, 233.0752089136488], [9.0, 226.26548289302724], [10.0, 216.7256601491634], [11.0, 224.7586254295533], [12.0, 232.27717024436288], [13.0, 245.74437757364635], [14.0, 253.87497429570266], [15.0, 267.2294719380701], [16.0, 288.92251727901044], [17.0, 354.36320551486483], [18.0, 515.7946920380574], [19.0, 365.6908763505402], [20.0, 379.09364081062205], [21.0, 365.04777327935204], [22.0, 366.82110091743135], [23.0, 374.26601520086876], [24.0, 429.0881226053642], [25.0, 421.6207332490516], [26.0, 639.61430575035], [27.0, 994.6851574212907], [28.0, 576.850968703428], [29.0, 440.7080181543114], [30.0, 758.9316987740813], [31.0, 586.5128205128199], [33.0, 989.48275862069], [32.0, 465.42270531400953], [35.0, 670.7481751824814], [34.0, 561.0348101265826], [37.0, 810.9007936507932], [36.0, 694.6056910569108], [39.0, 1372.4839999999997], [38.0, 606.5338645418327], [41.0, 819.6666666666662], [40.0, 1257.8014705882354], [43.0, 903.1666666666664], [42.0, 1027.2783505154648], [45.0, 897.1772151898736], [44.0, 1006.4311377245504], [47.0, 1233.5081081081084], [46.0, 897.4619565217391], [49.0, 1074.2260273972602], [48.0, 809.233532934132], [51.0, 1035.449612403101], [50.0, 776.3873239436622], [53.0, 761.9247311827959], [52.0, 1269.7872340425529], [55.0, 925.4712643678164], [54.0, 883.244680851064], [57.0, 1066.4945054945056], [56.0, 854.3246753246752], [59.0, 731.741935483871], [58.0, 1344.5056179775281], [61.0, 719.3291139240506], [60.0, 1157.2839506172836], [63.0, 1818.000000000001], [62.0, 1058.4942528735633], [67.0, 1589.424242424242], [66.0, 1067.7101449275365], [65.0, 1238.680555555555], [64.0, 1316.0588235294113], [71.0, 1479.4307692307693], [70.0, 906.641975308642], [69.0, 737.385542168675], [68.0, 806.0869565217391], [75.0, 2640.4583333333335], [74.0, 1107.9799999999998], [73.0, 745.1666666666669], [72.0, 1210.1029411764705], [79.0, 1820.3589743589744], [78.0, 1060.8709677419354], [77.0, 2047.0465116279067], [76.0, 703.3124999999999], [83.0, 1424.2941176470588], [82.0, 1166.666666666667], [81.0, 1303.878787878788], [80.0, 1099.5555555555559], [87.0, 1225.8095238095236], [86.0, 1512.8461538461538], [85.0, 1297.6923076923078], [84.0, 1402.5294117647059], [91.0, 3467.8235294117644], [90.0, 1180.0], [89.0, 1262.0000000000005], [88.0, 1155.318181818182], [94.0, 3038.7037037037035], [93.0, 1320.730769230769], [95.0, 1497.3529411764705], [92.0, 1157.6499999999999], [99.0, 1016.9], [98.0, 1114.227272727273], [97.0, 1151.470588235294], [96.0, 1103.857142857143], [103.0, 2766.3461538461534], [102.0, 1120.7368421052631], [101.0, 3146.521739130434], [100.0, 1333.047619047619], [107.0, 2566.105263157894], [106.0, 5596.95238095238], [105.0, 1277.35], [104.0, 910.8124999999999], [111.0, 1703.466666666667], [110.0, 3796.5454545454545], [109.0, 3016.187499999999], [108.0, 2298.8928571428573], [115.0, 1629.9999999999995], [114.0, 3777.684210526316], [113.0, 2158.961538461538], [112.0, 3584.6521739130426], [119.0, 5203.842105263158], [118.0, 1178.6363636363635], [117.0, 2587.444444444444], [116.0, 4364.791666666667], [122.0, 3202.611111111111], [123.0, 2998.999999999999], [121.0, 3382.1428571428564], [120.0, 3271.7999999999997], [127.0, 1748.4800000000002], [126.0, 1359.1666666666663], [125.0, 1404.2692307692307], [124.0, 1024.8666666666666], [135.0, 1121.142857142857], [134.0, 2211.363636363636], [133.0, 4009.7307692307695], [132.0, 1515.5384615384614], [131.0, 2626.0454545454545], [130.0, 1725.5769230769229], [129.0, 1580.590909090909], [128.0, 1557.7599999999998], [143.0, 2007.727272727273], [142.0, 4169.2], [141.0, 1018.7857142857144], [140.0, 1014.4705882352941], [139.0, 1013.4166666666667], [138.0, 1807.8333333333328], [137.0, 924.3333333333334], [136.0, 4737.720000000001], [151.0, 4449.545454545455], [150.0, 4370.444444444444], [149.0, 4875.700000000001], [148.0, 3574.9999999999995], [147.0, 1435.0], [146.0, 2103.9000000000005], [145.0, 1397.4444444444443], [144.0, 1646.0], [159.0, 7518.0], [158.0, 2001.2222222222222], [157.0, 1305.6666666666667], [156.0, 2027.875], [155.0, 2936.1111111111113], [154.0, 4294.266666666666], [153.0, 3100.25], [152.0, 2179.222222222222], [167.0, 1551.5], [166.0, 1534.8333333333335], [165.0, 2723.857142857143], [164.0, 1148.8], [163.0, 1177.0], [162.0, 2600.0], [161.0, 1788.5], [160.0, 1465.2857142857142], [175.0, 972.1666666666666], [174.0, 2680.4], [173.0, 6199.2], [172.0, 1063.0], [171.0, 1635.5], [170.0, 657.25], [169.0, 1491.6], [168.0, 1366.1666666666665], [183.0, 8689.75], [182.0, 1356.2857142857142], [181.0, 2173.25], [180.0, 785.5], [179.0, 866.6666666666666], [178.0, 1328.0], [177.0, 1728.3333333333333], [176.0, 1247.0], [191.0, 1711.5], [190.0, 972.0], [189.0, 1061.4], [188.0, 1172.5], [187.0, 269.0], [186.0, 249.0], [185.0, 6215.333333333333], [184.0, 864.0], [199.0, 3964.5], [198.0, 1319.0], [197.0, 1323.0], [196.0, 27705.0], [195.0, 248.0], [194.0, 234.0], [193.0, 5443.0], [207.0, 5446.5], [206.0, 278.5], [205.0, 1052.6666666666665], [204.0, 23012.0], [203.0, 2498.0], [202.0, 259.0], [201.0, 2199.0], [200.0, 1411.5], [215.0, 1774.875], [214.0, 6275.0], [213.0, 10866.4], [212.0, 8625.0], [211.0, 4890.499999999999], [210.0, 556.0], [209.0, 1277.2], [208.0, 14177.0], [223.0, 13288.5], [222.0, 4305.0], [221.0, 3265.75], [220.0, 5772.857142857144], [219.0, 5841.4], [218.0, 4009.6666666666665], [217.0, 6564.0], [216.0, 8780.0], [231.0, 6019.666666666666], [230.0, 5010.25], [229.0, 5275.0], [228.0, 10741.666666666668], [227.0, 11775.7], [226.0, 7732.285714285714], [225.0, 14367.4], [224.0, 6102.0], [239.0, 290.5], [238.0, 3473.6666666666665], [237.0, 4392.0], [236.0, 245.0], [235.0, 1049.5], [234.0, 3334.0], [233.0, 9004.0], [232.0, 9720.333333333334], [244.0, 2545.2222222222226], [245.0, 6055.999999999999], [247.0, 1825.625], [246.0, 2942.818181818182], [242.0, 3129.6666666666665], [241.0, 6007.666666666666], [240.0, 5419.8], [243.0, 6385.75], [254.0, 10466.5], [252.0, 6310.6], [251.0, 2144.5], [255.0, 1886.25], [253.0, 1052.0], [250.0, 1895.8], [249.0, 2441.0], [248.0, 7612.75], [270.0, 5254.0], [258.0, 2192.0], [257.0, 492.0], [256.0, 6000.8], [263.0, 2224.1666666666665], [262.0, 1372.6666666666665], [261.0, 7679.0], [260.0, 846.3333333333334], [259.0, 5481.666666666667], [271.0, 1918.3333333333335], [269.0, 8024.8], [268.0, 8891.818181818184], [267.0, 8022.285714285715], [266.0, 5792.0], [265.0, 10167.0], [264.0, 18053.5], [286.0, 4733.0], [287.0, 8124.4], [285.0, 5971.5], [284.0, 5720.25], [283.0, 2945.5], [282.0, 5965.333333333333], [281.0, 1114.4], [280.0, 514.75], [279.0, 4875.142857142857], [273.0, 7021.0], [272.0, 8775.0], [275.0, 9424.857142857143], [274.0, 5448.0], [278.0, 9467.0], [277.0, 668.6666666666666], [276.0, 5438.5], [302.0, 4153.333333333334], [303.0, 4006.454545454546], [301.0, 3670.166666666667], [300.0, 1082.2], [298.0, 1111.1666666666667], [297.0, 2546.3333333333335], [296.0, 1268.0], [295.0, 1990.6666666666667], [289.0, 8107.0], [288.0, 622.4], [291.0, 2174.5], [290.0, 1427.0], [294.0, 2015.1428571428573], [293.0, 1634.0], [292.0, 2456.25], [299.0, 6607.999999999999], [318.0, 4772.166666666667], [319.0, 5414.0], [316.0, 2917.8571428571427], [315.0, 2631.4], [314.0, 3817.1111111111113], [313.0, 3005.181818181818], [312.0, 5122.200000000001], [317.0, 3784.8], [311.0, 2209.4], [305.0, 5154.666666666667], [304.0, 1866.1999999999998], [307.0, 9738.4], [306.0, 3378.0], [310.0, 8935.8], [309.0, 8720.0], [308.0, 4732.25], [323.0, 4044.4500000000003], [326.0, 4451.666666666666], [329.0, 3546.444444444444], [331.0, 10790.111111111111], [330.0, 7718.25], [328.0, 4855.846153846153], [327.0, 6299.888888888889], [320.0, 4153.100000000001], [322.0, 4315.684210526316], [321.0, 2849.8333333333335], [324.0, 4151.9333333333325], [325.0, 4854.0], [335.0, 4287.0], [334.0, 5068.666666666666], [333.0, 1352.6666666666667], [332.0, 2716.166666666667], [348.0, 7905.799999999999], [338.0, 1954.0], [339.0, 1914.1666666666667], [337.0, 1962.8571428571431], [336.0, 7625.0], [343.0, 4977.666666666667], [342.0, 2518.0], [341.0, 6933.428571428571], [340.0, 1941.75], [345.0, 5321.090909090909], [344.0, 3526.25], [347.0, 5203.818181818182], [346.0, 3236.2000000000003], [349.0, 4146.125], [351.0, 2846.2857142857147], [350.0, 2321.5], [366.0, 11088.0], [360.0, 3627.1666666666665], [367.0, 3045.0], [359.0, 4672.695652173913], [358.0, 7139.666666666666], [357.0, 5446.875000000001], [356.0, 6952.428571428572], [353.0, 1051.3333333333333], [352.0, 2006.4], [365.0, 2029.75], [364.0, 9681.0], [363.0, 1822.0], [362.0, 2142.0], [361.0, 4160.0], [355.0, 8294.714285714286], [354.0, 4697.571428571428], [381.0, 3108.75], [373.0, 3249.7777777777783], [372.0, 4486.555555555556], [374.0, 3725.0], [377.0, 1770.0], [376.0, 5160.666666666666], [383.0, 3418.181818181818], [382.0, 997.0], [380.0, 3113.2000000000003], [371.0, 4733.0], [370.0, 3097.5000000000005], [369.0, 2071.3333333333335], [368.0, 9007.0], [375.0, 4777.75], [379.0, 3128.666666666667], [378.0, 2664.8333333333335], [398.0, 4300.666666666667], [389.0, 4777.0], [388.0, 3538.142857142857], [391.0, 8789.0], [385.0, 2629.1111111111113], [384.0, 4094.7499999999995], [387.0, 5116.142857142857], [386.0, 3187.142857142857], [390.0, 4644.0], [399.0, 1999.0], [397.0, 2047.6666666666667], [396.0, 4186.4], [395.0, 3878.4], [394.0, 5388.0], [393.0, 9463.0], [392.0, 4482.0], [414.0, 5426.0], [402.0, 4165.666666666667], [401.0, 1350.0], [400.0, 4334.0], [403.0, 4161.0], [407.0, 5632.75], [406.0, 2329.5], [405.0, 4756.0], [404.0, 4636.0], [415.0, 6852.222222222223], [413.0, 4997.222222222223], [412.0, 5056.666666666666], [411.0, 5660.2], [410.0, 4212.250000000001], [409.0, 7229.0], [408.0, 4930.8], [431.0, 3526.0], [429.0, 6849.666666666666], [430.0, 4207.2], [428.0, 5058.111111111111], [419.0, 6221.099999999999], [418.0, 5360.166666666666], [417.0, 5668.545454545455], [416.0, 6691.714285714286], [427.0, 7702.666666666666], [426.0, 5665.666666666666], [425.0, 7628.5], [424.0, 6127.333333333334], [423.0, 6312.428571428572], [422.0, 6051.700000000001], [421.0, 4643.4], [420.0, 6441.272727272727], [434.0, 7626.0], [439.0, 5909.2], [433.0, 2599.0], [432.0, 3659.0], [438.0, 4803.75], [437.0, 5593.666666666667], [436.0, 8293.0], [435.0, 8434.0], [444.0, 7437.0], [442.0, 6799.666666666667], [443.0, 3885.0], [441.0, 6465.2], [440.0, 5830.0], [447.0, 9364.333333333334], [446.0, 6360.0], [445.0, 7802.0], [456.0, 3904.5], [459.0, 4524.0], [458.0, 4439.0], [457.0, 7174.5], [455.0, 7620.5], [449.0, 6707.333333333334], [448.0, 5090.666666666667], [454.0, 3959.0], [453.0, 3424.0], [452.0, 7275.0], [451.0, 6865.0], [461.0, 3657.0], [460.0, 3669.0], [463.0, 4232.0], [462.0, 3538.0], [450.0, 6972.0], [464.0, 2690.0], [1.0, 379.06666666666666]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[26.906426470588094, 507.4751764705867]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 464.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1179.7333333333333, "minX": 1.72916508E12, "maxY": 5412479.033333333, "series": [{"data": [[1.72916604E12, 5017615.933333334], [1.72916508E12, 894758.5166666667], [1.72916574E12, 4858944.633333334], [1.72916568E12, 4855774.733333333], [1.72916634E12, 4867034.6], [1.72916538E12, 4970680.016666667], [1.72916628E12, 4839595.85], [1.72916532E12, 4787830.983333333], [1.72916598E12, 4656780.0], [1.72916592E12, 4849316.316666666], [1.72916562E12, 4836399.166666667], [1.72916556E12, 4912446.3], [1.72916622E12, 4865524.183333334], [1.72916526E12, 5077453.433333334], [1.72916616E12, 4826689.55], [1.7291652E12, 4592067.983333333], [1.72916586E12, 4854155.316666666], [1.7291658E12, 4867072.566666666], [1.72916646E12, 1744258.8833333333], [1.7291655E12, 5114699.716666667], [1.7291664E12, 4878399.25], [1.72916544E12, 4551607.95], [1.7291661E12, 4889792.533333333], [1.72916514E12, 5412479.033333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72916604E12, 6615.466666666666], [1.72916508E12, 1179.7333333333333], [1.72916574E12, 6406.4], [1.72916568E12, 6402.133333333333], [1.72916634E12, 6417.066666666667], [1.72916538E12, 6553.6], [1.72916628E12, 6380.8], [1.72916532E12, 6312.533333333334], [1.72916598E12, 6139.733333333334], [1.72916592E12, 6393.6], [1.72916562E12, 6376.533333333334], [1.72916556E12, 6476.8], [1.72916622E12, 6414.933333333333], [1.72916526E12, 6694.4], [1.72916616E12, 6363.733333333334], [1.7291652E12, 6054.4], [1.72916586E12, 6400.0], [1.7291658E12, 6417.066666666667], [1.72916646E12, 2299.733333333333], [1.7291655E12, 6743.466666666666], [1.7291664E12, 6432.0], [1.72916544E12, 6001.066666666667], [1.7291661E12, 6446.933333333333], [1.72916514E12, 7136.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916646E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 228.7320173971227, "minX": 1.72916508E12, "maxY": 4799.135623869799, "series": [{"data": [[1.72916604E12, 253.2705578845531], [1.72916508E12, 4799.135623869799], [1.72916574E12, 233.39726939726955], [1.72916568E12, 240.92902365878044], [1.72916634E12, 288.1286569148941], [1.72916538E12, 525.2086588541682], [1.72916628E12, 240.43898361751906], [1.72916532E12, 499.95268671848714], [1.72916598E12, 260.4874913134116], [1.72916592E12, 277.62429095762434], [1.72916562E12, 228.7320173971227], [1.72916556E12, 267.3863636363635], [1.72916622E12, 340.78550049883705], [1.72916526E12, 1026.472912683239], [1.72916616E12, 238.79383171304042], [1.7291652E12, 702.881296231066], [1.72916586E12, 274.3620000000002], [1.7291658E12, 241.08477393617022], [1.72916646E12, 235.24582560296867], [1.7291655E12, 412.9405251502692], [1.7291664E12, 337.4868988391372], [1.72916544E12, 306.4198364735157], [1.7291661E12, 250.82991396426172], [1.72916514E12, 2745.212066905611]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916646E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 163.7507527601203, "minX": 1.72916508E12, "maxY": 3608.421338155517, "series": [{"data": [[1.72916604E12, 180.8252176717188], [1.72916508E12, 3608.421338155517], [1.72916574E12, 166.28271728271758], [1.72916568E12, 171.4465178273908], [1.72916634E12, 206.6333111702129], [1.72916538E12, 317.44368489583235], [1.72916628E12, 171.17753259779334], [1.72916532E12, 375.0878675228117], [1.72916598E12, 187.99478804725518], [1.72916592E12, 197.84384384384336], [1.72916562E12, 163.7507527601203], [1.72916556E12, 188.88306982872203], [1.72916622E12, 255.06551380113106], [1.72916526E12, 758.2695984703635], [1.72916616E12, 170.02179014415012], [1.7291652E12, 416.3392039450512], [1.72916586E12, 197.58133333333373], [1.7291658E12, 172.2922207446807], [1.72916646E12, 169.969387755102], [1.7291655E12, 309.1831698829479], [1.7291664E12, 241.35489220563824], [1.72916544E12, 220.24173480270184], [1.7291661E12, 181.22137657180647], [1.72916514E12, 1659.1738351254476]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916646E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 112.47106055536992, "minX": 1.72916508E12, "maxY": 2818.437613019892, "series": [{"data": [[1.72916604E12, 127.54885520799769], [1.72916508E12, 2818.437613019892], [1.72916574E12, 115.26506826506818], [1.72916568E12, 119.27624125291574], [1.72916634E12, 149.13663563829783], [1.72916538E12, 206.41276041666706], [1.72916628E12, 118.28686058174523], [1.72916532E12, 295.455897262588], [1.72916598E12, 132.9645587213342], [1.72916592E12, 139.87120453787145], [1.72916562E12, 112.47106055536992], [1.72916556E12, 133.37747035573088], [1.72916622E12, 196.86265380778127], [1.72916526E12, 588.1797323135767], [1.72916616E12, 117.76265504525631], [1.7291652E12, 310.4966537513212], [1.72916586E12, 140.1193333333334], [1.7291658E12, 119.73271276595752], [1.72916646E12, 118.52319109461963], [1.7291655E12, 245.07181271749448], [1.7291664E12, 170.4003316749583], [1.72916544E12, 160.13188766441544], [1.7291661E12, 128.2984778292525], [1.72916514E12, 1288.4961170848253]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916646E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 153.0, "minX": 1.72916508E12, "maxY": 291457.0, "series": [{"data": [[1.72916604E12, 1976.0], [1.72916508E12, 15017.0], [1.72916574E12, 3300.0], [1.72916568E12, 3365.0], [1.72916634E12, 3431.0], [1.72916538E12, 291457.0], [1.72916628E12, 3207.0], [1.72916532E12, 10184.0], [1.72916598E12, 3427.0], [1.72916592E12, 3458.0], [1.72916562E12, 3388.0], [1.72916556E12, 3167.0], [1.72916622E12, 15344.0], [1.72916526E12, 26844.0], [1.72916616E12, 3366.0], [1.7291652E12, 123213.0], [1.72916586E12, 3419.0], [1.7291658E12, 2612.0], [1.72916646E12, 3274.0], [1.7291655E12, 15379.0], [1.7291664E12, 3349.0], [1.72916544E12, 6315.0], [1.7291661E12, 3514.0], [1.72916514E12, 71890.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72916604E12, 276.0], [1.72916508E12, 9944.200000000003], [1.72916574E12, 250.0], [1.72916568E12, 275.0], [1.72916634E12, 347.0], [1.72916538E12, 947.9000000000046], [1.72916628E12, 268.0], [1.72916532E12, 1222.0], [1.72916598E12, 288.0], [1.72916592E12, 342.0], [1.72916562E12, 254.0], [1.72916556E12, 413.3000000000002], [1.72916622E12, 561.0000000000014], [1.72916526E12, 2181.5999999999985], [1.72916616E12, 274.0], [1.7291652E12, 1327.0], [1.72916586E12, 398.8000000000002], [1.7291658E12, 253.0], [1.72916646E12, 295.0], [1.7291655E12, 1098.8000000000047], [1.7291664E12, 501.0], [1.72916544E12, 575.5999999999999], [1.7291661E12, 280.7000000000003], [1.72916514E12, 7553.800000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72916604E12, 1339.9], [1.72916508E12, 13539.98000000001], [1.72916574E12, 1195.96], [1.72916568E12, 1207.98], [1.72916634E12, 1381.6399999999994], [1.72916538E12, 2011.3999999999996], [1.72916628E12, 1224.08], [1.72916532E12, 3625.000000000008], [1.72916598E12, 1327.0], [1.72916592E12, 1361.0], [1.72916562E12, 1197.1], [1.72916556E12, 1244.63], [1.72916622E12, 1481.8400000000001], [1.72916526E12, 7815.3200000000015], [1.72916616E12, 1253.7599999999984], [1.7291652E12, 3339.0800000000036], [1.72916586E12, 1323.8499999999967], [1.7291658E12, 1224.9099999999999], [1.72916646E12, 1195.8900000000003], [1.7291655E12, 3376.76], [1.7291664E12, 1426.4800000000032], [1.72916544E12, 1491.5800000000004], [1.7291661E12, 1281.0], [1.72916514E12, 38011.29999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72916604E12, 349.6999999999989], [1.72916508E12, 11562.799999999997], [1.72916574E12, 468.7999999999997], [1.72916568E12, 506.9000000000001], [1.72916634E12, 543.7499999999986], [1.72916538E12, 1267.35], [1.72916628E12, 326.2000000000003], [1.72916532E12, 1380.0], [1.72916598E12, 479.0], [1.72916592E12, 473.0999999999999], [1.72916562E12, 411.5], [1.72916556E12, 813.1500000000001], [1.72916622E12, 1230.6], [1.72916526E12, 3494.0], [1.72916616E12, 338.59999999999945], [1.7291652E12, 1534.1499999999992], [1.72916586E12, 660.8999999999996], [1.7291658E12, 539.0], [1.72916646E12, 368.0], [1.7291655E12, 1377.0], [1.7291664E12, 631.3999999999996], [1.72916544E12, 1189.0], [1.7291661E12, 364.39999999999964], [1.72916514E12, 17209.69999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72916604E12, 165.0], [1.72916508E12, 256.0], [1.72916574E12, 153.0], [1.72916568E12, 158.0], [1.72916634E12, 159.0], [1.72916538E12, 160.0], [1.72916628E12, 160.0], [1.72916532E12, 160.0], [1.72916598E12, 160.0], [1.72916592E12, 159.0], [1.72916562E12, 157.0], [1.72916556E12, 161.0], [1.72916622E12, 159.0], [1.72916526E12, 166.0], [1.72916616E12, 161.0], [1.7291652E12, 169.0], [1.72916586E12, 161.0], [1.7291658E12, 160.0], [1.72916646E12, 159.0], [1.7291655E12, 162.0], [1.7291664E12, 164.0], [1.72916544E12, 153.0], [1.7291661E12, 163.0], [1.72916514E12, 175.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72916604E12, 212.0], [1.72916508E12, 4061.0], [1.72916574E12, 188.0], [1.72916568E12, 191.0], [1.72916634E12, 227.0], [1.72916538E12, 197.0], [1.72916628E12, 208.0], [1.72916532E12, 229.0], [1.72916598E12, 211.0], [1.72916592E12, 228.0], [1.72916562E12, 189.0], [1.72916556E12, 191.0], [1.72916622E12, 215.0], [1.72916526E12, 374.0], [1.72916616E12, 203.0], [1.7291652E12, 293.0], [1.72916586E12, 207.0], [1.7291658E12, 188.0], [1.72916646E12, 195.0], [1.7291655E12, 199.0], [1.7291664E12, 259.0], [1.72916544E12, 195.0], [1.7291661E12, 205.0], [1.72916514E12, 360.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916646E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 178.0, "minX": 1.0, "maxY": 27389.0, "series": [{"data": [[2.0, 2527.5], [4.0, 2194.0], [9.0, 4240.0], [10.0, 190.5], [12.0, 213.0], [13.0, 351.0], [14.0, 178.0], [15.0, 199.0], [16.0, 575.0], [18.0, 549.0], [19.0, 1018.0], [20.0, 194.0], [21.0, 275.0], [22.0, 214.0], [23.0, 206.0], [24.0, 960.5], [25.0, 651.0], [26.0, 435.0], [27.0, 232.0], [28.0, 235.0], [29.0, 201.0], [30.0, 214.0], [31.0, 204.0], [32.0, 229.0], [33.0, 276.0], [34.0, 209.5], [35.0, 228.0], [36.0, 207.0], [37.0, 197.0], [39.0, 223.0], [38.0, 217.0], [40.0, 206.5], [41.0, 208.0], [43.0, 230.0], [42.0, 199.0], [44.0, 204.5], [45.0, 219.0], [47.0, 203.0], [46.0, 209.0], [48.0, 198.0], [49.0, 200.0], [51.0, 199.0], [50.0, 201.0], [52.0, 197.0], [53.0, 201.0], [55.0, 209.0], [54.0, 203.0], [57.0, 212.5], [56.0, 201.0], [58.0, 232.0], [59.0, 217.0], [60.0, 232.0], [61.0, 220.0], [62.0, 226.0], [63.0, 257.0], [65.0, 233.0], [66.0, 239.0], [64.0, 222.0], [67.0, 260.0], [69.0, 255.0], [68.0, 245.5], [70.0, 277.0], [71.0, 276.0], [72.0, 340.5], [74.0, 1517.0], [75.0, 497.0], [73.0, 434.0], [77.0, 1277.0], [79.0, 384.0], [76.0, 284.5], [78.0, 803.5], [83.0, 2146.0], [80.0, 362.5], [82.0, 351.0], [81.0, 329.0], [86.0, 428.0], [88.0, 1566.0], [89.0, 423.0], [95.0, 1450.5], [93.0, 953.0], [97.0, 713.0], [103.0, 1433.0], [105.0, 1186.0], [108.0, 1235.0], [1.0, 4529.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 19846.0], [75.0, 19720.0], [51.0, 27389.0], [53.0, 19878.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 108.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3876.0, "series": [{"data": [[2.0, 2321.5], [4.0, 2146.0], [9.0, 3876.0], [10.0, 134.5], [12.0, 152.0], [13.0, 249.0], [14.0, 127.5], [15.0, 139.0], [16.0, 340.0], [18.0, 309.5], [19.0, 536.0], [20.0, 141.0], [21.0, 193.0], [22.0, 143.5], [23.0, 138.0], [24.0, 626.5], [25.0, 423.0], [26.0, 239.5], [27.0, 149.5], [28.0, 148.0], [29.0, 142.0], [30.0, 148.0], [31.0, 142.0], [32.0, 156.0], [33.0, 172.0], [34.0, 147.0], [35.0, 155.0], [36.0, 142.0], [37.0, 137.0], [39.0, 150.0], [38.0, 148.0], [40.0, 142.5], [41.0, 143.0], [43.0, 155.0], [42.0, 138.0], [44.0, 142.0], [45.0, 149.0], [47.0, 141.0], [46.0, 143.5], [48.0, 138.0], [49.0, 139.0], [51.0, 138.0], [50.0, 140.0], [52.0, 138.0], [53.0, 140.0], [55.0, 144.0], [54.0, 140.0], [57.0, 147.0], [56.0, 140.0], [58.0, 158.5], [59.0, 148.0], [60.0, 157.5], [61.0, 151.0], [62.0, 154.0], [63.0, 173.0], [65.0, 158.0], [66.0, 163.0], [64.0, 152.0], [67.0, 166.0], [69.0, 167.0], [68.0, 162.5], [70.0, 183.0], [71.0, 188.0], [72.0, 205.5], [74.0, 1048.0], [75.0, 357.0], [73.0, 279.0], [77.0, 500.0], [79.0, 249.0], [76.0, 204.0], [78.0, 482.5], [83.0, 1474.0], [80.0, 246.0], [82.0, 221.0], [81.0, 230.0], [86.0, 237.0], [88.0, 1204.5], [89.0, 251.5], [95.0, 803.0], [93.0, 598.0], [97.0, 423.0], [103.0, 869.0], [105.0, 594.0], [108.0, 608.5], [1.0, 3523.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[66.0, 0.0], [75.0, 0.0], [51.0, 0.0], [53.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 108.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 14.85, "minX": 1.72916508E12, "maxY": 51.53333333333333, "series": [{"data": [[1.72916604E12, 51.3], [1.72916508E12, 14.85], [1.72916574E12, 49.916666666666664], [1.72916568E12, 50.166666666666664], [1.72916634E12, 50.15], [1.72916538E12, 51.11666666666667], [1.72916628E12, 49.93333333333333], [1.72916532E12, 48.78333333333333], [1.72916598E12, 48.18333333333333], [1.72916592E12, 49.93333333333333], [1.72916562E12, 49.78333333333333], [1.72916556E12, 50.61666666666667], [1.72916622E12, 49.93333333333333], [1.72916526E12, 51.53333333333333], [1.72916616E12, 49.8], [1.7291652E12, 48.43333333333333], [1.72916586E12, 50.0], [1.7291658E12, 50.15], [1.72916646E12, 17.8], [1.7291655E12, 50.38333333333333], [1.7291664E12, 50.18333333333333], [1.72916544E12, 49.15], [1.7291661E12, 50.583333333333336], [1.72916514E12, 50.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916646E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72916508E12, "maxY": 55.75, "series": [{"data": [[1.72916604E12, 51.68333333333333], [1.72916508E12, 9.216666666666667], [1.72916574E12, 50.05], [1.72916568E12, 50.016666666666666], [1.72916634E12, 50.13333333333333], [1.72916538E12, 51.2], [1.72916628E12, 49.85], [1.72916532E12, 49.31666666666667], [1.72916598E12, 47.96666666666667], [1.72916592E12, 49.95], [1.72916562E12, 49.81666666666667], [1.72916556E12, 50.6], [1.72916622E12, 50.11666666666667], [1.72916526E12, 52.3], [1.72916616E12, 49.71666666666667], [1.7291652E12, 47.3], [1.72916586E12, 50.0], [1.7291658E12, 50.13333333333333], [1.72916646E12, 17.966666666666665], [1.7291655E12, 52.68333333333333], [1.7291664E12, 50.25], [1.72916544E12, 46.88333333333333], [1.7291661E12, 50.36666666666667], [1.72916514E12, 55.75]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7291652E12, 0.016666666666666666], [1.72916514E12, 0.05]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916646E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72916508E12, "maxY": 55.75, "series": [{"data": [[1.72916604E12, 51.68333333333333], [1.72916508E12, 9.216666666666667], [1.72916574E12, 50.05], [1.72916568E12, 50.016666666666666], [1.72916634E12, 50.13333333333333], [1.72916538E12, 51.2], [1.72916628E12, 49.85], [1.72916532E12, 49.31666666666667], [1.72916598E12, 47.96666666666667], [1.72916592E12, 49.95], [1.72916562E12, 49.81666666666667], [1.72916556E12, 50.6], [1.72916622E12, 50.11666666666667], [1.72916526E12, 52.3], [1.72916616E12, 49.71666666666667], [1.7291652E12, 47.3], [1.72916586E12, 50.0], [1.7291658E12, 50.13333333333333], [1.72916646E12, 17.966666666666665], [1.7291655E12, 52.68333333333333], [1.7291664E12, 50.25], [1.72916544E12, 46.88333333333333], [1.7291661E12, 50.36666666666667], [1.72916514E12, 55.75]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7291652E12, 0.016666666666666666], [1.72916514E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916646E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72916508E12, "maxY": 55.75, "series": [{"data": [[1.72916604E12, 51.68333333333333], [1.72916508E12, 9.216666666666667], [1.72916574E12, 50.05], [1.72916568E12, 50.016666666666666], [1.72916634E12, 50.13333333333333], [1.72916538E12, 51.2], [1.72916628E12, 49.85], [1.72916532E12, 49.31666666666667], [1.72916598E12, 47.96666666666667], [1.72916592E12, 49.95], [1.72916562E12, 49.81666666666667], [1.72916556E12, 50.6], [1.72916622E12, 50.11666666666667], [1.72916526E12, 52.3], [1.72916616E12, 49.71666666666667], [1.7291652E12, 47.3], [1.72916586E12, 50.0], [1.7291658E12, 50.13333333333333], [1.72916646E12, 17.966666666666665], [1.7291655E12, 52.68333333333333], [1.7291664E12, 50.25], [1.72916544E12, 46.88333333333333], [1.7291661E12, 50.36666666666667], [1.72916514E12, 55.75]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7291652E12, 0.016666666666666666], [1.72916514E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916646E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

