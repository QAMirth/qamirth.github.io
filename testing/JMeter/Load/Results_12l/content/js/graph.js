/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 145.0, "minX": 0.0, "maxY": 331156.0, "series": [{"data": [[0.0, 145.0], [0.1, 156.0], [0.2, 157.0], [0.3, 158.0], [0.4, 159.0], [0.5, 160.0], [0.6, 160.0], [0.7, 160.0], [0.8, 161.0], [0.9, 161.0], [1.0, 161.0], [1.1, 162.0], [1.2, 162.0], [1.3, 162.0], [1.4, 162.0], [1.5, 163.0], [1.6, 163.0], [1.7, 163.0], [1.8, 163.0], [1.9, 163.0], [2.0, 164.0], [2.1, 164.0], [2.2, 164.0], [2.3, 164.0], [2.4, 164.0], [2.5, 164.0], [2.6, 164.0], [2.7, 165.0], [2.8, 165.0], [2.9, 165.0], [3.0, 165.0], [3.1, 165.0], [3.2, 165.0], [3.3, 165.0], [3.4, 165.0], [3.5, 166.0], [3.6, 166.0], [3.7, 166.0], [3.8, 166.0], [3.9, 166.0], [4.0, 166.0], [4.1, 166.0], [4.2, 166.0], [4.3, 166.0], [4.4, 167.0], [4.5, 167.0], [4.6, 167.0], [4.7, 167.0], [4.8, 167.0], [4.9, 167.0], [5.0, 167.0], [5.1, 167.0], [5.2, 167.0], [5.3, 167.0], [5.4, 167.0], [5.5, 168.0], [5.6, 168.0], [5.7, 168.0], [5.8, 168.0], [5.9, 168.0], [6.0, 168.0], [6.1, 168.0], [6.2, 168.0], [6.3, 168.0], [6.4, 168.0], [6.5, 168.0], [6.6, 168.0], [6.7, 169.0], [6.8, 169.0], [6.9, 169.0], [7.0, 169.0], [7.1, 169.0], [7.2, 169.0], [7.3, 169.0], [7.4, 169.0], [7.5, 169.0], [7.6, 169.0], [7.7, 169.0], [7.8, 169.0], [7.9, 169.0], [8.0, 169.0], [8.1, 170.0], [8.2, 170.0], [8.3, 170.0], [8.4, 170.0], [8.5, 170.0], [8.6, 170.0], [8.7, 170.0], [8.8, 170.0], [8.9, 170.0], [9.0, 170.0], [9.1, 170.0], [9.2, 170.0], [9.3, 170.0], [9.4, 170.0], [9.5, 170.0], [9.6, 171.0], [9.7, 171.0], [9.8, 171.0], [9.9, 171.0], [10.0, 171.0], [10.1, 171.0], [10.2, 171.0], [10.3, 171.0], [10.4, 171.0], [10.5, 171.0], [10.6, 171.0], [10.7, 171.0], [10.8, 171.0], [10.9, 171.0], [11.0, 171.0], [11.1, 171.0], [11.2, 171.0], [11.3, 171.0], [11.4, 172.0], [11.5, 172.0], [11.6, 172.0], [11.7, 172.0], [11.8, 172.0], [11.9, 172.0], [12.0, 172.0], [12.1, 172.0], [12.2, 172.0], [12.3, 172.0], [12.4, 172.0], [12.5, 172.0], [12.6, 172.0], [12.7, 172.0], [12.8, 172.0], [12.9, 172.0], [13.0, 172.0], [13.1, 172.0], [13.2, 173.0], [13.3, 173.0], [13.4, 173.0], [13.5, 173.0], [13.6, 173.0], [13.7, 173.0], [13.8, 173.0], [13.9, 173.0], [14.0, 173.0], [14.1, 173.0], [14.2, 173.0], [14.3, 173.0], [14.4, 173.0], [14.5, 173.0], [14.6, 173.0], [14.7, 173.0], [14.8, 173.0], [14.9, 173.0], [15.0, 173.0], [15.1, 174.0], [15.2, 174.0], [15.3, 174.0], [15.4, 174.0], [15.5, 174.0], [15.6, 174.0], [15.7, 174.0], [15.8, 174.0], [15.9, 174.0], [16.0, 174.0], [16.1, 174.0], [16.2, 174.0], [16.3, 174.0], [16.4, 174.0], [16.5, 174.0], [16.6, 174.0], [16.7, 174.0], [16.8, 174.0], [16.9, 174.0], [17.0, 174.0], [17.1, 175.0], [17.2, 175.0], [17.3, 175.0], [17.4, 175.0], [17.5, 175.0], [17.6, 175.0], [17.7, 175.0], [17.8, 175.0], [17.9, 175.0], [18.0, 175.0], [18.1, 175.0], [18.2, 175.0], [18.3, 175.0], [18.4, 175.0], [18.5, 175.0], [18.6, 175.0], [18.7, 175.0], [18.8, 175.0], [18.9, 175.0], [19.0, 175.0], [19.1, 175.0], [19.2, 176.0], [19.3, 176.0], [19.4, 176.0], [19.5, 176.0], [19.6, 176.0], [19.7, 176.0], [19.8, 176.0], [19.9, 176.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 176.0], [20.4, 176.0], [20.5, 176.0], [20.6, 176.0], [20.7, 176.0], [20.8, 176.0], [20.9, 176.0], [21.0, 176.0], [21.1, 176.0], [21.2, 176.0], [21.3, 177.0], [21.4, 177.0], [21.5, 177.0], [21.6, 177.0], [21.7, 177.0], [21.8, 177.0], [21.9, 177.0], [22.0, 177.0], [22.1, 177.0], [22.2, 177.0], [22.3, 177.0], [22.4, 177.0], [22.5, 177.0], [22.6, 177.0], [22.7, 177.0], [22.8, 177.0], [22.9, 177.0], [23.0, 177.0], [23.1, 177.0], [23.2, 177.0], [23.3, 178.0], [23.4, 178.0], [23.5, 178.0], [23.6, 178.0], [23.7, 178.0], [23.8, 178.0], [23.9, 178.0], [24.0, 178.0], [24.1, 178.0], [24.2, 178.0], [24.3, 178.0], [24.4, 178.0], [24.5, 178.0], [24.6, 178.0], [24.7, 178.0], [24.8, 178.0], [24.9, 178.0], [25.0, 178.0], [25.1, 178.0], [25.2, 178.0], [25.3, 178.0], [25.4, 179.0], [25.5, 179.0], [25.6, 179.0], [25.7, 179.0], [25.8, 179.0], [25.9, 179.0], [26.0, 179.0], [26.1, 179.0], [26.2, 179.0], [26.3, 179.0], [26.4, 179.0], [26.5, 179.0], [26.6, 179.0], [26.7, 179.0], [26.8, 179.0], [26.9, 179.0], [27.0, 179.0], [27.1, 179.0], [27.2, 179.0], [27.3, 180.0], [27.4, 180.0], [27.5, 180.0], [27.6, 180.0], [27.7, 180.0], [27.8, 180.0], [27.9, 180.0], [28.0, 180.0], [28.1, 180.0], [28.2, 180.0], [28.3, 180.0], [28.4, 180.0], [28.5, 180.0], [28.6, 180.0], [28.7, 180.0], [28.8, 180.0], [28.9, 180.0], [29.0, 180.0], [29.1, 180.0], [29.2, 181.0], [29.3, 181.0], [29.4, 181.0], [29.5, 181.0], [29.6, 181.0], [29.7, 181.0], [29.8, 181.0], [29.9, 181.0], [30.0, 181.0], [30.1, 181.0], [30.2, 181.0], [30.3, 181.0], [30.4, 181.0], [30.5, 181.0], [30.6, 181.0], [30.7, 181.0], [30.8, 181.0], [30.9, 181.0], [31.0, 182.0], [31.1, 182.0], [31.2, 182.0], [31.3, 182.0], [31.4, 182.0], [31.5, 182.0], [31.6, 182.0], [31.7, 182.0], [31.8, 182.0], [31.9, 182.0], [32.0, 182.0], [32.1, 182.0], [32.2, 182.0], [32.3, 182.0], [32.4, 182.0], [32.5, 182.0], [32.6, 182.0], [32.7, 183.0], [32.8, 183.0], [32.9, 183.0], [33.0, 183.0], [33.1, 183.0], [33.2, 183.0], [33.3, 183.0], [33.4, 183.0], [33.5, 183.0], [33.6, 183.0], [33.7, 183.0], [33.8, 183.0], [33.9, 183.0], [34.0, 183.0], [34.1, 183.0], [34.2, 183.0], [34.3, 184.0], [34.4, 184.0], [34.5, 184.0], [34.6, 184.0], [34.7, 184.0], [34.8, 184.0], [34.9, 184.0], [35.0, 184.0], [35.1, 184.0], [35.2, 184.0], [35.3, 184.0], [35.4, 184.0], [35.5, 184.0], [35.6, 184.0], [35.7, 184.0], [35.8, 184.0], [35.9, 185.0], [36.0, 185.0], [36.1, 185.0], [36.2, 185.0], [36.3, 185.0], [36.4, 185.0], [36.5, 185.0], [36.6, 185.0], [36.7, 185.0], [36.8, 185.0], [36.9, 185.0], [37.0, 185.0], [37.1, 185.0], [37.2, 185.0], [37.3, 186.0], [37.4, 186.0], [37.5, 186.0], [37.6, 186.0], [37.7, 186.0], [37.8, 186.0], [37.9, 186.0], [38.0, 186.0], [38.1, 186.0], [38.2, 186.0], [38.3, 186.0], [38.4, 186.0], [38.5, 186.0], [38.6, 186.0], [38.7, 187.0], [38.8, 187.0], [38.9, 187.0], [39.0, 187.0], [39.1, 187.0], [39.2, 187.0], [39.3, 187.0], [39.4, 187.0], [39.5, 187.0], [39.6, 187.0], [39.7, 187.0], [39.8, 187.0], [39.9, 187.0], [40.0, 188.0], [40.1, 188.0], [40.2, 188.0], [40.3, 188.0], [40.4, 188.0], [40.5, 188.0], [40.6, 188.0], [40.7, 188.0], [40.8, 188.0], [40.9, 188.0], [41.0, 188.0], [41.1, 188.0], [41.2, 189.0], [41.3, 189.0], [41.4, 189.0], [41.5, 189.0], [41.6, 189.0], [41.7, 189.0], [41.8, 189.0], [41.9, 189.0], [42.0, 189.0], [42.1, 189.0], [42.2, 189.0], [42.3, 189.0], [42.4, 190.0], [42.5, 190.0], [42.6, 190.0], [42.7, 190.0], [42.8, 190.0], [42.9, 190.0], [43.0, 190.0], [43.1, 190.0], [43.2, 190.0], [43.3, 190.0], [43.4, 191.0], [43.5, 191.0], [43.6, 191.0], [43.7, 191.0], [43.8, 191.0], [43.9, 191.0], [44.0, 191.0], [44.1, 191.0], [44.2, 191.0], [44.3, 191.0], [44.4, 191.0], [44.5, 192.0], [44.6, 192.0], [44.7, 192.0], [44.8, 192.0], [44.9, 192.0], [45.0, 192.0], [45.1, 192.0], [45.2, 192.0], [45.3, 192.0], [45.4, 193.0], [45.5, 193.0], [45.6, 193.0], [45.7, 193.0], [45.8, 193.0], [45.9, 193.0], [46.0, 193.0], [46.1, 193.0], [46.2, 193.0], [46.3, 194.0], [46.4, 194.0], [46.5, 194.0], [46.6, 194.0], [46.7, 194.0], [46.8, 194.0], [46.9, 194.0], [47.0, 194.0], [47.1, 194.0], [47.2, 195.0], [47.3, 195.0], [47.4, 195.0], [47.5, 195.0], [47.6, 195.0], [47.7, 195.0], [47.8, 195.0], [47.9, 195.0], [48.0, 195.0], [48.1, 196.0], [48.2, 196.0], [48.3, 196.0], [48.4, 196.0], [48.5, 196.0], [48.6, 196.0], [48.7, 196.0], [48.8, 197.0], [48.9, 197.0], [49.0, 197.0], [49.1, 197.0], [49.2, 197.0], [49.3, 197.0], [49.4, 197.0], [49.5, 198.0], [49.6, 198.0], [49.7, 198.0], [49.8, 198.0], [49.9, 198.0], [50.0, 198.0], [50.1, 199.0], [50.2, 199.0], [50.3, 199.0], [50.4, 199.0], [50.5, 199.0], [50.6, 199.0], [50.7, 200.0], [50.8, 200.0], [50.9, 200.0], [51.0, 200.0], [51.1, 200.0], [51.2, 200.0], [51.3, 201.0], [51.4, 201.0], [51.5, 201.0], [51.6, 201.0], [51.7, 201.0], [51.8, 201.0], [51.9, 202.0], [52.0, 202.0], [52.1, 202.0], [52.2, 202.0], [52.3, 202.0], [52.4, 203.0], [52.5, 203.0], [52.6, 203.0], [52.7, 203.0], [52.8, 203.0], [52.9, 203.0], [53.0, 204.0], [53.1, 204.0], [53.2, 204.0], [53.3, 204.0], [53.4, 205.0], [53.5, 205.0], [53.6, 205.0], [53.7, 205.0], [53.8, 206.0], [53.9, 206.0], [54.0, 206.0], [54.1, 206.0], [54.2, 206.0], [54.3, 207.0], [54.4, 207.0], [54.5, 207.0], [54.6, 207.0], [54.7, 208.0], [54.8, 208.0], [54.9, 208.0], [55.0, 208.0], [55.1, 209.0], [55.2, 209.0], [55.3, 209.0], [55.4, 210.0], [55.5, 210.0], [55.6, 210.0], [55.7, 211.0], [55.8, 211.0], [55.9, 211.0], [56.0, 211.0], [56.1, 212.0], [56.2, 212.0], [56.3, 212.0], [56.4, 213.0], [56.5, 213.0], [56.6, 213.0], [56.7, 214.0], [56.8, 214.0], [56.9, 214.0], [57.0, 215.0], [57.1, 215.0], [57.2, 215.0], [57.3, 216.0], [57.4, 216.0], [57.5, 217.0], [57.6, 217.0], [57.7, 217.0], [57.8, 218.0], [57.9, 218.0], [58.0, 219.0], [58.1, 219.0], [58.2, 219.0], [58.3, 220.0], [58.4, 220.0], [58.5, 221.0], [58.6, 221.0], [58.7, 222.0], [58.8, 222.0], [58.9, 222.0], [59.0, 223.0], [59.1, 223.0], [59.2, 224.0], [59.3, 224.0], [59.4, 225.0], [59.5, 225.0], [59.6, 226.0], [59.7, 226.0], [59.8, 227.0], [59.9, 227.0], [60.0, 228.0], [60.1, 228.0], [60.2, 229.0], [60.3, 230.0], [60.4, 230.0], [60.5, 231.0], [60.6, 232.0], [60.7, 232.0], [60.8, 233.0], [60.9, 234.0], [61.0, 234.0], [61.1, 235.0], [61.2, 236.0], [61.3, 236.0], [61.4, 237.0], [61.5, 238.0], [61.6, 239.0], [61.7, 239.0], [61.8, 240.0], [61.9, 241.0], [62.0, 242.0], [62.1, 243.0], [62.2, 244.0], [62.3, 244.0], [62.4, 245.0], [62.5, 246.0], [62.6, 247.0], [62.7, 248.0], [62.8, 249.0], [62.9, 250.0], [63.0, 250.0], [63.1, 251.0], [63.2, 253.0], [63.3, 254.0], [63.4, 254.0], [63.5, 255.0], [63.6, 256.0], [63.7, 257.0], [63.8, 258.0], [63.9, 259.0], [64.0, 260.0], [64.1, 261.0], [64.2, 262.0], [64.3, 263.0], [64.4, 264.0], [64.5, 266.0], [64.6, 267.0], [64.7, 268.0], [64.8, 270.0], [64.9, 271.0], [65.0, 272.0], [65.1, 273.0], [65.2, 275.0], [65.3, 276.0], [65.4, 278.0], [65.5, 279.0], [65.6, 280.0], [65.7, 281.0], [65.8, 283.0], [65.9, 284.0], [66.0, 286.0], [66.1, 287.0], [66.2, 288.0], [66.3, 290.0], [66.4, 291.0], [66.5, 293.0], [66.6, 295.0], [66.7, 296.0], [66.8, 297.0], [66.9, 299.0], [67.0, 300.0], [67.1, 302.0], [67.2, 303.0], [67.3, 305.0], [67.4, 306.0], [67.5, 308.0], [67.6, 310.0], [67.7, 312.0], [67.8, 313.0], [67.9, 315.0], [68.0, 317.0], [68.1, 318.0], [68.2, 320.0], [68.3, 322.0], [68.4, 324.0], [68.5, 326.0], [68.6, 328.0], [68.7, 330.0], [68.8, 332.0], [68.9, 334.0], [69.0, 336.0], [69.1, 339.0], [69.2, 341.0], [69.3, 344.0], [69.4, 347.0], [69.5, 350.0], [69.6, 353.0], [69.7, 356.0], [69.8, 361.0], [69.9, 365.0], [70.0, 370.0], [70.1, 374.0], [70.2, 378.0], [70.3, 382.0], [70.4, 387.0], [70.5, 390.0], [70.6, 396.0], [70.7, 401.0], [70.8, 405.0], [70.9, 410.0], [71.0, 416.0], [71.1, 422.0], [71.2, 426.0], [71.3, 431.0], [71.4, 434.0], [71.5, 436.0], [71.6, 438.0], [71.7, 441.0], [71.8, 443.0], [71.9, 445.0], [72.0, 447.0], [72.1, 449.0], [72.2, 451.0], [72.3, 453.0], [72.4, 455.0], [72.5, 457.0], [72.6, 459.0], [72.7, 461.0], [72.8, 463.0], [72.9, 465.0], [73.0, 466.0], [73.1, 469.0], [73.2, 471.0], [73.3, 472.0], [73.4, 474.0], [73.5, 476.0], [73.6, 478.0], [73.7, 479.0], [73.8, 481.0], [73.9, 482.0], [74.0, 483.0], [74.1, 484.0], [74.2, 486.0], [74.3, 488.0], [74.4, 489.0], [74.5, 490.0], [74.6, 491.0], [74.7, 492.0], [74.8, 494.0], [74.9, 495.0], [75.0, 496.0], [75.1, 497.0], [75.2, 498.0], [75.3, 500.0], [75.4, 501.0], [75.5, 502.0], [75.6, 503.0], [75.7, 504.0], [75.8, 505.0], [75.9, 506.0], [76.0, 507.0], [76.1, 508.0], [76.2, 509.0], [76.3, 511.0], [76.4, 511.0], [76.5, 513.0], [76.6, 514.0], [76.7, 515.0], [76.8, 516.0], [76.9, 517.0], [77.0, 518.0], [77.1, 519.0], [77.2, 521.0], [77.3, 522.0], [77.4, 523.0], [77.5, 525.0], [77.6, 526.0], [77.7, 527.0], [77.8, 528.0], [77.9, 530.0], [78.0, 531.0], [78.1, 533.0], [78.2, 534.0], [78.3, 536.0], [78.4, 537.0], [78.5, 539.0], [78.6, 540.0], [78.7, 542.0], [78.8, 544.0], [78.9, 546.0], [79.0, 548.0], [79.1, 551.0], [79.2, 554.0], [79.3, 557.0], [79.4, 561.0], [79.5, 565.0], [79.6, 569.0], [79.7, 573.0], [79.8, 577.0], [79.9, 582.0], [80.0, 587.0], [80.1, 592.0], [80.2, 598.0], [80.3, 603.0], [80.4, 609.0], [80.5, 614.0], [80.6, 619.0], [80.7, 625.0], [80.8, 630.0], [80.9, 636.0], [81.0, 642.0], [81.1, 648.0], [81.2, 653.0], [81.3, 660.0], [81.4, 668.0], [81.5, 674.0], [81.6, 683.0], [81.7, 690.0], [81.8, 697.0], [81.9, 705.0], [82.0, 718.0], [82.1, 726.0], [82.2, 735.0], [82.3, 746.0], [82.4, 755.0], [82.5, 762.0], [82.6, 768.0], [82.7, 775.0], [82.8, 782.0], [82.9, 788.0], [83.0, 794.0], [83.1, 799.0], [83.2, 804.0], [83.3, 811.0], [83.4, 816.0], [83.5, 823.0], [83.6, 828.0], [83.7, 835.0], [83.8, 843.0], [83.9, 853.0], [84.0, 863.0], [84.1, 876.0], [84.2, 885.0], [84.3, 896.0], [84.4, 905.0], [84.5, 914.0], [84.6, 923.0], [84.7, 934.0], [84.8, 942.0], [84.9, 951.0], [85.0, 965.0], [85.1, 981.0], [85.2, 1005.0], [85.3, 1021.0], [85.4, 1044.0], [85.5, 1064.0], [85.6, 1087.0], [85.7, 1114.0], [85.8, 1134.0], [85.9, 1159.0], [86.0, 1167.0], [86.1, 1170.0], [86.2, 1173.0], [86.3, 1174.0], [86.4, 1176.0], [86.5, 1177.0], [86.6, 1178.0], [86.7, 1179.0], [86.8, 1180.0], [86.9, 1181.0], [87.0, 1182.0], [87.1, 1183.0], [87.2, 1183.0], [87.3, 1184.0], [87.4, 1185.0], [87.5, 1186.0], [87.6, 1187.0], [87.7, 1188.0], [87.8, 1188.0], [87.9, 1189.0], [88.0, 1190.0], [88.1, 1191.0], [88.2, 1192.0], [88.3, 1193.0], [88.4, 1194.0], [88.5, 1195.0], [88.6, 1196.0], [88.7, 1197.0], [88.8, 1198.0], [88.9, 1199.0], [89.0, 1200.0], [89.1, 1202.0], [89.2, 1203.0], [89.3, 1204.0], [89.4, 1206.0], [89.5, 1207.0], [89.6, 1209.0], [89.7, 1211.0], [89.8, 1214.0], [89.9, 1217.0], [90.0, 1221.0], [90.1, 1225.0], [90.2, 1231.0], [90.3, 1235.0], [90.4, 1240.0], [90.5, 1245.0], [90.6, 1250.0], [90.7, 1256.0], [90.8, 1263.0], [90.9, 1269.0], [91.0, 1276.0], [91.1, 1283.0], [91.2, 1291.0], [91.3, 1300.0], [91.4, 1308.0], [91.5, 1316.0], [91.6, 1325.0], [91.7, 1336.0], [91.8, 1345.0], [91.9, 1353.0], [92.0, 1364.0], [92.1, 1372.0], [92.2, 1382.0], [92.3, 1393.0], [92.4, 1407.0], [92.5, 1425.0], [92.6, 1443.0], [92.7, 1458.0], [92.8, 1472.0], [92.9, 1481.0], [93.0, 1491.0], [93.1, 1499.0], [93.2, 1507.0], [93.3, 1516.0], [93.4, 1523.0], [93.5, 1530.0], [93.6, 1536.0], [93.7, 1544.0], [93.8, 1557.0], [93.9, 1571.0], [94.0, 1591.0], [94.1, 1613.0], [94.2, 1639.0], [94.3, 1668.0], [94.4, 1693.0], [94.5, 1726.0], [94.6, 1756.0], [94.7, 1784.0], [94.8, 1812.0], [94.9, 1842.0], [95.0, 1871.0], [95.1, 1925.0], [95.2, 1977.0], [95.3, 2075.0], [95.4, 2143.0], [95.5, 2223.0], [95.6, 2303.0], [95.7, 2401.0], [95.8, 2531.0], [95.9, 2676.0], [96.0, 2920.0], [96.1, 3108.0], [96.2, 3185.0], [96.3, 3192.0], [96.4, 3200.0], [96.5, 3210.0], [96.6, 3226.0], [96.7, 3272.0], [96.8, 3337.0], [96.9, 3379.0], [97.0, 3431.0], [97.1, 3474.0], [97.2, 3517.0], [97.3, 3567.0], [97.4, 3672.0], [97.5, 3826.0], [97.6, 4001.0], [97.7, 4167.0], [97.8, 4326.0], [97.9, 4444.0], [98.0, 4669.0], [98.1, 4996.0], [98.2, 5249.0], [98.3, 5585.0], [98.4, 5963.0], [98.5, 6316.0], [98.6, 6801.0], [98.7, 7225.0], [98.8, 7467.0], [98.9, 7758.0], [99.0, 8260.0], [99.1, 9164.0], [99.2, 10021.0], [99.3, 11213.0], [99.4, 12682.0], [99.5, 15216.0], [99.6, 16366.0], [99.7, 19934.0], [99.8, 23283.0], [99.9, 33135.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 37003.0, "series": [{"data": [[69900.0, 1.0], [85100.0, 1.0], [89100.0, 1.0], [113900.0, 1.0], [100.0, 37003.0], [33300.0, 2.0], [34100.0, 1.0], [39700.0, 1.0], [41700.0, 1.0], [42900.0, 1.0], [331100.0, 1.0], [43700.0, 1.0], [47700.0, 1.0], [48100.0, 1.0], [50100.0, 1.0], [200.0, 11870.0], [61700.0, 1.0], [63700.0, 1.0], [300.0, 2716.0], [400.0, 3368.0], [500.0, 3614.0], [600.0, 1166.0], [700.0, 927.0], [800.0, 908.0], [900.0, 609.0], [1000.0, 347.0], [1100.0, 2392.0], [1200.0, 1728.0], [1300.0, 758.0], [1400.0, 563.0], [1500.0, 680.0], [1600.0, 282.0], [1700.0, 239.0], [1800.0, 215.0], [1900.0, 130.0], [2000.0, 74.0], [2100.0, 105.0], [2300.0, 79.0], [2200.0, 88.0], [2400.0, 61.0], [2500.0, 60.0], [2600.0, 33.0], [2800.0, 29.0], [2700.0, 31.0], [2900.0, 32.0], [3000.0, 45.0], [3100.0, 220.0], [3300.0, 142.0], [3200.0, 249.0], [3400.0, 163.0], [3500.0, 132.0], [3700.0, 44.0], [3600.0, 56.0], [3800.0, 55.0], [3900.0, 35.0], [4000.0, 42.0], [4100.0, 48.0], [4200.0, 44.0], [4300.0, 55.0], [4600.0, 21.0], [4500.0, 29.0], [4400.0, 62.0], [4800.0, 18.0], [4700.0, 26.0], [4900.0, 21.0], [5000.0, 22.0], [5100.0, 36.0], [5300.0, 18.0], [5200.0, 27.0], [5400.0, 24.0], [5500.0, 23.0], [5600.0, 12.0], [5800.0, 23.0], [5700.0, 24.0], [5900.0, 17.0], [6000.0, 14.0], [6100.0, 21.0], [6200.0, 25.0], [6300.0, 26.0], [6400.0, 14.0], [6500.0, 10.0], [6600.0, 16.0], [6700.0, 12.0], [6800.0, 12.0], [6900.0, 8.0], [7100.0, 25.0], [7000.0, 7.0], [111300.0, 1.0], [7200.0, 50.0], [7300.0, 27.0], [7400.0, 32.0], [7500.0, 27.0], [7600.0, 23.0], [7800.0, 20.0], [7900.0, 16.0], [7700.0, 15.0], [8000.0, 10.0], [8100.0, 8.0], [8400.0, 12.0], [8600.0, 6.0], [8200.0, 22.0], [8300.0, 10.0], [8500.0, 7.0], [8700.0, 4.0], [9100.0, 16.0], [9000.0, 4.0], [9200.0, 7.0], [8900.0, 7.0], [8800.0, 4.0], [143800.0, 1.0], [9600.0, 10.0], [9400.0, 13.0], [9700.0, 9.0], [9500.0, 7.0], [9300.0, 4.0], [10100.0, 7.0], [9900.0, 5.0], [10200.0, 7.0], [9800.0, 7.0], [10000.0, 15.0], [10400.0, 7.0], [10500.0, 3.0], [10700.0, 4.0], [10600.0, 7.0], [10300.0, 6.0], [11200.0, 10.0], [11100.0, 6.0], [10800.0, 4.0], [10900.0, 4.0], [11000.0, 5.0], [11400.0, 4.0], [11300.0, 8.0], [11500.0, 4.0], [11700.0, 4.0], [11600.0, 5.0], [11800.0, 2.0], [11900.0, 11.0], [12000.0, 7.0], [12200.0, 6.0], [12100.0, 5.0], [12700.0, 2.0], [12300.0, 2.0], [12400.0, 6.0], [12600.0, 2.0], [13200.0, 2.0], [12800.0, 4.0], [12900.0, 4.0], [13300.0, 3.0], [13000.0, 3.0], [13700.0, 4.0], [13600.0, 3.0], [13500.0, 1.0], [13400.0, 2.0], [13900.0, 6.0], [14100.0, 4.0], [14300.0, 6.0], [14000.0, 4.0], [14200.0, 4.0], [14700.0, 4.0], [14500.0, 2.0], [14400.0, 3.0], [14800.0, 1.0], [14600.0, 1.0], [14900.0, 2.0], [15300.0, 12.0], [15000.0, 3.0], [15200.0, 12.0], [15100.0, 1.0], [15400.0, 6.0], [15600.0, 11.0], [15700.0, 4.0], [15500.0, 16.0], [15800.0, 2.0], [16100.0, 2.0], [16000.0, 3.0], [16200.0, 6.0], [16300.0, 2.0], [15900.0, 1.0], [16800.0, 1.0], [16400.0, 2.0], [17400.0, 1.0], [16600.0, 2.0], [18000.0, 1.0], [17600.0, 5.0], [18200.0, 1.0], [18400.0, 1.0], [19000.0, 3.0], [18800.0, 4.0], [19400.0, 2.0], [18600.0, 1.0], [19200.0, 1.0], [20000.0, 1.0], [20400.0, 1.0], [19600.0, 3.0], [20200.0, 1.0], [19800.0, 1.0], [20800.0, 2.0], [21200.0, 6.0], [21400.0, 1.0], [22400.0, 1.0], [21800.0, 2.0], [22200.0, 2.0], [22000.0, 4.0], [21600.0, 6.0], [23000.0, 5.0], [22800.0, 1.0], [23200.0, 2.0], [23400.0, 4.0], [22600.0, 2.0], [23600.0, 1.0], [23800.0, 1.0], [24200.0, 1.0], [25200.0, 1.0], [24800.0, 1.0], [25400.0, 1.0], [26200.0, 2.0], [25800.0, 1.0], [25600.0, 1.0], [26800.0, 1.0], [27200.0, 3.0], [27000.0, 3.0], [27600.0, 1.0], [28200.0, 2.0], [27800.0, 2.0], [28000.0, 1.0], [29200.0, 1.0], [29000.0, 1.0], [30200.0, 1.0], [30600.0, 1.0], [30400.0, 1.0], [31000.0, 1.0], [31600.0, 1.0], [31400.0, 1.0], [32000.0, 1.0], [32400.0, 1.0], [33600.0, 1.0], [34400.0, 2.0], [32800.0, 1.0], [36400.0, 1.0], [36800.0, 1.0], [36000.0, 1.0], [38800.0, 1.0], [40400.0, 1.0], [39200.0, 1.0], [40800.0, 1.0], [42000.0, 3.0], [41200.0, 1.0], [45200.0, 1.0], [46000.0, 1.0], [48800.0, 1.0], [53200.0, 1.0], [57200.0, 1.0], [57600.0, 1.0], [74400.0, 1.0], [90400.0, 1.0], [95200.0, 1.0], [33100.0, 1.0], [33500.0, 1.0], [36300.0, 1.0], [41900.0, 1.0], [44300.0, 1.0], [45100.0, 1.0], [50300.0, 1.0], [59500.0, 1.0], [79800.0, 1.0], [91000.0, 1.0], [158100.0, 1.0], [78900.0, 1.0], [86900.0, 1.0], [16500.0, 4.0], [16700.0, 7.0], [16900.0, 4.0], [17300.0, 1.0], [17500.0, 3.0], [18300.0, 1.0], [17700.0, 3.0], [18100.0, 1.0], [17900.0, 2.0], [18700.0, 4.0], [18500.0, 2.0], [19300.0, 3.0], [18900.0, 3.0], [19100.0, 1.0], [19700.0, 2.0], [19500.0, 2.0], [20100.0, 1.0], [19900.0, 2.0], [20700.0, 3.0], [21100.0, 3.0], [21500.0, 7.0], [21300.0, 1.0], [21900.0, 1.0], [21700.0, 8.0], [22300.0, 2.0], [22100.0, 3.0], [22900.0, 2.0], [23500.0, 1.0], [23100.0, 2.0], [22700.0, 2.0], [24500.0, 3.0], [24100.0, 1.0], [23900.0, 3.0], [25100.0, 1.0], [25500.0, 1.0], [24700.0, 1.0], [26100.0, 2.0], [25700.0, 2.0], [26500.0, 2.0], [25900.0, 1.0], [26700.0, 1.0], [27100.0, 1.0], [26900.0, 1.0], [28100.0, 2.0], [28500.0, 1.0], [27900.0, 1.0], [27700.0, 1.0], [29500.0, 1.0], [30700.0, 1.0], [31100.0, 2.0], [31300.0, 1.0], [31500.0, 1.0], [32500.0, 1.0], [32300.0, 1.0], [34200.0, 1.0], [37000.0, 1.0], [38600.0, 1.0], [37800.0, 1.0], [39000.0, 1.0], [40600.0, 1.0], [41400.0, 2.0], [44600.0, 1.0], [43800.0, 1.0], [47000.0, 1.0], [45800.0, 1.0], [46600.0, 1.0], [49800.0, 1.0], [49400.0, 1.0], [50200.0, 1.0], [104400.0, 1.0], [126800.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 331100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 55028.0, "series": [{"data": [[0.0, 55028.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 12951.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5017.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 4.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.624054982817897, "minX": 1.7291907E12, "maxY": 361.94354838709677, "series": [{"data": [[1.72919172E12, 19.032162661737505], [1.72919142E12, 18.16053019145798], [1.72919202E12, 16.850183150183167], [1.72919232E12, 13.624054982817897], [1.72919214E12, 14.718418161845483], [1.72919112E12, 25.364830353885452], [1.72919082E12, 88.0596197228488], [1.72919124E12, 25.538323137819308], [1.72919094E12, 31.788252356780294], [1.72919184E12, 19.800441014332993], [1.72919154E12, 17.150384193194235], [1.72919196E12, 18.79545454545454], [1.72919166E12, 21.97649863760218], [1.72919226E12, 16.11723631018005], [1.72919076E12, 250.72920483693628], [1.72919136E12, 18.62619222303737], [1.72919106E12, 33.00109569028495], [1.72919148E12, 18.00730460189922], [1.72919118E12, 61.904886236478916], [1.72919178E12, 19.65014577259479], [1.72919208E12, 14.430458715596322], [1.7291919E12, 18.16715435259688], [1.7291922E12, 14.104067423964834], [1.72919088E12, 29.367240089753174], [1.729191E12, 25.395426042050875], [1.7291907E12, 361.94354838709677], [1.7291916E12, 18.00238284352663], [1.7291913E12, 21.775473071324583]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919232E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 300.7949907235629, "minX": 1.0, "maxY": 16423.0, "series": [{"data": [[2.0, 816.9354838709677], [3.0, 562.5079365079365], [4.0, 546.8918918918918], [5.0, 670.0259740259739], [6.0, 604.9999999999997], [7.0, 542.9285714285713], [8.0, 440.34285714285704], [9.0, 326.5380228136881], [10.0, 350.7469553450608], [11.0, 322.8930131004371], [12.0, 300.7949907235629], [13.0, 310.4144869215296], [14.0, 324.7999999999996], [15.0, 338.3237704918029], [16.0, 355.52636876006443], [17.0, 366.9440671194565], [18.0, 381.7410840217622], [19.0, 386.40526081141354], [20.0, 463.7555326814221], [21.0, 445.0692982456145], [22.0, 420.16749916749853], [23.0, 442.4297253634901], [24.0, 481.8095460926525], [25.0, 480.35915119363403], [26.0, 515.5730129390024], [27.0, 805.2395754359366], [28.0, 627.6494401378121], [29.0, 483.9380362249765], [30.0, 594.7412140575077], [31.0, 610.0036188178528], [33.0, 632.0736677115997], [32.0, 608.7965860597446], [35.0, 674.4959677419351], [34.0, 532.5199275362319], [37.0, 740.9830097087377], [36.0, 800.6990740740736], [39.0, 932.6724137931022], [38.0, 871.9946091644204], [41.0, 878.1457142857143], [40.0, 605.4761904761901], [43.0, 823.8339622641507], [42.0, 1262.0068027210893], [45.0, 1474.909523809524], [44.0, 1109.3580786026191], [47.0, 1260.500000000001], [46.0, 1813.968421052631], [49.0, 624.2155172413793], [48.0, 681.4820143884889], [51.0, 1074.6734693877554], [50.0, 2329.4711538461534], [53.0, 995.4245283018871], [52.0, 1062.0940170940164], [55.0, 667.9807692307694], [54.0, 977.0162601626018], [57.0, 1631.0000000000007], [56.0, 1704.456310679612], [59.0, 1329.9718309859154], [58.0, 1293.0400000000002], [61.0, 1152.058823529411], [60.0, 1224.4054054054052], [63.0, 1336.313725490196], [62.0, 2093.0169491525426], [67.0, 1411.3636363636358], [66.0, 1226.2833333333333], [65.0, 2057.6249999999995], [64.0, 1431.351851851852], [71.0, 1142.875], [70.0, 3079.7234042553196], [69.0, 926.6153846153845], [68.0, 1276.8253968253969], [75.0, 2270.6595744680853], [74.0, 1918.723404255319], [72.0, 2016.151898734178], [73.0, 2021.550000000001], [79.0, 2344.666666666667], [78.0, 3587.27027027027], [77.0, 3721.54347826087], [76.0, 2006.5849056603772], [83.0, 3319.1578947368416], [82.0, 1840.111111111111], [81.0, 1543.0], [80.0, 1030.0980392156866], [87.0, 2356.741935483871], [86.0, 1711.2], [85.0, 2329.6857142857143], [84.0, 3360.914285714285], [91.0, 2111.296296296296], [90.0, 1345.363636363636], [89.0, 1184.8125], [88.0, 3243.3333333333326], [95.0, 4085.136363636364], [94.0, 3968.08695652174], [93.0, 818.7727272727273], [92.0, 1288.1481481481483], [99.0, 4741.0], [98.0, 3074.8499999999995], [97.0, 7313.785714285714], [96.0, 2073.05], [102.0, 8397.111111111113], [101.0, 5064.666666666667], [103.0, 1786.8999999999999], [100.0, 3207.0952380952376], [107.0, 1070.0000000000002], [106.0, 906.625], [105.0, 5157.599999999999], [104.0, 1616.7058823529408], [111.0, 1221.625], [110.0, 438.75], [109.0, 4497.647058823531], [108.0, 4811.333333333334], [115.0, 1104.7272727272727], [114.0, 948.5833333333333], [113.0, 1430.4285714285713], [112.0, 4412.444444444444], [119.0, 2597.333333333334], [118.0, 1375.9285714285713], [117.0, 815.5454545454546], [116.0, 1171.25], [123.0, 2264.833333333334], [122.0, 1537.8260869565217], [121.0, 2167.428571428571], [120.0, 2853.727272727273], [127.0, 1347.5], [126.0, 3111.0588235294113], [125.0, 2596.4285714285716], [124.0, 5125.666666666667], [135.0, 3067.2941176470595], [134.0, 2001.9583333333335], [133.0, 1870.2692307692312], [132.0, 2760.416666666667], [131.0, 2261.3684210526317], [130.0, 2544.95], [129.0, 1629.4799999999998], [128.0, 1114.8125], [143.0, 2982.0], [142.0, 6325.700000000001], [141.0, 5240.05], [140.0, 4677.285714285715], [139.0, 2700.0], [138.0, 7826.750000000002], [137.0, 2376.0666666666666], [136.0, 7608.9333333333325], [151.0, 4659.823529411766], [150.0, 1187.047619047619], [149.0, 3137.407407407407], [148.0, 2557.0], [147.0, 5154.227272727273], [146.0, 3135.1851851851848], [145.0, 2359.2777777777783], [144.0, 3656.8571428571427], [158.0, 2092.8666666666663], [156.0, 1980.5263157894735], [155.0, 2467.9090909090905], [154.0, 4022.0588235294117], [159.0, 3918.4285714285716], [157.0, 1123.5833333333333], [153.0, 4123.466666666667], [152.0, 5111.937500000001], [167.0, 2712.166666666667], [166.0, 4056.6111111111095], [165.0, 3578.307692307693], [164.0, 1048.8], [163.0, 4846.470588235294], [162.0, 1857.6470588235297], [161.0, 2288.6521739130435], [160.0, 4539.791666666664], [175.0, 7585.285714285716], [174.0, 6517.928571428572], [173.0, 6073.607142857143], [172.0, 5919.222222222223], [171.0, 4301.5], [170.0, 3894.125], [169.0, 6454.166666666667], [168.0, 3932.2999999999997], [183.0, 4099.842105263157], [182.0, 3940.5714285714284], [181.0, 9102.230769230771], [180.0, 6980.9], [179.0, 4896.636363636364], [178.0, 1761.4999999999998], [177.0, 4745.1578947368425], [176.0, 6862.499999999999], [191.0, 3169.7692307692305], [190.0, 4233.153846153846], [189.0, 5228.300000000002], [188.0, 3578.2666666666664], [187.0, 3559.444444444445], [186.0, 2948.6923076923076], [185.0, 1759.6874999999998], [184.0, 6086.250000000001], [199.0, 862.8421052631578], [197.0, 2363.777777777777], [196.0, 5684.454545454545], [195.0, 6058.349999999999], [194.0, 2416.375], [193.0, 3986.1249999999995], [192.0, 6635.222222222223], [198.0, 1402.55], [207.0, 908.4285714285714], [206.0, 1682.5], [205.0, 1500.1250000000002], [204.0, 3965.5], [203.0, 1505.857142857143], [202.0, 1512.6363636363637], [201.0, 1069.9166666666665], [200.0, 3567.1111111111104], [215.0, 1920.5], [214.0, 6041.333333333334], [213.0, 3501.9999999999995], [212.0, 5178.999999999999], [211.0, 1656.857142857143], [210.0, 1515.0], [209.0, 4713.2], [208.0, 3243.2], [223.0, 895.0], [221.0, 5604.75], [220.0, 889.0], [219.0, 3772.3750000000005], [218.0, 2714.166666666667], [217.0, 3239.0], [216.0, 920.4], [222.0, 1747.0], [231.0, 1212.25], [230.0, 5617.6], [229.0, 2632.5], [228.0, 2183.8], [227.0, 3213.8888888888887], [226.0, 5037.142857142858], [225.0, 5837.599999999999], [224.0, 1014.0], [239.0, 4192.0], [238.0, 2433.3333333333335], [237.0, 1385.0], [236.0, 3517.8], [235.0, 6248.6], [234.0, 680.25], [233.0, 1547.75], [232.0, 1444.6], [247.0, 5203.2], [246.0, 2157.166666666667], [245.0, 1046.4], [244.0, 1148.2857142857144], [243.0, 1608.0], [242.0, 5153.8], [241.0, 1834.25], [240.0, 9435.5], [255.0, 2035.5454545454547], [254.0, 2548.3333333333335], [253.0, 1194.375], [252.0, 3918.7], [251.0, 7894.857142857142], [250.0, 9542.0], [249.0, 4414.125], [248.0, 5744.0], [270.0, 5394.4], [271.0, 4486.6], [269.0, 2123.0], [268.0, 3299.5], [267.0, 5633.333333333333], [266.0, 7337.6], [265.0, 4780.6], [264.0, 9771.4], [263.0, 4108.25], [257.0, 7340.0], [256.0, 1400.3333333333333], [259.0, 1763.25], [258.0, 3901.75], [262.0, 4081.0], [261.0, 5157.000000000001], [260.0, 1468.0], [286.0, 2070.0], [287.0, 5581.7], [285.0, 2721.0], [284.0, 3585.1818181818185], [283.0, 5125.866666666667], [282.0, 2890.1428571428573], [281.0, 4845.818181818182], [280.0, 4640.35294117647], [279.0, 4416.4], [273.0, 5071.2], [272.0, 2075.6666666666665], [275.0, 3097.5], [274.0, 2656.666666666667], [278.0, 2695.0], [277.0, 2754.8333333333335], [276.0, 2781.5], [302.0, 5572.272727272727], [303.0, 6821.90909090909], [301.0, 6260.0], [300.0, 8861.0], [299.0, 9519.0], [298.0, 3991.2000000000003], [297.0, 12839.88888888889], [296.0, 4440.4], [295.0, 5876.727272727273], [289.0, 5454.0], [288.0, 3411.5000000000005], [291.0, 8107.833333333334], [290.0, 6724.5], [294.0, 6330.90909090909], [293.0, 4653.444444444444], [292.0, 5357.8], [304.0, 5228.111111111111], [309.0, 4826.909090909091], [308.0, 4587.309523809525], [310.0, 5052.411764705882], [311.0, 4829.8], [307.0, 6287.750000000001], [306.0, 6114.833333333333], [305.0, 6053.8], [319.0, 5878.111111111112], [313.0, 4307.25], [312.0, 3279.5], [315.0, 3317.5], [314.0, 3795.0], [318.0, 6129.375], [317.0, 7754.8], [316.0, 6238.666666666667], [334.0, 12532.857142857143], [335.0, 4740.0], [333.0, 7311.222222222223], [332.0, 3136.8], [331.0, 10203.333333333334], [330.0, 3092.4], [328.0, 3643.2], [329.0, 7246.5], [327.0, 5112.0], [320.0, 7031.875], [322.0, 7080.75], [323.0, 5500.5], [321.0, 4374.285714285715], [326.0, 3738.8], [325.0, 8173.333333333333], [324.0, 3979.8], [350.0, 6497.7692307692305], [351.0, 3676.625], [349.0, 3834.3125], [348.0, 5152.266666666666], [347.0, 8263.214285714284], [346.0, 6082.545454545454], [345.0, 4687.181818181818], [344.0, 6336.0], [343.0, 5902.833333333333], [337.0, 6341.8], [336.0, 5916.750000000001], [339.0, 4442.888888888889], [338.0, 6230.7692307692305], [342.0, 3770.8888888888887], [341.0, 3676.0], [340.0, 7114.125], [359.0, 5636.090909090908], [357.0, 13776.300000000001], [356.0, 10469.222222222223], [355.0, 4588.333333333333], [354.0, 6638.6], [353.0, 7478.833333333334], [352.0, 3650.1111111111113], [358.0, 4119.0], [364.0, 7082.090909090909], [365.0, 4601.928571428572], [367.0, 4514.363636363637], [361.0, 5697.916666666667], [360.0, 4961.21649484536], [363.0, 5272.666666666666], [362.0, 5707.538461538461], [366.0, 4679.666666666668], [380.0, 3552.1333333333328], [376.0, 6211.363636363636], [372.0, 5318.333333333333], [373.0, 6855.166666666666], [375.0, 5212.7], [369.0, 4488.75], [368.0, 5012.5], [371.0, 10832.25], [370.0, 3243.714285714286], [374.0, 6204.0], [377.0, 5036.117647058823], [381.0, 5317.639999999999], [379.0, 5622.6875], [378.0, 3363.5714285714284], [382.0, 6089.842105263158], [383.0, 5229.7368421052615], [385.0, 7340.166666666666], [386.0, 5021.894736842104], [390.0, 4795.049999999999], [389.0, 5551.714285714286], [388.0, 4763.590909090908], [387.0, 4987.84], [384.0, 4660.363636363636], [391.0, 4547.999999999999], [398.0, 5044.454545454546], [395.0, 5540.916666666666], [394.0, 5025.849999999999], [399.0, 5746.222222222223], [392.0, 5701.95238095238], [393.0, 5911.785714285714], [396.0, 4729.75], [397.0, 4293.624999999999], [413.0, 8040.666666666666], [414.0, 7307.0], [415.0, 2694.0], [412.0, 4893.666666666667], [403.0, 5505.333333333334], [401.0, 4350.333333333333], [402.0, 5957.333333333333], [400.0, 3413.6], [411.0, 6192.5], [410.0, 6766.8], [409.0, 8782.666666666666], [408.0, 4606.666666666667], [407.0, 7182.75], [406.0, 7738.4], [405.0, 6175.666666666667], [404.0, 5731.5], [430.0, 5166.6], [428.0, 2938.6666666666665], [427.0, 10692.0], [426.0, 8315.5], [429.0, 6005.0], [425.0, 3539.0], [424.0, 3594.0], [423.0, 3624.0], [417.0, 3050.5], [416.0, 3344.0], [419.0, 4477.666666666667], [418.0, 7498.0], [422.0, 6471.0], [421.0, 4351.666666666667], [420.0, 3514.0], [435.0, 11879.0], [439.0, 2733.0], [440.0, 5691.5], [443.0, 3429.0], [442.0, 3396.0], [447.0, 3422.0], [446.0, 6561.0], [445.0, 3439.0], [444.0, 3437.0], [438.0, 7964.5], [437.0, 7100.0], [436.0, 7744.75], [434.0, 6809.5], [433.0, 4817.75], [432.0, 8846.8], [460.0, 6032.0], [455.0, 8105.5], [449.0, 4311.0], [451.0, 5915.0], [450.0, 9671.0], [454.0, 5043.0], [453.0, 6291.0], [452.0, 5445.75], [461.0, 13023.142857142857], [462.0, 6192.0], [459.0, 7103.285714285715], [458.0, 5211.6], [457.0, 7458.25], [456.0, 7848.666666666667], [463.0, 5662.0], [477.0, 9964.833333333334], [473.0, 9125.5], [474.0, 9187.5], [475.0, 9357.5], [478.0, 6093.0], [476.0, 7204.0], [467.0, 5868.0], [466.0, 7313.0], [465.0, 5757.0], [464.0, 5733.0], [472.0, 4261.666666666667], [479.0, 9567.0], [471.0, 11326.0], [470.0, 5353.0], [469.0, 5734.5], [468.0, 3417.5], [494.0, 6193.5], [495.0, 8993.5], [493.0, 7610.833333333334], [492.0, 10797.0], [483.0, 6417.857142857143], [481.0, 6585.0], [480.0, 16423.0], [491.0, 15934.666666666668], [490.0, 6246.75], [489.0, 8216.5], [488.0, 15875.0], [487.0, 8554.75], [486.0, 8820.0], [485.0, 12071.6], [484.0, 9053.2], [500.0, 12261.0], [499.0, 5344.571428571428], [498.0, 5856.75], [497.0, 9084.166666666666], [496.0, 8406.6], [501.0, 6915.0], [503.0, 9473.0], [502.0, 6789.0], [1.0, 464.7199999999999]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[34.698561643836086, 710.6449041095841]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 503.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 494.0, "minX": 1.7291907E12, "maxY": 3492552.5, "series": [{"data": [[1.72919172E12, 3044650.4166666665], [1.72919142E12, 3056970.433333333], [1.72919202E12, 3072728.2], [1.72919232E12, 1637694.4666666666], [1.72919214E12, 3073890.35], [1.72919112E12, 3085172.033333333], [1.72919082E12, 3492552.5], [1.72919124E12, 3127948.1], [1.72919094E12, 3104278.15], [1.72919184E12, 3062664.3], [1.72919154E12, 3076141.716666667], [1.72919196E12, 3070440.433333333], [1.72919166E12, 3304648.4833333334], [1.72919226E12, 3062652.966666667], [1.72919076E12, 3068345.0833333335], [1.72919136E12, 3068190.1], [1.72919106E12, 3081789.25], [1.72919148E12, 3081759.7], [1.72919118E12, 3017640.6666666665], [1.72919178E12, 3088550.7], [1.72919208E12, 3067127.9], [1.7291919E12, 3077272.8833333333], [1.7291922E12, 3071650.6], [1.72919088E12, 3009722.816666667], [1.729191E12, 3051391.5833333335], [1.7291907E12, 278051.56666666665], [1.7291916E12, 2834156.95], [1.7291913E12, 3093030.1666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72919172E12, 5410.0], [1.72919142E12, 5432.0], [1.72919202E12, 5460.0], [1.72919232E12, 2910.0], [1.72919214E12, 5462.0], [1.72919112E12, 5482.0], [1.72919082E12, 6206.0], [1.72919124E12, 5558.0], [1.72919094E12, 5516.0], [1.72919184E12, 5442.0], [1.72919154E12, 5466.0], [1.72919196E12, 5456.0], [1.72919166E12, 5872.0], [1.72919226E12, 5442.0], [1.72919076E12, 5452.0], [1.72919136E12, 5452.0], [1.72919106E12, 5476.0], [1.72919148E12, 5476.0], [1.72919118E12, 5362.0], [1.72919178E12, 5488.0], [1.72919208E12, 5450.0], [1.7291919E12, 5468.0], [1.7291922E12, 5458.0], [1.72919088E12, 5348.0], [1.729191E12, 5422.0], [1.7291907E12, 494.0], [1.7291916E12, 5036.0], [1.7291913E12, 5496.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919232E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 265.7127152803224, "minX": 1.7291907E12, "maxY": 5123.427419354841, "series": [{"data": [[1.72919172E12, 406.0831792975968], [1.72919142E12, 365.50368188512556], [1.72919202E12, 338.5527472527477], [1.72919232E12, 269.3017182130577], [1.72919214E12, 299.58806298059346], [1.72919112E12, 639.8606348048148], [1.72919082E12, 2460.535288430561], [1.72919124E12, 518.8780136739836], [1.72919094E12, 661.2755620014515], [1.72919184E12, 396.2624035281141], [1.72919154E12, 363.00402488108307], [1.72919196E12, 374.29875366568825], [1.72919166E12, 399.0166893732965], [1.72919226E12, 276.5534729878716], [1.72919076E12, 4834.744961524361], [1.72919136E12, 394.6548055759361], [1.72919106E12, 641.173484295104], [1.72919148E12, 380.2998539079631], [1.72919118E12, 924.2368519209261], [1.72919178E12, 398.31413994169066], [1.72919208E12, 302.7130275229351], [1.7291919E12, 354.768105340161], [1.7291922E12, 265.7127152803224], [1.72919088E12, 705.7965594614815], [1.729191E12, 519.3043157506437], [1.7291907E12, 5123.427419354841], [1.7291916E12, 387.8876092136617], [1.7291913E12, 466.4035662299852]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919232E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 217.7717112495419, "minX": 1.7291907E12, "maxY": 4148.822580645161, "series": [{"data": [[1.72919172E12, 344.9556377079482], [1.72919142E12, 310.3575110456557], [1.72919202E12, 286.20000000000033], [1.72919232E12, 220.42749140893488], [1.72919214E12, 240.29805931893065], [1.72919112E12, 472.88434877781793], [1.72919082E12, 1696.9932323557894], [1.72919124E12, 457.407340770061], [1.72919094E12, 489.9728063814361], [1.72919184E12, 338.30871003307624], [1.72919154E12, 306.4815221368461], [1.72919196E12, 315.9681085043985], [1.72919166E12, 343.3644414168935], [1.72919226E12, 226.0848952590959], [1.72919076E12, 3188.449248809092], [1.72919136E12, 337.675348495965], [1.72919106E12, 557.2034331628934], [1.72919148E12, 321.6033601168737], [1.72919118E12, 779.4326743752345], [1.72919178E12, 337.009475218659], [1.72919208E12, 250.4752293577983], [1.7291919E12, 297.3796634967084], [1.7291922E12, 217.7717112495419], [1.72919088E12, 526.1136873597604], [1.729191E12, 442.0132792327553], [1.7291907E12, 4148.822580645161], [1.7291916E12, 332.45988880063476], [1.7291913E12, 406.58951965065484]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919232E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 153.5628435324296, "minX": 1.7291907E12, "maxY": 2831.850806451614, "series": [{"data": [[1.72919172E12, 253.52236598891], [1.72919142E12, 230.13843888070713], [1.72919202E12, 211.05091575091572], [1.72919232E12, 155.59725085910677], [1.72919214E12, 169.3610399121201], [1.72919112E12, 347.95913900036476], [1.72919082E12, 1108.8043828553], [1.72919124E12, 360.65203310543313], [1.72919094E12, 365.9282088469909], [1.72919184E12, 252.98199191473728], [1.72919154E12, 222.8148554701792], [1.72919196E12, 224.66642228739047], [1.72919166E12, 254.9267711171664], [1.72919226E12, 162.02609334803392], [1.72919076E12, 2089.4455844631734], [1.72919136E12, 253.42479823917827], [1.72919106E12, 431.4671292914528], [1.72919148E12, 236.98027757487213], [1.72919118E12, 633.17866467736], [1.72919178E12, 243.33637026239074], [1.72919208E12, 179.37614678899104], [1.7291919E12, 217.81272860277997], [1.7291922E12, 153.5628435324296], [1.72919088E12, 358.62303664921455], [1.729191E12, 339.6543710807821], [1.7291907E12, 2831.850806451614], [1.7291916E12, 251.45790309769643], [1.7291913E12, 317.60589519650586]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919232E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 145.0, "minX": 1.7291907E12, "maxY": 331156.0, "series": [{"data": [[1.72919172E12, 15216.0], [1.72919142E12, 7478.0], [1.72919202E12, 7231.0], [1.72919232E12, 7196.0], [1.72919214E12, 3496.0], [1.72919112E12, 331156.0], [1.72919082E12, 113975.0], [1.72919124E12, 21229.0], [1.72919094E12, 158127.0], [1.72919184E12, 21258.0], [1.72919154E12, 4463.0], [1.72919196E12, 7403.0], [1.72919166E12, 15250.0], [1.72919226E12, 3469.0], [1.72919076E12, 57673.0], [1.72919136E12, 7486.0], [1.72919106E12, 21861.0], [1.72919148E12, 3749.0], [1.72919118E12, 21542.0], [1.72919178E12, 7184.0], [1.72919208E12, 3540.0], [1.7291919E12, 3964.0], [1.7291922E12, 7231.0], [1.72919088E12, 143879.0], [1.729191E12, 15534.0], [1.7291907E12, 13272.0], [1.7291916E12, 7227.0], [1.7291913E12, 21295.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72919172E12, 1065.800000000001], [1.72919142E12, 866.2000000000007], [1.72919202E12, 779.7000000000003], [1.72919232E12, 492.4000000000001], [1.72919214E12, 502.0], [1.72919112E12, 1205.8000000000002], [1.72919082E12, 3777.3999999999987], [1.72919124E12, 1200.0], [1.72919094E12, 1368.0], [1.72919184E12, 1166.6000000000004], [1.72919154E12, 910.5999999999999], [1.72919196E12, 823.7999999999993], [1.72919166E12, 945.9000000000005], [1.72919226E12, 502.0], [1.72919076E12, 11566.200000000004], [1.72919136E12, 1178.3000000000002], [1.72919106E12, 1401.1], [1.72919148E12, 1123.1], [1.72919118E12, 2107.800000000003], [1.72919178E12, 1099.5], [1.72919208E12, 511.0], [1.7291919E12, 771.0], [1.7291922E12, 479.0], [1.72919088E12, 1345.0], [1.729191E12, 1225.8000000000002], [1.7291907E12, 9678.400000000003], [1.7291916E12, 1168.1], [1.7291913E12, 1193.1]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72919172E12, 2245.94], [1.72919142E12, 2796.6199999999626], [1.72919202E12, 1869.2900000000022], [1.72919232E12, 1225.9600000000005], [1.72919214E12, 1352.7999999999984], [1.72919112E12, 3447.4399999999987], [1.72919082E12, 41497.64], [1.72919124E12, 3364.999999999999], [1.72919094E12, 3650.2199999999793], [1.72919184E12, 3197.5600000000004], [1.72919154E12, 1844.6599999999999], [1.72919196E12, 2094.570000000006], [1.72919166E12, 3205.63], [1.72919226E12, 1497.7800000000002], [1.72919076E12, 33285.380000000005], [1.72919136E12, 2994.9300000000117], [1.72919106E12, 3799.130000000004], [1.72919148E12, 3076.230000000031], [1.72919118E12, 7732.979999999981], [1.72919178E12, 3182.2000000000007], [1.72919208E12, 1529.9599999999991], [1.7291919E12, 2008.3500000000072], [1.7291922E12, 1212.3999999999996], [1.72919088E12, 3683.25], [1.729191E12, 3302.4400000000014], [1.7291907E12, 12490.160000000005], [1.7291916E12, 3203.62], [1.7291913E12, 3240.629999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72919172E12, 1227.8999999999987], [1.72919142E12, 1198.0], [1.72919202E12, 1191.0], [1.72919232E12, 887.0], [1.72919214E12, 946.4000000000005], [1.72919112E12, 1517.8000000000002], [1.72919082E12, 14472.799999999981], [1.72919124E12, 1503.0], [1.72919094E12, 1690.1499999999992], [1.72919184E12, 1217.9], [1.72919154E12, 1201.0], [1.72919196E12, 1216.0], [1.72919166E12, 1213.0], [1.72919226E12, 1164.0], [1.72919076E12, 17544.950000000004], [1.72919136E12, 1207.0], [1.72919106E12, 1990.6999999999962], [1.72919148E12, 1205.0], [1.72919118E12, 3379.9], [1.72919178E12, 1242.0], [1.72919208E12, 1180.0], [1.7291919E12, 1196.5], [1.7291922E12, 824.5], [1.72919088E12, 1694.75], [1.729191E12, 1521.8000000000002], [1.7291907E12, 10792.0], [1.7291916E12, 1211.0499999999997], [1.7291913E12, 1482.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72919172E12, 156.0], [1.72919142E12, 149.0], [1.72919202E12, 153.0], [1.72919232E12, 153.0], [1.72919214E12, 153.0], [1.72919112E12, 154.0], [1.72919082E12, 164.0], [1.72919124E12, 150.0], [1.72919094E12, 158.0], [1.72919184E12, 154.0], [1.72919154E12, 153.0], [1.72919196E12, 154.0], [1.72919166E12, 145.0], [1.72919226E12, 154.0], [1.72919076E12, 180.0], [1.72919136E12, 151.0], [1.72919106E12, 155.0], [1.72919148E12, 153.0], [1.72919118E12, 151.0], [1.72919178E12, 153.0], [1.72919208E12, 152.0], [1.7291919E12, 153.0], [1.7291922E12, 155.0], [1.72919088E12, 164.0], [1.729191E12, 155.0], [1.7291907E12, 835.0], [1.7291916E12, 153.0], [1.7291913E12, 154.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72919172E12, 193.0], [1.72919142E12, 185.0], [1.72919202E12, 185.0], [1.72919232E12, 180.0], [1.72919214E12, 186.0], [1.72919112E12, 196.0], [1.72919082E12, 314.0], [1.72919124E12, 197.0], [1.72919094E12, 303.0], [1.72919184E12, 187.0], [1.72919154E12, 189.0], [1.72919196E12, 198.0], [1.72919166E12, 191.0], [1.72919226E12, 182.0], [1.72919076E12, 2690.0], [1.72919136E12, 189.0], [1.72919106E12, 246.5], [1.72919148E12, 187.0], [1.72919118E12, 270.0], [1.72919178E12, 204.0], [1.72919208E12, 184.0], [1.7291919E12, 190.0], [1.7291922E12, 179.0], [1.72919088E12, 250.0], [1.729191E12, 229.0], [1.7291907E12, 5001.0], [1.7291916E12, 187.0], [1.7291913E12, 195.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919232E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 177.0, "minX": 1.0, "maxY": 25746.0, "series": [{"data": [[3.0, 562.0], [4.0, 2456.5], [5.0, 3661.0], [6.0, 1941.5], [7.0, 500.0], [8.0, 1189.0], [9.0, 177.0], [10.0, 1193.5], [11.0, 231.0], [12.0, 1393.0], [13.0, 246.0], [14.0, 505.0], [15.0, 237.0], [16.0, 605.5], [17.0, 1186.0], [18.0, 219.0], [19.0, 634.5], [20.0, 882.0], [21.0, 875.0], [22.0, 311.0], [23.0, 445.0], [24.0, 4774.0], [25.0, 215.0], [26.0, 527.5], [27.0, 462.0], [28.0, 409.5], [29.0, 510.0], [30.0, 293.5], [31.0, 253.0], [32.0, 305.5], [33.0, 369.5], [35.0, 201.0], [34.0, 318.0], [36.0, 287.0], [37.0, 242.0], [38.0, 210.0], [39.0, 200.0], [40.0, 192.5], [41.0, 190.0], [43.0, 190.0], [42.0, 191.0], [44.0, 185.0], [45.0, 188.0], [46.0, 189.0], [47.0, 192.0], [49.0, 195.0], [48.0, 186.0], [50.0, 191.0], [51.0, 201.0], [52.0, 199.5], [53.0, 197.0], [55.0, 204.0], [54.0, 193.0], [56.0, 198.0], [57.0, 196.5], [58.0, 227.5], [59.0, 197.0], [60.0, 266.5], [61.0, 218.0], [62.0, 266.5], [63.0, 225.5], [66.0, 241.5], [65.0, 198.5], [67.0, 332.0], [64.0, 216.0], [71.0, 1123.0], [69.0, 248.5], [68.0, 374.0], [70.0, 204.0], [74.0, 217.5], [75.0, 313.0], [72.0, 500.0], [73.0, 260.0], [78.0, 633.0], [79.0, 393.0], [76.0, 664.0], [77.0, 721.0], [83.0, 1609.0], [81.0, 260.0], [80.0, 188.5], [82.0, 188.0], [86.0, 5388.0], [84.0, 992.0], [87.0, 1855.0], [85.0, 199.0], [90.0, 2292.0], [91.0, 4420.0], [92.0, 4505.0], [93.0, 1097.0], [97.0, 183.0], [102.0, 2327.5], [103.0, 435.0], [107.0, 1711.0], [105.0, 938.0], [109.0, 1138.0], [108.0, 5942.0], [113.0, 989.0], [114.0, 1304.0], [117.0, 1366.0], [123.0, 213.0], [138.0, 3445.0], [1.0, 193.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[78.0, 25746.0], [44.0, 21690.0], [23.0, 7563.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 138.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 5275.5, "series": [{"data": [[3.0, 432.0], [4.0, 1400.0], [5.0, 3609.0], [6.0, 1450.0], [7.0, 395.0], [8.0, 947.5], [9.0, 134.0], [10.0, 1145.0], [11.0, 168.0], [12.0, 1141.5], [13.0, 190.0], [14.0, 401.0], [15.0, 180.0], [16.0, 309.0], [17.0, 1020.0], [18.0, 166.0], [19.0, 430.5], [20.0, 590.0], [21.0, 651.0], [22.0, 173.5], [23.0, 298.0], [24.0, 3604.5], [25.0, 161.0], [26.0, 313.0], [27.0, 303.0], [28.0, 278.0], [29.0, 390.0], [30.0, 200.0], [31.0, 186.0], [32.0, 208.5], [33.0, 256.5], [35.0, 149.0], [34.0, 224.0], [36.0, 204.0], [37.0, 158.5], [38.0, 154.0], [39.0, 147.0], [40.0, 143.0], [41.0, 142.0], [43.0, 143.0], [42.0, 143.0], [44.0, 139.0], [45.0, 140.0], [46.0, 141.0], [47.0, 143.0], [49.0, 145.0], [48.0, 140.0], [50.0, 143.0], [51.0, 149.0], [52.0, 148.0], [53.0, 146.0], [55.0, 152.0], [54.0, 144.0], [56.0, 147.0], [57.0, 146.5], [58.0, 169.0], [59.0, 144.0], [60.0, 195.0], [61.0, 158.0], [62.0, 177.0], [63.0, 152.5], [66.0, 173.0], [65.0, 148.0], [67.0, 233.0], [64.0, 159.0], [71.0, 779.0], [69.0, 180.0], [68.0, 254.0], [70.0, 152.0], [74.0, 159.0], [75.0, 213.0], [72.0, 365.5], [73.0, 191.0], [78.0, 436.0], [79.0, 230.0], [76.0, 546.5], [77.0, 552.0], [83.0, 1216.0], [81.0, 192.0], [80.0, 141.5], [82.0, 140.5], [86.0, 4331.0], [84.0, 637.0], [87.0, 1703.0], [85.0, 149.0], [90.0, 1667.0], [91.0, 3586.0], [92.0, 3681.5], [93.0, 791.0], [97.0, 136.0], [102.0, 2212.0], [103.0, 326.0], [107.0, 1317.0], [105.0, 662.0], [109.0, 897.0], [108.0, 5275.5], [113.0, 811.0], [114.0, 948.0], [117.0, 1005.0], [123.0, 160.0], [138.0, 2771.0], [1.0, 145.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[78.0, 0.0], [44.0, 0.0], [23.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 138.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.6, "minX": 1.7291907E12, "maxY": 49.11666666666667, "series": [{"data": [[1.72919172E12, 45.2], [1.72919142E12, 45.38333333333333], [1.72919202E12, 45.38333333333333], [1.72919232E12, 23.983333333333334], [1.72919214E12, 45.45], [1.72919112E12, 45.68333333333333], [1.72919082E12, 46.11666666666667], [1.72919124E12, 46.3], [1.72919094E12, 45.833333333333336], [1.72919184E12, 45.25], [1.72919154E12, 45.45], [1.72919196E12, 45.45], [1.72919166E12, 49.11666666666667], [1.72919226E12, 45.43333333333333], [1.72919076E12, 45.05], [1.72919136E12, 45.43333333333333], [1.72919106E12, 45.8], [1.72919148E12, 45.56666666666667], [1.72919118E12, 44.483333333333334], [1.72919178E12, 45.71666666666667], [1.72919208E12, 45.53333333333333], [1.7291919E12, 45.666666666666664], [1.7291922E12, 45.45], [1.72919088E12, 44.96666666666667], [1.729191E12, 44.86666666666667], [1.7291907E12, 10.6], [1.7291916E12, 41.78333333333333], [1.7291913E12, 45.71666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919232E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7291907E12, "maxY": 51.71666666666667, "series": [{"data": [[1.72919172E12, 45.083333333333336], [1.72919142E12, 45.266666666666666], [1.72919202E12, 45.5], [1.72919232E12, 24.25], [1.72919214E12, 45.516666666666666], [1.72919112E12, 45.68333333333333], [1.72919082E12, 51.71666666666667], [1.72919124E12, 46.31666666666667], [1.72919094E12, 45.96666666666667], [1.72919184E12, 45.35], [1.72919154E12, 45.55], [1.72919196E12, 45.46666666666667], [1.72919166E12, 48.93333333333333], [1.72919226E12, 45.35], [1.72919076E12, 45.43333333333333], [1.72919136E12, 45.43333333333333], [1.72919106E12, 45.63333333333333], [1.72919148E12, 45.63333333333333], [1.72919118E12, 44.68333333333333], [1.72919178E12, 45.733333333333334], [1.72919208E12, 45.416666666666664], [1.7291919E12, 45.56666666666667], [1.7291922E12, 45.483333333333334], [1.72919088E12, 44.56666666666667], [1.729191E12, 45.18333333333333], [1.7291907E12, 4.116666666666666], [1.7291916E12, 41.96666666666667], [1.7291913E12, 45.8]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72919076E12, 0.05], [1.7291907E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919232E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7291907E12, "maxY": 51.71666666666667, "series": [{"data": [[1.72919172E12, 45.083333333333336], [1.72919142E12, 45.266666666666666], [1.72919202E12, 45.5], [1.72919232E12, 24.25], [1.72919214E12, 45.516666666666666], [1.72919112E12, 45.68333333333333], [1.72919082E12, 51.71666666666667], [1.72919124E12, 46.31666666666667], [1.72919094E12, 45.96666666666667], [1.72919184E12, 45.35], [1.72919154E12, 45.55], [1.72919196E12, 45.46666666666667], [1.72919166E12, 48.93333333333333], [1.72919226E12, 45.35], [1.72919076E12, 45.43333333333333], [1.72919136E12, 45.43333333333333], [1.72919106E12, 45.63333333333333], [1.72919148E12, 45.63333333333333], [1.72919118E12, 44.68333333333333], [1.72919178E12, 45.733333333333334], [1.72919208E12, 45.416666666666664], [1.7291919E12, 45.56666666666667], [1.7291922E12, 45.483333333333334], [1.72919088E12, 44.56666666666667], [1.729191E12, 45.18333333333333], [1.7291907E12, 4.116666666666666], [1.7291916E12, 41.96666666666667], [1.7291913E12, 45.8]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72919076E12, 0.05], [1.7291907E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919232E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7291907E12, "maxY": 51.71666666666667, "series": [{"data": [[1.72919172E12, 45.083333333333336], [1.72919142E12, 45.266666666666666], [1.72919202E12, 45.5], [1.72919232E12, 24.25], [1.72919214E12, 45.516666666666666], [1.72919112E12, 45.68333333333333], [1.72919082E12, 51.71666666666667], [1.72919124E12, 46.31666666666667], [1.72919094E12, 45.96666666666667], [1.72919184E12, 45.35], [1.72919154E12, 45.55], [1.72919196E12, 45.46666666666667], [1.72919166E12, 48.93333333333333], [1.72919226E12, 45.35], [1.72919076E12, 45.43333333333333], [1.72919136E12, 45.43333333333333], [1.72919106E12, 45.63333333333333], [1.72919148E12, 45.63333333333333], [1.72919118E12, 44.68333333333333], [1.72919178E12, 45.733333333333334], [1.72919208E12, 45.416666666666664], [1.7291919E12, 45.56666666666667], [1.7291922E12, 45.483333333333334], [1.72919088E12, 44.56666666666667], [1.729191E12, 45.18333333333333], [1.7291907E12, 4.116666666666666], [1.7291916E12, 41.96666666666667], [1.7291913E12, 45.8]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72919076E12, 0.05], [1.7291907E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919232E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

