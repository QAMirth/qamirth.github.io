/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 147.0, "minX": 0.0, "maxY": 62440.0, "series": [{"data": [[0.0, 147.0], [0.1, 155.0], [0.2, 156.0], [0.3, 157.0], [0.4, 157.0], [0.5, 158.0], [0.6, 158.0], [0.7, 159.0], [0.8, 159.0], [0.9, 159.0], [1.0, 160.0], [1.1, 160.0], [1.2, 160.0], [1.3, 160.0], [1.4, 160.0], [1.5, 160.0], [1.6, 161.0], [1.7, 161.0], [1.8, 161.0], [1.9, 161.0], [2.0, 161.0], [2.1, 161.0], [2.2, 161.0], [2.3, 162.0], [2.4, 162.0], [2.5, 162.0], [2.6, 162.0], [2.7, 162.0], [2.8, 162.0], [2.9, 162.0], [3.0, 162.0], [3.1, 162.0], [3.2, 163.0], [3.3, 163.0], [3.4, 163.0], [3.5, 163.0], [3.6, 163.0], [3.7, 163.0], [3.8, 163.0], [3.9, 163.0], [4.0, 163.0], [4.1, 163.0], [4.2, 163.0], [4.3, 163.0], [4.4, 164.0], [4.5, 164.0], [4.6, 164.0], [4.7, 164.0], [4.8, 164.0], [4.9, 164.0], [5.0, 164.0], [5.1, 164.0], [5.2, 164.0], [5.3, 164.0], [5.4, 164.0], [5.5, 164.0], [5.6, 164.0], [5.7, 164.0], [5.8, 164.0], [5.9, 165.0], [6.0, 165.0], [6.1, 165.0], [6.2, 165.0], [6.3, 165.0], [6.4, 165.0], [6.5, 165.0], [6.6, 165.0], [6.7, 165.0], [6.8, 165.0], [6.9, 165.0], [7.0, 165.0], [7.1, 165.0], [7.2, 165.0], [7.3, 165.0], [7.4, 165.0], [7.5, 166.0], [7.6, 166.0], [7.7, 166.0], [7.8, 166.0], [7.9, 166.0], [8.0, 166.0], [8.1, 166.0], [8.2, 166.0], [8.3, 166.0], [8.4, 166.0], [8.5, 166.0], [8.6, 166.0], [8.7, 166.0], [8.8, 166.0], [8.9, 166.0], [9.0, 166.0], [9.1, 166.0], [9.2, 166.0], [9.3, 166.0], [9.4, 166.0], [9.5, 166.0], [9.6, 167.0], [9.7, 167.0], [9.8, 167.0], [9.9, 167.0], [10.0, 167.0], [10.1, 167.0], [10.2, 167.0], [10.3, 167.0], [10.4, 167.0], [10.5, 167.0], [10.6, 167.0], [10.7, 167.0], [10.8, 167.0], [10.9, 167.0], [11.0, 167.0], [11.1, 167.0], [11.2, 167.0], [11.3, 167.0], [11.4, 167.0], [11.5, 167.0], [11.6, 167.0], [11.7, 167.0], [11.8, 168.0], [11.9, 168.0], [12.0, 168.0], [12.1, 168.0], [12.2, 168.0], [12.3, 168.0], [12.4, 168.0], [12.5, 168.0], [12.6, 168.0], [12.7, 168.0], [12.8, 168.0], [12.9, 168.0], [13.0, 168.0], [13.1, 168.0], [13.2, 168.0], [13.3, 168.0], [13.4, 168.0], [13.5, 168.0], [13.6, 168.0], [13.7, 168.0], [13.8, 168.0], [13.9, 168.0], [14.0, 168.0], [14.1, 168.0], [14.2, 168.0], [14.3, 168.0], [14.4, 168.0], [14.5, 169.0], [14.6, 169.0], [14.7, 169.0], [14.8, 169.0], [14.9, 169.0], [15.0, 169.0], [15.1, 169.0], [15.2, 169.0], [15.3, 169.0], [15.4, 169.0], [15.5, 169.0], [15.6, 169.0], [15.7, 169.0], [15.8, 169.0], [15.9, 169.0], [16.0, 169.0], [16.1, 169.0], [16.2, 169.0], [16.3, 169.0], [16.4, 169.0], [16.5, 169.0], [16.6, 169.0], [16.7, 169.0], [16.8, 169.0], [16.9, 169.0], [17.0, 169.0], [17.1, 170.0], [17.2, 170.0], [17.3, 170.0], [17.4, 170.0], [17.5, 170.0], [17.6, 170.0], [17.7, 170.0], [17.8, 170.0], [17.9, 170.0], [18.0, 170.0], [18.1, 170.0], [18.2, 170.0], [18.3, 170.0], [18.4, 170.0], [18.5, 170.0], [18.6, 170.0], [18.7, 170.0], [18.8, 170.0], [18.9, 170.0], [19.0, 170.0], [19.1, 170.0], [19.2, 170.0], [19.3, 170.0], [19.4, 170.0], [19.5, 170.0], [19.6, 170.0], [19.7, 170.0], [19.8, 170.0], [19.9, 171.0], [20.0, 171.0], [20.1, 171.0], [20.2, 171.0], [20.3, 171.0], [20.4, 171.0], [20.5, 171.0], [20.6, 171.0], [20.7, 171.0], [20.8, 171.0], [20.9, 171.0], [21.0, 171.0], [21.1, 171.0], [21.2, 171.0], [21.3, 171.0], [21.4, 171.0], [21.5, 171.0], [21.6, 171.0], [21.7, 171.0], [21.8, 171.0], [21.9, 171.0], [22.0, 171.0], [22.1, 171.0], [22.2, 171.0], [22.3, 171.0], [22.4, 171.0], [22.5, 171.0], [22.6, 171.0], [22.7, 171.0], [22.8, 171.0], [22.9, 172.0], [23.0, 172.0], [23.1, 172.0], [23.2, 172.0], [23.3, 172.0], [23.4, 172.0], [23.5, 172.0], [23.6, 172.0], [23.7, 172.0], [23.8, 172.0], [23.9, 172.0], [24.0, 172.0], [24.1, 172.0], [24.2, 172.0], [24.3, 172.0], [24.4, 172.0], [24.5, 172.0], [24.6, 172.0], [24.7, 172.0], [24.8, 172.0], [24.9, 172.0], [25.0, 172.0], [25.1, 172.0], [25.2, 172.0], [25.3, 172.0], [25.4, 172.0], [25.5, 172.0], [25.6, 172.0], [25.7, 172.0], [25.8, 173.0], [25.9, 173.0], [26.0, 173.0], [26.1, 173.0], [26.2, 173.0], [26.3, 173.0], [26.4, 173.0], [26.5, 173.0], [26.6, 173.0], [26.7, 173.0], [26.8, 173.0], [26.9, 173.0], [27.0, 173.0], [27.1, 173.0], [27.2, 173.0], [27.3, 173.0], [27.4, 173.0], [27.5, 173.0], [27.6, 173.0], [27.7, 173.0], [27.8, 173.0], [27.9, 173.0], [28.0, 173.0], [28.1, 173.0], [28.2, 173.0], [28.3, 173.0], [28.4, 173.0], [28.5, 173.0], [28.6, 174.0], [28.7, 174.0], [28.8, 174.0], [28.9, 174.0], [29.0, 174.0], [29.1, 174.0], [29.2, 174.0], [29.3, 174.0], [29.4, 174.0], [29.5, 174.0], [29.6, 174.0], [29.7, 174.0], [29.8, 174.0], [29.9, 174.0], [30.0, 174.0], [30.1, 174.0], [30.2, 174.0], [30.3, 174.0], [30.4, 174.0], [30.5, 174.0], [30.6, 174.0], [30.7, 174.0], [30.8, 174.0], [30.9, 174.0], [31.0, 174.0], [31.1, 174.0], [31.2, 175.0], [31.3, 175.0], [31.4, 175.0], [31.5, 175.0], [31.6, 175.0], [31.7, 175.0], [31.8, 175.0], [31.9, 175.0], [32.0, 175.0], [32.1, 175.0], [32.2, 175.0], [32.3, 175.0], [32.4, 175.0], [32.5, 175.0], [32.6, 175.0], [32.7, 175.0], [32.8, 175.0], [32.9, 175.0], [33.0, 175.0], [33.1, 175.0], [33.2, 175.0], [33.3, 175.0], [33.4, 175.0], [33.5, 175.0], [33.6, 175.0], [33.7, 175.0], [33.8, 176.0], [33.9, 176.0], [34.0, 176.0], [34.1, 176.0], [34.2, 176.0], [34.3, 176.0], [34.4, 176.0], [34.5, 176.0], [34.6, 176.0], [34.7, 176.0], [34.8, 176.0], [34.9, 176.0], [35.0, 176.0], [35.1, 176.0], [35.2, 176.0], [35.3, 176.0], [35.4, 176.0], [35.5, 176.0], [35.6, 176.0], [35.7, 176.0], [35.8, 176.0], [35.9, 176.0], [36.0, 176.0], [36.1, 176.0], [36.2, 176.0], [36.3, 176.0], [36.4, 177.0], [36.5, 177.0], [36.6, 177.0], [36.7, 177.0], [36.8, 177.0], [36.9, 177.0], [37.0, 177.0], [37.1, 177.0], [37.2, 177.0], [37.3, 177.0], [37.4, 177.0], [37.5, 177.0], [37.6, 177.0], [37.7, 177.0], [37.8, 177.0], [37.9, 177.0], [38.0, 177.0], [38.1, 177.0], [38.2, 177.0], [38.3, 177.0], [38.4, 177.0], [38.5, 177.0], [38.6, 177.0], [38.7, 177.0], [38.8, 178.0], [38.9, 178.0], [39.0, 178.0], [39.1, 178.0], [39.2, 178.0], [39.3, 178.0], [39.4, 178.0], [39.5, 178.0], [39.6, 178.0], [39.7, 178.0], [39.8, 178.0], [39.9, 178.0], [40.0, 178.0], [40.1, 178.0], [40.2, 178.0], [40.3, 178.0], [40.4, 178.0], [40.5, 178.0], [40.6, 178.0], [40.7, 178.0], [40.8, 178.0], [40.9, 178.0], [41.0, 178.0], [41.1, 179.0], [41.2, 179.0], [41.3, 179.0], [41.4, 179.0], [41.5, 179.0], [41.6, 179.0], [41.7, 179.0], [41.8, 179.0], [41.9, 179.0], [42.0, 179.0], [42.1, 179.0], [42.2, 179.0], [42.3, 179.0], [42.4, 179.0], [42.5, 179.0], [42.6, 179.0], [42.7, 179.0], [42.8, 179.0], [42.9, 179.0], [43.0, 179.0], [43.1, 179.0], [43.2, 179.0], [43.3, 180.0], [43.4, 180.0], [43.5, 180.0], [43.6, 180.0], [43.7, 180.0], [43.8, 180.0], [43.9, 180.0], [44.0, 180.0], [44.1, 180.0], [44.2, 180.0], [44.3, 180.0], [44.4, 180.0], [44.5, 180.0], [44.6, 180.0], [44.7, 180.0], [44.8, 180.0], [44.9, 180.0], [45.0, 180.0], [45.1, 180.0], [45.2, 180.0], [45.3, 181.0], [45.4, 181.0], [45.5, 181.0], [45.6, 181.0], [45.7, 181.0], [45.8, 181.0], [45.9, 181.0], [46.0, 181.0], [46.1, 181.0], [46.2, 181.0], [46.3, 181.0], [46.4, 181.0], [46.5, 181.0], [46.6, 181.0], [46.7, 181.0], [46.8, 181.0], [46.9, 181.0], [47.0, 181.0], [47.1, 181.0], [47.2, 182.0], [47.3, 182.0], [47.4, 182.0], [47.5, 182.0], [47.6, 182.0], [47.7, 182.0], [47.8, 182.0], [47.9, 182.0], [48.0, 182.0], [48.1, 182.0], [48.2, 182.0], [48.3, 182.0], [48.4, 182.0], [48.5, 182.0], [48.6, 182.0], [48.7, 182.0], [48.8, 182.0], [48.9, 182.0], [49.0, 183.0], [49.1, 183.0], [49.2, 183.0], [49.3, 183.0], [49.4, 183.0], [49.5, 183.0], [49.6, 183.0], [49.7, 183.0], [49.8, 183.0], [49.9, 183.0], [50.0, 183.0], [50.1, 183.0], [50.2, 183.0], [50.3, 183.0], [50.4, 183.0], [50.5, 183.0], [50.6, 183.0], [50.7, 184.0], [50.8, 184.0], [50.9, 184.0], [51.0, 184.0], [51.1, 184.0], [51.2, 184.0], [51.3, 184.0], [51.4, 184.0], [51.5, 184.0], [51.6, 184.0], [51.7, 184.0], [51.8, 184.0], [51.9, 184.0], [52.0, 184.0], [52.1, 184.0], [52.2, 184.0], [52.3, 185.0], [52.4, 185.0], [52.5, 185.0], [52.6, 185.0], [52.7, 185.0], [52.8, 185.0], [52.9, 185.0], [53.0, 185.0], [53.1, 185.0], [53.2, 185.0], [53.3, 185.0], [53.4, 185.0], [53.5, 185.0], [53.6, 185.0], [53.7, 186.0], [53.8, 186.0], [53.9, 186.0], [54.0, 186.0], [54.1, 186.0], [54.2, 186.0], [54.3, 186.0], [54.4, 186.0], [54.5, 186.0], [54.6, 186.0], [54.7, 186.0], [54.8, 186.0], [54.9, 186.0], [55.0, 186.0], [55.1, 187.0], [55.2, 187.0], [55.3, 187.0], [55.4, 187.0], [55.5, 187.0], [55.6, 187.0], [55.7, 187.0], [55.8, 187.0], [55.9, 187.0], [56.0, 187.0], [56.1, 187.0], [56.2, 187.0], [56.3, 187.0], [56.4, 188.0], [56.5, 188.0], [56.6, 188.0], [56.7, 188.0], [56.8, 188.0], [56.9, 188.0], [57.0, 188.0], [57.1, 188.0], [57.2, 188.0], [57.3, 188.0], [57.4, 188.0], [57.5, 188.0], [57.6, 189.0], [57.7, 189.0], [57.8, 189.0], [57.9, 189.0], [58.0, 189.0], [58.1, 189.0], [58.2, 189.0], [58.3, 189.0], [58.4, 189.0], [58.5, 189.0], [58.6, 189.0], [58.7, 189.0], [58.8, 190.0], [58.9, 190.0], [59.0, 190.0], [59.1, 190.0], [59.2, 190.0], [59.3, 190.0], [59.4, 190.0], [59.5, 190.0], [59.6, 190.0], [59.7, 190.0], [59.8, 190.0], [59.9, 191.0], [60.0, 191.0], [60.1, 191.0], [60.2, 191.0], [60.3, 191.0], [60.4, 191.0], [60.5, 191.0], [60.6, 191.0], [60.7, 191.0], [60.8, 191.0], [60.9, 192.0], [61.0, 192.0], [61.1, 192.0], [61.2, 192.0], [61.3, 192.0], [61.4, 192.0], [61.5, 192.0], [61.6, 192.0], [61.7, 192.0], [61.8, 192.0], [61.9, 192.0], [62.0, 193.0], [62.1, 193.0], [62.2, 193.0], [62.3, 193.0], [62.4, 193.0], [62.5, 193.0], [62.6, 193.0], [62.7, 193.0], [62.8, 193.0], [62.9, 194.0], [63.0, 194.0], [63.1, 194.0], [63.2, 194.0], [63.3, 194.0], [63.4, 194.0], [63.5, 194.0], [63.6, 194.0], [63.7, 194.0], [63.8, 194.0], [63.9, 195.0], [64.0, 195.0], [64.1, 195.0], [64.2, 195.0], [64.3, 195.0], [64.4, 195.0], [64.5, 195.0], [64.6, 195.0], [64.7, 196.0], [64.8, 196.0], [64.9, 196.0], [65.0, 196.0], [65.1, 196.0], [65.2, 196.0], [65.3, 196.0], [65.4, 196.0], [65.5, 197.0], [65.6, 197.0], [65.7, 197.0], [65.8, 197.0], [65.9, 197.0], [66.0, 197.0], [66.1, 197.0], [66.2, 197.0], [66.3, 198.0], [66.4, 198.0], [66.5, 198.0], [66.6, 198.0], [66.7, 198.0], [66.8, 198.0], [66.9, 198.0], [67.0, 199.0], [67.1, 199.0], [67.2, 199.0], [67.3, 199.0], [67.4, 199.0], [67.5, 199.0], [67.6, 199.0], [67.7, 200.0], [67.8, 200.0], [67.9, 200.0], [68.0, 200.0], [68.1, 200.0], [68.2, 200.0], [68.3, 200.0], [68.4, 201.0], [68.5, 201.0], [68.6, 201.0], [68.7, 201.0], [68.8, 201.0], [68.9, 201.0], [69.0, 201.0], [69.1, 202.0], [69.2, 202.0], [69.3, 202.0], [69.4, 202.0], [69.5, 202.0], [69.6, 202.0], [69.7, 203.0], [69.8, 203.0], [69.9, 203.0], [70.0, 203.0], [70.1, 203.0], [70.2, 203.0], [70.3, 204.0], [70.4, 204.0], [70.5, 204.0], [70.6, 204.0], [70.7, 204.0], [70.8, 205.0], [70.9, 205.0], [71.0, 205.0], [71.1, 205.0], [71.2, 205.0], [71.3, 206.0], [71.4, 206.0], [71.5, 206.0], [71.6, 206.0], [71.7, 206.0], [71.8, 207.0], [71.9, 207.0], [72.0, 207.0], [72.1, 207.0], [72.2, 207.0], [72.3, 207.0], [72.4, 208.0], [72.5, 208.0], [72.6, 208.0], [72.7, 208.0], [72.8, 209.0], [72.9, 209.0], [73.0, 209.0], [73.1, 209.0], [73.2, 209.0], [73.3, 210.0], [73.4, 210.0], [73.5, 210.0], [73.6, 210.0], [73.7, 211.0], [73.8, 211.0], [73.9, 211.0], [74.0, 211.0], [74.1, 211.0], [74.2, 212.0], [74.3, 212.0], [74.4, 212.0], [74.5, 212.0], [74.6, 213.0], [74.7, 213.0], [74.8, 213.0], [74.9, 214.0], [75.0, 214.0], [75.1, 214.0], [75.2, 214.0], [75.3, 215.0], [75.4, 215.0], [75.5, 215.0], [75.6, 215.0], [75.7, 216.0], [75.8, 216.0], [75.9, 216.0], [76.0, 217.0], [76.1, 217.0], [76.2, 217.0], [76.3, 218.0], [76.4, 218.0], [76.5, 218.0], [76.6, 218.0], [76.7, 219.0], [76.8, 219.0], [76.9, 219.0], [77.0, 220.0], [77.1, 220.0], [77.2, 220.0], [77.3, 221.0], [77.4, 221.0], [77.5, 222.0], [77.6, 222.0], [77.7, 222.0], [77.8, 222.0], [77.9, 223.0], [78.0, 223.0], [78.1, 223.0], [78.2, 224.0], [78.3, 224.0], [78.4, 224.0], [78.5, 225.0], [78.6, 225.0], [78.7, 226.0], [78.8, 226.0], [78.9, 226.0], [79.0, 227.0], [79.1, 227.0], [79.2, 227.0], [79.3, 228.0], [79.4, 228.0], [79.5, 229.0], [79.6, 229.0], [79.7, 230.0], [79.8, 230.0], [79.9, 230.0], [80.0, 231.0], [80.1, 231.0], [80.2, 232.0], [80.3, 232.0], [80.4, 233.0], [80.5, 233.0], [80.6, 234.0], [80.7, 234.0], [80.8, 234.0], [80.9, 235.0], [81.0, 235.0], [81.1, 236.0], [81.2, 236.0], [81.3, 237.0], [81.4, 237.0], [81.5, 238.0], [81.6, 239.0], [81.7, 239.0], [81.8, 240.0], [81.9, 240.0], [82.0, 241.0], [82.1, 241.0], [82.2, 242.0], [82.3, 243.0], [82.4, 243.0], [82.5, 244.0], [82.6, 244.0], [82.7, 245.0], [82.8, 246.0], [82.9, 246.0], [83.0, 247.0], [83.1, 248.0], [83.2, 248.0], [83.3, 249.0], [83.4, 250.0], [83.5, 250.0], [83.6, 251.0], [83.7, 252.0], [83.8, 253.0], [83.9, 253.0], [84.0, 254.0], [84.1, 255.0], [84.2, 256.0], [84.3, 256.0], [84.4, 257.0], [84.5, 258.0], [84.6, 259.0], [84.7, 260.0], [84.8, 261.0], [84.9, 262.0], [85.0, 263.0], [85.1, 264.0], [85.2, 265.0], [85.3, 266.0], [85.4, 267.0], [85.5, 268.0], [85.6, 268.0], [85.7, 269.0], [85.8, 270.0], [85.9, 271.0], [86.0, 272.0], [86.1, 273.0], [86.2, 274.0], [86.3, 276.0], [86.4, 277.0], [86.5, 278.0], [86.6, 279.0], [86.7, 280.0], [86.8, 282.0], [86.9, 283.0], [87.0, 284.0], [87.1, 285.0], [87.2, 286.0], [87.3, 287.0], [87.4, 289.0], [87.5, 290.0], [87.6, 291.0], [87.7, 292.0], [87.8, 293.0], [87.9, 295.0], [88.0, 296.0], [88.1, 297.0], [88.2, 298.0], [88.3, 300.0], [88.4, 301.0], [88.5, 303.0], [88.6, 304.0], [88.7, 306.0], [88.8, 307.0], [88.9, 309.0], [89.0, 311.0], [89.1, 312.0], [89.2, 314.0], [89.3, 316.0], [89.4, 318.0], [89.5, 320.0], [89.6, 321.0], [89.7, 323.0], [89.8, 325.0], [89.9, 327.0], [90.0, 330.0], [90.1, 332.0], [90.2, 334.0], [90.3, 337.0], [90.4, 339.0], [90.5, 342.0], [90.6, 345.0], [90.7, 347.0], [90.8, 350.0], [90.9, 353.0], [91.0, 357.0], [91.1, 361.0], [91.2, 365.0], [91.3, 368.0], [91.4, 371.0], [91.5, 374.0], [91.6, 378.0], [91.7, 382.0], [91.8, 386.0], [91.9, 391.0], [92.0, 395.0], [92.1, 399.0], [92.2, 405.0], [92.3, 409.0], [92.4, 415.0], [92.5, 421.0], [92.6, 427.0], [92.7, 433.0], [92.8, 438.0], [92.9, 445.0], [93.0, 451.0], [93.1, 457.0], [93.2, 463.0], [93.3, 470.0], [93.4, 480.0], [93.5, 489.0], [93.6, 497.0], [93.7, 507.0], [93.8, 516.0], [93.9, 527.0], [94.0, 538.0], [94.1, 547.0], [94.2, 555.0], [94.3, 565.0], [94.4, 583.0], [94.5, 602.0], [94.6, 617.0], [94.7, 636.0], [94.8, 653.0], [94.9, 673.0], [95.0, 689.0], [95.1, 715.0], [95.2, 738.0], [95.3, 763.0], [95.4, 782.0], [95.5, 806.0], [95.6, 848.0], [95.7, 879.0], [95.8, 925.0], [95.9, 970.0], [96.0, 1026.0], [96.1, 1067.0], [96.2, 1111.0], [96.3, 1163.0], [96.4, 1179.0], [96.5, 1188.0], [96.6, 1198.0], [96.7, 1213.0], [96.8, 1233.0], [96.9, 1252.0], [97.0, 1268.0], [97.1, 1284.0], [97.2, 1307.0], [97.3, 1340.0], [97.4, 1377.0], [97.5, 1412.0], [97.6, 1465.0], [97.7, 1527.0], [97.8, 1593.0], [97.9, 1639.0], [98.0, 1687.0], [98.1, 1785.0], [98.2, 1919.0], [98.3, 2085.0], [98.4, 2284.0], [98.5, 2543.0], [98.6, 3026.0], [98.7, 3356.0], [98.8, 3699.0], [98.9, 4201.0], [99.0, 4687.0], [99.1, 5157.0], [99.2, 6032.0], [99.3, 6846.0], [99.4, 7646.0], [99.5, 8345.0], [99.6, 10347.0], [99.7, 12457.0], [99.8, 15584.0], [99.9, 18211.0], [100.0, 62440.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 42622.0, "series": [{"data": [[100.0, 42622.0], [200.0, 12993.0], [300.0, 2408.0], [400.0, 961.0], [500.0, 539.0], [600.0, 350.0], [700.0, 274.0], [800.0, 171.0], [900.0, 130.0], [1000.0, 142.0], [1100.0, 272.0], [1200.0, 362.0], [1300.0, 182.0], [1400.0, 124.0], [1500.0, 95.0], [1600.0, 128.0], [1700.0, 56.0], [1800.0, 46.0], [1900.0, 44.0], [2000.0, 37.0], [2100.0, 32.0], [2300.0, 31.0], [2200.0, 25.0], [2400.0, 17.0], [2500.0, 17.0], [2600.0, 14.0], [2700.0, 13.0], [2800.0, 9.0], [2900.0, 15.0], [3000.0, 29.0], [3100.0, 10.0], [3200.0, 13.0], [3300.0, 41.0], [3400.0, 20.0], [3500.0, 12.0], [3700.0, 9.0], [3600.0, 10.0], [3800.0, 14.0], [3900.0, 13.0], [4000.0, 15.0], [4200.0, 10.0], [4300.0, 12.0], [4100.0, 11.0], [4400.0, 9.0], [4500.0, 16.0], [4600.0, 19.0], [4800.0, 15.0], [4700.0, 13.0], [4900.0, 11.0], [5100.0, 16.0], [5000.0, 13.0], [5200.0, 13.0], [5300.0, 12.0], [5400.0, 7.0], [5500.0, 6.0], [5600.0, 1.0], [5800.0, 5.0], [5700.0, 3.0], [5900.0, 6.0], [6000.0, 9.0], [6100.0, 9.0], [6200.0, 11.0], [6300.0, 10.0], [6500.0, 9.0], [6600.0, 5.0], [6400.0, 7.0], [6800.0, 6.0], [6700.0, 3.0], [6900.0, 9.0], [7000.0, 13.0], [7100.0, 3.0], [7300.0, 9.0], [7400.0, 6.0], [7200.0, 9.0], [7500.0, 9.0], [7600.0, 8.0], [7700.0, 10.0], [7800.0, 7.0], [7900.0, 12.0], [8100.0, 8.0], [8000.0, 5.0], [8200.0, 9.0], [8300.0, 9.0], [8400.0, 6.0], [8500.0, 5.0], [8600.0, 7.0], [8700.0, 1.0], [8800.0, 2.0], [9100.0, 1.0], [9000.0, 2.0], [8900.0, 3.0], [9200.0, 5.0], [9300.0, 7.0], [9500.0, 1.0], [9400.0, 2.0], [9600.0, 2.0], [9700.0, 3.0], [10200.0, 2.0], [9800.0, 3.0], [10100.0, 3.0], [9900.0, 1.0], [10000.0, 2.0], [10400.0, 2.0], [10500.0, 3.0], [10300.0, 2.0], [10600.0, 2.0], [10700.0, 1.0], [11100.0, 4.0], [10800.0, 6.0], [11200.0, 1.0], [10900.0, 1.0], [11600.0, 5.0], [11500.0, 3.0], [11400.0, 2.0], [11700.0, 3.0], [11300.0, 1.0], [11800.0, 5.0], [12200.0, 3.0], [12100.0, 3.0], [12000.0, 5.0], [11900.0, 5.0], [12300.0, 4.0], [12400.0, 4.0], [12500.0, 1.0], [12700.0, 4.0], [12600.0, 5.0], [13000.0, 3.0], [13200.0, 4.0], [12800.0, 1.0], [12900.0, 2.0], [13100.0, 3.0], [13300.0, 1.0], [13800.0, 3.0], [13400.0, 4.0], [13600.0, 4.0], [13700.0, 2.0], [14300.0, 2.0], [14000.0, 2.0], [13900.0, 1.0], [14500.0, 3.0], [14700.0, 1.0], [14800.0, 1.0], [14600.0, 1.0], [15100.0, 2.0], [15200.0, 3.0], [14900.0, 2.0], [15700.0, 5.0], [15400.0, 4.0], [15800.0, 3.0], [15600.0, 2.0], [15500.0, 4.0], [16200.0, 2.0], [16000.0, 8.0], [16300.0, 1.0], [15900.0, 1.0], [16400.0, 5.0], [16600.0, 3.0], [17200.0, 3.0], [16800.0, 4.0], [17000.0, 3.0], [17400.0, 1.0], [17600.0, 1.0], [18400.0, 3.0], [18200.0, 2.0], [17800.0, 2.0], [18600.0, 2.0], [19200.0, 4.0], [18800.0, 1.0], [19400.0, 3.0], [19000.0, 1.0], [21200.0, 2.0], [22200.0, 1.0], [21600.0, 1.0], [21800.0, 2.0], [23000.0, 1.0], [23200.0, 1.0], [24000.0, 1.0], [25200.0, 1.0], [25600.0, 2.0], [27000.0, 1.0], [28600.0, 1.0], [28000.0, 1.0], [28200.0, 1.0], [29000.0, 1.0], [30600.0, 1.0], [31000.0, 1.0], [52400.0, 1.0], [62400.0, 1.0], [37100.0, 1.0], [16700.0, 5.0], [17300.0, 4.0], [16900.0, 3.0], [18100.0, 1.0], [17500.0, 3.0], [17700.0, 1.0], [17900.0, 1.0], [18700.0, 1.0], [19100.0, 1.0], [19900.0, 3.0], [19500.0, 2.0], [20100.0, 1.0], [21500.0, 1.0], [20500.0, 2.0], [21100.0, 1.0], [21300.0, 1.0], [22100.0, 2.0], [22500.0, 1.0], [21700.0, 1.0], [23500.0, 1.0], [23700.0, 1.0], [24500.0, 1.0], [25700.0, 1.0], [27100.0, 1.0], [28500.0, 1.0], [29100.0, 1.0], [31500.0, 1.0], [31900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 62400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 58989.0, "series": [{"data": [[0.0, 58989.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2541.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1469.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.394403730846113, "minX": 1.72911912E12, "maxY": 255.43850267379653, "series": [{"data": [[1.72912032E12, 10.86143572621037], [1.72911936E12, 14.041543026706227], [1.72912002E12, 15.206666666666619], [1.72911972E12, 11.44154976619908], [1.72912038E12, 11.575248756218894], [1.72911942E12, 11.84602482388459], [1.72912008E12, 11.303434478159401], [1.72911912E12, 255.43850267379653], [1.72911978E12, 11.484584450402144], [1.72911948E12, 11.931552587646063], [1.72912014E12, 12.976549413735311], [1.72911918E12, 27.09553309422892], [1.72911984E12, 11.106185908038366], [1.72911954E12, 11.327164573694654], [1.7291202E12, 12.287989382879909], [1.72911924E12, 46.764705882352985], [1.7291199E12, 10.394403730846113], [1.7291196E12, 21.66131728518892], [1.72912026E12, 12.575808063978672], [1.7291193E12, 18.729145895646358], [1.72911996E12, 10.526982011991988], [1.72911966E12, 11.350848021283674]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912038E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 182.02646562631813, "minX": 1.0, "maxY": 15384.0, "series": [{"data": [[2.0, 204.09285714285724], [3.0, 205.75830815709972], [4.0, 222.71363636363645], [5.0, 204.57726465364118], [6.0, 211.08673469387762], [7.0, 196.91190979563078], [8.0, 192.15313463514892], [9.0, 182.02646562631813], [10.0, 187.57879558948258], [11.0, 198.0874203200199], [12.0, 210.86666666666594], [13.0, 220.97640358014652], [14.0, 230.90521148036208], [15.0, 243.33107454017366], [16.0, 267.71108263933337], [17.0, 267.1951219512193], [18.0, 421.5541082164323], [19.0, 296.25339925834385], [20.0, 306.52395209580845], [21.0, 295.79052823315106], [22.0, 305.4648437500004], [23.0, 354.6041666666669], [24.0, 414.9328703703703], [25.0, 367.4940334128877], [26.0, 583.5225988700566], [27.0, 381.92651757188486], [28.0, 640.2063492063489], [29.0, 415.6826923076924], [30.0, 660.6304347826084], [31.0, 821.5957446808508], [33.0, 595.2500000000001], [32.0, 533.513888888889], [35.0, 621.5727272727271], [34.0, 1356.6960784313721], [37.0, 600.9662921348314], [36.0, 1014.7524752475248], [39.0, 1286.3164556962026], [38.0, 527.3670886075951], [41.0, 735.6800000000001], [40.0, 692.2121212121209], [43.0, 551.4603174603176], [42.0, 621.2794117647062], [45.0, 883.1857142857144], [44.0, 875.2173913043476], [46.0, 761.4285714285713], [47.0, 456.96153846153834], [49.0, 728.5238095238096], [48.0, 635.1228070175437], [51.0, 1245.3731343283582], [50.0, 800.1999999999999], [53.0, 1192.859649122807], [52.0, 1241.8888888888887], [55.0, 1016.195652173913], [54.0, 2176.4782608695655], [57.0, 1256.267857142857], [56.0, 1044.4583333333333], [59.0, 997.0952380952381], [58.0, 913.5609756097563], [61.0, 740.7916666666666], [60.0, 1151.972972972973], [63.0, 874.5], [62.0, 1028.6521739130435], [67.0, 1020.8709677419355], [66.0, 987.7419354838709], [65.0, 819.2758620689656], [64.0, 841.6363636363636], [71.0, 2283.257142857143], [70.0, 1275.793103448276], [69.0, 1165.9642857142856], [68.0, 1634.2666666666667], [75.0, 840.5555555555555], [74.0, 2458.6956521739125], [73.0, 931.4166666666665], [72.0, 941.5652173913045], [79.0, 1290.578947368421], [78.0, 2093.296296296296], [76.0, 1143.16], [77.0, 1112.1666666666667], [82.0, 1303.7777777777778], [81.0, 1384.1999999999998], [80.0, 1143.45], [83.0, 1375.7142857142858], [87.0, 935.3636363636364], [86.0, 1045.083333333333], [85.0, 1140.090909090909], [84.0, 1053.7], [91.0, 746.6153846153846], [90.0, 1022.4117647058821], [89.0, 1147.6153846153843], [88.0, 854.6428571428572], [95.0, 1004.8333333333333], [94.0, 2311.6153846153848], [92.0, 959.5333333333334], [93.0, 2538.5384615384614], [99.0, 3457.6153846153843], [98.0, 2718.5714285714284], [97.0, 6917.636363636364], [96.0, 1209.4444444444443], [103.0, 2753.6153846153848], [102.0, 1129.4], [101.0, 706.0], [100.0, 1078.6249999999998], [107.0, 958.875], [106.0, 1563.375], [105.0, 2381.411764705882], [104.0, 1812.0666666666666], [111.0, 639.75], [110.0, 1391.909090909091], [108.0, 916.8125000000001], [109.0, 871.1999999999999], [115.0, 2794.1176470588234], [114.0, 795.6], [113.0, 3796.733333333334], [112.0, 816.2222222222222], [119.0, 1003.2], [118.0, 783.1818181818182], [117.0, 2993.4], [116.0, 775.0000000000001], [123.0, 666.25], [122.0, 1057.857142857143], [121.0, 1369.6250000000002], [120.0, 3231.538461538462], [127.0, 3338.6], [126.0, 2974.714285714286], [125.0, 5091.0], [124.0, 4260.125], [135.0, 2969.75], [134.0, 11430.25], [133.0, 3870.222222222222], [132.0, 2069.333333333333], [131.0, 1016.4], [130.0, 4607.75], [129.0, 962.8], [128.0, 1447.4], [143.0, 4803.749999999999], [142.0, 6102.25], [141.0, 3761.6666666666665], [140.0, 3088.0], [139.0, 1630.0], [138.0, 2338.8888888888887], [137.0, 4368.0], [136.0, 1491.4444444444443], [151.0, 5734.8], [150.0, 3575.3333333333335], [148.0, 1295.6363636363635], [147.0, 1349.8], [145.0, 5179.428571428572], [146.0, 3795.7142857142853], [144.0, 3561.857142857142], [149.0, 4630.8], [159.0, 1032.2], [158.0, 4000.166666666667], [157.0, 1123.25], [156.0, 4233.166666666666], [155.0, 1288.25], [153.0, 2209.8], [152.0, 958.75], [154.0, 3174.6666666666665], [167.0, 4829.75], [166.0, 5590.8], [165.0, 1412.8333333333335], [164.0, 953.2857142857143], [163.0, 1654.857142857143], [162.0, 1724.1999999999998], [161.0, 3828.2], [160.0, 1069.0], [175.0, 2647.888888888889], [174.0, 2075.5], [173.0, 4232.2], [172.0, 4409.5], [171.0, 5917.75], [170.0, 2057.1428571428573], [169.0, 1401.0], [168.0, 1146.2], [183.0, 3134.9285714285716], [182.0, 3392.3076923076924], [181.0, 4334.055555555556], [180.0, 5490.333333333333], [179.0, 8610.866666666667], [177.0, 11539.0], [176.0, 3355.428571428572], [178.0, 3274.8333333333335], [191.0, 3285.777777777778], [190.0, 2904.4999999999995], [189.0, 940.9], [188.0, 2729.6666666666665], [187.0, 4529.8], [186.0, 2717.5], [185.0, 4595.117647058824], [184.0, 3778.947368421053], [199.0, 2280.0], [198.0, 1954.5], [197.0, 4058.5], [196.0, 2764.375], [195.0, 2702.0], [194.0, 4782.166666666667], [193.0, 4193.25], [192.0, 5457.8], [206.0, 1825.25], [205.0, 2087.0], [203.0, 3013.75], [202.0, 3187.5], [201.0, 2892.6], [207.0, 1935.6666666666667], [204.0, 2503.5], [200.0, 3764.0], [215.0, 1786.6], [214.0, 1664.3333333333335], [213.0, 1883.7], [212.0, 1604.0], [211.0, 2601.4], [210.0, 1867.1818181818182], [209.0, 3061.833333333333], [208.0, 1938.0], [223.0, 4640.181818181818], [222.0, 4149.555555555556], [221.0, 4512.666666666667], [220.0, 1639.5], [219.0, 2301.0], [218.0, 2282.25], [217.0, 1902.8], [216.0, 1733.25], [231.0, 7709.818181818183], [230.0, 6938.0], [228.0, 7050.199999999999], [229.0, 8452.88888888889], [227.0, 7915.555555555556], [226.0, 6173.0], [225.0, 7202.777777777778], [224.0, 4142.5], [238.0, 1952.75], [236.0, 1455.0], [235.0, 2003.6666666666667], [234.0, 2040.3333333333333], [233.0, 2113.6666666666665], [232.0, 2142.6666666666665], [239.0, 1409.5], [237.0, 2354.0], [247.0, 1645.0], [246.0, 4618.25], [245.0, 1604.3333333333335], [244.0, 7852.0], [243.0, 2257.5], [242.0, 1842.75], [241.0, 2305.5], [240.0, 1834.0], [255.0, 5548.666666666667], [254.0, 9634.5], [253.0, 1410.25], [252.0, 1045.0], [251.0, 406.0], [250.0, 1192.25], [249.0, 5724.25], [248.0, 2173.6], [270.0, 1519.0], [271.0, 447.0], [269.0, 4543.0], [263.0, 7035.666666666666], [256.0, 2774.5], [258.0, 316.0], [257.0, 450.0], [259.0, 3574.0], [267.0, 2136.0], [266.0, 15384.0], [265.0, 9880.0], [264.0, 690.5], [262.0, 2707.0], [261.0, 691.0], [260.0, 1445.0], [286.0, 2472.0], [287.0, 4329.5], [285.0, 5195.0], [284.0, 364.0], [283.0, 320.0], [282.0, 8502.0], [281.0, 4876.333333333333], [280.0, 5735.666666666667], [279.0, 9131.0], [273.0, 399.0], [272.0, 440.0], [275.0, 3072.0], [274.0, 942.5], [278.0, 14893.5], [277.0, 7097.5], [276.0, 4388.0], [301.0, 2100.5], [303.0, 1064.5], [300.0, 470.0], [291.0, 1667.0], [290.0, 653.0], [289.0, 1411.0], [288.0, 4331.0], [299.0, 361.0], [298.0, 471.0], [297.0, 380.0], [296.0, 384.0], [295.0, 688.0], [294.0, 1634.0], [293.0, 485.0], [292.0, 582.0], [318.0, 3343.0], [319.0, 9466.5], [316.0, 9337.0], [307.0, 6202.25], [306.0, 1653.0], [305.0, 10980.0], [304.0, 1639.0], [315.0, 6174.0], [314.0, 5016.333333333334], [313.0, 7978.6], [312.0, 831.0], [311.0, 1173.0], [310.0, 3606.0], [309.0, 10647.111111111111], [308.0, 6230.0], [334.0, 4753.0], [335.0, 12823.0], [333.0, 4120.0], [332.0, 6271.5], [331.0, 3620.0], [330.0, 7741.0], [329.0, 4310.5], [327.0, 2361.0], [320.0, 2103.0], [323.0, 7775.0], [322.0, 5391.0], [326.0, 8831.0], [325.0, 909.0], [324.0, 1000.0], [350.0, 13804.0], [351.0, 8762.5], [349.0, 11241.333333333334], [348.0, 7839.571428571428], [347.0, 7165.0], [346.0, 6539.5], [345.0, 10133.0], [344.0, 9875.0], [343.0, 13774.6], [337.0, 11074.666666666666], [336.0, 5830.333333333333], [339.0, 8758.5], [338.0, 9232.5], [342.0, 10341.0], [341.0, 6886.666666666666], [340.0, 8397.0], [366.0, 4263.0], [367.0, 3462.0], [364.0, 4838.333333333333], [363.0, 3867.4], [362.0, 3741.6], [361.0, 5693.0], [360.0, 5797.4], [359.0, 5468.25], [353.0, 462.0], [352.0, 6050.0], [355.0, 3761.0], [354.0, 1603.0], [358.0, 3834.0], [356.0, 1958.0], [365.0, 5411.4], [382.0, 3778.285714285714], [381.0, 5976.133333333332], [380.0, 6210.4], [371.0, 3237.583333333333], [369.0, 6074.066666666667], [370.0, 3321.1428571428573], [368.0, 4718.857142857143], [379.0, 4189.7], [378.0, 6224.333333333333], [377.0, 4932.0], [376.0, 4585.555555555556], [383.0, 6922.384615384615], [375.0, 4310.454545454546], [373.0, 4137.999999999999], [374.0, 4329.222222222223], [372.0, 4720.714285714286], [398.0, 5071.888888888889], [399.0, 3195.666666666667], [396.0, 6172.8], [397.0, 4836.5], [387.0, 4863.545454545454], [386.0, 4963.071428571428], [385.0, 4290.8], [384.0, 5321.470588235295], [395.0, 6363.166666666667], [394.0, 6542.666666666666], [393.0, 4471.625000000001], [392.0, 4553.571428571428], [391.0, 7210.0], [390.0, 6233.142857142857], [389.0, 9462.750000000002], [388.0, 4118.7], [402.0, 3856.75], [403.0, 4778.222222222223], [413.0, 4809.666666666667], [412.0, 2554.1666666666665], [401.0, 4392.625], [400.0, 3021.8], [407.0, 7247.5], [406.0, 7695.5], [410.0, 4696.777777777777], [411.0, 1336.5], [409.0, 5164.8], [408.0, 6935.000000000001], [414.0, 1215.0], [405.0, 6651.75], [404.0, 5122.111111111111], [1.0, 204.9041916167664]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[20.140698412698416, 365.0277301587278]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 414.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2618.0, "minX": 1.72911912E12, "maxY": 3452007.8333333335, "series": [{"data": [[1.72912032E12, 3371013.25], [1.72911936E12, 3413816.6], [1.72912002E12, 3376684.45], [1.72911972E12, 3369888.066666667], [1.72912038E12, 1809853.1333333333], [1.72911942E12, 3355300.033333333], [1.72912008E12, 3375564.5166666666], [1.72911912E12, 1473296.1166666667], [1.72911978E12, 3358586.1666666665], [1.72911948E12, 3371064.7], [1.72912014E12, 3359809.6666666665], [1.72911918E12, 3452007.8333333335], [1.72911984E12, 3402523.933333333], [1.72911954E12, 3405960.35], [1.7291202E12, 3392453.566666667], [1.72911924E12, 3347424.433333333], [1.7291199E12, 3378910.6666666665], [1.7291196E12, 3366566.783333333], [1.72912026E12, 3377823.0833333335], [1.7291193E12, 3386786.3333333335], [1.72911996E12, 3378924.8833333333], [1.72911966E12, 3384577.7333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72912032E12, 5990.0], [1.72911936E12, 6066.0], [1.72912002E12, 6000.0], [1.72911972E12, 5988.0], [1.72912038E12, 3216.0], [1.72911942E12, 5962.0], [1.72912008E12, 5998.0], [1.72911912E12, 2618.0], [1.72911978E12, 5968.0], [1.72911948E12, 5990.0], [1.72912014E12, 5970.0], [1.72911918E12, 6134.0], [1.72911984E12, 6046.0], [1.72911954E12, 6052.0], [1.7291202E12, 6028.0], [1.72911924E12, 5948.0], [1.7291199E12, 6004.0], [1.7291196E12, 5982.0], [1.72912026E12, 6002.0], [1.7291193E12, 6018.0], [1.72911996E12, 6004.0], [1.72911966E12, 6014.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912038E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 180.91686143572596, "minX": 1.72911912E12, "maxY": 4800.349121466767, "series": [{"data": [[1.72912032E12, 180.91686143572596], [1.72911936E12, 262.0418727332677], [1.72912002E12, 236.98566666666684], [1.72911972E12, 204.54275217100863], [1.72912038E12, 192.88184079601982], [1.72911942E12, 222.91445823549122], [1.72912008E12, 180.96732244081355], [1.72911912E12, 4800.349121466767], [1.72911978E12, 199.11561662198335], [1.72911948E12, 213.9879799666113], [1.72912014E12, 194.50887772194304], [1.72911918E12, 711.413759373982], [1.72911984E12, 199.25868342705917], [1.72911954E12, 209.8050231328482], [1.7291202E12, 186.69708029197113], [1.72911924E12, 822.27193277311], [1.7291199E12, 191.4810126582276], [1.7291196E12, 309.58976930792414], [1.72912026E12, 190.5951349550154], [1.7291193E12, 350.5227650382182], [1.72911996E12, 186.68021319120572], [1.72911966E12, 200.87961423345553]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912038E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 136.77762938230387, "minX": 1.72911912E12, "maxY": 3568.0473644003087, "series": [{"data": [[1.72912032E12, 136.77762938230387], [1.72911936E12, 200.83382789317463], [1.72912002E12, 181.6876666666669], [1.72911972E12, 155.65764863059385], [1.72912038E12, 145.88370646766165], [1.72911942E12, 167.6021469305602], [1.72912008E12, 137.35811937312454], [1.72911912E12, 3568.0473644003087], [1.72911978E12, 150.6055630026813], [1.72911948E12, 161.6721202003338], [1.72912014E12, 149.16649916247908], [1.72911918E12, 448.656667753506], [1.72911984E12, 150.216341382732], [1.72911954E12, 159.7534699272965], [1.7291202E12, 141.79562043795593], [1.72911924E12, 604.8070588235296], [1.7291199E12, 145.2135243171223], [1.7291196E12, 241.08425275827489], [1.72912026E12, 146.35288237254264], [1.7291193E12, 264.71419076104957], [1.72911996E12, 141.29613590939354], [1.72911966E12, 151.82740272697046]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912038E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 88.32387312186971, "minX": 1.72911912E12, "maxY": 2277.841100076391, "series": [{"data": [[1.72912032E12, 88.32387312186971], [1.72911936E12, 127.58325090669301], [1.72912002E12, 121.75266666666681], [1.72911972E12, 102.51870407481631], [1.72912038E12, 94.79353233830841], [1.72911942E12, 109.02616571620266], [1.72912008E12, 89.8106035345118], [1.72911912E12, 2277.841100076391], [1.72911978E12, 98.16554959785518], [1.72911948E12, 106.59232053422386], [1.72912014E12, 100.30117252931299], [1.72911918E12, 313.1542223671341], [1.72911984E12, 97.9192854780021], [1.72911954E12, 104.7775941837412], [1.7291202E12, 92.48639681486401], [1.72911924E12, 408.1075630252098], [1.7291199E12, 94.44736842105266], [1.7291196E12, 177.07589434971604], [1.72912026E12, 97.10829723425509], [1.7291193E12, 175.46593552675327], [1.72911996E12, 91.732178547635], [1.72911966E12, 99.68905886265394]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912038E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 147.0, "minX": 1.72911912E12, "maxY": 62440.0, "series": [{"data": [[1.72912032E12, 1168.0], [1.72911936E12, 2092.0], [1.72912002E12, 3660.0], [1.72911972E12, 1311.0], [1.72912038E12, 1194.0], [1.72911942E12, 1264.0], [1.72912008E12, 1206.0], [1.72911912E12, 24561.0], [1.72911978E12, 1221.0], [1.72911948E12, 1398.0], [1.72912014E12, 1234.0], [1.72911918E12, 62440.0], [1.72911984E12, 1311.0], [1.72911954E12, 1336.0], [1.7291202E12, 1198.0], [1.72911924E12, 12339.0], [1.7291199E12, 1202.0], [1.7291196E12, 7364.0], [1.72912026E12, 1218.0], [1.7291193E12, 21809.0], [1.72911996E12, 1201.0], [1.72911966E12, 1220.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72912032E12, 198.0], [1.72911936E12, 346.0], [1.72912002E12, 263.9000000000001], [1.72911972E12, 250.0], [1.72912038E12, 233.0], [1.72911942E12, 302.0], [1.72912008E12, 193.0], [1.72911912E12, 13348.0], [1.72911978E12, 244.0], [1.72911948E12, 296.0], [1.72912014E12, 205.0], [1.72911918E12, 984.4000000000005], [1.72911984E12, 247.0], [1.72911954E12, 270.0], [1.7291202E12, 199.0], [1.72911924E12, 2090.5], [1.7291199E12, 222.0], [1.7291196E12, 437.0], [1.72912026E12, 202.0], [1.7291193E12, 605.0], [1.72911996E12, 215.0], [1.72911966E12, 247.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72912032E12, 285.1199999999999], [1.72911936E12, 1270.3199999999997], [1.72912002E12, 1248.9899999999998], [1.72911972E12, 652.0000000000036], [1.72912038E12, 370.0], [1.72911942E12, 734.5399999999995], [1.72912008E12, 253.0], [1.72911912E12, 21368.900000000012], [1.72911978E12, 440.3000000000002], [1.72911948E12, 562.2399999999998], [1.72912014E12, 1174.0], [1.72911918E12, 15579.240000000002], [1.72911984E12, 476.0799999999981], [1.72911954E12, 508.19000000000005], [1.7291202E12, 412.94999999999936], [1.72911924E12, 7221.75], [1.7291199E12, 382.0], [1.7291196E12, 1934.5199999999986], [1.72912026E12, 633.94], [1.7291193E12, 1485.5000000000005], [1.72911996E12, 334.849999999999], [1.72911966E12, 506.7600000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72912032E12, 213.19999999999982], [1.72911936E12, 712.0], [1.72912002E12, 546.8999999999996], [1.72911972E12, 312.25], [1.72912038E12, 280.54999999999995], [1.72911942E12, 423.8000000000002], [1.72912008E12, 202.0], [1.72911912E12, 16793.0], [1.72911978E12, 315.0], [1.72911948E12, 363.1999999999998], [1.72912014E12, 229.0], [1.72911918E12, 1487.999999999999], [1.72911984E12, 289.0], [1.72911954E12, 341.6500000000001], [1.7291202E12, 217.25], [1.72911924E12, 3846.0], [1.7291199E12, 275.0], [1.7291196E12, 1088.2000000000007], [1.72912026E12, 218.0], [1.7291193E12, 1140.5], [1.72911996E12, 251.0], [1.72911966E12, 298.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72912032E12, 154.0], [1.72911936E12, 151.0], [1.72912002E12, 149.0], [1.72911972E12, 151.0], [1.72912038E12, 154.0], [1.72911942E12, 154.0], [1.72912008E12, 153.0], [1.72911912E12, 184.0], [1.72911978E12, 155.0], [1.72911948E12, 154.0], [1.72912014E12, 153.0], [1.72911918E12, 162.0], [1.72911984E12, 153.0], [1.72911954E12, 154.0], [1.7291202E12, 147.0], [1.72911924E12, 159.0], [1.7291199E12, 154.0], [1.7291196E12, 155.0], [1.72912026E12, 150.0], [1.7291193E12, 162.0], [1.72911996E12, 152.0], [1.72911966E12, 152.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72912032E12, 175.0], [1.72911936E12, 196.0], [1.72912002E12, 181.0], [1.72911972E12, 180.0], [1.72912038E12, 178.0], [1.72911942E12, 187.0], [1.72912008E12, 174.0], [1.72911912E12, 2094.0], [1.72911978E12, 180.0], [1.72911948E12, 183.0], [1.72912014E12, 175.0], [1.72911918E12, 250.0], [1.72911984E12, 182.0], [1.72911954E12, 183.0], [1.7291202E12, 174.0], [1.72911924E12, 237.0], [1.7291199E12, 178.0], [1.7291196E12, 186.0], [1.72912026E12, 176.0], [1.7291193E12, 232.0], [1.72911996E12, 176.0], [1.72911966E12, 179.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912038E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 165.0, "minX": 1.0, "maxY": 7661.0, "series": [{"data": [[2.0, 1444.5], [3.0, 168.0], [4.0, 169.0], [5.0, 167.0], [6.0, 166.5], [7.0, 1553.0], [8.0, 514.5], [9.0, 195.0], [10.0, 169.5], [11.0, 201.0], [12.0, 171.5], [13.0, 294.0], [14.0, 204.0], [15.0, 612.0], [16.0, 1384.0], [17.0, 278.0], [18.0, 179.5], [19.0, 211.0], [20.0, 182.5], [21.0, 172.5], [23.0, 179.0], [24.0, 345.0], [25.0, 182.0], [26.0, 188.0], [27.0, 192.0], [28.0, 175.0], [29.0, 186.0], [30.0, 193.0], [31.0, 178.0], [33.0, 175.0], [32.0, 251.5], [34.0, 177.5], [35.0, 180.0], [37.0, 204.0], [36.0, 190.5], [38.0, 235.5], [39.0, 187.0], [41.0, 188.0], [40.0, 206.0], [43.0, 187.0], [42.0, 193.0], [45.0, 187.0], [44.0, 185.0], [46.0, 182.0], [47.0, 179.0], [49.0, 178.0], [48.0, 177.0], [50.0, 177.0], [51.0, 177.0], [52.0, 180.0], [53.0, 180.0], [54.0, 183.0], [55.0, 178.0], [56.0, 182.0], [57.0, 181.0], [58.0, 181.0], [59.0, 183.0], [61.0, 184.0], [60.0, 187.0], [63.0, 203.0], [62.0, 187.5], [65.0, 194.0], [67.0, 240.5], [64.0, 203.0], [66.0, 205.0], [70.0, 193.0], [68.0, 242.0], [69.0, 193.0], [71.0, 218.0], [74.0, 209.0], [72.0, 208.5], [75.0, 223.0], [73.0, 188.0], [79.0, 192.0], [77.0, 450.0], [76.0, 190.0], [78.0, 225.0], [81.0, 224.0], [82.0, 185.5], [80.0, 211.0], [83.0, 187.0], [84.0, 1352.5], [86.0, 190.0], [85.0, 180.0], [87.0, 181.0], [89.0, 292.5], [91.0, 2003.0], [90.0, 181.0], [88.0, 187.0], [95.0, 1758.0], [92.0, 334.0], [93.0, 266.0], [94.0, 184.0], [97.0, 6092.0], [96.0, 391.5], [98.0, 178.0], [103.0, 641.0], [101.0, 201.0], [109.0, 222.0], [122.0, 926.0], [126.0, 1659.0], [128.0, 2494.5], [1.0, 165.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 7661.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3209.0, "series": [{"data": [[2.0, 1424.0], [3.0, 128.0], [4.0, 127.0], [5.0, 127.0], [6.0, 124.0], [7.0, 200.5], [8.0, 493.0], [9.0, 153.0], [10.0, 128.0], [11.0, 161.0], [12.0, 128.0], [13.0, 159.0], [14.0, 149.5], [15.0, 546.0], [16.0, 888.5], [17.0, 196.0], [18.0, 135.0], [19.0, 161.0], [20.0, 138.5], [21.0, 130.5], [23.0, 136.0], [24.0, 247.0], [25.0, 137.0], [26.0, 136.0], [27.0, 143.0], [28.0, 133.0], [29.0, 139.0], [30.0, 147.5], [31.0, 136.0], [33.0, 134.0], [32.0, 180.5], [34.0, 134.0], [35.0, 137.0], [37.0, 153.0], [36.0, 143.5], [38.0, 175.0], [39.0, 140.0], [41.0, 142.0], [40.0, 151.0], [43.0, 141.0], [42.0, 143.0], [45.0, 140.0], [44.0, 139.0], [46.0, 137.0], [47.0, 135.0], [49.0, 135.0], [48.0, 134.0], [50.0, 134.0], [51.0, 134.0], [52.0, 136.0], [53.0, 136.0], [54.0, 138.0], [55.0, 134.0], [56.0, 138.0], [57.0, 136.0], [58.0, 137.0], [59.0, 138.0], [61.0, 140.0], [60.0, 141.0], [63.0, 150.0], [62.0, 141.0], [65.0, 146.0], [67.0, 174.5], [64.0, 151.0], [66.0, 152.0], [70.0, 146.0], [68.0, 177.5], [69.0, 145.0], [71.0, 162.5], [74.0, 158.0], [72.0, 154.0], [75.0, 163.5], [73.0, 141.0], [79.0, 142.5], [77.0, 295.0], [76.0, 141.0], [78.0, 172.0], [81.0, 159.0], [82.0, 142.0], [80.0, 155.0], [83.0, 140.0], [84.0, 1007.5], [86.0, 141.0], [85.0, 136.0], [87.0, 137.0], [89.0, 247.5], [91.0, 1199.0], [90.0, 135.0], [88.0, 141.5], [95.0, 1583.0], [92.0, 203.0], [93.0, 189.0], [94.0, 137.0], [97.0, 3209.0], [96.0, 311.0], [98.0, 134.0], [103.0, 504.0], [101.0, 148.0], [109.0, 163.0], [122.0, 521.0], [126.0, 1259.0], [128.0, 2030.5], [1.0, 124.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[64.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 22.716666666666665, "minX": 1.72911912E12, "maxY": 50.516666666666666, "series": [{"data": [[1.72912032E12, 50.083333333333336], [1.72911936E12, 50.5], [1.72912002E12, 50.0], [1.72911972E12, 49.93333333333333], [1.72912038E12, 26.6], [1.72911942E12, 49.55], [1.72912008E12, 50.0], [1.72911912E12, 22.716666666666665], [1.72911978E12, 49.78333333333333], [1.72911948E12, 49.95], [1.72912014E12, 49.916666666666664], [1.72911918E12, 50.4], [1.72911984E12, 50.31666666666667], [1.72911954E12, 50.516666666666666], [1.7291202E12, 50.083333333333336], [1.72911924E12, 49.61666666666667], [1.7291199E12, 49.983333333333334], [1.7291196E12, 49.86666666666667], [1.72912026E12, 49.88333333333333], [1.7291193E12, 50.13333333333333], [1.72911996E12, 50.03333333333333], [1.72911966E12, 50.13333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912038E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72911912E12, "maxY": 51.11666666666667, "series": [{"data": [[1.72912032E12, 49.916666666666664], [1.72911936E12, 50.55], [1.72912002E12, 50.0], [1.72911972E12, 49.9], [1.72912038E12, 26.8], [1.72911942E12, 49.68333333333333], [1.72912008E12, 49.983333333333334], [1.72911912E12, 21.816666666666666], [1.72911978E12, 49.733333333333334], [1.72911948E12, 49.916666666666664], [1.72912014E12, 49.75], [1.72911918E12, 51.11666666666667], [1.72911984E12, 50.38333333333333], [1.72911954E12, 50.43333333333333], [1.7291202E12, 50.233333333333334], [1.72911924E12, 49.56666666666667], [1.7291199E12, 50.03333333333333], [1.7291196E12, 49.85], [1.72912026E12, 50.016666666666666], [1.7291193E12, 50.15], [1.72911996E12, 50.03333333333333], [1.72911966E12, 50.11666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72911924E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72912038E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72911912E12, "maxY": 51.11666666666667, "series": [{"data": [[1.72912032E12, 49.916666666666664], [1.72911936E12, 50.55], [1.72912002E12, 50.0], [1.72911972E12, 49.9], [1.72912038E12, 26.8], [1.72911942E12, 49.68333333333333], [1.72912008E12, 49.983333333333334], [1.72911912E12, 21.816666666666666], [1.72911978E12, 49.733333333333334], [1.72911948E12, 49.916666666666664], [1.72912014E12, 49.75], [1.72911918E12, 51.11666666666667], [1.72911984E12, 50.38333333333333], [1.72911954E12, 50.43333333333333], [1.7291202E12, 50.233333333333334], [1.72911924E12, 49.56666666666667], [1.7291199E12, 50.03333333333333], [1.7291196E12, 49.85], [1.72912026E12, 50.016666666666666], [1.7291193E12, 50.15], [1.72911996E12, 50.03333333333333], [1.72911966E12, 50.11666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72911924E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912038E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72911912E12, "maxY": 51.11666666666667, "series": [{"data": [[1.72912032E12, 49.916666666666664], [1.72911936E12, 50.55], [1.72912002E12, 50.0], [1.72911972E12, 49.9], [1.72912038E12, 26.8], [1.72911942E12, 49.68333333333333], [1.72912008E12, 49.983333333333334], [1.72911912E12, 21.816666666666666], [1.72911978E12, 49.733333333333334], [1.72911948E12, 49.916666666666664], [1.72912014E12, 49.75], [1.72911918E12, 51.11666666666667], [1.72911984E12, 50.38333333333333], [1.72911954E12, 50.43333333333333], [1.7291202E12, 50.233333333333334], [1.72911924E12, 49.56666666666667], [1.7291199E12, 50.03333333333333], [1.7291196E12, 49.85], [1.72912026E12, 50.016666666666666], [1.7291193E12, 50.15], [1.72911996E12, 50.03333333333333], [1.72911966E12, 50.11666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72911924E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72912038E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

