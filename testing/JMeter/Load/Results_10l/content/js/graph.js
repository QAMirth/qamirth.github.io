/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 149.0, "minX": 0.0, "maxY": 264914.0, "series": [{"data": [[0.0, 149.0], [0.1, 156.0], [0.2, 157.0], [0.3, 158.0], [0.4, 159.0], [0.5, 159.0], [0.6, 160.0], [0.7, 160.0], [0.8, 161.0], [0.9, 161.0], [1.0, 161.0], [1.1, 161.0], [1.2, 162.0], [1.3, 162.0], [1.4, 162.0], [1.5, 162.0], [1.6, 162.0], [1.7, 163.0], [1.8, 163.0], [1.9, 163.0], [2.0, 163.0], [2.1, 163.0], [2.2, 163.0], [2.3, 164.0], [2.4, 164.0], [2.5, 164.0], [2.6, 164.0], [2.7, 164.0], [2.8, 164.0], [2.9, 164.0], [3.0, 165.0], [3.1, 165.0], [3.2, 165.0], [3.3, 165.0], [3.4, 165.0], [3.5, 165.0], [3.6, 165.0], [3.7, 165.0], [3.8, 165.0], [3.9, 165.0], [4.0, 166.0], [4.1, 166.0], [4.2, 166.0], [4.3, 166.0], [4.4, 166.0], [4.5, 166.0], [4.6, 166.0], [4.7, 166.0], [4.8, 166.0], [4.9, 166.0], [5.0, 166.0], [5.1, 166.0], [5.2, 167.0], [5.3, 167.0], [5.4, 167.0], [5.5, 167.0], [5.6, 167.0], [5.7, 167.0], [5.8, 167.0], [5.9, 167.0], [6.0, 167.0], [6.1, 167.0], [6.2, 167.0], [6.3, 167.0], [6.4, 167.0], [6.5, 168.0], [6.6, 168.0], [6.7, 168.0], [6.8, 168.0], [6.9, 168.0], [7.0, 168.0], [7.1, 168.0], [7.2, 168.0], [7.3, 168.0], [7.4, 168.0], [7.5, 168.0], [7.6, 168.0], [7.7, 168.0], [7.8, 168.0], [7.9, 168.0], [8.0, 169.0], [8.1, 169.0], [8.2, 169.0], [8.3, 169.0], [8.4, 169.0], [8.5, 169.0], [8.6, 169.0], [8.7, 169.0], [8.8, 169.0], [8.9, 169.0], [9.0, 169.0], [9.1, 169.0], [9.2, 169.0], [9.3, 169.0], [9.4, 169.0], [9.5, 170.0], [9.6, 170.0], [9.7, 170.0], [9.8, 170.0], [9.9, 170.0], [10.0, 170.0], [10.1, 170.0], [10.2, 170.0], [10.3, 170.0], [10.4, 170.0], [10.5, 170.0], [10.6, 170.0], [10.7, 170.0], [10.8, 170.0], [10.9, 170.0], [11.0, 170.0], [11.1, 170.0], [11.2, 170.0], [11.3, 171.0], [11.4, 171.0], [11.5, 171.0], [11.6, 171.0], [11.7, 171.0], [11.8, 171.0], [11.9, 171.0], [12.0, 171.0], [12.1, 171.0], [12.2, 171.0], [12.3, 171.0], [12.4, 171.0], [12.5, 171.0], [12.6, 171.0], [12.7, 171.0], [12.8, 171.0], [12.9, 171.0], [13.0, 172.0], [13.1, 172.0], [13.2, 172.0], [13.3, 172.0], [13.4, 172.0], [13.5, 172.0], [13.6, 172.0], [13.7, 172.0], [13.8, 172.0], [13.9, 172.0], [14.0, 172.0], [14.1, 172.0], [14.2, 172.0], [14.3, 172.0], [14.4, 172.0], [14.5, 172.0], [14.6, 172.0], [14.7, 172.0], [14.8, 172.0], [14.9, 172.0], [15.0, 173.0], [15.1, 173.0], [15.2, 173.0], [15.3, 173.0], [15.4, 173.0], [15.5, 173.0], [15.6, 173.0], [15.7, 173.0], [15.8, 173.0], [15.9, 173.0], [16.0, 173.0], [16.1, 173.0], [16.2, 173.0], [16.3, 173.0], [16.4, 173.0], [16.5, 173.0], [16.6, 173.0], [16.7, 173.0], [16.8, 174.0], [16.9, 174.0], [17.0, 174.0], [17.1, 174.0], [17.2, 174.0], [17.3, 174.0], [17.4, 174.0], [17.5, 174.0], [17.6, 174.0], [17.7, 174.0], [17.8, 174.0], [17.9, 174.0], [18.0, 174.0], [18.1, 174.0], [18.2, 174.0], [18.3, 174.0], [18.4, 174.0], [18.5, 174.0], [18.6, 174.0], [18.7, 174.0], [18.8, 175.0], [18.9, 175.0], [19.0, 175.0], [19.1, 175.0], [19.2, 175.0], [19.3, 175.0], [19.4, 175.0], [19.5, 175.0], [19.6, 175.0], [19.7, 175.0], [19.8, 175.0], [19.9, 175.0], [20.0, 175.0], [20.1, 175.0], [20.2, 175.0], [20.3, 175.0], [20.4, 175.0], [20.5, 175.0], [20.6, 175.0], [20.7, 176.0], [20.8, 176.0], [20.9, 176.0], [21.0, 176.0], [21.1, 176.0], [21.2, 176.0], [21.3, 176.0], [21.4, 176.0], [21.5, 176.0], [21.6, 176.0], [21.7, 176.0], [21.8, 176.0], [21.9, 176.0], [22.0, 176.0], [22.1, 176.0], [22.2, 176.0], [22.3, 176.0], [22.4, 176.0], [22.5, 176.0], [22.6, 176.0], [22.7, 177.0], [22.8, 177.0], [22.9, 177.0], [23.0, 177.0], [23.1, 177.0], [23.2, 177.0], [23.3, 177.0], [23.4, 177.0], [23.5, 177.0], [23.6, 177.0], [23.7, 177.0], [23.8, 177.0], [23.9, 177.0], [24.0, 177.0], [24.1, 177.0], [24.2, 177.0], [24.3, 177.0], [24.4, 177.0], [24.5, 177.0], [24.6, 178.0], [24.7, 178.0], [24.8, 178.0], [24.9, 178.0], [25.0, 178.0], [25.1, 178.0], [25.2, 178.0], [25.3, 178.0], [25.4, 178.0], [25.5, 178.0], [25.6, 178.0], [25.7, 178.0], [25.8, 178.0], [25.9, 178.0], [26.0, 178.0], [26.1, 178.0], [26.2, 178.0], [26.3, 178.0], [26.4, 178.0], [26.5, 179.0], [26.6, 179.0], [26.7, 179.0], [26.8, 179.0], [26.9, 179.0], [27.0, 179.0], [27.1, 179.0], [27.2, 179.0], [27.3, 179.0], [27.4, 179.0], [27.5, 179.0], [27.6, 179.0], [27.7, 179.0], [27.8, 179.0], [27.9, 179.0], [28.0, 179.0], [28.1, 179.0], [28.2, 179.0], [28.3, 180.0], [28.4, 180.0], [28.5, 180.0], [28.6, 180.0], [28.7, 180.0], [28.8, 180.0], [28.9, 180.0], [29.0, 180.0], [29.1, 180.0], [29.2, 180.0], [29.3, 180.0], [29.4, 180.0], [29.5, 180.0], [29.6, 180.0], [29.7, 180.0], [29.8, 180.0], [29.9, 180.0], [30.0, 181.0], [30.1, 181.0], [30.2, 181.0], [30.3, 181.0], [30.4, 181.0], [30.5, 181.0], [30.6, 181.0], [30.7, 181.0], [30.8, 181.0], [30.9, 181.0], [31.0, 181.0], [31.1, 181.0], [31.2, 181.0], [31.3, 181.0], [31.4, 181.0], [31.5, 181.0], [31.6, 182.0], [31.7, 182.0], [31.8, 182.0], [31.9, 182.0], [32.0, 182.0], [32.1, 182.0], [32.2, 182.0], [32.3, 182.0], [32.4, 182.0], [32.5, 182.0], [32.6, 182.0], [32.7, 182.0], [32.8, 182.0], [32.9, 182.0], [33.0, 182.0], [33.1, 183.0], [33.2, 183.0], [33.3, 183.0], [33.4, 183.0], [33.5, 183.0], [33.6, 183.0], [33.7, 183.0], [33.8, 183.0], [33.9, 183.0], [34.0, 183.0], [34.1, 183.0], [34.2, 183.0], [34.3, 183.0], [34.4, 183.0], [34.5, 183.0], [34.6, 183.0], [34.7, 184.0], [34.8, 184.0], [34.9, 184.0], [35.0, 184.0], [35.1, 184.0], [35.2, 184.0], [35.3, 184.0], [35.4, 184.0], [35.5, 184.0], [35.6, 184.0], [35.7, 184.0], [35.8, 184.0], [35.9, 184.0], [36.0, 184.0], [36.1, 184.0], [36.2, 185.0], [36.3, 185.0], [36.4, 185.0], [36.5, 185.0], [36.6, 185.0], [36.7, 185.0], [36.8, 185.0], [36.9, 185.0], [37.0, 185.0], [37.1, 185.0], [37.2, 185.0], [37.3, 185.0], [37.4, 185.0], [37.5, 185.0], [37.6, 186.0], [37.7, 186.0], [37.8, 186.0], [37.9, 186.0], [38.0, 186.0], [38.1, 186.0], [38.2, 186.0], [38.3, 186.0], [38.4, 186.0], [38.5, 186.0], [38.6, 186.0], [38.7, 186.0], [38.8, 186.0], [38.9, 186.0], [39.0, 187.0], [39.1, 187.0], [39.2, 187.0], [39.3, 187.0], [39.4, 187.0], [39.5, 187.0], [39.6, 187.0], [39.7, 187.0], [39.8, 187.0], [39.9, 187.0], [40.0, 187.0], [40.1, 187.0], [40.2, 187.0], [40.3, 188.0], [40.4, 188.0], [40.5, 188.0], [40.6, 188.0], [40.7, 188.0], [40.8, 188.0], [40.9, 188.0], [41.0, 188.0], [41.1, 188.0], [41.2, 188.0], [41.3, 188.0], [41.4, 188.0], [41.5, 189.0], [41.6, 189.0], [41.7, 189.0], [41.8, 189.0], [41.9, 189.0], [42.0, 189.0], [42.1, 189.0], [42.2, 189.0], [42.3, 189.0], [42.4, 189.0], [42.5, 189.0], [42.6, 190.0], [42.7, 190.0], [42.8, 190.0], [42.9, 190.0], [43.0, 190.0], [43.1, 190.0], [43.2, 190.0], [43.3, 190.0], [43.4, 190.0], [43.5, 190.0], [43.6, 190.0], [43.7, 190.0], [43.8, 191.0], [43.9, 191.0], [44.0, 191.0], [44.1, 191.0], [44.2, 191.0], [44.3, 191.0], [44.4, 191.0], [44.5, 191.0], [44.6, 191.0], [44.7, 191.0], [44.8, 192.0], [44.9, 192.0], [45.0, 192.0], [45.1, 192.0], [45.2, 192.0], [45.3, 192.0], [45.4, 192.0], [45.5, 192.0], [45.6, 192.0], [45.7, 192.0], [45.8, 193.0], [45.9, 193.0], [46.0, 193.0], [46.1, 193.0], [46.2, 193.0], [46.3, 193.0], [46.4, 193.0], [46.5, 193.0], [46.6, 193.0], [46.7, 194.0], [46.8, 194.0], [46.9, 194.0], [47.0, 194.0], [47.1, 194.0], [47.2, 194.0], [47.3, 194.0], [47.4, 194.0], [47.5, 195.0], [47.6, 195.0], [47.7, 195.0], [47.8, 195.0], [47.9, 195.0], [48.0, 195.0], [48.1, 195.0], [48.2, 195.0], [48.3, 196.0], [48.4, 196.0], [48.5, 196.0], [48.6, 196.0], [48.7, 196.0], [48.8, 196.0], [48.9, 196.0], [49.0, 196.0], [49.1, 197.0], [49.2, 197.0], [49.3, 197.0], [49.4, 197.0], [49.5, 197.0], [49.6, 197.0], [49.7, 197.0], [49.8, 198.0], [49.9, 198.0], [50.0, 198.0], [50.1, 198.0], [50.2, 198.0], [50.3, 198.0], [50.4, 199.0], [50.5, 199.0], [50.6, 199.0], [50.7, 199.0], [50.8, 199.0], [50.9, 199.0], [51.0, 200.0], [51.1, 200.0], [51.2, 200.0], [51.3, 200.0], [51.4, 200.0], [51.5, 200.0], [51.6, 200.0], [51.7, 201.0], [51.8, 201.0], [51.9, 201.0], [52.0, 201.0], [52.1, 201.0], [52.2, 202.0], [52.3, 202.0], [52.4, 202.0], [52.5, 202.0], [52.6, 202.0], [52.7, 203.0], [52.8, 203.0], [52.9, 203.0], [53.0, 203.0], [53.1, 203.0], [53.2, 204.0], [53.3, 204.0], [53.4, 204.0], [53.5, 204.0], [53.6, 204.0], [53.7, 205.0], [53.8, 205.0], [53.9, 205.0], [54.0, 206.0], [54.1, 206.0], [54.2, 206.0], [54.3, 206.0], [54.4, 207.0], [54.5, 207.0], [54.6, 207.0], [54.7, 207.0], [54.8, 208.0], [54.9, 208.0], [55.0, 208.0], [55.1, 208.0], [55.2, 209.0], [55.3, 209.0], [55.4, 209.0], [55.5, 209.0], [55.6, 210.0], [55.7, 210.0], [55.8, 210.0], [55.9, 211.0], [56.0, 211.0], [56.1, 211.0], [56.2, 212.0], [56.3, 212.0], [56.4, 212.0], [56.5, 213.0], [56.6, 213.0], [56.7, 214.0], [56.8, 214.0], [56.9, 214.0], [57.0, 215.0], [57.1, 215.0], [57.2, 215.0], [57.3, 216.0], [57.4, 216.0], [57.5, 217.0], [57.6, 217.0], [57.7, 218.0], [57.8, 218.0], [57.9, 219.0], [58.0, 219.0], [58.1, 220.0], [58.2, 220.0], [58.3, 220.0], [58.4, 221.0], [58.5, 222.0], [58.6, 222.0], [58.7, 223.0], [58.8, 223.0], [58.9, 224.0], [59.0, 225.0], [59.1, 225.0], [59.2, 226.0], [59.3, 227.0], [59.4, 228.0], [59.5, 228.0], [59.6, 229.0], [59.7, 230.0], [59.8, 231.0], [59.9, 232.0], [60.0, 232.0], [60.1, 233.0], [60.2, 234.0], [60.3, 235.0], [60.4, 236.0], [60.5, 236.0], [60.6, 237.0], [60.7, 238.0], [60.8, 239.0], [60.9, 240.0], [61.0, 241.0], [61.1, 243.0], [61.2, 244.0], [61.3, 245.0], [61.4, 246.0], [61.5, 247.0], [61.6, 249.0], [61.7, 250.0], [61.8, 252.0], [61.9, 253.0], [62.0, 254.0], [62.1, 255.0], [62.2, 257.0], [62.3, 259.0], [62.4, 261.0], [62.5, 262.0], [62.6, 264.0], [62.7, 266.0], [62.8, 268.0], [62.9, 269.0], [63.0, 271.0], [63.1, 274.0], [63.2, 276.0], [63.3, 279.0], [63.4, 281.0], [63.5, 283.0], [63.6, 286.0], [63.7, 288.0], [63.8, 290.0], [63.9, 293.0], [64.0, 296.0], [64.1, 298.0], [64.2, 302.0], [64.3, 305.0], [64.4, 308.0], [64.5, 311.0], [64.6, 314.0], [64.7, 317.0], [64.8, 320.0], [64.9, 324.0], [65.0, 327.0], [65.1, 330.0], [65.2, 335.0], [65.3, 338.0], [65.4, 342.0], [65.5, 347.0], [65.6, 352.0], [65.7, 358.0], [65.8, 361.0], [65.9, 365.0], [66.0, 370.0], [66.1, 374.0], [66.2, 379.0], [66.3, 384.0], [66.4, 389.0], [66.5, 394.0], [66.6, 399.0], [66.7, 404.0], [66.8, 409.0], [66.9, 414.0], [67.0, 420.0], [67.1, 424.0], [67.2, 428.0], [67.3, 431.0], [67.4, 433.0], [67.5, 436.0], [67.6, 439.0], [67.7, 441.0], [67.8, 443.0], [67.9, 445.0], [68.0, 446.0], [68.1, 448.0], [68.2, 450.0], [68.3, 451.0], [68.4, 453.0], [68.5, 455.0], [68.6, 457.0], [68.7, 458.0], [68.8, 460.0], [68.9, 462.0], [69.0, 464.0], [69.1, 466.0], [69.2, 467.0], [69.3, 469.0], [69.4, 471.0], [69.5, 472.0], [69.6, 474.0], [69.7, 476.0], [69.8, 477.0], [69.9, 478.0], [70.0, 480.0], [70.1, 482.0], [70.2, 483.0], [70.3, 484.0], [70.4, 485.0], [70.5, 486.0], [70.6, 488.0], [70.7, 489.0], [70.8, 490.0], [70.9, 491.0], [71.0, 491.0], [71.1, 492.0], [71.2, 493.0], [71.3, 495.0], [71.4, 496.0], [71.5, 497.0], [71.6, 498.0], [71.7, 499.0], [71.8, 500.0], [71.9, 501.0], [72.0, 502.0], [72.1, 503.0], [72.2, 504.0], [72.3, 505.0], [72.4, 506.0], [72.5, 508.0], [72.6, 508.0], [72.7, 509.0], [72.8, 510.0], [72.9, 511.0], [73.0, 512.0], [73.1, 513.0], [73.2, 515.0], [73.3, 516.0], [73.4, 517.0], [73.5, 518.0], [73.6, 519.0], [73.7, 520.0], [73.8, 521.0], [73.9, 522.0], [74.0, 524.0], [74.1, 524.0], [74.2, 525.0], [74.3, 526.0], [74.4, 528.0], [74.5, 528.0], [74.6, 530.0], [74.7, 531.0], [74.8, 533.0], [74.9, 534.0], [75.0, 535.0], [75.1, 537.0], [75.2, 539.0], [75.3, 540.0], [75.4, 542.0], [75.5, 544.0], [75.6, 546.0], [75.7, 548.0], [75.8, 550.0], [75.9, 552.0], [76.0, 554.0], [76.1, 556.0], [76.2, 559.0], [76.3, 562.0], [76.4, 564.0], [76.5, 567.0], [76.6, 569.0], [76.7, 573.0], [76.8, 576.0], [76.9, 579.0], [77.0, 582.0], [77.1, 584.0], [77.2, 588.0], [77.3, 591.0], [77.4, 595.0], [77.5, 599.0], [77.6, 603.0], [77.7, 608.0], [77.8, 613.0], [77.9, 618.0], [78.0, 625.0], [78.1, 632.0], [78.2, 637.0], [78.3, 644.0], [78.4, 653.0], [78.5, 659.0], [78.6, 667.0], [78.7, 675.0], [78.8, 680.0], [78.9, 688.0], [79.0, 696.0], [79.1, 704.0], [79.2, 711.0], [79.3, 720.0], [79.4, 728.0], [79.5, 735.0], [79.6, 743.0], [79.7, 750.0], [79.8, 757.0], [79.9, 762.0], [80.0, 768.0], [80.1, 773.0], [80.2, 779.0], [80.3, 783.0], [80.4, 786.0], [80.5, 791.0], [80.6, 794.0], [80.7, 798.0], [80.8, 803.0], [80.9, 807.0], [81.0, 812.0], [81.1, 817.0], [81.2, 822.0], [81.3, 826.0], [81.4, 831.0], [81.5, 836.0], [81.6, 841.0], [81.7, 847.0], [81.8, 854.0], [81.9, 863.0], [82.0, 872.0], [82.1, 880.0], [82.2, 891.0], [82.3, 901.0], [82.4, 910.0], [82.5, 917.0], [82.6, 924.0], [82.7, 932.0], [82.8, 941.0], [82.9, 950.0], [83.0, 959.0], [83.1, 970.0], [83.2, 983.0], [83.3, 1003.0], [83.4, 1024.0], [83.5, 1044.0], [83.6, 1061.0], [83.7, 1079.0], [83.8, 1098.0], [83.9, 1116.0], [84.0, 1132.0], [84.1, 1150.0], [84.2, 1164.0], [84.3, 1168.0], [84.4, 1170.0], [84.5, 1172.0], [84.6, 1173.0], [84.7, 1174.0], [84.8, 1176.0], [84.9, 1177.0], [85.0, 1177.0], [85.1, 1178.0], [85.2, 1179.0], [85.3, 1180.0], [85.4, 1181.0], [85.5, 1182.0], [85.6, 1182.0], [85.7, 1183.0], [85.8, 1184.0], [85.9, 1184.0], [86.0, 1185.0], [86.1, 1185.0], [86.2, 1186.0], [86.3, 1187.0], [86.4, 1188.0], [86.5, 1188.0], [86.6, 1189.0], [86.7, 1189.0], [86.8, 1190.0], [86.9, 1191.0], [87.0, 1191.0], [87.1, 1192.0], [87.2, 1193.0], [87.3, 1193.0], [87.4, 1194.0], [87.5, 1195.0], [87.6, 1196.0], [87.7, 1196.0], [87.8, 1197.0], [87.9, 1198.0], [88.0, 1199.0], [88.1, 1200.0], [88.2, 1201.0], [88.3, 1202.0], [88.4, 1203.0], [88.5, 1204.0], [88.6, 1205.0], [88.7, 1206.0], [88.8, 1208.0], [88.9, 1209.0], [89.0, 1211.0], [89.1, 1212.0], [89.2, 1215.0], [89.3, 1217.0], [89.4, 1220.0], [89.5, 1223.0], [89.6, 1227.0], [89.7, 1231.0], [89.8, 1236.0], [89.9, 1241.0], [90.0, 1247.0], [90.1, 1256.0], [90.2, 1262.0], [90.3, 1268.0], [90.4, 1275.0], [90.5, 1284.0], [90.6, 1292.0], [90.7, 1301.0], [90.8, 1311.0], [90.9, 1318.0], [91.0, 1329.0], [91.1, 1338.0], [91.2, 1350.0], [91.3, 1358.0], [91.4, 1366.0], [91.5, 1373.0], [91.6, 1381.0], [91.7, 1391.0], [91.8, 1398.0], [91.9, 1409.0], [92.0, 1423.0], [92.1, 1437.0], [92.2, 1448.0], [92.3, 1456.0], [92.4, 1467.0], [92.5, 1475.0], [92.6, 1484.0], [92.7, 1493.0], [92.8, 1499.0], [92.9, 1504.0], [93.0, 1510.0], [93.1, 1516.0], [93.2, 1521.0], [93.3, 1526.0], [93.4, 1532.0], [93.5, 1538.0], [93.6, 1543.0], [93.7, 1553.0], [93.8, 1563.0], [93.9, 1577.0], [94.0, 1593.0], [94.1, 1613.0], [94.2, 1634.0], [94.3, 1652.0], [94.4, 1673.0], [94.5, 1697.0], [94.6, 1719.0], [94.7, 1748.0], [94.8, 1775.0], [94.9, 1792.0], [95.0, 1808.0], [95.1, 1823.0], [95.2, 1844.0], [95.3, 1864.0], [95.4, 1895.0], [95.5, 1932.0], [95.6, 1959.0], [95.7, 1996.0], [95.8, 2054.0], [95.9, 2115.0], [96.0, 2173.0], [96.1, 2243.0], [96.2, 2344.0], [96.3, 2435.0], [96.4, 2562.0], [96.5, 2657.0], [96.6, 2874.0], [96.7, 3153.0], [96.8, 3182.0], [96.9, 3188.0], [97.0, 3193.0], [97.1, 3196.0], [97.2, 3201.0], [97.3, 3205.0], [97.4, 3210.0], [97.5, 3217.0], [97.6, 3230.0], [97.7, 3253.0], [97.8, 3300.0], [97.9, 3356.0], [98.0, 3438.0], [98.1, 3484.0], [98.2, 3522.0], [98.3, 3555.0], [98.4, 3636.0], [98.5, 3759.0], [98.6, 3841.0], [98.7, 3986.0], [98.8, 4233.0], [98.9, 4554.0], [99.0, 5160.0], [99.1, 6166.0], [99.2, 7196.0], [99.3, 7229.0], [99.4, 7493.0], [99.5, 7802.0], [99.6, 8724.0], [99.7, 11901.0], [99.8, 15221.0], [99.9, 19053.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 34676.0, "series": [{"data": [[264900.0, 1.0], [100.0, 34676.0], [32900.0, 1.0], [200.0, 8938.0], [59700.0, 1.0], [300.0, 1684.0], [400.0, 3482.0], [500.0, 3931.0], [600.0, 1045.0], [700.0, 1137.0], [800.0, 1058.0], [900.0, 682.0], [1000.0, 354.0], [1100.0, 2890.0], [1200.0, 1792.0], [1300.0, 761.0], [1400.0, 676.0], [1500.0, 835.0], [1600.0, 335.0], [1700.0, 284.0], [1800.0, 318.0], [1900.0, 206.0], [2000.0, 109.0], [2100.0, 111.0], [2300.0, 60.0], [2200.0, 92.0], [2400.0, 65.0], [2500.0, 62.0], [2600.0, 50.0], [2800.0, 41.0], [2700.0, 29.0], [2900.0, 28.0], [3000.0, 18.0], [3100.0, 332.0], [3200.0, 423.0], [3300.0, 107.0], [3400.0, 125.0], [3500.0, 148.0], [3700.0, 67.0], [3600.0, 61.0], [3800.0, 66.0], [3900.0, 45.0], [4000.0, 29.0], [4100.0, 27.0], [4200.0, 24.0], [4300.0, 26.0], [4400.0, 17.0], [4500.0, 11.0], [4600.0, 15.0], [71300.0, 1.0], [4700.0, 9.0], [4800.0, 9.0], [4900.0, 17.0], [5000.0, 10.0], [5100.0, 11.0], [5300.0, 12.0], [5200.0, 4.0], [5400.0, 6.0], [5600.0, 8.0], [5500.0, 12.0], [5700.0, 3.0], [5800.0, 4.0], [6100.0, 6.0], [5900.0, 4.0], [6000.0, 3.0], [6300.0, 4.0], [6200.0, 7.0], [6400.0, 5.0], [6600.0, 8.0], [6500.0, 2.0], [6700.0, 7.0], [6800.0, 4.0], [6900.0, 2.0], [7000.0, 5.0], [7100.0, 36.0], [7300.0, 15.0], [7400.0, 31.0], [7200.0, 80.0], [7500.0, 31.0], [7600.0, 21.0], [7900.0, 8.0], [7800.0, 14.0], [7700.0, 12.0], [8000.0, 11.0], [8100.0, 6.0], [8500.0, 7.0], [8300.0, 8.0], [8700.0, 6.0], [8200.0, 3.0], [8400.0, 5.0], [8600.0, 4.0], [9200.0, 6.0], [9100.0, 2.0], [8900.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9400.0, 4.0], [9500.0, 4.0], [9600.0, 2.0], [9300.0, 3.0], [9900.0, 3.0], [9800.0, 4.0], [10000.0, 3.0], [10200.0, 1.0], [10100.0, 1.0], [10300.0, 1.0], [10500.0, 1.0], [10700.0, 1.0], [10400.0, 2.0], [10600.0, 1.0], [10900.0, 2.0], [11100.0, 3.0], [10800.0, 3.0], [11200.0, 3.0], [11000.0, 3.0], [11700.0, 2.0], [11300.0, 5.0], [12000.0, 1.0], [11900.0, 2.0], [11800.0, 1.0], [12100.0, 1.0], [12200.0, 3.0], [12400.0, 1.0], [12700.0, 2.0], [12500.0, 1.0], [12300.0, 1.0], [13100.0, 1.0], [12900.0, 2.0], [13300.0, 5.0], [12800.0, 1.0], [13400.0, 2.0], [13500.0, 3.0], [13600.0, 2.0], [13700.0, 2.0], [13800.0, 2.0], [14000.0, 7.0], [14200.0, 4.0], [14300.0, 1.0], [13900.0, 1.0], [14400.0, 5.0], [14500.0, 5.0], [14600.0, 1.0], [14700.0, 1.0], [14800.0, 1.0], [15200.0, 19.0], [15000.0, 1.0], [15300.0, 5.0], [15100.0, 1.0], [15800.0, 5.0], [15400.0, 3.0], [15600.0, 6.0], [15500.0, 7.0], [15700.0, 1.0], [16300.0, 1.0], [16200.0, 2.0], [16100.0, 1.0], [16000.0, 3.0], [15900.0, 1.0], [16800.0, 1.0], [16600.0, 3.0], [17400.0, 1.0], [17200.0, 1.0], [17000.0, 1.0], [18400.0, 2.0], [17800.0, 1.0], [17600.0, 1.0], [19000.0, 2.0], [19200.0, 1.0], [18600.0, 1.0], [18800.0, 1.0], [20400.0, 1.0], [20200.0, 1.0], [19800.0, 1.0], [19600.0, 1.0], [20600.0, 1.0], [21200.0, 7.0], [22200.0, 1.0], [21600.0, 1.0], [21800.0, 1.0], [22000.0, 1.0], [23000.0, 1.0], [22800.0, 2.0], [23200.0, 1.0], [22600.0, 1.0], [25400.0, 2.0], [25800.0, 1.0], [26000.0, 1.0], [27600.0, 1.0], [26800.0, 1.0], [27800.0, 1.0], [29000.0, 1.0], [31600.0, 1.0], [41200.0, 1.0], [42000.0, 1.0], [48800.0, 1.0], [17300.0, 2.0], [16900.0, 2.0], [17100.0, 1.0], [17900.0, 2.0], [17700.0, 1.0], [17500.0, 1.0], [19300.0, 2.0], [19100.0, 1.0], [19700.0, 1.0], [19900.0, 1.0], [20700.0, 1.0], [21500.0, 4.0], [21300.0, 1.0], [21700.0, 1.0], [23100.0, 1.0], [23300.0, 1.0], [24100.0, 1.0], [25300.0, 1.0], [25900.0, 1.0], [26300.0, 1.0], [26100.0, 1.0], [27500.0, 2.0], [26900.0, 1.0], [27300.0, 1.0], [28700.0, 1.0], [29500.0, 1.0], [30700.0, 1.0], [37000.0, 1.0], [46600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 264900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 12.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 48854.0, "series": [{"data": [[0.0, 48854.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 14265.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4869.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 12.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 16.62237288135588, "minX": 1.72918578E12, "maxY": 151.21799307958472, "series": [{"data": [[1.72918656E12, 17.281291611185107], [1.72918626E12, 45.99834491890103], [1.72918692E12, 21.42528352234821], [1.72918596E12, 42.6058419243987], [1.72918662E12, 16.62237288135588], [1.72918632E12, 38.103413654618535], [1.72918698E12, 22.987205387205368], [1.72918602E12, 30.106774193548397], [1.72918668E12, 19.229180327868868], [1.72918638E12, 36.706719629261805], [1.72918704E12, 21.88907230108946], [1.72918608E12, 24.933130699088156], [1.72918578E12, 151.21799307958472], [1.72918674E12, 17.646169354838694], [1.72918644E12, 24.941961307538392], [1.7291871E12, 22.028776978417252], [1.72918614E12, 31.585573770491834], [1.7291868E12, 21.475715236194272], [1.72918584E12, 35.79132162967884], [1.7291865E12, 20.97513262599466], [1.7291862E12, 37.06554621848735], [1.72918686E12, 22.486898839137694], [1.7291859E12, 53.66944351882693]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291871E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 319.9712696941615, "minX": 1.0, "maxY": 17357.0, "series": [{"data": [[2.0, 832.4], [3.0, 793.5454545454546], [4.0, 845.4615384615385], [5.0, 835.7058823529413], [6.0, 909.8571428571432], [7.0, 490.7846153846154], [8.0, 539.8762886597938], [9.0, 551.9807692307692], [10.0, 471.2075471698115], [11.0, 404.1317204301074], [12.0, 354.9720062208395], [13.0, 319.9712696941615], [14.0, 363.13486176668926], [15.0, 342.81684981684987], [16.0, 355.7176898222939], [17.0, 337.91679650981615], [18.0, 372.12090752441003], [19.0, 383.7405026300411], [20.0, 396.39981867633696], [21.0, 399.0951283739304], [22.0, 389.3893370747098], [23.0, 437.49793046357604], [24.0, 452.45182724252527], [25.0, 461.1212452211901], [26.0, 476.2431444241321], [27.0, 519.5482804232809], [28.0, 504.3535690460318], [29.0, 566.3829787234044], [30.0, 594.6141025641024], [31.0, 768.3522654754294], [33.0, 609.0311915159077], [32.0, 615.4307210031344], [35.0, 709.4774774774767], [34.0, 619.0006203473944], [37.0, 685.1421768707476], [36.0, 711.9101198402138], [39.0, 787.3560165975109], [38.0, 706.1170130869915], [41.0, 678.8703888334994], [40.0, 731.9846292947565], [43.0, 722.2469733656172], [42.0, 786.5137130801687], [45.0, 969.5883256528409], [44.0, 853.3418079096041], [47.0, 856.8790496760254], [46.0, 911.1494464944649], [49.0, 924.3410852713178], [48.0, 699.4487179487182], [51.0, 887.5346153846153], [50.0, 1021.9050632911391], [53.0, 812.6591928251121], [52.0, 848.5078740157484], [55.0, 1467.7377049180327], [54.0, 994.1052631578945], [57.0, 835.313333333333], [56.0, 1517.6904761904752], [59.0, 882.3955223880599], [58.0, 1588.9659863945578], [61.0, 1205.6936936936931], [60.0, 891.6106194690267], [63.0, 1107.5098039215688], [62.0, 1681.7692307692307], [67.0, 799.7500000000002], [66.0, 1366.9104477611932], [65.0, 1408.5384615384614], [64.0, 842.6913580246916], [71.0, 1459.7000000000003], [70.0, 878.2388059701494], [69.0, 1454.7692307692307], [68.0, 1244.8000000000004], [74.0, 1548.078125], [73.0, 1424.3333333333333], [75.0, 1046.383333333333], [72.0, 1245.0166666666664], [79.0, 1196.2156862745098], [78.0, 1305.0192307692305], [77.0, 838.7954545454545], [76.0, 1511.7037037037035], [83.0, 1759.977777777777], [82.0, 2276.0652173913045], [81.0, 877.3207547169809], [80.0, 774.7551020408164], [87.0, 1256.9230769230771], [86.0, 1377.2272727272725], [85.0, 1226.833333333333], [84.0, 1826.1142857142859], [91.0, 1322.3076923076924], [90.0, 1763.4375], [89.0, 1816.5454545454545], [88.0, 1694.1470588235295], [95.0, 1919.5263157894738], [93.0, 2547.75], [92.0, 1975.8181818181818], [94.0, 1197.2142857142858], [99.0, 999.5], [98.0, 881.3571428571428], [97.0, 4898.055555555556], [96.0, 1138.25], [103.0, 1405.3636363636365], [102.0, 1354.85], [101.0, 2802.192307692308], [100.0, 1668.2608695652175], [106.0, 2763.8823529411766], [105.0, 1418.9375], [104.0, 2112.857142857143], [107.0, 1317.6923076923076], [110.0, 1635.6], [111.0, 2798.0833333333335], [108.0, 2391.388888888889], [109.0, 1419.8235294117646], [115.0, 995.625], [114.0, 768.9090909090908], [113.0, 1417.0], [112.0, 1261.1], [119.0, 2110.5], [118.0, 612.4], [116.0, 4894.333333333334], [117.0, 1844.0], [123.0, 811.0], [122.0, 1056.8], [121.0, 1368.6], [120.0, 3848.3333333333335], [127.0, 3605.3636363636365], [126.0, 998.3333333333334], [125.0, 3006.4], [124.0, 411.5], [135.0, 2515.0], [134.0, 2920.666666666667], [133.0, 2918.285714285714], [132.0, 4526.111111111112], [131.0, 4852.181818181818], [130.0, 3136.1666666666665], [129.0, 2955.5], [128.0, 4253.75], [143.0, 867.8], [142.0, 1600.7142857142858], [141.0, 1924.8], [140.0, 2400.714285714286], [139.0, 3831.3636363636365], [138.0, 2448.4], [137.0, 3882.0], [136.0, 5861.875], [151.0, 1840.4], [150.0, 2599.0], [149.0, 2260.1666666666665], [148.0, 618.4], [147.0, 1893.1], [146.0, 3633.0], [145.0, 1209.6], [144.0, 1781.846153846154], [159.0, 1719.0], [158.0, 893.0], [157.0, 1010.5], [156.0, 987.0], [155.0, 513.75], [154.0, 3794.166666666667], [153.0, 418.0], [152.0, 1848.0], [167.0, 2545.777777777778], [166.0, 1538.1666666666667], [165.0, 1252.5], [164.0, 1357.3333333333333], [163.0, 1705.0], [162.0, 860.6], [161.0, 7343.0], [160.0, 781.3333333333334], [175.0, 1206.4], [174.0, 1080.0], [173.0, 2693.6], [172.0, 2343.6666666666665], [171.0, 1234.3333333333335], [170.0, 1253.0], [169.0, 1336.142857142857], [168.0, 2146.875], [183.0, 4260.545454545454], [182.0, 1254.8333333333333], [181.0, 2800.714285714286], [180.0, 3929.2], [179.0, 2437.0000000000005], [178.0, 5297.900000000001], [177.0, 1456.3333333333335], [176.0, 6098.799999999999], [190.0, 4145.0], [189.0, 4420.636363636364], [191.0, 3985.0], [188.0, 5865.333333333333], [187.0, 3875.125], [186.0, 5561.375], [185.0, 559.75], [184.0, 2791.4999999999995], [199.0, 446.0], [198.0, 4633.0], [197.0, 4429.0], [196.0, 527.5], [194.0, 4493.4], [192.0, 2647.928571428572], [193.0, 1530.111111111111], [195.0, 970.0], [207.0, 1931.6666666666665], [205.0, 2853.3333333333335], [204.0, 3522.25], [206.0, 17357.0], [203.0, 3570.3333333333335], [202.0, 11157.0], [201.0, 2671.0], [200.0, 2912.0], [215.0, 4109.0], [214.0, 1594.0], [213.0, 972.5], [212.0, 2315.0], [211.0, 2524.0], [210.0, 1127.0], [209.0, 2103.3333333333335], [208.0, 6846.0], [223.0, 3309.333333333333], [222.0, 2297.4], [221.0, 2135.5], [220.0, 3777.2], [219.0, 2138.75], [218.0, 962.25], [217.0, 4114.2], [216.0, 5568.2], [231.0, 1439.0], [230.0, 1450.0], [229.0, 2516.5], [228.0, 1564.5], [227.0, 1067.75], [226.0, 3074.3333333333335], [225.0, 2738.333333333333], [224.0, 3723.6666666666665], [239.0, 417.0], [237.0, 452.5], [236.0, 3295.4], [235.0, 2644.0], [238.0, 390.0], [234.0, 16357.0], [233.0, 1499.5], [247.0, 4167.8], [246.0, 3327.75], [245.0, 4039.5], [243.0, 7121.666666666667], [244.0, 4884.0], [242.0, 4819.0], [241.0, 3351.5], [240.0, 5691.0], [255.0, 3327.5], [254.0, 3025.1], [253.0, 2277.9], [252.0, 4327.6], [251.0, 2128.75], [250.0, 3865.1428571428573], [249.0, 4197.4], [248.0, 4183.5], [271.0, 3173.75], [270.0, 3258.0], [269.0, 3836.9999999999995], [268.0, 2248.5], [259.0, 2817.611111111111], [258.0, 3183.333333333333], [257.0, 3400.769230769231], [256.0, 2959.0], [267.0, 2687.5333333333338], [266.0, 3676.8000000000006], [265.0, 2821.6666666666665], [264.0, 3777.8421052631584], [263.0, 3431.368421052631], [262.0, 3312.0416666666674], [261.0, 3466.1578947368425], [260.0, 2992.5333333333333], [274.0, 2800.583333333333], [278.0, 2552.6], [277.0, 1901.75], [276.0, 4147.0], [275.0, 4160.4], [272.0, 6137.125], [279.0, 2000.5], [273.0, 2957.0], [284.0, 2456.166666666667], [283.0, 4270.333333333333], [282.0, 1733.0], [281.0, 1545.0], [280.0, 1557.5], [286.0, 1758.1000000000001], [287.0, 5796.166666666666], [285.0, 6442.0], [303.0, 11956.0], [302.0, 7283.75], [301.0, 1554.0], [300.0, 8022.5], [291.0, 3171.666666666667], [290.0, 3499.5714285714284], [289.0, 5138.833333333334], [288.0, 3020.0833333333335], [299.0, 7645.0], [298.0, 10898.5], [297.0, 1985.0], [296.0, 1108.0], [295.0, 6310.0], [294.0, 6054.0], [293.0, 1306.6666666666667], [292.0, 4618.75], [319.0, 5403.333333333333], [316.0, 7805.666666666666], [307.0, 2820.0], [306.0, 1575.0], [305.0, 8691.0], [304.0, 1510.0], [314.0, 8893.0], [318.0, 11919.0], [317.0, 7933.5], [315.0, 14377.0], [313.0, 14499.0], [312.0, 1558.0], [311.0, 639.0], [310.0, 7035.0], [308.0, 680.0], [322.0, 6579.6], [324.0, 10005.333333333334], [323.0, 6601.428571428572], [321.0, 11314.0], [320.0, 1530.0], [330.0, 3522.0], [329.0, 9203.0], [328.0, 4334.0], [327.0, 8949.666666666666], [326.0, 11297.0], [325.0, 11243.0], [1.0, 1332.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[32.08964705882274, 612.9395000000009]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 330.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4028.0, "minX": 1.72918578E12, "maxY": 3488162.433333333, "series": [{"data": [[1.72918656E12, 3381158.85], [1.72918626E12, 3399262.65], [1.72918692E12, 3374448.4166666665], [1.72918596E12, 3275359.216666667], [1.72918662E12, 3320396.6666666665], [1.72918632E12, 3363192.35], [1.72918698E12, 3342845.466666667], [1.72918602E12, 3488162.433333333], [1.72918668E12, 3432965.1166666667], [1.72918638E12, 3399177.6333333333], [1.72918704E12, 3409240.6166666667], [1.72918608E12, 3332791.783333333], [1.72918578E12, 2267276.8333333335], [1.72918674E12, 3349680.3333333335], [1.72918644E12, 3374348.6166666667], [1.7291871E12, 3285480.283333333], [1.72918614E12, 3432972.4833333334], [1.7291868E12, 3383451.0166666666], [1.72918584E12, 3397985.55], [1.7291865E12, 3394660.2333333334], [1.7291862E12, 3348557.283333333], [1.72918686E12, 3393583.15], [1.7291859E12, 3377774.8833333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72918656E12, 6008.0], [1.72918626E12, 6040.0], [1.72918692E12, 5996.0], [1.72918596E12, 5820.0], [1.72918662E12, 5900.0], [1.72918632E12, 5976.0], [1.72918698E12, 5940.0], [1.72918602E12, 6198.0], [1.72918668E12, 6100.0], [1.72918638E12, 6040.0], [1.72918704E12, 6058.0], [1.72918608E12, 5922.0], [1.72918578E12, 4028.0], [1.72918674E12, 5952.0], [1.72918644E12, 5996.0], [1.7291871E12, 5838.0], [1.72918614E12, 6100.0], [1.7291868E12, 6012.0], [1.72918584E12, 6038.0], [1.7291865E12, 6032.0], [1.7291862E12, 5950.0], [1.72918686E12, 6030.0], [1.7291859E12, 6002.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291871E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 312.38203389830466, "minX": 1.72918578E12, "maxY": 2863.225407810185, "series": [{"data": [[1.72918656E12, 335.1657789613847], [1.72918626E12, 902.2340284673965], [1.72918692E12, 406.2545030020016], [1.72918596E12, 830.4639175257743], [1.72918662E12, 312.38203389830466], [1.72918632E12, 742.4738955823289], [1.72918698E12, 398.52390572390624], [1.72918602E12, 635.6935483870972], [1.72918668E12, 345.2954098360659], [1.72918638E12, 716.8669314796418], [1.72918704E12, 402.3816441069655], [1.72918608E12, 477.1425194191149], [1.72918578E12, 2863.225407810185], [1.72918674E12, 339.17842741935453], [1.72918644E12, 479.5503669112742], [1.7291871E12, 418.71428571428646], [1.72918614E12, 608.0708196721304], [1.7291868E12, 389.4537591483711], [1.72918584E12, 757.9198410069555], [1.7291865E12, 386.3849469496026], [1.7291862E12, 731.7247058823526], [1.72918686E12, 393.4709784411273], [1.7291859E12, 954.4911696101306]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291871E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 261.98101694915283, "minX": 1.72918578E12, "maxY": 1964.032130499261, "series": [{"data": [[1.72918656E12, 284.4663781624503], [1.72918626E12, 806.3061900033115], [1.72918692E12, 353.09806537691776], [1.72918596E12, 686.2017182130586], [1.72918662E12, 261.98101694915283], [1.72918632E12, 676.9494645247646], [1.72918698E12, 344.7531986531978], [1.72918602E12, 461.50064516129055], [1.72918668E12, 293.29770491803293], [1.72918638E12, 648.5091029460457], [1.72918704E12, 349.39022779795346], [1.72918608E12, 408.0077676460655], [1.72918578E12, 1964.032130499261], [1.72918674E12, 289.4200268817206], [1.72918644E12, 422.0790527018006], [1.7291871E12, 367.00959232613957], [1.72918614E12, 544.0406557377055], [1.7291868E12, 336.0854956753164], [1.72918584E12, 623.0622722755896], [1.7291865E12, 333.80271883289095], [1.7291862E12, 657.0588235294123], [1.72918686E12, 339.8756218905478], [1.7291859E12, 782.1176274575153]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291871E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 187.51593220338933, "minX": 1.72918578E12, "maxY": 1553.9214038556586, "series": [{"data": [[1.72918656E12, 205.4380825565911], [1.72918626E12, 651.4131082423046], [1.72918692E12, 269.17444963308884], [1.72918596E12, 530.9697594501712], [1.72918662E12, 187.51593220338933], [1.72918632E12, 547.4226907630529], [1.72918698E12, 259.346464646465], [1.72918602E12, 362.54516129032186], [1.72918668E12, 216.11377049180328], [1.72918638E12, 536.7130089374385], [1.72918704E12, 262.0723010894685], [1.72918608E12, 304.9331306990879], [1.72918578E12, 1553.9214038556586], [1.72918674E12, 212.17775537634392], [1.72918644E12, 315.2518345563711], [1.7291871E12, 280.1719767043502], [1.72918614E12, 427.69934426229565], [1.7291868E12, 248.06320691949415], [1.72918584E12, 427.2477641603184], [1.7291865E12, 249.7277851458888], [1.7291862E12, 524.565042016805], [1.72918686E12, 253.75456053067975], [1.7291859E12, 598.051982672442]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291871E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 149.0, "minX": 1.72918578E12, "maxY": 264914.0, "series": [{"data": [[1.72918656E12, 3455.0], [1.72918626E12, 21250.0], [1.72918692E12, 7229.0], [1.72918596E12, 22803.0], [1.72918662E12, 7199.0], [1.72918632E12, 22694.0], [1.72918698E12, 21225.0], [1.72918602E12, 264914.0], [1.72918668E12, 15216.0], [1.72918638E12, 21207.0], [1.72918704E12, 15530.0], [1.72918608E12, 7578.0], [1.72918578E12, 32941.0], [1.72918674E12, 7520.0], [1.72918644E12, 7606.0], [1.7291871E12, 21204.0], [1.72918614E12, 15251.0], [1.7291868E12, 8377.0], [1.72918584E12, 71303.0], [1.7291865E12, 15215.0], [1.7291862E12, 22004.0], [1.72918686E12, 7553.0], [1.7291859E12, 21528.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72918656E12, 767.0], [1.72918626E12, 1842.4000000000005], [1.72918692E12, 1181.1], [1.72918596E12, 1635.8000000000002], [1.72918662E12, 544.0], [1.72918632E12, 1540.0], [1.72918698E12, 1177.0], [1.72918602E12, 1255.0], [1.72918668E12, 806.8000000000002], [1.72918638E12, 1468.7000000000003], [1.72918704E12, 1175.0], [1.72918608E12, 1198.0], [1.72918578E12, 7809.0], [1.72918674E12, 631.1000000000067], [1.72918644E12, 1191.0], [1.7291871E12, 1179.0], [1.72918614E12, 1292.0], [1.7291868E12, 1176.0], [1.72918584E12, 1388.0], [1.7291865E12, 1174.0], [1.7291862E12, 1531.8000000000002], [1.72918686E12, 1179.0], [1.7291859E12, 1907.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72918656E12, 1929.7499999999773], [1.72918626E12, 7613.95], [1.72918692E12, 3204.0], [1.72918596E12, 6433.499999999981], [1.72918662E12, 1526.4699999999993], [1.72918632E12, 7199.33], [1.72918698E12, 3189.16], [1.72918602E12, 3326.0], [1.72918668E12, 1548.4699999999993], [1.72918638E12, 7225.95], [1.72918704E12, 3201.0], [1.72918608E12, 3274.420000000001], [1.72918578E12, 24000.94999999993], [1.72918674E12, 3187.23], [1.72918644E12, 3477.259999999994], [1.7291871E12, 3207.6000000000004], [1.72918614E12, 4361.899999999976], [1.7291868E12, 3193.0], [1.72918584E12, 3904.4000000000024], [1.7291865E12, 3189.0], [1.7291862E12, 7195.439999999999], [1.72918686E12, 3194.0], [1.7291859E12, 6980.320000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72918656E12, 1188.0], [1.72918626E12, 3300.149999999997], [1.72918692E12, 1216.0], [1.72918596E12, 2576.3499999999995], [1.72918662E12, 1182.0], [1.72918632E12, 3201.5499999999997], [1.72918698E12, 1210.0], [1.72918602E12, 1620.0], [1.72918668E12, 1193.0], [1.72918638E12, 3188.95], [1.72918704E12, 1216.5], [1.72918608E12, 1401.6000000000004], [1.72918578E12, 13796.5], [1.72918674E12, 1190.0], [1.72918644E12, 1502.2499999999986], [1.7291871E12, 1221.0], [1.72918614E12, 1934.0499999999984], [1.7291868E12, 1210.0], [1.72918584E12, 1794.0], [1.7291865E12, 1210.0], [1.7291862E12, 3189.0], [1.72918686E12, 1208.0], [1.7291859E12, 3279.3000000000015]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72918656E12, 154.0], [1.72918626E12, 149.0], [1.72918692E12, 156.0], [1.72918596E12, 155.0], [1.72918662E12, 153.0], [1.72918632E12, 153.0], [1.72918698E12, 152.0], [1.72918602E12, 154.0], [1.72918668E12, 153.0], [1.72918638E12, 153.0], [1.72918704E12, 153.0], [1.72918608E12, 151.0], [1.72918578E12, 159.0], [1.72918674E12, 153.0], [1.72918644E12, 152.0], [1.7291871E12, 155.0], [1.72918614E12, 152.0], [1.7291868E12, 153.0], [1.72918584E12, 156.0], [1.7291865E12, 155.0], [1.7291862E12, 152.0], [1.72918686E12, 153.0], [1.7291859E12, 166.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72918656E12, 181.0], [1.72918626E12, 329.5], [1.72918692E12, 188.0], [1.72918596E12, 435.5], [1.72918662E12, 179.0], [1.72918632E12, 203.0], [1.72918698E12, 190.0], [1.72918602E12, 214.0], [1.72918668E12, 185.0], [1.72918638E12, 201.0], [1.72918704E12, 188.0], [1.72918608E12, 211.0], [1.72918578E12, 1185.0], [1.72918674E12, 182.0], [1.72918644E12, 191.0], [1.7291871E12, 183.0], [1.72918614E12, 205.0], [1.7291868E12, 189.0], [1.72918584E12, 311.0], [1.7291865E12, 185.0], [1.7291862E12, 291.0], [1.72918686E12, 188.0], [1.7291859E12, 577.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291871E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 179.0, "minX": 5.0, "maxY": 27583.0, "series": [{"data": [[5.0, 1184.0], [7.0, 1840.0], [9.0, 509.0], [10.0, 690.5], [13.0, 180.0], [14.0, 2602.0], [15.0, 812.5], [17.0, 1336.0], [19.0, 1035.0], [20.0, 186.0], [21.0, 192.0], [22.0, 821.5], [23.0, 179.0], [24.0, 499.0], [25.0, 558.0], [26.0, 186.5], [27.0, 636.0], [28.0, 379.5], [29.0, 455.0], [30.0, 343.5], [31.0, 471.0], [32.0, 435.0], [33.0, 186.0], [34.0, 217.0], [35.0, 311.0], [36.0, 326.5], [37.0, 245.0], [39.0, 261.0], [38.0, 242.0], [40.0, 190.0], [41.0, 203.5], [43.0, 211.0], [42.0, 196.0], [44.0, 192.0], [45.0, 191.0], [46.0, 194.0], [47.0, 191.0], [48.0, 190.0], [49.0, 190.0], [51.0, 193.0], [50.0, 191.0], [52.0, 192.0], [53.0, 193.0], [54.0, 193.0], [55.0, 191.0], [56.0, 195.0], [57.0, 195.0], [58.0, 197.0], [59.0, 207.5], [61.0, 384.0], [60.0, 206.0], [63.0, 236.0], [62.0, 212.0], [67.0, 299.0], [64.0, 236.5], [65.0, 201.0], [66.0, 194.0], [68.0, 509.0], [70.0, 199.0], [69.0, 187.0], [71.0, 189.0], [74.0, 440.5], [73.0, 285.5], [72.0, 388.5], [75.0, 190.0], [78.0, 311.0], [79.0, 273.0], [76.0, 683.0], [77.0, 217.0], [81.0, 1229.5], [82.0, 607.0], [80.0, 213.5], [84.0, 1122.0], [85.0, 311.0], [86.0, 1427.5], [87.0, 1224.0], [90.0, 376.5], [89.0, 210.0], [93.0, 699.0], [96.0, 730.5], [98.0, 1430.0], [103.0, 193.0], [106.0, 220.5], [108.0, 254.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[36.0, 13330.5], [48.0, 7294.0], [49.0, 26003.0], [53.0, 10208.0], [58.0, 19392.0], [60.0, 27583.0], [31.0, 9305.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 108.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 5.0, "maxY": 2343.5, "series": [{"data": [[5.0, 1137.0], [7.0, 1545.5], [9.0, 461.0], [10.0, 644.5], [13.0, 136.0], [14.0, 2343.5], [15.0, 406.0], [17.0, 837.5], [19.0, 508.0], [20.0, 140.0], [21.0, 143.0], [22.0, 660.0], [23.0, 136.0], [24.0, 288.0], [25.0, 373.0], [26.0, 139.0], [27.0, 446.5], [28.0, 216.5], [29.0, 327.0], [30.0, 214.0], [31.0, 348.0], [32.0, 293.5], [33.0, 142.0], [34.0, 152.5], [35.0, 208.0], [36.0, 211.5], [37.0, 167.0], [39.0, 180.0], [38.0, 167.0], [40.0, 143.0], [41.0, 147.0], [43.0, 155.5], [42.0, 145.0], [44.0, 143.0], [45.0, 142.0], [46.0, 144.0], [47.0, 143.0], [48.0, 142.0], [49.0, 142.0], [51.0, 144.0], [50.0, 143.0], [52.0, 144.0], [53.0, 144.0], [54.0, 143.0], [55.0, 142.0], [56.0, 146.0], [57.0, 146.0], [58.0, 147.0], [59.0, 151.0], [61.0, 283.5], [60.0, 153.0], [63.0, 175.0], [62.0, 154.5], [67.0, 225.0], [64.0, 164.5], [65.0, 150.5], [66.0, 146.0], [68.0, 391.0], [70.0, 150.0], [69.0, 142.0], [71.0, 141.0], [74.0, 281.0], [73.0, 194.5], [72.0, 318.5], [75.0, 142.0], [78.0, 168.0], [79.0, 208.5], [76.0, 494.5], [77.0, 164.0], [81.0, 864.5], [82.0, 443.0], [80.0, 159.0], [84.0, 934.5], [85.0, 233.0], [86.0, 1052.0], [87.0, 1019.0], [90.0, 295.0], [89.0, 157.0], [93.0, 416.0], [96.0, 552.0], [98.0, 1260.0], [103.0, 142.0], [106.0, 165.0], [108.0, 179.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[36.0, 0.0], [48.0, 0.0], [49.0, 0.0], [53.0, 0.0], [58.0, 0.0], [60.0, 0.0], [31.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 108.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 34.55, "minX": 1.72918578E12, "maxY": 51.45, "series": [{"data": [[1.72918656E12, 50.0], [1.72918626E12, 50.13333333333333], [1.72918692E12, 49.983333333333334], [1.72918596E12, 48.25], [1.72918662E12, 49.28333333333333], [1.72918632E12, 49.9], [1.72918698E12, 49.5], [1.72918602E12, 51.45], [1.72918668E12, 50.71666666666667], [1.72918638E12, 50.28333333333333], [1.72918704E12, 50.53333333333333], [1.72918608E12, 49.583333333333336], [1.72918578E12, 34.55], [1.72918674E12, 49.7], [1.72918644E12, 49.666666666666664], [1.7291871E12, 48.35], [1.72918614E12, 50.81666666666667], [1.7291868E12, 50.18333333333333], [1.72918584E12, 50.0], [1.7291865E12, 50.35], [1.7291862E12, 49.666666666666664], [1.72918686E12, 50.1], [1.7291859E12, 50.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291871E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918578E12, "maxY": 51.65, "series": [{"data": [[1.72918656E12, 50.06666666666667], [1.72918626E12, 50.333333333333336], [1.72918692E12, 49.96666666666667], [1.72918596E12, 48.5], [1.72918662E12, 49.166666666666664], [1.72918632E12, 49.8], [1.72918698E12, 49.5], [1.72918602E12, 51.65], [1.72918668E12, 50.833333333333336], [1.72918638E12, 50.333333333333336], [1.72918704E12, 50.483333333333334], [1.72918608E12, 49.35], [1.72918578E12, 33.56666666666667], [1.72918674E12, 49.6], [1.72918644E12, 49.96666666666667], [1.7291871E12, 48.65], [1.72918614E12, 50.833333333333336], [1.7291868E12, 50.1], [1.72918584E12, 50.31666666666667], [1.7291865E12, 50.266666666666666], [1.7291862E12, 49.583333333333336], [1.72918686E12, 50.25], [1.7291859E12, 50.016666666666666]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72918578E12, 0.15], [1.72918626E12, 0.016666666666666666], [1.72918602E12, 0.016666666666666666], [1.72918638E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291871E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918578E12, "maxY": 51.65, "series": [{"data": [[1.72918656E12, 50.06666666666667], [1.72918626E12, 50.333333333333336], [1.72918692E12, 49.96666666666667], [1.72918596E12, 48.5], [1.72918662E12, 49.166666666666664], [1.72918632E12, 49.8], [1.72918698E12, 49.5], [1.72918602E12, 51.65], [1.72918668E12, 50.833333333333336], [1.72918638E12, 50.333333333333336], [1.72918704E12, 50.483333333333334], [1.72918608E12, 49.35], [1.72918578E12, 33.56666666666667], [1.72918674E12, 49.6], [1.72918644E12, 49.96666666666667], [1.7291871E12, 48.65], [1.72918614E12, 50.833333333333336], [1.7291868E12, 50.1], [1.72918584E12, 50.31666666666667], [1.7291865E12, 50.266666666666666], [1.7291862E12, 49.583333333333336], [1.72918686E12, 50.25], [1.7291859E12, 50.016666666666666]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72918578E12, 0.15], [1.72918626E12, 0.016666666666666666], [1.72918602E12, 0.016666666666666666], [1.72918638E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291871E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918578E12, "maxY": 51.65, "series": [{"data": [[1.72918656E12, 50.06666666666667], [1.72918626E12, 50.333333333333336], [1.72918692E12, 49.96666666666667], [1.72918596E12, 48.5], [1.72918662E12, 49.166666666666664], [1.72918632E12, 49.8], [1.72918698E12, 49.5], [1.72918602E12, 51.65], [1.72918668E12, 50.833333333333336], [1.72918638E12, 50.333333333333336], [1.72918704E12, 50.483333333333334], [1.72918608E12, 49.35], [1.72918578E12, 33.56666666666667], [1.72918674E12, 49.6], [1.72918644E12, 49.96666666666667], [1.7291871E12, 48.65], [1.72918614E12, 50.833333333333336], [1.7291868E12, 50.1], [1.72918584E12, 50.31666666666667], [1.7291865E12, 50.266666666666666], [1.7291862E12, 49.583333333333336], [1.72918686E12, 50.25], [1.7291859E12, 50.016666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72918578E12, 0.15], [1.72918626E12, 0.016666666666666666], [1.72918602E12, 0.016666666666666666], [1.72918638E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291871E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

