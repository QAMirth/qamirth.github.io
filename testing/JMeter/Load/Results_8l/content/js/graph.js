/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 145.0, "minX": 0.0, "maxY": 167777.0, "series": [{"data": [[0.0, 145.0], [0.1, 153.0], [0.2, 155.0], [0.3, 156.0], [0.4, 156.0], [0.5, 157.0], [0.6, 157.0], [0.7, 158.0], [0.8, 158.0], [0.9, 159.0], [1.0, 159.0], [1.1, 159.0], [1.2, 159.0], [1.3, 160.0], [1.4, 160.0], [1.5, 160.0], [1.6, 160.0], [1.7, 160.0], [1.8, 161.0], [1.9, 161.0], [2.0, 161.0], [2.1, 161.0], [2.2, 161.0], [2.3, 161.0], [2.4, 161.0], [2.5, 162.0], [2.6, 162.0], [2.7, 162.0], [2.8, 162.0], [2.9, 162.0], [3.0, 162.0], [3.1, 162.0], [3.2, 162.0], [3.3, 163.0], [3.4, 163.0], [3.5, 163.0], [3.6, 163.0], [3.7, 163.0], [3.8, 163.0], [3.9, 163.0], [4.0, 163.0], [4.1, 163.0], [4.2, 163.0], [4.3, 163.0], [4.4, 163.0], [4.5, 164.0], [4.6, 164.0], [4.7, 164.0], [4.8, 164.0], [4.9, 164.0], [5.0, 164.0], [5.1, 164.0], [5.2, 164.0], [5.3, 164.0], [5.4, 164.0], [5.5, 164.0], [5.6, 164.0], [5.7, 164.0], [5.8, 164.0], [5.9, 164.0], [6.0, 165.0], [6.1, 165.0], [6.2, 165.0], [6.3, 165.0], [6.4, 165.0], [6.5, 165.0], [6.6, 165.0], [6.7, 165.0], [6.8, 165.0], [6.9, 165.0], [7.0, 165.0], [7.1, 165.0], [7.2, 165.0], [7.3, 165.0], [7.4, 165.0], [7.5, 165.0], [7.6, 165.0], [7.7, 166.0], [7.8, 166.0], [7.9, 166.0], [8.0, 166.0], [8.1, 166.0], [8.2, 166.0], [8.3, 166.0], [8.4, 166.0], [8.5, 166.0], [8.6, 166.0], [8.7, 166.0], [8.8, 166.0], [8.9, 166.0], [9.0, 166.0], [9.1, 166.0], [9.2, 166.0], [9.3, 166.0], [9.4, 166.0], [9.5, 166.0], [9.6, 166.0], [9.7, 167.0], [9.8, 167.0], [9.9, 167.0], [10.0, 167.0], [10.1, 167.0], [10.2, 167.0], [10.3, 167.0], [10.4, 167.0], [10.5, 167.0], [10.6, 167.0], [10.7, 167.0], [10.8, 167.0], [10.9, 167.0], [11.0, 167.0], [11.1, 167.0], [11.2, 167.0], [11.3, 167.0], [11.4, 167.0], [11.5, 167.0], [11.6, 167.0], [11.7, 167.0], [11.8, 167.0], [11.9, 167.0], [12.0, 167.0], [12.1, 168.0], [12.2, 168.0], [12.3, 168.0], [12.4, 168.0], [12.5, 168.0], [12.6, 168.0], [12.7, 168.0], [12.8, 168.0], [12.9, 168.0], [13.0, 168.0], [13.1, 168.0], [13.2, 168.0], [13.3, 168.0], [13.4, 168.0], [13.5, 168.0], [13.6, 168.0], [13.7, 168.0], [13.8, 168.0], [13.9, 168.0], [14.0, 168.0], [14.1, 168.0], [14.2, 168.0], [14.3, 168.0], [14.4, 168.0], [14.5, 168.0], [14.6, 168.0], [14.7, 168.0], [14.8, 169.0], [14.9, 169.0], [15.0, 169.0], [15.1, 169.0], [15.2, 169.0], [15.3, 169.0], [15.4, 169.0], [15.5, 169.0], [15.6, 169.0], [15.7, 169.0], [15.8, 169.0], [15.9, 169.0], [16.0, 169.0], [16.1, 169.0], [16.2, 169.0], [16.3, 169.0], [16.4, 169.0], [16.5, 169.0], [16.6, 169.0], [16.7, 169.0], [16.8, 169.0], [16.9, 169.0], [17.0, 169.0], [17.1, 169.0], [17.2, 169.0], [17.3, 169.0], [17.4, 170.0], [17.5, 170.0], [17.6, 170.0], [17.7, 170.0], [17.8, 170.0], [17.9, 170.0], [18.0, 170.0], [18.1, 170.0], [18.2, 170.0], [18.3, 170.0], [18.4, 170.0], [18.5, 170.0], [18.6, 170.0], [18.7, 170.0], [18.8, 170.0], [18.9, 170.0], [19.0, 170.0], [19.1, 170.0], [19.2, 170.0], [19.3, 170.0], [19.4, 170.0], [19.5, 170.0], [19.6, 170.0], [19.7, 170.0], [19.8, 170.0], [19.9, 170.0], [20.0, 170.0], [20.1, 171.0], [20.2, 171.0], [20.3, 171.0], [20.4, 171.0], [20.5, 171.0], [20.6, 171.0], [20.7, 171.0], [20.8, 171.0], [20.9, 171.0], [21.0, 171.0], [21.1, 171.0], [21.2, 171.0], [21.3, 171.0], [21.4, 171.0], [21.5, 171.0], [21.6, 171.0], [21.7, 171.0], [21.8, 171.0], [21.9, 171.0], [22.0, 171.0], [22.1, 171.0], [22.2, 171.0], [22.3, 171.0], [22.4, 171.0], [22.5, 171.0], [22.6, 171.0], [22.7, 171.0], [22.8, 171.0], [22.9, 172.0], [23.0, 172.0], [23.1, 172.0], [23.2, 172.0], [23.3, 172.0], [23.4, 172.0], [23.5, 172.0], [23.6, 172.0], [23.7, 172.0], [23.8, 172.0], [23.9, 172.0], [24.0, 172.0], [24.1, 172.0], [24.2, 172.0], [24.3, 172.0], [24.4, 172.0], [24.5, 172.0], [24.6, 172.0], [24.7, 172.0], [24.8, 172.0], [24.9, 172.0], [25.0, 172.0], [25.1, 172.0], [25.2, 172.0], [25.3, 172.0], [25.4, 172.0], [25.5, 172.0], [25.6, 172.0], [25.7, 172.0], [25.8, 172.0], [25.9, 173.0], [26.0, 173.0], [26.1, 173.0], [26.2, 173.0], [26.3, 173.0], [26.4, 173.0], [26.5, 173.0], [26.6, 173.0], [26.7, 173.0], [26.8, 173.0], [26.9, 173.0], [27.0, 173.0], [27.1, 173.0], [27.2, 173.0], [27.3, 173.0], [27.4, 173.0], [27.5, 173.0], [27.6, 173.0], [27.7, 173.0], [27.8, 173.0], [27.9, 173.0], [28.0, 173.0], [28.1, 173.0], [28.2, 173.0], [28.3, 173.0], [28.4, 173.0], [28.5, 173.0], [28.6, 174.0], [28.7, 174.0], [28.8, 174.0], [28.9, 174.0], [29.0, 174.0], [29.1, 174.0], [29.2, 174.0], [29.3, 174.0], [29.4, 174.0], [29.5, 174.0], [29.6, 174.0], [29.7, 174.0], [29.8, 174.0], [29.9, 174.0], [30.0, 174.0], [30.1, 174.0], [30.2, 174.0], [30.3, 174.0], [30.4, 174.0], [30.5, 174.0], [30.6, 174.0], [30.7, 174.0], [30.8, 174.0], [30.9, 174.0], [31.0, 174.0], [31.1, 174.0], [31.2, 175.0], [31.3, 175.0], [31.4, 175.0], [31.5, 175.0], [31.6, 175.0], [31.7, 175.0], [31.8, 175.0], [31.9, 175.0], [32.0, 175.0], [32.1, 175.0], [32.2, 175.0], [32.3, 175.0], [32.4, 175.0], [32.5, 175.0], [32.6, 175.0], [32.7, 175.0], [32.8, 175.0], [32.9, 175.0], [33.0, 175.0], [33.1, 175.0], [33.2, 175.0], [33.3, 175.0], [33.4, 175.0], [33.5, 175.0], [33.6, 176.0], [33.7, 176.0], [33.8, 176.0], [33.9, 176.0], [34.0, 176.0], [34.1, 176.0], [34.2, 176.0], [34.3, 176.0], [34.4, 176.0], [34.5, 176.0], [34.6, 176.0], [34.7, 176.0], [34.8, 176.0], [34.9, 176.0], [35.0, 176.0], [35.1, 176.0], [35.2, 176.0], [35.3, 176.0], [35.4, 176.0], [35.5, 176.0], [35.6, 176.0], [35.7, 176.0], [35.8, 176.0], [35.9, 176.0], [36.0, 177.0], [36.1, 177.0], [36.2, 177.0], [36.3, 177.0], [36.4, 177.0], [36.5, 177.0], [36.6, 177.0], [36.7, 177.0], [36.8, 177.0], [36.9, 177.0], [37.0, 177.0], [37.1, 177.0], [37.2, 177.0], [37.3, 177.0], [37.4, 177.0], [37.5, 177.0], [37.6, 177.0], [37.7, 177.0], [37.8, 177.0], [37.9, 177.0], [38.0, 177.0], [38.1, 177.0], [38.2, 178.0], [38.3, 178.0], [38.4, 178.0], [38.5, 178.0], [38.6, 178.0], [38.7, 178.0], [38.8, 178.0], [38.9, 178.0], [39.0, 178.0], [39.1, 178.0], [39.2, 178.0], [39.3, 178.0], [39.4, 178.0], [39.5, 178.0], [39.6, 178.0], [39.7, 178.0], [39.8, 178.0], [39.9, 178.0], [40.0, 178.0], [40.1, 178.0], [40.2, 178.0], [40.3, 179.0], [40.4, 179.0], [40.5, 179.0], [40.6, 179.0], [40.7, 179.0], [40.8, 179.0], [40.9, 179.0], [41.0, 179.0], [41.1, 179.0], [41.2, 179.0], [41.3, 179.0], [41.4, 179.0], [41.5, 179.0], [41.6, 179.0], [41.7, 179.0], [41.8, 179.0], [41.9, 179.0], [42.0, 179.0], [42.1, 179.0], [42.2, 179.0], [42.3, 180.0], [42.4, 180.0], [42.5, 180.0], [42.6, 180.0], [42.7, 180.0], [42.8, 180.0], [42.9, 180.0], [43.0, 180.0], [43.1, 180.0], [43.2, 180.0], [43.3, 180.0], [43.4, 180.0], [43.5, 180.0], [43.6, 180.0], [43.7, 180.0], [43.8, 180.0], [43.9, 180.0], [44.0, 180.0], [44.1, 180.0], [44.2, 180.0], [44.3, 181.0], [44.4, 181.0], [44.5, 181.0], [44.6, 181.0], [44.7, 181.0], [44.8, 181.0], [44.9, 181.0], [45.0, 181.0], [45.1, 181.0], [45.2, 181.0], [45.3, 181.0], [45.4, 181.0], [45.5, 181.0], [45.6, 181.0], [45.7, 181.0], [45.8, 181.0], [45.9, 181.0], [46.0, 181.0], [46.1, 182.0], [46.2, 182.0], [46.3, 182.0], [46.4, 182.0], [46.5, 182.0], [46.6, 182.0], [46.7, 182.0], [46.8, 182.0], [46.9, 182.0], [47.0, 182.0], [47.1, 182.0], [47.2, 182.0], [47.3, 182.0], [47.4, 182.0], [47.5, 182.0], [47.6, 182.0], [47.7, 182.0], [47.8, 183.0], [47.9, 183.0], [48.0, 183.0], [48.1, 183.0], [48.2, 183.0], [48.3, 183.0], [48.4, 183.0], [48.5, 183.0], [48.6, 183.0], [48.7, 183.0], [48.8, 183.0], [48.9, 183.0], [49.0, 183.0], [49.1, 183.0], [49.2, 183.0], [49.3, 183.0], [49.4, 183.0], [49.5, 184.0], [49.6, 184.0], [49.7, 184.0], [49.8, 184.0], [49.9, 184.0], [50.0, 184.0], [50.1, 184.0], [50.2, 184.0], [50.3, 184.0], [50.4, 184.0], [50.5, 184.0], [50.6, 184.0], [50.7, 184.0], [50.8, 184.0], [50.9, 184.0], [51.0, 185.0], [51.1, 185.0], [51.2, 185.0], [51.3, 185.0], [51.4, 185.0], [51.5, 185.0], [51.6, 185.0], [51.7, 185.0], [51.8, 185.0], [51.9, 185.0], [52.0, 185.0], [52.1, 185.0], [52.2, 185.0], [52.3, 185.0], [52.4, 186.0], [52.5, 186.0], [52.6, 186.0], [52.7, 186.0], [52.8, 186.0], [52.9, 186.0], [53.0, 186.0], [53.1, 186.0], [53.2, 186.0], [53.3, 186.0], [53.4, 186.0], [53.5, 186.0], [53.6, 186.0], [53.7, 186.0], [53.8, 186.0], [53.9, 187.0], [54.0, 187.0], [54.1, 187.0], [54.2, 187.0], [54.3, 187.0], [54.4, 187.0], [54.5, 187.0], [54.6, 187.0], [54.7, 187.0], [54.8, 187.0], [54.9, 187.0], [55.0, 187.0], [55.1, 187.0], [55.2, 188.0], [55.3, 188.0], [55.4, 188.0], [55.5, 188.0], [55.6, 188.0], [55.7, 188.0], [55.8, 188.0], [55.9, 188.0], [56.0, 188.0], [56.1, 188.0], [56.2, 188.0], [56.3, 188.0], [56.4, 188.0], [56.5, 189.0], [56.6, 189.0], [56.7, 189.0], [56.8, 189.0], [56.9, 189.0], [57.0, 189.0], [57.1, 189.0], [57.2, 189.0], [57.3, 189.0], [57.4, 189.0], [57.5, 189.0], [57.6, 190.0], [57.7, 190.0], [57.8, 190.0], [57.9, 190.0], [58.0, 190.0], [58.1, 190.0], [58.2, 190.0], [58.3, 190.0], [58.4, 190.0], [58.5, 190.0], [58.6, 191.0], [58.7, 191.0], [58.8, 191.0], [58.9, 191.0], [59.0, 191.0], [59.1, 191.0], [59.2, 191.0], [59.3, 191.0], [59.4, 191.0], [59.5, 191.0], [59.6, 192.0], [59.7, 192.0], [59.8, 192.0], [59.9, 192.0], [60.0, 192.0], [60.1, 192.0], [60.2, 192.0], [60.3, 192.0], [60.4, 192.0], [60.5, 192.0], [60.6, 193.0], [60.7, 193.0], [60.8, 193.0], [60.9, 193.0], [61.0, 193.0], [61.1, 193.0], [61.2, 193.0], [61.3, 193.0], [61.4, 193.0], [61.5, 194.0], [61.6, 194.0], [61.7, 194.0], [61.8, 194.0], [61.9, 194.0], [62.0, 194.0], [62.1, 194.0], [62.2, 194.0], [62.3, 194.0], [62.4, 195.0], [62.5, 195.0], [62.6, 195.0], [62.7, 195.0], [62.8, 195.0], [62.9, 195.0], [63.0, 195.0], [63.1, 195.0], [63.2, 195.0], [63.3, 196.0], [63.4, 196.0], [63.5, 196.0], [63.6, 196.0], [63.7, 196.0], [63.8, 196.0], [63.9, 196.0], [64.0, 196.0], [64.1, 197.0], [64.2, 197.0], [64.3, 197.0], [64.4, 197.0], [64.5, 197.0], [64.6, 197.0], [64.7, 197.0], [64.8, 198.0], [64.9, 198.0], [65.0, 198.0], [65.1, 198.0], [65.2, 198.0], [65.3, 198.0], [65.4, 198.0], [65.5, 199.0], [65.6, 199.0], [65.7, 199.0], [65.8, 199.0], [65.9, 199.0], [66.0, 199.0], [66.1, 200.0], [66.2, 200.0], [66.3, 200.0], [66.4, 200.0], [66.5, 200.0], [66.6, 200.0], [66.7, 200.0], [66.8, 201.0], [66.9, 201.0], [67.0, 201.0], [67.1, 201.0], [67.2, 201.0], [67.3, 201.0], [67.4, 202.0], [67.5, 202.0], [67.6, 202.0], [67.7, 202.0], [67.8, 202.0], [67.9, 202.0], [68.0, 203.0], [68.1, 203.0], [68.2, 203.0], [68.3, 203.0], [68.4, 203.0], [68.5, 203.0], [68.6, 204.0], [68.7, 204.0], [68.8, 204.0], [68.9, 204.0], [69.0, 204.0], [69.1, 204.0], [69.2, 205.0], [69.3, 205.0], [69.4, 205.0], [69.5, 205.0], [69.6, 205.0], [69.7, 206.0], [69.8, 206.0], [69.9, 206.0], [70.0, 206.0], [70.1, 207.0], [70.2, 207.0], [70.3, 207.0], [70.4, 207.0], [70.5, 208.0], [70.6, 208.0], [70.7, 208.0], [70.8, 209.0], [70.9, 209.0], [71.0, 209.0], [71.1, 209.0], [71.2, 209.0], [71.3, 210.0], [71.4, 210.0], [71.5, 210.0], [71.6, 210.0], [71.7, 211.0], [71.8, 211.0], [71.9, 211.0], [72.0, 211.0], [72.1, 212.0], [72.2, 212.0], [72.3, 212.0], [72.4, 213.0], [72.5, 213.0], [72.6, 213.0], [72.7, 213.0], [72.8, 214.0], [72.9, 214.0], [73.0, 214.0], [73.1, 214.0], [73.2, 215.0], [73.3, 215.0], [73.4, 215.0], [73.5, 216.0], [73.6, 216.0], [73.7, 216.0], [73.8, 217.0], [73.9, 217.0], [74.0, 217.0], [74.1, 218.0], [74.2, 218.0], [74.3, 219.0], [74.4, 219.0], [74.5, 219.0], [74.6, 220.0], [74.7, 220.0], [74.8, 221.0], [74.9, 221.0], [75.0, 221.0], [75.1, 222.0], [75.2, 222.0], [75.3, 223.0], [75.4, 223.0], [75.5, 224.0], [75.6, 224.0], [75.7, 224.0], [75.8, 225.0], [75.9, 225.0], [76.0, 226.0], [76.1, 226.0], [76.2, 227.0], [76.3, 227.0], [76.4, 228.0], [76.5, 228.0], [76.6, 229.0], [76.7, 229.0], [76.8, 230.0], [76.9, 230.0], [77.0, 231.0], [77.1, 232.0], [77.2, 232.0], [77.3, 233.0], [77.4, 233.0], [77.5, 234.0], [77.6, 235.0], [77.7, 235.0], [77.8, 236.0], [77.9, 236.0], [78.0, 237.0], [78.1, 238.0], [78.2, 239.0], [78.3, 239.0], [78.4, 240.0], [78.5, 241.0], [78.6, 242.0], [78.7, 243.0], [78.8, 243.0], [78.9, 244.0], [79.0, 245.0], [79.1, 245.0], [79.2, 246.0], [79.3, 247.0], [79.4, 248.0], [79.5, 249.0], [79.6, 249.0], [79.7, 250.0], [79.8, 251.0], [79.9, 252.0], [80.0, 253.0], [80.1, 255.0], [80.2, 256.0], [80.3, 257.0], [80.4, 258.0], [80.5, 259.0], [80.6, 261.0], [80.7, 262.0], [80.8, 263.0], [80.9, 265.0], [81.0, 266.0], [81.1, 267.0], [81.2, 269.0], [81.3, 271.0], [81.4, 272.0], [81.5, 273.0], [81.6, 275.0], [81.7, 276.0], [81.8, 278.0], [81.9, 280.0], [82.0, 281.0], [82.1, 283.0], [82.2, 284.0], [82.3, 286.0], [82.4, 288.0], [82.5, 290.0], [82.6, 292.0], [82.7, 293.0], [82.8, 296.0], [82.9, 298.0], [83.0, 300.0], [83.1, 303.0], [83.2, 305.0], [83.3, 308.0], [83.4, 311.0], [83.5, 314.0], [83.6, 317.0], [83.7, 320.0], [83.8, 323.0], [83.9, 326.0], [84.0, 330.0], [84.1, 333.0], [84.2, 336.0], [84.3, 340.0], [84.4, 343.0], [84.5, 347.0], [84.6, 351.0], [84.7, 357.0], [84.8, 361.0], [84.9, 366.0], [85.0, 370.0], [85.1, 374.0], [85.2, 378.0], [85.3, 383.0], [85.4, 388.0], [85.5, 392.0], [85.6, 398.0], [85.7, 403.0], [85.8, 410.0], [85.9, 417.0], [86.0, 422.0], [86.1, 426.0], [86.2, 430.0], [86.3, 435.0], [86.4, 440.0], [86.5, 445.0], [86.6, 449.0], [86.7, 452.0], [86.8, 455.0], [86.9, 459.0], [87.0, 462.0], [87.1, 465.0], [87.2, 468.0], [87.3, 471.0], [87.4, 473.0], [87.5, 476.0], [87.6, 478.0], [87.7, 481.0], [87.8, 484.0], [87.9, 487.0], [88.0, 491.0], [88.1, 493.0], [88.2, 496.0], [88.3, 499.0], [88.4, 501.0], [88.5, 504.0], [88.6, 507.0], [88.7, 510.0], [88.8, 512.0], [88.9, 515.0], [89.0, 518.0], [89.1, 521.0], [89.2, 524.0], [89.3, 528.0], [89.4, 531.0], [89.5, 536.0], [89.6, 541.0], [89.7, 546.0], [89.8, 552.0], [89.9, 559.0], [90.0, 568.0], [90.1, 576.0], [90.2, 584.0], [90.3, 594.0], [90.4, 602.0], [90.5, 612.0], [90.6, 623.0], [90.7, 635.0], [90.8, 647.0], [90.9, 662.0], [91.0, 678.0], [91.1, 694.0], [91.2, 709.0], [91.3, 726.0], [91.4, 736.0], [91.5, 748.0], [91.6, 759.0], [91.7, 773.0], [91.8, 789.0], [91.9, 811.0], [92.0, 836.0], [92.1, 856.0], [92.2, 878.0], [92.3, 896.0], [92.4, 915.0], [92.5, 939.0], [92.6, 962.0], [92.7, 989.0], [92.8, 1016.0], [92.9, 1049.0], [93.0, 1080.0], [93.1, 1137.0], [93.2, 1167.0], [93.3, 1172.0], [93.4, 1174.0], [93.5, 1177.0], [93.6, 1178.0], [93.7, 1180.0], [93.8, 1182.0], [93.9, 1184.0], [94.0, 1185.0], [94.1, 1188.0], [94.2, 1189.0], [94.3, 1192.0], [94.4, 1194.0], [94.5, 1198.0], [94.6, 1202.0], [94.7, 1206.0], [94.8, 1212.0], [94.9, 1219.0], [95.0, 1229.0], [95.1, 1240.0], [95.2, 1252.0], [95.3, 1262.0], [95.4, 1278.0], [95.5, 1297.0], [95.6, 1311.0], [95.7, 1328.0], [95.8, 1345.0], [95.9, 1361.0], [96.0, 1377.0], [96.1, 1397.0], [96.2, 1421.0], [96.3, 1456.0], [96.4, 1486.0], [96.5, 1521.0], [96.6, 1566.0], [96.7, 1628.0], [96.8, 1685.0], [96.9, 1751.0], [97.0, 1819.0], [97.1, 1890.0], [97.2, 2007.0], [97.3, 2170.0], [97.4, 2369.0], [97.5, 2506.0], [97.6, 2635.0], [97.7, 2829.0], [97.8, 3108.0], [97.9, 3260.0], [98.0, 3416.0], [98.1, 3559.0], [98.2, 3797.0], [98.3, 4065.0], [98.4, 4319.0], [98.5, 4725.0], [98.6, 5130.0], [98.7, 5781.0], [98.8, 6402.0], [98.9, 6979.0], [99.0, 7529.0], [99.1, 8227.0], [99.2, 9049.0], [99.3, 9711.0], [99.4, 11110.0], [99.5, 12494.0], [99.6, 14911.0], [99.7, 17683.0], [99.8, 22325.0], [99.9, 33694.0], [100.0, 167777.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 38330.0, "series": [{"data": [[72300.0, 1.0], [103500.0, 1.0], [104300.0, 1.0], [100.0, 38330.0], [33300.0, 1.0], [34500.0, 1.0], [43300.0, 1.0], [200.0, 9792.0], [52500.0, 1.0], [52900.0, 1.0], [58500.0, 1.0], [300.0, 1539.0], [82600.0, 1.0], [400.0, 1559.0], [500.0, 1187.0], [600.0, 456.0], [700.0, 409.0], [800.0, 272.0], [900.0, 250.0], [1000.0, 171.0], [1100.0, 870.0], [1200.0, 568.0], [1300.0, 337.0], [1400.0, 191.0], [1500.0, 130.0], [1600.0, 103.0], [1700.0, 81.0], [1800.0, 81.0], [1900.0, 46.0], [2000.0, 33.0], [2100.0, 40.0], [2300.0, 39.0], [2200.0, 26.0], [2400.0, 37.0], [2500.0, 43.0], [2600.0, 46.0], [2700.0, 26.0], [2800.0, 14.0], [2900.0, 32.0], [3000.0, 15.0], [3100.0, 35.0], [3200.0, 37.0], [3300.0, 34.0], [3400.0, 54.0], [3500.0, 24.0], [3600.0, 28.0], [3700.0, 21.0], [3800.0, 18.0], [3900.0, 21.0], [4000.0, 24.0], [4100.0, 23.0], [4300.0, 23.0], [4200.0, 18.0], [4600.0, 11.0], [4400.0, 15.0], [4500.0, 16.0], [4700.0, 21.0], [4800.0, 15.0], [5000.0, 13.0], [4900.0, 12.0], [5100.0, 14.0], [5300.0, 5.0], [5200.0, 9.0], [5600.0, 11.0], [5400.0, 5.0], [5500.0, 10.0], [5700.0, 9.0], [5800.0, 10.0], [6100.0, 15.0], [5900.0, 12.0], [6000.0, 5.0], [6200.0, 7.0], [6300.0, 5.0], [6600.0, 6.0], [6400.0, 7.0], [6500.0, 4.0], [6700.0, 13.0], [6800.0, 9.0], [6900.0, 24.0], [7000.0, 14.0], [7100.0, 4.0], [111300.0, 1.0], [7300.0, 10.0], [7200.0, 8.0], [7400.0, 13.0], [7500.0, 13.0], [7600.0, 7.0], [7700.0, 8.0], [7900.0, 1.0], [7800.0, 10.0], [8000.0, 13.0], [8100.0, 7.0], [8300.0, 8.0], [8700.0, 8.0], [8400.0, 6.0], [8500.0, 4.0], [8200.0, 11.0], [8600.0, 5.0], [9000.0, 15.0], [8900.0, 8.0], [9100.0, 8.0], [9200.0, 12.0], [8800.0, 2.0], [9300.0, 5.0], [9700.0, 9.0], [9600.0, 9.0], [9400.0, 9.0], [9500.0, 8.0], [9900.0, 4.0], [9800.0, 3.0], [10200.0, 2.0], [10100.0, 5.0], [10000.0, 3.0], [10500.0, 8.0], [10600.0, 5.0], [10700.0, 3.0], [10400.0, 3.0], [10300.0, 4.0], [11100.0, 7.0], [11000.0, 4.0], [10900.0, 4.0], [11200.0, 4.0], [10800.0, 2.0], [11300.0, 5.0], [11600.0, 8.0], [11700.0, 5.0], [11500.0, 3.0], [11400.0, 2.0], [12200.0, 8.0], [12000.0, 3.0], [12100.0, 5.0], [11900.0, 2.0], [11800.0, 3.0], [12500.0, 7.0], [12600.0, 1.0], [12400.0, 4.0], [12300.0, 1.0], [13200.0, 2.0], [12800.0, 4.0], [13000.0, 3.0], [12900.0, 2.0], [13400.0, 7.0], [13600.0, 2.0], [13700.0, 3.0], [13800.0, 4.0], [13500.0, 1.0], [13900.0, 4.0], [14000.0, 2.0], [14300.0, 1.0], [14100.0, 1.0], [14400.0, 3.0], [14500.0, 2.0], [14600.0, 3.0], [14800.0, 2.0], [14700.0, 1.0], [15100.0, 3.0], [14900.0, 6.0], [15200.0, 2.0], [15000.0, 1.0], [15300.0, 1.0], [15500.0, 3.0], [15700.0, 4.0], [15400.0, 1.0], [15600.0, 6.0], [15800.0, 3.0], [16100.0, 3.0], [16000.0, 4.0], [16300.0, 1.0], [15900.0, 1.0], [16200.0, 1.0], [16600.0, 3.0], [16400.0, 2.0], [16800.0, 1.0], [17200.0, 1.0], [17600.0, 2.0], [18400.0, 4.0], [18200.0, 2.0], [18000.0, 1.0], [18600.0, 1.0], [18800.0, 3.0], [19200.0, 2.0], [19600.0, 6.0], [20200.0, 3.0], [20400.0, 3.0], [19800.0, 1.0], [21200.0, 1.0], [20800.0, 1.0], [21800.0, 1.0], [21600.0, 3.0], [22400.0, 2.0], [22600.0, 1.0], [23200.0, 1.0], [22800.0, 1.0], [24400.0, 1.0], [24200.0, 1.0], [23800.0, 1.0], [23600.0, 2.0], [24600.0, 1.0], [25200.0, 1.0], [25600.0, 1.0], [26200.0, 1.0], [26600.0, 1.0], [27400.0, 1.0], [26800.0, 1.0], [28600.0, 2.0], [28400.0, 1.0], [29000.0, 1.0], [30400.0, 1.0], [29800.0, 1.0], [31200.0, 1.0], [31600.0, 1.0], [31800.0, 2.0], [32800.0, 1.0], [33600.0, 1.0], [36800.0, 1.0], [36400.0, 2.0], [36000.0, 1.0], [35200.0, 1.0], [37600.0, 2.0], [44400.0, 1.0], [46800.0, 1.0], [47200.0, 1.0], [52400.0, 1.0], [54800.0, 1.0], [54000.0, 1.0], [60800.0, 1.0], [68700.0, 1.0], [101500.0, 1.0], [103100.0, 1.0], [33900.0, 2.0], [35100.0, 1.0], [36300.0, 1.0], [37100.0, 1.0], [37500.0, 1.0], [38300.0, 1.0], [39100.0, 2.0], [41100.0, 1.0], [54300.0, 1.0], [58300.0, 1.0], [61100.0, 1.0], [103000.0, 1.0], [167700.0, 1.0], [72500.0, 1.0], [101300.0, 1.0], [104500.0, 1.0], [133400.0, 1.0], [16500.0, 4.0], [17300.0, 1.0], [16900.0, 5.0], [16700.0, 1.0], [18300.0, 2.0], [17900.0, 2.0], [17700.0, 2.0], [18500.0, 3.0], [19100.0, 3.0], [19300.0, 1.0], [18900.0, 1.0], [20300.0, 4.0], [20900.0, 2.0], [21100.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [22300.0, 1.0], [21700.0, 2.0], [22900.0, 1.0], [23300.0, 1.0], [23700.0, 1.0], [24900.0, 2.0], [25300.0, 2.0], [25100.0, 1.0], [24700.0, 1.0], [25900.0, 2.0], [27500.0, 1.0], [27100.0, 1.0], [27900.0, 1.0], [28300.0, 2.0], [28500.0, 1.0], [30500.0, 2.0], [30300.0, 1.0], [29700.0, 1.0], [31500.0, 1.0], [31300.0, 1.0], [30900.0, 1.0], [32100.0, 2.0], [32700.0, 2.0], [34600.0, 2.0], [37800.0, 1.0], [37000.0, 1.0], [40200.0, 1.0], [44200.0, 1.0], [46600.0, 1.0], [45800.0, 1.0], [56200.0, 1.0], [59000.0, 1.0], [57800.0, 1.0], [81200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 167700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 51249.0, "series": [{"data": [[0.0, 51249.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4687.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2063.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 11.491000000000017, "minX": 1.72918284E12, "maxY": 268.1021225470564, "series": [{"data": [[1.72918284E12, 268.1021225470564], [1.7291835E12, 12.800066533599496], [1.7291838E12, 13.640381895332393], [1.72918344E12, 19.850346878097117], [1.72918314E12, 11.650103519668756], [1.72918308E12, 17.272636151019004], [1.72918374E12, 11.491000000000017], [1.72918338E12, 11.875797247398483], [1.72918368E12, 27.107928047968052], [1.72918332E12, 11.884005287508263], [1.72918398E12, 12.33239831697055], [1.72918302E12, 13.492739273927407], [1.72918296E12, 20.763368983957207], [1.72918362E12, 12.475666666666646], [1.72918392E12, 12.82239001969798], [1.72918356E12, 12.776776776776757], [1.72918326E12, 13.860852197070532], [1.7291832E12, 15.110097719869707], [1.72918386E12, 14.146466261592586], [1.7291829E12, 49.75163826998689]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918398E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 200.2731263719033, "minX": 1.0, "maxY": 24423.0, "series": [{"data": [[2.0, 264.93055555555543], [3.0, 287.97457627118644], [4.0, 261.7025641025641], [5.0, 221.51685393258427], [6.0, 256.3180592991912], [7.0, 231.45359019264458], [8.0, 217.9081735620588], [9.0, 200.2731263719033], [10.0, 201.58458533653808], [11.0, 234.82881376179697], [12.0, 223.83199079401604], [13.0, 236.05776762402064], [14.0, 242.6616041765545], [15.0, 258.51187607573166], [16.0, 260.8420770877944], [17.0, 277.0728744939274], [18.0, 287.8501144164757], [19.0, 478.08630952380946], [20.0, 333.71299638989177], [21.0, 572.6948853615515], [22.0, 522.4195804195806], [23.0, 394.01273885350304], [24.0, 581.2258823529409], [25.0, 368.2425], [26.0, 573.2454780361759], [27.0, 944.3585434173677], [28.0, 932.2076677316292], [29.0, 476.4694656488548], [30.0, 463.0578512396695], [31.0, 408.2190476190476], [33.0, 458.28333333333336], [32.0, 959.6220095693781], [35.0, 539.6936416184975], [34.0, 488.7136150234742], [37.0, 1098.1967213114744], [36.0, 472.75572519083966], [39.0, 1282.2695652173911], [38.0, 690.3762376237624], [41.0, 1885.561904761905], [40.0, 634.1592920353982], [43.0, 591.5533980582526], [42.0, 554.5660377358488], [45.0, 687.9397590361447], [44.0, 626.0609756097558], [47.0, 1423.840579710145], [46.0, 622.5061728395061], [49.0, 643.4193548387099], [48.0, 1361.712328767124], [51.0, 2336.232142857143], [50.0, 728.3673469387753], [53.0, 723.8153846153846], [52.0, 954.351851851852], [55.0, 1611.1264367816095], [54.0, 1820.2022471910097], [57.0, 1235.4912280701756], [56.0, 1349.0571428571432], [59.0, 655.5081967213116], [58.0, 1431.0344827586205], [60.0, 1395.753846153846], [61.0, 430.0192307692309], [63.0, 551.1999999999999], [62.0, 2780.4925373134324], [67.0, 3174.6603773584898], [66.0, 823.2777777777778], [65.0, 582.2549019607843], [64.0, 613.298245614035], [71.0, 1394.036363636363], [70.0, 1857.9305555555559], [69.0, 1432.2], [68.0, 4091.7735849056608], [75.0, 2120.7391304347834], [74.0, 804.6046511627908], [73.0, 683.7936507936507], [72.0, 1933.5400000000004], [79.0, 764.3260869565217], [78.0, 1378.1666666666665], [77.0, 2017.0238095238094], [76.0, 1756.6], [83.0, 1560.2682926829266], [82.0, 823.4117647058824], [80.0, 700.6470588235294], [81.0, 797.8529411764706], [87.0, 2073.964285714286], [86.0, 1244.4848484848483], [85.0, 1748.2777777777778], [84.0, 1048.2777777777778], [91.0, 1201.1935483870968], [90.0, 2855.931034482758], [89.0, 2454.60606060606], [88.0, 1803.3076923076924], [95.0, 2300.185185185185], [94.0, 2641.1851851851848], [93.0, 3248.65625], [92.0, 4344.346153846153], [99.0, 2764.666666666667], [98.0, 714.6249999999999], [97.0, 2159.666666666667], [96.0, 1929.0000000000002], [103.0, 212.0], [102.0, 12608.857142857143], [101.0, 8647.631578947368], [100.0, 5689.666666666666], [107.0, 983.1428571428571], [106.0, 1383.1250000000002], [105.0, 7485.875], [104.0, 476.57142857142856], [111.0, 5633.833333333334], [110.0, 864.6666666666666], [109.0, 2288.0], [108.0, 563.5], [115.0, 763.5714285714286], [114.0, 800.3846153846155], [113.0, 1304.857142857143], [112.0, 1158.5], [119.0, 1968.3333333333333], [118.0, 861.6666666666665], [117.0, 9752.0], [116.0, 490.42857142857144], [123.0, 7530.166666666666], [122.0, 649.6666666666667], [121.0, 5572.888888888889], [120.0, 505.4285714285714], [127.0, 756.0], [126.0, 10243.75], [125.0, 6635.75], [124.0, 5570.0], [135.0, 1224.0], [134.0, 603.6], [133.0, 1961.5], [132.0, 316.0], [131.0, 11059.666666666668], [130.0, 1240.3333333333333], [129.0, 848.6666666666667], [128.0, 1647.25], [143.0, 4698.6], [142.0, 4340.0], [141.0, 1274.9999999999998], [140.0, 8852.166666666668], [139.0, 6470.444444444444], [138.0, 4921.400000000001], [137.0, 6239.0], [136.0, 2216.2], [151.0, 894.0833333333333], [150.0, 3224.6000000000004], [149.0, 1685.1052631578946], [148.0, 3425.5833333333335], [147.0, 1937.35], [146.0, 4054.947368421052], [145.0, 3102.8571428571427], [144.0, 3840.8181818181824], [159.0, 2116.3333333333335], [158.0, 1165.2], [157.0, 2208.571428571429], [156.0, 887.8], [155.0, 1603.75], [154.0, 619.6], [153.0, 1530.8571428571427], [152.0, 5211.6], [167.0, 17603.25], [166.0, 1153.6666666666667], [165.0, 332.0], [164.0, 279.5], [163.0, 2195.5], [162.0, 18704.0], [161.0, 9807.75], [160.0, 1349.0], [174.0, 14859.333333333336], [175.0, 2990.5], [173.0, 17999.0], [172.0, 5058.333333333333], [171.0, 8215.5], [170.0, 1781.0], [169.0, 7526.333333333334], [168.0, 3292.5], [183.0, 1555.0], [182.0, 2383.0], [181.0, 9261.142857142857], [180.0, 1352.4], [179.0, 1065.5], [178.0, 2612.0], [177.0, 1506.75], [176.0, 6017.6], [190.0, 2222.4], [189.0, 702.25], [191.0, 1534.5], [188.0, 625.0], [187.0, 2273.0], [186.0, 2396.5], [185.0, 1103.0], [184.0, 1982.5], [199.0, 2592.222222222222], [198.0, 1743.625], [197.0, 1769.7272727272727], [196.0, 4966.090909090909], [195.0, 4863.75], [194.0, 1257.888888888889], [193.0, 1610.125], [192.0, 1477.5], [207.0, 3094.5714285714284], [206.0, 2921.0], [205.0, 3305.6153846153843], [204.0, 4524.9], [203.0, 4172.7], [202.0, 10747.545454545454], [201.0, 2651.5], [200.0, 3172.285714285714], [214.0, 1880.2857142857142], [213.0, 5056.5], [212.0, 7126.6], [211.0, 4346.8], [210.0, 4402.0], [209.0, 1368.2], [208.0, 3357.9999999999995], [215.0, 5878.75], [223.0, 1549.2], [222.0, 5146.6], [221.0, 2091.3333333333335], [220.0, 5485.666666666667], [219.0, 4850.6], [218.0, 6714.777777777777], [217.0, 7330.857142857144], [216.0, 2836.4999999999995], [231.0, 3653.181818181818], [230.0, 6280.0], [229.0, 1929.8333333333335], [227.0, 2189.3333333333335], [226.0, 2803.375], [225.0, 2415.846153846154], [224.0, 8181.0], [228.0, 2326.1666666666665], [239.0, 1623.0], [237.0, 5104.846153846153], [236.0, 2826.636363636364], [235.0, 1079.0], [233.0, 4074.9090909090905], [232.0, 1764.428571428571], [238.0, 3046.8], [234.0, 1042.4285714285713], [247.0, 3843.0], [246.0, 4082.333333333333], [245.0, 3550.0], [244.0, 5932.166666666667], [243.0, 7354.8], [242.0, 522.0], [241.0, 10596.5], [240.0, 12949.2], [255.0, 6813.2], [254.0, 1785.0], [253.0, 1043.6666666666667], [252.0, 10148.599999999999], [251.0, 4715.571428571428], [250.0, 1378.25], [249.0, 2559.6666666666665], [248.0, 5350.166666666667], [270.0, 2931.0], [271.0, 808.4], [269.0, 1542.0], [268.0, 7742.5], [267.0, 943.0], [266.0, 363.5], [265.0, 365.0], [264.0, 1479.0], [263.0, 4359.0], [257.0, 6531.0], [256.0, 878.0], [259.0, 1153.0], [258.0, 374.0], [262.0, 8215.666666666666], [260.0, 6511.0], [286.0, 1428.0], [287.0, 1558.6666666666667], [285.0, 1388.0], [284.0, 5150.75], [283.0, 6235.200000000001], [282.0, 3711.4999999999995], [281.0, 1748.9], [280.0, 7826.0], [279.0, 4419.4], [273.0, 11287.0], [272.0, 4237.333333333333], [275.0, 317.0], [274.0, 3627.0], [278.0, 5592.5], [277.0, 269.0], [276.0, 1555.3333333333333], [302.0, 1340.0], [303.0, 1329.0], [301.0, 2065.0], [300.0, 3112.0], [299.0, 5645.5], [298.0, 2938.75], [297.0, 6152.125], [296.0, 4681.727272727272], [294.0, 2345.875], [295.0, 7009.8], [289.0, 3706.75], [288.0, 1119.0], [291.0, 4192.0], [290.0, 1517.4], [293.0, 3285.333333333333], [292.0, 2319.0999999999995], [318.0, 7416.0], [319.0, 6755.0], [317.0, 2805.0], [316.0, 19112.0], [315.0, 1628.0], [314.0, 1618.0], [313.0, 1646.0], [312.0, 1606.0], [311.0, 1631.0], [306.0, 15938.5], [304.0, 1557.0], [310.0, 1634.0], [309.0, 1423.0], [308.0, 16966.5], [334.0, 5833.8], [335.0, 6636.0], [333.0, 10015.5], [332.0, 11237.2], [331.0, 2055.5], [330.0, 5885.0], [329.0, 5118.0], [328.0, 6270.5], [327.0, 24423.0], [321.0, 8042.0], [320.0, 20306.0], [323.0, 12494.0], [322.0, 1653.0], [326.0, 11144.0], [325.0, 14907.0], [324.0, 14011.0], [350.0, 1900.0], [351.0, 2955.0], [349.0, 2451.0], [348.0, 6704.666666666666], [347.0, 5206.0], [346.0, 3062.3333333333335], [345.0, 2278.0], [344.0, 1720.0], [342.0, 1671.5], [339.0, 1691.0], [338.0, 1769.5], [337.0, 8336.0], [336.0, 11428.4], [340.0, 1676.0], [355.0, 10232.833333333334], [366.0, 3608.0], [364.0, 2985.0], [353.0, 3850.0], [354.0, 16919.5], [352.0, 4511.0], [363.0, 4977.5], [361.0, 2978.0], [360.0, 1931.0], [359.0, 1939.0], [358.0, 2940.0], [357.0, 1946.0], [356.0, 2596.0], [382.0, 2543.0], [383.0, 3185.0], [381.0, 10567.5], [380.0, 3790.0], [379.0, 1992.0], [378.0, 14381.0], [377.0, 11521.5], [376.0, 2476.75], [374.0, 8081.666666666666], [370.0, 2453.0], [368.0, 2971.5], [372.0, 2456.0], [398.0, 8226.75], [399.0, 8909.0], [397.0, 9858.75], [396.0, 5801.0], [395.0, 2273.0], [394.0, 9300.0], [393.0, 9514.0], [392.0, 9513.0], [391.0, 8150.333333333333], [385.0, 6428.333333333334], [384.0, 2147.3333333333335], [387.0, 2259.0], [386.0, 2182.3333333333335], [390.0, 2908.0], [389.0, 9142.75], [414.0, 9689.0], [415.0, 2529.0], [413.0, 9711.0], [412.0, 2536.0], [411.0, 2461.0], [410.0, 2461.0], [409.0, 9706.0], [408.0, 11520.0], [407.0, 9741.0], [401.0, 4861.0], [400.0, 2454.0], [403.0, 2455.0], [402.0, 7626.000000000001], [406.0, 2450.0], [405.0, 9764.0], [404.0, 2449.0], [431.0, 4784.5], [429.0, 3418.3333333333335], [428.0, 9336.0], [419.0, 2585.0], [418.0, 2552.0], [417.0, 2552.0], [416.0, 2473.0], [427.0, 4761.666666666667], [426.0, 8138.5], [425.0, 5561.5], [424.0, 2633.0], [423.0, 4041.0], [421.0, 5881.5], [420.0, 2583.0], [422.0, 2588.0], [430.0, 4490.0], [446.0, 7592.666666666667], [444.0, 6049.5], [445.0, 9767.0], [435.0, 8518.0], [433.0, 8385.4], [434.0, 7717.0], [432.0, 4427.0], [443.0, 5541.5], [442.0, 6767.0], [441.0, 7543.0], [440.0, 4736.0], [447.0, 6104.0], [439.0, 5550.8], [438.0, 5830.0], [437.0, 8715.333333333334], [436.0, 7239.142857142856], [461.0, 7146.0], [462.0, 5041.0], [463.0, 18583.0], [460.0, 4504.333333333333], [451.0, 7814.4], [450.0, 6610.0], [449.0, 7207.8], [448.0, 8929.666666666666], [459.0, 4395.25], [458.0, 7741.333333333333], [457.0, 4910.6], [456.0, 6724.666666666667], [455.0, 6346.166666666667], [454.0, 6016.4], [453.0, 5960.0], [452.0, 6275.5], [477.0, 3991.0], [465.0, 10082.75], [469.0, 6042.0], [468.0, 4612.5], [466.0, 5552.0], [464.0, 5974.5], [471.0, 8860.5], [470.0, 7736.666666666667], [472.0, 4181.0], [479.0, 7129.0], [478.0, 6246.4], [473.0, 4402.5], [476.0, 6474.4], [467.0, 3342.0], [475.0, 4285.833333333334], [474.0, 3630.0], [488.0, 6531.4], [482.0, 7061.0], [481.0, 6095.5], [480.0, 5470.400000000001], [487.0, 6530.25], [485.0, 6981.571428571428], [486.0, 4840.166666666666], [484.0, 3616.8333333333335], [491.0, 6457.181818181818], [490.0, 6385.666666666667], [489.0, 5559.333333333333], [492.0, 6642.428571428572], [483.0, 6143.714285714285], [493.0, 5122.9800000000005], [495.0, 4185.4], [494.0, 5190.333333333333], [499.0, 7197.75], [501.0, 8176.11111111111], [500.0, 5856.428571428572], [498.0, 6264.0], [502.0, 10779.666666666666], [503.0, 10475.833333333334], [496.0, 6775.0], [497.0, 12499.0], [510.0, 9372.166666666668], [508.0, 5807.75], [509.0, 10498.5], [506.0, 12515.0], [507.0, 8969.5], [505.0, 6716.5], [504.0, 6949.5], [511.0, 8774.650000000003], [539.0, 7168.3], [524.0, 6602.0], [525.0, 6648.142857142858], [526.0, 7576.571428571429], [536.0, 9982.6], [519.0, 8891.0], [518.0, 9568.6], [517.0, 12204.57142857143], [516.0, 9457.571428571428], [514.0, 8561.8], [515.0, 8973.75], [513.0, 12321.0], [512.0, 11298.285714285714], [527.0, 6845.25], [538.0, 10491.857142857143], [537.0, 7035.666666666667], [523.0, 5911.5], [522.0, 11262.2], [521.0, 8047.888888888889], [520.0, 8958.285714285714], [532.0, 9083.777777777777], [533.0, 6069.5], [535.0, 7761.8], [534.0, 6904.333333333333], [531.0, 8755.2], [540.0, 9315.0], [541.0, 9324.333333333332], [543.0, 13146.666666666666], [528.0, 5309.333333333333], [530.0, 7142.25], [529.0, 8227.666666666666], [542.0, 9169.125], [546.0, 8105.428571428572], [545.0, 7903.25], [547.0, 7208.75], [551.0, 9131.0], [560.0, 8238.5], [562.0, 8452.5], [563.0, 3909.0], [565.0, 9561.0], [564.0, 12869.0], [561.0, 8151.5], [550.0, 8225.5], [549.0, 9421.5], [548.0, 7673.5], [544.0, 7140.75], [555.0, 10210.57142857143], [554.0, 8008.25], [557.0, 8557.0], [556.0, 10224.25], [559.0, 9565.0], [558.0, 8765.666666666666], [553.0, 10537.2], [552.0, 8262.0], [1.0, 413.72727272727275]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[27.56405172413775, 520.3868103448266]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 565.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2852.0, "minX": 1.72918284E12, "maxY": 3519644.5, "series": [{"data": [[1.72918284E12, 2809356.1666666665], [1.7291835E12, 3383357.05], [1.7291838E12, 3183096.85], [1.72918344E12, 3406986.2666666666], [1.72918314E12, 3261882.8833333333], [1.72918308E12, 3368800.933333333], [1.72918374E12, 3376688.1166666667], [1.72918338E12, 3353062.0166666666], [1.72918368E12, 3378927.05], [1.72918332E12, 3405963.1666666665], [1.72918398E12, 1605057.6], [1.72918302E12, 3410428.1166666667], [1.72918296E12, 3367646.7], [1.72918362E12, 3376661.7666666666], [1.72918392E12, 3428474.5833333335], [1.72918356E12, 3373275.183333333], [1.72918326E12, 3381199.433333333], [1.7291832E12, 3455483.183333333], [1.72918386E12, 3519644.5], [1.7291829E12, 3435131.2666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72918284E12, 4992.0], [1.7291835E12, 6012.0], [1.7291838E12, 5656.0], [1.72918344E12, 6054.0], [1.72918314E12, 5796.0], [1.72918308E12, 5986.0], [1.72918374E12, 6000.0], [1.72918338E12, 5958.0], [1.72918368E12, 6004.0], [1.72918332E12, 6052.0], [1.72918398E12, 2852.0], [1.72918302E12, 6060.0], [1.72918296E12, 5984.0], [1.72918362E12, 6000.0], [1.72918392E12, 6092.0], [1.72918356E12, 5994.0], [1.72918326E12, 6008.0], [1.7291832E12, 6140.0], [1.72918386E12, 6254.0], [1.7291829E12, 6104.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918398E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 215.22600000000008, "minX": 1.72918284E12, "maxY": 4719.3828594313145, "series": [{"data": [[1.72918284E12, 4719.3828594313145], [1.7291835E12, 246.19427811044588], [1.7291838E12, 254.02192362093297], [1.72918344E12, 274.79385530227916], [1.72918314E12, 220.6507936507937], [1.72918308E12, 311.7076511861005], [1.72918374E12, 215.22600000000008], [1.72918338E12, 220.7109768378649], [1.72918368E12, 521.4400399733506], [1.72918332E12, 221.04527428949118], [1.72918398E12, 238.34852734922887], [1.72918302E12, 257.4079207920797], [1.72918296E12, 527.7165775401056], [1.72918362E12, 240.72633333333334], [1.72918392E12, 228.1066973079453], [1.72918356E12, 234.88388388388393], [1.72918326E12, 237.51398135818928], [1.7291832E12, 257.2166123778505], [1.72918386E12, 225.73936680524437], [1.7291829E12, 1300.5766710353869]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918398E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 166.12733333333315, "minX": 1.72918284E12, "maxY": 3374.865839006799, "series": [{"data": [[1.72918284E12, 3374.865839006799], [1.7291835E12, 194.01896207584863], [1.7291838E12, 198.67538896746848], [1.72918344E12, 218.92732077964968], [1.72918314E12, 169.59420289855103], [1.72918308E12, 240.79485466087584], [1.72918374E12, 166.12733333333315], [1.72918338E12, 169.71299093655585], [1.72918368E12, 409.5153231179202], [1.72918332E12, 169.61269001982814], [1.72918398E12, 189.0504908835907], [1.72918302E12, 199.51683168316836], [1.72918296E12, 393.2309491978613], [1.72918362E12, 190.91766666666658], [1.72918392E12, 180.72127380170716], [1.72918356E12, 185.00567233900546], [1.72918326E12, 181.6694407456719], [1.7291832E12, 201.72345276872974], [1.72918386E12, 176.80972177806143], [1.7291829E12, 743.4914809960698]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918398E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 113.59366666666638, "minX": 1.72918284E12, "maxY": 2485.0804965959137, "series": [{"data": [[1.72918284E12, 2485.0804965959137], [1.7291835E12, 136.477711244179], [1.7291838E12, 141.83592644978773], [1.72918344E12, 161.07400066071986], [1.72918314E12, 114.97998619737741], [1.72918308E12, 171.35850317407267], [1.72918374E12, 113.59366666666638], [1.72918338E12, 116.12789526686811], [1.72918368E12, 279.89073950699554], [1.72918332E12, 115.12557832121611], [1.72918398E12, 128.2447405329594], [1.72918302E12, 138.73597359735956], [1.72918296E12, 230.4074197860965], [1.72918362E12, 133.72100000000017], [1.72918392E12, 124.94648719632347], [1.72918356E12, 129.2235568902234], [1.72918326E12, 124.4710386151799], [1.7291832E12, 143.25602605863182], [1.72918386E12, 122.69683402622313], [1.7291829E12, 507.1703800786352]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918398E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 145.0, "minX": 1.72918284E12, "maxY": 167777.0, "series": [{"data": [[1.72918284E12, 47289.0], [1.7291835E12, 7364.0], [1.7291838E12, 7212.0], [1.72918344E12, 3438.0], [1.72918314E12, 3186.0], [1.72918308E12, 4249.0], [1.72918374E12, 3209.0], [1.72918338E12, 3256.0], [1.72918368E12, 7777.0], [1.72918332E12, 3523.0], [1.72918398E12, 1537.0], [1.72918302E12, 3201.0], [1.72918296E12, 167777.0], [1.72918362E12, 3189.0], [1.72918392E12, 3213.0], [1.72918356E12, 3212.0], [1.72918326E12, 3195.0], [1.7291832E12, 3435.0], [1.72918386E12, 3218.0], [1.7291829E12, 104515.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72918284E12, 12562.100000000002], [1.7291835E12, 293.90000000000055], [1.7291838E12, 328.2999999999997], [1.72918344E12, 430.0], [1.72918314E12, 257.0], [1.72918308E12, 674.5999999999999], [1.72918374E12, 225.0], [1.72918338E12, 252.0], [1.72918368E12, 1263.7000000000003], [1.72918332E12, 261.0], [1.72918398E12, 425.29999999999995], [1.72918302E12, 476.9000000000001], [1.72918296E12, 737.7000000000003], [1.72918362E12, 319.8000000000002], [1.72918392E12, 229.0], [1.72918356E12, 249.0], [1.72918326E12, 295.0], [1.7291832E12, 389.9000000000001], [1.72918386E12, 227.20000000000027], [1.7291829E12, 1507.1000000000008]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72918284E12, 33954.38000000001], [1.7291835E12, 1226.2999999999984], [1.7291838E12, 1334.0], [1.72918344E12, 1402.4399999999996], [1.72918314E12, 1189.0099999999998], [1.72918308E12, 1643.4799999999996], [1.72918374E12, 1190.0], [1.72918338E12, 1190.0], [1.72918368E12, 3442.46999999999], [1.72918332E12, 1184.0], [1.72918398E12, 1204.46], [1.72918302E12, 1220.7600000000002], [1.72918296E12, 1767.6600000000062], [1.72918362E12, 1208.0], [1.72918392E12, 1194.5300000000002], [1.72918356E12, 1203.0], [1.72918326E12, 1202.8999999999996], [1.7291832E12, 1388.1599999999999], [1.72918386E12, 1188.7199999999998], [1.7291829E12, 31165.369999999384]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72918284E12, 18564.300000000003], [1.7291835E12, 579.3000000000002], [1.7291838E12, 547.6499999999992], [1.72918344E12, 1168.0], [1.72918314E12, 481.0499999999997], [1.72918308E12, 1177.0], [1.72918374E12, 416.6499999999951], [1.72918338E12, 454.0], [1.72918368E12, 1683.2499999999995], [1.72918332E12, 476.6500000000001], [1.72918398E12, 519.2999999999997], [1.72918302E12, 743.8999999999996], [1.72918296E12, 1209.0499999999997], [1.72918362E12, 537.8999999999996], [1.72918392E12, 503.0], [1.72918356E12, 504.0], [1.72918326E12, 574.0], [1.7291832E12, 779.6999999999989], [1.72918386E12, 490.5999999999999], [1.7291829E12, 3412.35]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72918284E12, 165.0], [1.7291835E12, 147.0], [1.7291838E12, 152.0], [1.72918344E12, 153.0], [1.72918314E12, 148.0], [1.72918308E12, 150.0], [1.72918374E12, 150.0], [1.72918338E12, 152.0], [1.72918368E12, 154.0], [1.72918332E12, 147.0], [1.72918398E12, 150.0], [1.72918302E12, 149.0], [1.72918296E12, 150.0], [1.72918362E12, 152.0], [1.72918392E12, 148.0], [1.72918356E12, 148.0], [1.72918326E12, 153.0], [1.7291832E12, 150.0], [1.72918386E12, 145.0], [1.7291829E12, 158.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72918284E12, 1781.0], [1.7291835E12, 178.0], [1.7291838E12, 183.0], [1.72918344E12, 182.0], [1.72918314E12, 177.0], [1.72918308E12, 182.0], [1.72918374E12, 179.0], [1.72918338E12, 181.0], [1.72918368E12, 249.0], [1.72918332E12, 176.0], [1.72918398E12, 179.5], [1.72918302E12, 179.0], [1.72918296E12, 221.0], [1.72918362E12, 178.0], [1.72918392E12, 176.0], [1.72918356E12, 181.0], [1.72918326E12, 186.0], [1.7291832E12, 180.0], [1.72918386E12, 179.0], [1.7291829E12, 244.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918398E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 169.0, "minX": 2.0, "maxY": 9608.0, "series": [{"data": [[2.0, 1173.5], [4.0, 461.0], [6.0, 169.0], [8.0, 181.0], [9.0, 1483.0], [11.0, 190.0], [12.0, 173.0], [13.0, 860.0], [14.0, 2061.0], [15.0, 933.5], [16.0, 927.5], [17.0, 270.5], [19.0, 177.0], [20.0, 490.0], [21.0, 175.5], [22.0, 178.5], [23.0, 186.5], [24.0, 206.0], [25.0, 869.0], [26.0, 181.0], [27.0, 178.5], [28.0, 180.0], [29.0, 193.0], [30.0, 185.0], [31.0, 174.0], [33.0, 172.0], [32.0, 174.0], [34.0, 300.5], [35.0, 298.0], [37.0, 186.5], [36.0, 184.0], [39.0, 206.0], [38.0, 179.0], [41.0, 194.0], [40.0, 185.0], [43.0, 183.0], [42.0, 190.0], [45.0, 185.0], [44.0, 176.0], [47.0, 182.0], [46.0, 180.0], [48.0, 178.0], [49.0, 178.0], [50.0, 180.0], [51.0, 180.0], [52.0, 180.0], [53.0, 181.0], [54.0, 179.0], [55.0, 180.0], [56.0, 184.0], [57.0, 194.0], [59.0, 192.0], [58.0, 186.0], [61.0, 196.0], [60.0, 190.0], [63.0, 200.0], [62.0, 195.0], [67.0, 265.5], [66.0, 187.0], [65.0, 188.0], [64.0, 187.5], [70.0, 523.0], [69.0, 2462.0], [71.0, 192.0], [68.0, 187.5], [72.0, 253.0], [74.0, 220.5], [73.0, 191.0], [75.0, 190.0], [79.0, 423.5], [83.0, 1413.0], [80.0, 278.5], [82.0, 191.0], [81.0, 211.0], [84.0, 518.0], [86.0, 366.5], [85.0, 492.0], [91.0, 871.0], [89.0, 189.0], [90.0, 179.0], [88.0, 178.0], [94.0, 3138.5], [92.0, 565.0], [96.0, 1554.0], [97.0, 396.0], [99.0, 913.0], [102.0, 8667.5], [100.0, 275.0], [101.0, 324.0], [107.0, 1079.0], [105.0, 217.0], [112.0, 2000.0], [113.0, 1435.5], [114.0, 1257.0], [123.0, 233.0], [125.0, 249.0], [128.0, 4769.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 9608.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 5876.0, "series": [{"data": [[2.0, 1131.5], [4.0, 420.0], [6.0, 126.0], [8.0, 132.0], [9.0, 1230.0], [11.0, 144.0], [12.0, 129.5], [13.0, 803.0], [14.0, 1269.5], [15.0, 746.0], [16.0, 369.5], [17.0, 173.0], [19.0, 133.0], [20.0, 313.5], [21.0, 130.5], [22.0, 132.5], [23.0, 140.5], [24.0, 153.0], [25.0, 510.0], [26.0, 136.0], [27.0, 132.0], [28.0, 134.0], [29.0, 144.0], [30.0, 137.5], [31.0, 131.0], [33.0, 130.0], [32.0, 131.0], [34.0, 205.0], [35.0, 196.0], [37.0, 137.0], [36.0, 136.0], [39.0, 139.0], [38.0, 134.0], [41.0, 140.0], [40.0, 137.0], [43.0, 136.0], [42.0, 141.0], [45.0, 138.0], [44.0, 132.0], [47.0, 136.0], [46.0, 135.0], [48.0, 133.0], [49.0, 133.0], [50.0, 134.0], [51.0, 135.0], [52.0, 134.0], [53.0, 135.0], [54.0, 133.0], [55.0, 134.0], [56.0, 137.0], [57.0, 145.0], [59.0, 143.0], [58.0, 137.0], [61.0, 146.5], [60.0, 141.0], [63.0, 148.5], [62.0, 144.0], [67.0, 212.0], [66.0, 137.5], [65.0, 140.0], [64.0, 140.5], [70.0, 370.0], [69.0, 1938.0], [71.0, 142.0], [68.0, 140.0], [72.0, 188.5], [74.0, 158.0], [73.0, 141.0], [75.0, 144.0], [79.0, 259.5], [83.0, 1244.0], [80.0, 219.5], [82.0, 141.0], [81.0, 156.0], [84.0, 350.5], [86.0, 218.5], [85.0, 378.0], [91.0, 622.0], [89.0, 139.5], [90.0, 133.0], [88.0, 133.0], [94.0, 2308.5], [92.0, 418.0], [96.0, 1145.0], [97.0, 253.0], [99.0, 753.0], [102.0, 5876.0], [100.0, 196.0], [101.0, 229.0], [107.0, 671.0], [105.0, 156.0], [112.0, 1226.5], [113.0, 955.5], [114.0, 869.5], [123.0, 166.0], [125.0, 183.0], [128.0, 3776.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[4.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 128.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 23.583333333333332, "minX": 1.72918284E12, "maxY": 52.05, "series": [{"data": [[1.72918284E12, 42.516666666666666], [1.7291835E12, 50.11666666666667], [1.7291838E12, 47.11666666666667], [1.72918344E12, 50.53333333333333], [1.72918314E12, 48.233333333333334], [1.72918308E12, 49.96666666666667], [1.72918374E12, 50.03333333333333], [1.72918338E12, 49.55], [1.72918368E12, 49.96666666666667], [1.72918332E12, 50.483333333333334], [1.72918398E12, 23.583333333333332], [1.72918302E12, 50.4], [1.72918296E12, 49.733333333333334], [1.72918362E12, 50.0], [1.72918392E12, 50.833333333333336], [1.72918356E12, 50.0], [1.72918326E12, 50.0], [1.7291832E12, 51.21666666666667], [1.72918386E12, 52.05], [1.7291829E12, 50.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918398E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918284E12, "maxY": 52.11666666666667, "series": [{"data": [[1.72918284E12, 41.6], [1.7291835E12, 50.1], [1.7291838E12, 47.13333333333333], [1.72918344E12, 50.45], [1.72918314E12, 48.3], [1.72918308E12, 49.88333333333333], [1.72918374E12, 50.0], [1.72918338E12, 49.65], [1.72918368E12, 50.03333333333333], [1.72918332E12, 50.43333333333333], [1.72918398E12, 23.766666666666666], [1.72918302E12, 50.5], [1.72918296E12, 49.86666666666667], [1.72918362E12, 50.0], [1.72918392E12, 50.766666666666666], [1.72918356E12, 49.95], [1.72918326E12, 50.06666666666667], [1.7291832E12, 51.166666666666664], [1.72918386E12, 52.11666666666667], [1.7291829E12, 50.86666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72918284E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72918398E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918284E12, "maxY": 52.11666666666667, "series": [{"data": [[1.72918284E12, 41.6], [1.7291835E12, 50.1], [1.7291838E12, 47.13333333333333], [1.72918344E12, 50.45], [1.72918314E12, 48.3], [1.72918308E12, 49.88333333333333], [1.72918374E12, 50.0], [1.72918338E12, 49.65], [1.72918368E12, 50.03333333333333], [1.72918332E12, 50.43333333333333], [1.72918398E12, 23.766666666666666], [1.72918302E12, 50.5], [1.72918296E12, 49.86666666666667], [1.72918362E12, 50.0], [1.72918392E12, 50.766666666666666], [1.72918356E12, 49.95], [1.72918326E12, 50.06666666666667], [1.7291832E12, 51.166666666666664], [1.72918386E12, 52.11666666666667], [1.7291829E12, 50.86666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72918284E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918398E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918284E12, "maxY": 52.11666666666667, "series": [{"data": [[1.72918284E12, 41.6], [1.7291835E12, 50.1], [1.7291838E12, 47.13333333333333], [1.72918344E12, 50.45], [1.72918314E12, 48.3], [1.72918308E12, 49.88333333333333], [1.72918374E12, 50.0], [1.72918338E12, 49.65], [1.72918368E12, 50.03333333333333], [1.72918332E12, 50.43333333333333], [1.72918398E12, 23.766666666666666], [1.72918302E12, 50.5], [1.72918296E12, 49.86666666666667], [1.72918362E12, 50.0], [1.72918392E12, 50.766666666666666], [1.72918356E12, 49.95], [1.72918326E12, 50.06666666666667], [1.7291832E12, 51.166666666666664], [1.72918386E12, 52.11666666666667], [1.7291829E12, 50.86666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72918284E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72918398E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

