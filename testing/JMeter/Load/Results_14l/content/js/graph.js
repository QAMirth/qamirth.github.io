/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 123.0, "minX": 0.0, "maxY": 18307.0, "series": [{"data": [[0.0, 123.0], [0.1, 127.0], [0.2, 129.0], [0.3, 129.0], [0.4, 130.0], [0.5, 130.0], [0.6, 130.0], [0.7, 131.0], [0.8, 131.0], [0.9, 131.0], [1.0, 131.0], [1.1, 132.0], [1.2, 132.0], [1.3, 132.0], [1.4, 132.0], [1.5, 132.0], [1.6, 132.0], [1.7, 132.0], [1.8, 133.0], [1.9, 133.0], [2.0, 133.0], [2.1, 133.0], [2.2, 133.0], [2.3, 133.0], [2.4, 133.0], [2.5, 133.0], [2.6, 133.0], [2.7, 134.0], [2.8, 134.0], [2.9, 134.0], [3.0, 134.0], [3.1, 134.0], [3.2, 134.0], [3.3, 134.0], [3.4, 134.0], [3.5, 134.0], [3.6, 134.0], [3.7, 134.0], [3.8, 134.0], [3.9, 134.0], [4.0, 135.0], [4.1, 135.0], [4.2, 135.0], [4.3, 135.0], [4.4, 135.0], [4.5, 135.0], [4.6, 135.0], [4.7, 135.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 135.0], [5.2, 135.0], [5.3, 135.0], [5.4, 135.0], [5.5, 135.0], [5.6, 136.0], [5.7, 136.0], [5.8, 136.0], [5.9, 136.0], [6.0, 136.0], [6.1, 136.0], [6.2, 136.0], [6.3, 136.0], [6.4, 136.0], [6.5, 136.0], [6.6, 136.0], [6.7, 136.0], [6.8, 136.0], [6.9, 136.0], [7.0, 136.0], [7.1, 136.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 137.0], [7.8, 137.0], [7.9, 137.0], [8.0, 137.0], [8.1, 137.0], [8.2, 137.0], [8.3, 137.0], [8.4, 137.0], [8.5, 137.0], [8.6, 137.0], [8.7, 137.0], [8.8, 137.0], [8.9, 137.0], [9.0, 137.0], [9.1, 137.0], [9.2, 137.0], [9.3, 137.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 137.0], [9.8, 137.0], [9.9, 137.0], [10.0, 137.0], [10.1, 137.0], [10.2, 137.0], [10.3, 138.0], [10.4, 138.0], [10.5, 138.0], [10.6, 138.0], [10.7, 138.0], [10.8, 138.0], [10.9, 138.0], [11.0, 138.0], [11.1, 138.0], [11.2, 138.0], [11.3, 138.0], [11.4, 138.0], [11.5, 138.0], [11.6, 138.0], [11.7, 138.0], [11.8, 138.0], [11.9, 138.0], [12.0, 138.0], [12.1, 138.0], [12.2, 138.0], [12.3, 138.0], [12.4, 138.0], [12.5, 138.0], [12.6, 138.0], [12.7, 138.0], [12.8, 138.0], [12.9, 138.0], [13.0, 138.0], [13.1, 138.0], [13.2, 138.0], [13.3, 138.0], [13.4, 139.0], [13.5, 139.0], [13.6, 139.0], [13.7, 139.0], [13.8, 139.0], [13.9, 139.0], [14.0, 139.0], [14.1, 139.0], [14.2, 139.0], [14.3, 139.0], [14.4, 139.0], [14.5, 139.0], [14.6, 139.0], [14.7, 139.0], [14.8, 139.0], [14.9, 139.0], [15.0, 139.0], [15.1, 139.0], [15.2, 139.0], [15.3, 139.0], [15.4, 139.0], [15.5, 139.0], [15.6, 139.0], [15.7, 139.0], [15.8, 139.0], [15.9, 139.0], [16.0, 139.0], [16.1, 139.0], [16.2, 139.0], [16.3, 139.0], [16.4, 139.0], [16.5, 139.0], [16.6, 139.0], [16.7, 139.0], [16.8, 139.0], [16.9, 140.0], [17.0, 140.0], [17.1, 140.0], [17.2, 140.0], [17.3, 140.0], [17.4, 140.0], [17.5, 140.0], [17.6, 140.0], [17.7, 140.0], [17.8, 140.0], [17.9, 140.0], [18.0, 140.0], [18.1, 140.0], [18.2, 140.0], [18.3, 140.0], [18.4, 140.0], [18.5, 140.0], [18.6, 140.0], [18.7, 140.0], [18.8, 140.0], [18.9, 140.0], [19.0, 140.0], [19.1, 140.0], [19.2, 140.0], [19.3, 140.0], [19.4, 140.0], [19.5, 140.0], [19.6, 140.0], [19.7, 140.0], [19.8, 140.0], [19.9, 140.0], [20.0, 140.0], [20.1, 140.0], [20.2, 140.0], [20.3, 140.0], [20.4, 140.0], [20.5, 140.0], [20.6, 140.0], [20.7, 140.0], [20.8, 141.0], [20.9, 141.0], [21.0, 141.0], [21.1, 141.0], [21.2, 141.0], [21.3, 141.0], [21.4, 141.0], [21.5, 141.0], [21.6, 141.0], [21.7, 141.0], [21.8, 141.0], [21.9, 141.0], [22.0, 141.0], [22.1, 141.0], [22.2, 141.0], [22.3, 141.0], [22.4, 141.0], [22.5, 141.0], [22.6, 141.0], [22.7, 141.0], [22.8, 141.0], [22.9, 141.0], [23.0, 141.0], [23.1, 141.0], [23.2, 141.0], [23.3, 141.0], [23.4, 141.0], [23.5, 141.0], [23.6, 141.0], [23.7, 141.0], [23.8, 141.0], [23.9, 141.0], [24.0, 141.0], [24.1, 141.0], [24.2, 141.0], [24.3, 141.0], [24.4, 141.0], [24.5, 141.0], [24.6, 141.0], [24.7, 141.0], [24.8, 141.0], [24.9, 141.0], [25.0, 141.0], [25.1, 142.0], [25.2, 142.0], [25.3, 142.0], [25.4, 142.0], [25.5, 142.0], [25.6, 142.0], [25.7, 142.0], [25.8, 142.0], [25.9, 142.0], [26.0, 142.0], [26.1, 142.0], [26.2, 142.0], [26.3, 142.0], [26.4, 142.0], [26.5, 142.0], [26.6, 142.0], [26.7, 142.0], [26.8, 142.0], [26.9, 142.0], [27.0, 142.0], [27.1, 142.0], [27.2, 142.0], [27.3, 142.0], [27.4, 142.0], [27.5, 142.0], [27.6, 142.0], [27.7, 142.0], [27.8, 142.0], [27.9, 142.0], [28.0, 142.0], [28.1, 142.0], [28.2, 142.0], [28.3, 142.0], [28.4, 142.0], [28.5, 142.0], [28.6, 142.0], [28.7, 142.0], [28.8, 142.0], [28.9, 142.0], [29.0, 142.0], [29.1, 142.0], [29.2, 142.0], [29.3, 142.0], [29.4, 142.0], [29.5, 142.0], [29.6, 143.0], [29.7, 143.0], [29.8, 143.0], [29.9, 143.0], [30.0, 143.0], [30.1, 143.0], [30.2, 143.0], [30.3, 143.0], [30.4, 143.0], [30.5, 143.0], [30.6, 143.0], [30.7, 143.0], [30.8, 143.0], [30.9, 143.0], [31.0, 143.0], [31.1, 143.0], [31.2, 143.0], [31.3, 143.0], [31.4, 143.0], [31.5, 143.0], [31.6, 143.0], [31.7, 143.0], [31.8, 143.0], [31.9, 143.0], [32.0, 143.0], [32.1, 143.0], [32.2, 143.0], [32.3, 143.0], [32.4, 143.0], [32.5, 143.0], [32.6, 143.0], [32.7, 143.0], [32.8, 143.0], [32.9, 143.0], [33.0, 143.0], [33.1, 143.0], [33.2, 143.0], [33.3, 143.0], [33.4, 143.0], [33.5, 143.0], [33.6, 143.0], [33.7, 143.0], [33.8, 143.0], [33.9, 143.0], [34.0, 143.0], [34.1, 143.0], [34.2, 143.0], [34.3, 143.0], [34.4, 144.0], [34.5, 144.0], [34.6, 144.0], [34.7, 144.0], [34.8, 144.0], [34.9, 144.0], [35.0, 144.0], [35.1, 144.0], [35.2, 144.0], [35.3, 144.0], [35.4, 144.0], [35.5, 144.0], [35.6, 144.0], [35.7, 144.0], [35.8, 144.0], [35.9, 144.0], [36.0, 144.0], [36.1, 144.0], [36.2, 144.0], [36.3, 144.0], [36.4, 144.0], [36.5, 144.0], [36.6, 144.0], [36.7, 144.0], [36.8, 144.0], [36.9, 144.0], [37.0, 144.0], [37.1, 144.0], [37.2, 144.0], [37.3, 144.0], [37.4, 144.0], [37.5, 144.0], [37.6, 144.0], [37.7, 144.0], [37.8, 144.0], [37.9, 144.0], [38.0, 144.0], [38.1, 144.0], [38.2, 144.0], [38.3, 144.0], [38.4, 144.0], [38.5, 144.0], [38.6, 144.0], [38.7, 144.0], [38.8, 144.0], [38.9, 144.0], [39.0, 144.0], [39.1, 144.0], [39.2, 145.0], [39.3, 145.0], [39.4, 145.0], [39.5, 145.0], [39.6, 145.0], [39.7, 145.0], [39.8, 145.0], [39.9, 145.0], [40.0, 145.0], [40.1, 145.0], [40.2, 145.0], [40.3, 145.0], [40.4, 145.0], [40.5, 145.0], [40.6, 145.0], [40.7, 145.0], [40.8, 145.0], [40.9, 145.0], [41.0, 145.0], [41.1, 145.0], [41.2, 145.0], [41.3, 145.0], [41.4, 145.0], [41.5, 145.0], [41.6, 145.0], [41.7, 145.0], [41.8, 145.0], [41.9, 145.0], [42.0, 145.0], [42.1, 145.0], [42.2, 145.0], [42.3, 145.0], [42.4, 145.0], [42.5, 145.0], [42.6, 145.0], [42.7, 145.0], [42.8, 145.0], [42.9, 145.0], [43.0, 145.0], [43.1, 145.0], [43.2, 145.0], [43.3, 145.0], [43.4, 145.0], [43.5, 145.0], [43.6, 145.0], [43.7, 145.0], [43.8, 145.0], [43.9, 146.0], [44.0, 146.0], [44.1, 146.0], [44.2, 146.0], [44.3, 146.0], [44.4, 146.0], [44.5, 146.0], [44.6, 146.0], [44.7, 146.0], [44.8, 146.0], [44.9, 146.0], [45.0, 146.0], [45.1, 146.0], [45.2, 146.0], [45.3, 146.0], [45.4, 146.0], [45.5, 146.0], [45.6, 146.0], [45.7, 146.0], [45.8, 146.0], [45.9, 146.0], [46.0, 146.0], [46.1, 146.0], [46.2, 146.0], [46.3, 146.0], [46.4, 146.0], [46.5, 146.0], [46.6, 146.0], [46.7, 146.0], [46.8, 146.0], [46.9, 146.0], [47.0, 146.0], [47.1, 146.0], [47.2, 146.0], [47.3, 146.0], [47.4, 146.0], [47.5, 146.0], [47.6, 146.0], [47.7, 146.0], [47.8, 146.0], [47.9, 146.0], [48.0, 146.0], [48.1, 146.0], [48.2, 146.0], [48.3, 146.0], [48.4, 147.0], [48.5, 147.0], [48.6, 147.0], [48.7, 147.0], [48.8, 147.0], [48.9, 147.0], [49.0, 147.0], [49.1, 147.0], [49.2, 147.0], [49.3, 147.0], [49.4, 147.0], [49.5, 147.0], [49.6, 147.0], [49.7, 147.0], [49.8, 147.0], [49.9, 147.0], [50.0, 147.0], [50.1, 147.0], [50.2, 147.0], [50.3, 147.0], [50.4, 147.0], [50.5, 147.0], [50.6, 147.0], [50.7, 147.0], [50.8, 147.0], [50.9, 147.0], [51.0, 147.0], [51.1, 147.0], [51.2, 147.0], [51.3, 147.0], [51.4, 147.0], [51.5, 147.0], [51.6, 147.0], [51.7, 147.0], [51.8, 147.0], [51.9, 147.0], [52.0, 147.0], [52.1, 147.0], [52.2, 147.0], [52.3, 147.0], [52.4, 147.0], [52.5, 148.0], [52.6, 148.0], [52.7, 148.0], [52.8, 148.0], [52.9, 148.0], [53.0, 148.0], [53.1, 148.0], [53.2, 148.0], [53.3, 148.0], [53.4, 148.0], [53.5, 148.0], [53.6, 148.0], [53.7, 148.0], [53.8, 148.0], [53.9, 148.0], [54.0, 148.0], [54.1, 148.0], [54.2, 148.0], [54.3, 148.0], [54.4, 148.0], [54.5, 148.0], [54.6, 148.0], [54.7, 148.0], [54.8, 148.0], [54.9, 148.0], [55.0, 148.0], [55.1, 148.0], [55.2, 148.0], [55.3, 148.0], [55.4, 148.0], [55.5, 148.0], [55.6, 148.0], [55.7, 148.0], [55.8, 148.0], [55.9, 148.0], [56.0, 148.0], [56.1, 148.0], [56.2, 148.0], [56.3, 148.0], [56.4, 149.0], [56.5, 149.0], [56.6, 149.0], [56.7, 149.0], [56.8, 149.0], [56.9, 149.0], [57.0, 149.0], [57.1, 149.0], [57.2, 149.0], [57.3, 149.0], [57.4, 149.0], [57.5, 149.0], [57.6, 149.0], [57.7, 149.0], [57.8, 149.0], [57.9, 149.0], [58.0, 149.0], [58.1, 149.0], [58.2, 149.0], [58.3, 149.0], [58.4, 149.0], [58.5, 149.0], [58.6, 149.0], [58.7, 149.0], [58.8, 149.0], [58.9, 149.0], [59.0, 149.0], [59.1, 149.0], [59.2, 149.0], [59.3, 149.0], [59.4, 149.0], [59.5, 149.0], [59.6, 149.0], [59.7, 149.0], [59.8, 149.0], [59.9, 150.0], [60.0, 150.0], [60.1, 150.0], [60.2, 150.0], [60.3, 150.0], [60.4, 150.0], [60.5, 150.0], [60.6, 150.0], [60.7, 150.0], [60.8, 150.0], [60.9, 150.0], [61.0, 150.0], [61.1, 150.0], [61.2, 150.0], [61.3, 150.0], [61.4, 150.0], [61.5, 150.0], [61.6, 150.0], [61.7, 150.0], [61.8, 150.0], [61.9, 150.0], [62.0, 150.0], [62.1, 150.0], [62.2, 150.0], [62.3, 150.0], [62.4, 150.0], [62.5, 150.0], [62.6, 150.0], [62.7, 150.0], [62.8, 150.0], [62.9, 150.0], [63.0, 151.0], [63.1, 151.0], [63.2, 151.0], [63.3, 151.0], [63.4, 151.0], [63.5, 151.0], [63.6, 151.0], [63.7, 151.0], [63.8, 151.0], [63.9, 151.0], [64.0, 151.0], [64.1, 151.0], [64.2, 151.0], [64.3, 151.0], [64.4, 151.0], [64.5, 151.0], [64.6, 151.0], [64.7, 151.0], [64.8, 151.0], [64.9, 151.0], [65.0, 151.0], [65.1, 151.0], [65.2, 151.0], [65.3, 151.0], [65.4, 151.0], [65.5, 151.0], [65.6, 151.0], [65.7, 152.0], [65.8, 152.0], [65.9, 152.0], [66.0, 152.0], [66.1, 152.0], [66.2, 152.0], [66.3, 152.0], [66.4, 152.0], [66.5, 152.0], [66.6, 152.0], [66.7, 152.0], [66.8, 152.0], [66.9, 152.0], [67.0, 152.0], [67.1, 152.0], [67.2, 152.0], [67.3, 152.0], [67.4, 152.0], [67.5, 152.0], [67.6, 152.0], [67.7, 152.0], [67.8, 152.0], [67.9, 152.0], [68.0, 152.0], [68.1, 152.0], [68.2, 152.0], [68.3, 153.0], [68.4, 153.0], [68.5, 153.0], [68.6, 153.0], [68.7, 153.0], [68.8, 153.0], [68.9, 153.0], [69.0, 153.0], [69.1, 153.0], [69.2, 153.0], [69.3, 153.0], [69.4, 153.0], [69.5, 153.0], [69.6, 153.0], [69.7, 153.0], [69.8, 153.0], [69.9, 153.0], [70.0, 153.0], [70.1, 153.0], [70.2, 153.0], [70.3, 153.0], [70.4, 153.0], [70.5, 154.0], [70.6, 154.0], [70.7, 154.0], [70.8, 154.0], [70.9, 154.0], [71.0, 154.0], [71.1, 154.0], [71.2, 154.0], [71.3, 154.0], [71.4, 154.0], [71.5, 154.0], [71.6, 154.0], [71.7, 154.0], [71.8, 154.0], [71.9, 154.0], [72.0, 154.0], [72.1, 154.0], [72.2, 154.0], [72.3, 154.0], [72.4, 155.0], [72.5, 155.0], [72.6, 155.0], [72.7, 155.0], [72.8, 155.0], [72.9, 155.0], [73.0, 155.0], [73.1, 155.0], [73.2, 155.0], [73.3, 155.0], [73.4, 155.0], [73.5, 155.0], [73.6, 155.0], [73.7, 155.0], [73.8, 155.0], [73.9, 155.0], [74.0, 155.0], [74.1, 156.0], [74.2, 156.0], [74.3, 156.0], [74.4, 156.0], [74.5, 156.0], [74.6, 156.0], [74.7, 156.0], [74.8, 156.0], [74.9, 156.0], [75.0, 156.0], [75.1, 156.0], [75.2, 156.0], [75.3, 156.0], [75.4, 156.0], [75.5, 156.0], [75.6, 157.0], [75.7, 157.0], [75.8, 157.0], [75.9, 157.0], [76.0, 157.0], [76.1, 157.0], [76.2, 157.0], [76.3, 157.0], [76.4, 157.0], [76.5, 157.0], [76.6, 157.0], [76.7, 157.0], [76.8, 157.0], [76.9, 158.0], [77.0, 158.0], [77.1, 158.0], [77.2, 158.0], [77.3, 158.0], [77.4, 158.0], [77.5, 158.0], [77.6, 158.0], [77.7, 158.0], [77.8, 158.0], [77.9, 158.0], [78.0, 159.0], [78.1, 159.0], [78.2, 159.0], [78.3, 159.0], [78.4, 159.0], [78.5, 159.0], [78.6, 159.0], [78.7, 159.0], [78.8, 159.0], [78.9, 159.0], [79.0, 159.0], [79.1, 160.0], [79.2, 160.0], [79.3, 160.0], [79.4, 160.0], [79.5, 160.0], [79.6, 160.0], [79.7, 160.0], [79.8, 160.0], [79.9, 160.0], [80.0, 161.0], [80.1, 161.0], [80.2, 161.0], [80.3, 161.0], [80.4, 161.0], [80.5, 161.0], [80.6, 161.0], [80.7, 162.0], [80.8, 162.0], [80.9, 162.0], [81.0, 162.0], [81.1, 162.0], [81.2, 162.0], [81.3, 162.0], [81.4, 162.0], [81.5, 163.0], [81.6, 163.0], [81.7, 163.0], [81.8, 163.0], [81.9, 163.0], [82.0, 163.0], [82.1, 164.0], [82.2, 164.0], [82.3, 164.0], [82.4, 164.0], [82.5, 164.0], [82.6, 164.0], [82.7, 165.0], [82.8, 165.0], [82.9, 165.0], [83.0, 165.0], [83.1, 165.0], [83.2, 166.0], [83.3, 166.0], [83.4, 166.0], [83.5, 166.0], [83.6, 167.0], [83.7, 167.0], [83.8, 167.0], [83.9, 167.0], [84.0, 167.0], [84.1, 168.0], [84.2, 168.0], [84.3, 168.0], [84.4, 168.0], [84.5, 168.0], [84.6, 169.0], [84.7, 169.0], [84.8, 169.0], [84.9, 170.0], [85.0, 170.0], [85.1, 170.0], [85.2, 170.0], [85.3, 171.0], [85.4, 171.0], [85.5, 171.0], [85.6, 172.0], [85.7, 172.0], [85.8, 172.0], [85.9, 173.0], [86.0, 173.0], [86.1, 173.0], [86.2, 174.0], [86.3, 174.0], [86.4, 174.0], [86.5, 175.0], [86.6, 175.0], [86.7, 175.0], [86.8, 176.0], [86.9, 176.0], [87.0, 177.0], [87.1, 177.0], [87.2, 177.0], [87.3, 178.0], [87.4, 178.0], [87.5, 179.0], [87.6, 179.0], [87.7, 180.0], [87.8, 180.0], [87.9, 181.0], [88.0, 181.0], [88.1, 181.0], [88.2, 182.0], [88.3, 182.0], [88.4, 183.0], [88.5, 183.0], [88.6, 184.0], [88.7, 185.0], [88.8, 185.0], [88.9, 186.0], [89.0, 186.0], [89.1, 187.0], [89.2, 188.0], [89.3, 188.0], [89.4, 189.0], [89.5, 189.0], [89.6, 190.0], [89.7, 191.0], [89.8, 191.0], [89.9, 192.0], [90.0, 193.0], [90.1, 193.0], [90.2, 194.0], [90.3, 195.0], [90.4, 196.0], [90.5, 197.0], [90.6, 198.0], [90.7, 199.0], [90.8, 200.0], [90.9, 201.0], [91.0, 202.0], [91.1, 203.0], [91.2, 204.0], [91.3, 205.0], [91.4, 206.0], [91.5, 207.0], [91.6, 208.0], [91.7, 210.0], [91.8, 211.0], [91.9, 212.0], [92.0, 214.0], [92.1, 215.0], [92.2, 216.0], [92.3, 218.0], [92.4, 219.0], [92.5, 221.0], [92.6, 223.0], [92.7, 224.0], [92.8, 226.0], [92.9, 227.0], [93.0, 229.0], [93.1, 231.0], [93.2, 232.0], [93.3, 234.0], [93.4, 237.0], [93.5, 238.0], [93.6, 240.0], [93.7, 241.0], [93.8, 243.0], [93.9, 245.0], [94.0, 248.0], [94.1, 250.0], [94.2, 252.0], [94.3, 255.0], [94.4, 257.0], [94.5, 261.0], [94.6, 263.0], [94.7, 266.0], [94.8, 269.0], [94.9, 272.0], [95.0, 275.0], [95.1, 279.0], [95.2, 283.0], [95.3, 287.0], [95.4, 292.0], [95.5, 296.0], [95.6, 301.0], [95.7, 307.0], [95.8, 314.0], [95.9, 321.0], [96.0, 327.0], [96.1, 334.0], [96.2, 342.0], [96.3, 353.0], [96.4, 366.0], [96.5, 381.0], [96.6, 393.0], [96.7, 407.0], [96.8, 418.0], [96.9, 429.0], [97.0, 439.0], [97.1, 449.0], [97.2, 460.0], [97.3, 469.0], [97.4, 474.0], [97.5, 479.0], [97.6, 485.0], [97.7, 492.0], [97.8, 502.0], [97.9, 530.0], [98.0, 569.0], [98.1, 614.0], [98.2, 649.0], [98.3, 690.0], [98.4, 730.0], [98.5, 778.0], [98.6, 874.0], [98.7, 947.0], [98.8, 1039.0], [98.9, 1145.0], [99.0, 1159.0], [99.1, 1201.0], [99.2, 1251.0], [99.3, 1355.0], [99.4, 1605.0], [99.5, 2011.0], [99.6, 2422.0], [99.7, 3583.0], [99.8, 4932.0], [99.9, 8122.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 66271.0, "series": [{"data": [[100.0, 66271.0], [200.0, 3502.0], [300.0, 778.0], [400.0, 828.0], [500.0, 202.0], [600.0, 194.0], [700.0, 151.0], [800.0, 78.0], [900.0, 96.0], [1000.0, 64.0], [1100.0, 179.0], [1200.0, 109.0], [1300.0, 48.0], [1400.0, 32.0], [1500.0, 29.0], [1600.0, 30.0], [1700.0, 20.0], [1800.0, 12.0], [1900.0, 9.0], [2000.0, 20.0], [2100.0, 17.0], [2300.0, 16.0], [2200.0, 21.0], [2400.0, 5.0], [2500.0, 8.0], [2600.0, 9.0], [2700.0, 7.0], [2800.0, 6.0], [2900.0, 8.0], [3000.0, 2.0], [3100.0, 6.0], [3200.0, 8.0], [3300.0, 10.0], [3400.0, 3.0], [3500.0, 5.0], [3700.0, 3.0], [3600.0, 4.0], [3800.0, 5.0], [3900.0, 10.0], [4000.0, 4.0], [4200.0, 9.0], [4300.0, 4.0], [4600.0, 7.0], [4400.0, 5.0], [4500.0, 7.0], [4700.0, 4.0], [4800.0, 6.0], [4900.0, 7.0], [5000.0, 3.0], [5300.0, 1.0], [5600.0, 3.0], [5500.0, 1.0], [5800.0, 2.0], [5700.0, 1.0], [6000.0, 2.0], [6100.0, 4.0], [5900.0, 1.0], [6200.0, 4.0], [6300.0, 1.0], [6600.0, 4.0], [6400.0, 2.0], [6500.0, 7.0], [6700.0, 3.0], [6900.0, 5.0], [6800.0, 3.0], [7100.0, 1.0], [7000.0, 2.0], [7300.0, 5.0], [7400.0, 2.0], [7200.0, 2.0], [7500.0, 1.0], [7600.0, 4.0], [7700.0, 1.0], [7800.0, 2.0], [7900.0, 1.0], [8000.0, 1.0], [8100.0, 2.0], [8400.0, 8.0], [8500.0, 5.0], [8700.0, 1.0], [8300.0, 3.0], [8600.0, 1.0], [8900.0, 3.0], [9100.0, 1.0], [9500.0, 2.0], [9400.0, 2.0], [10000.0, 3.0], [9900.0, 3.0], [9800.0, 2.0], [10100.0, 1.0], [10500.0, 2.0], [10700.0, 2.0], [10400.0, 1.0], [11100.0, 2.0], [11000.0, 1.0], [10800.0, 1.0], [11300.0, 1.0], [11400.0, 2.0], [11600.0, 2.0], [12100.0, 2.0], [12000.0, 2.0], [11800.0, 1.0], [12200.0, 3.0], [11900.0, 1.0], [12400.0, 1.0], [12300.0, 2.0], [12500.0, 3.0], [12800.0, 1.0], [13300.0, 1.0], [15000.0, 1.0], [15800.0, 1.0], [16900.0, 1.0], [18300.0, 1.0], [17500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 18300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 467.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 71387.0, "series": [{"data": [[0.0, 71387.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1146.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 467.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.621700879765401, "minX": 1.7291955E12, "maxY": 53.76705653021441, "series": [{"data": [[1.72919706E12, 9.159822419533867], [1.72919646E12, 7.621700879765401], [1.72919676E12, 8.492482581591474], [1.72919634E12, 7.645512579797223], [1.72919664E12, 7.955967976710314], [1.72919604E12, 7.836376917458005], [1.72919574E12, 9.02533039647579], [1.72919592E12, 8.301730353280458], [1.72919562E12, 17.42161961367007], [1.72919694E12, 8.095744680851066], [1.72919682E12, 7.733968486625136], [1.72919712E12, 16.461538461538456], [1.72919622E12, 7.636830520909748], [1.72919652E12, 7.751099706744863], [1.7291961E12, 7.926766752105465], [1.7291964E12, 8.21824686940966], [1.7291958E12, 9.90270665691295], [1.7291955E12, 53.76705653021441], [1.72919568E12, 11.474882544271798], [1.7291967E12, 8.502016868353529], [1.729197E12, 8.351410773176978], [1.72919658E12, 7.916512744735858], [1.72919688E12, 8.097319133308837], [1.72919598E12, 8.052227903579238], [1.72919628E12, 8.437017994858623], [1.72919616E12, 7.67278063096111], [1.72919586E12, 8.23443360840209], [1.72919556E12, 11.409572524662023]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919712E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 149.50848900237418, "minX": 1.0, "maxY": 12128.0, "series": [{"data": [[2.0, 177.11904761904765], [3.0, 171.18518518518508], [4.0, 161.01740294511382], [5.0, 158.80822784810104], [6.0, 153.81712813908547], [7.0, 149.50848900237418], [8.0, 159.20640386493415], [9.0, 169.6166997573355], [10.0, 182.83205741626804], [11.0, 197.73686477174837], [12.0, 207.35413744740552], [13.0, 233.40797546012288], [14.0, 230.7857142857146], [15.0, 240.00732600732636], [16.0, 250.1706263498918], [17.0, 254.92987804878035], [18.0, 270.2241992882562], [19.0, 275.19230769230757], [20.0, 260.7008196721312], [21.0, 261.4218009478672], [22.0, 286.8736842105264], [23.0, 338.544871794872], [24.0, 319.85810810810807], [25.0, 287.9166666666664], [26.0, 321.56302521008394], [27.0, 356.05633802816914], [28.0, 403.41791044776113], [29.0, 474.71666666666664], [30.0, 360.811320754717], [31.0, 524.3863636363636], [33.0, 569.7435897435896], [32.0, 1058.2058823529414], [35.0, 681.2999999999998], [34.0, 448.2727272727272], [37.0, 408.8148148148148], [36.0, 832.68], [39.0, 747.3125], [38.0, 1363.9615384615386], [41.0, 883.0000000000003], [40.0, 805.75], [43.0, 937.0416666666667], [42.0, 376.82758620689657], [45.0, 846.5454545454544], [44.0, 1080.5833333333335], [47.0, 1389.4615384615383], [46.0, 825.84], [49.0, 546.7368421052631], [48.0, 1632.9166666666674], [51.0, 1276.75], [50.0, 1211.545454545455], [53.0, 651.0], [52.0, 1041.0714285714287], [55.0, 1387.357142857143], [54.0, 494.31249999999983], [57.0, 633.2142857142857], [56.0, 1664.0], [59.0, 697.5], [58.0, 832.3636363636364], [61.0, 540.8333333333334], [60.0, 700.0555555555554], [63.0, 740.4285714285714], [62.0, 615.0], [67.0, 501.2857142857143], [66.0, 4979.375], [64.0, 2468.6363636363635], [65.0, 440.6666666666667], [70.0, 630.4], [69.0, 524.4], [68.0, 538.5], [71.0, 853.0], [75.0, 1086.5], [74.0, 688.6666666666666], [73.0, 648.0], [72.0, 488.85714285714283], [79.0, 802.75], [78.0, 538.6], [77.0, 580.2], [76.0, 3994.5000000000005], [83.0, 358.0], [82.0, 5052.0], [81.0, 2489.8333333333335], [80.0, 508.2857142857142], [86.0, 641.0], [84.0, 997.0], [85.0, 463.2], [91.0, 717.0], [90.0, 597.0], [89.0, 725.0], [88.0, 892.5], [95.0, 690.3333333333334], [94.0, 672.6666666666666], [93.0, 1101.0], [92.0, 494.0], [97.0, 1042.0], [99.0, 12128.0], [98.0, 12017.0], [96.0, 831.0], [101.0, 2475.0], [100.0, 1746.0], [107.0, 8006.333333333334], [106.0, 1734.4444444444443], [111.0, 1552.3333333333333], [110.0, 3844.0], [108.0, 5869.0], [109.0, 1400.0], [115.0, 6018.166666666667], [114.0, 1491.857142857143], [113.0, 892.0], [112.0, 3147.4285714285716], [119.0, 2680.0], [118.0, 4865.0], [117.0, 3240.3333333333335], [116.0, 690.0], [123.0, 2622.5], [121.0, 1077.5], [120.0, 5249.333333333334], [126.0, 6981.0], [125.0, 1332.0], [124.0, 3441.333333333333], [127.0, 4002.3333333333335], [134.0, 1535.6666666666667], [133.0, 6140.0], [129.0, 1153.6666666666667], [128.0, 1266.0], [135.0, 6928.0], [132.0, 1817.0], [130.0, 979.0], [143.0, 2848.0], [142.0, 3531.5], [141.0, 2350.2], [140.0, 3526.0], [138.0, 3598.333333333333], [137.0, 1499.5], [136.0, 3769.4999999999995], [150.0, 3130.25], [148.0, 3439.666666666667], [146.0, 2825.0], [145.0, 5104.833333333333], [144.0, 2475.789473684211], [151.0, 730.0], [149.0, 904.0], [147.0, 912.0], [159.0, 2195.2], [158.0, 3832.0], [157.0, 4289.428571428572], [156.0, 3103.6], [155.0, 3011.5], [154.0, 2039.3333333333333], [152.0, 5644.25], [153.0, 1295.0], [166.0, 3208.2], [164.0, 2802.3333333333335], [163.0, 4716.666666666667], [161.0, 3024.4], [160.0, 5784.0], [167.0, 3498.0], [165.0, 1966.6], [162.0, 4556.454545454546], [175.0, 5211.666666666666], [174.0, 2905.142857142857], [173.0, 6646.833333333333], [172.0, 3133.083333333333], [170.0, 2543.5], [168.0, 4849.428571428572], [171.0, 2628.4285714285716], [169.0, 4153.0], [182.0, 4006.0], [180.0, 2955.0], [178.0, 1866.6666666666667], [177.0, 3252.2], [176.0, 3576.5000000000005], [181.0, 891.3333333333334], [179.0, 1000.0], [183.0, 727.0], [190.0, 4296.111111111111], [188.0, 3049.6666666666665], [186.0, 5132.0], [184.0, 3814.0], [189.0, 4744.714285714285], [187.0, 2420.6666666666665], [185.0, 702.5], [199.0, 2748.0], [198.0, 1743.0], [197.0, 2412.0], [196.0, 2758.0], [195.0, 2422.0], [194.0, 2424.0], [193.0, 3583.0], [192.0, 3578.5], [207.0, 3374.0], [206.0, 3953.0], [205.0, 1999.0], [204.0, 4556.0], [203.0, 3881.0], [202.0, 4888.0], [201.0, 3905.0], [200.0, 2071.0], [215.0, 2506.5], [213.0, 6296.0], [212.0, 4003.0], [210.0, 3934.0], [209.0, 6354.0], [208.0, 2241.0], [223.0, 2889.5], [222.0, 4672.0], [221.0, 3523.0], [220.0, 2330.0], [219.0, 2199.0], [218.0, 1870.0], [217.0, 3354.0], [216.0, 6785.0], [231.0, 2196.0], [230.0, 3974.0], [229.0, 1735.0], [228.0, 921.0], [227.0, 1683.0], [226.0, 901.0], [225.0, 3880.25], [224.0, 2724.0], [238.0, 3270.0], [237.0, 3230.0], [236.0, 3260.0], [235.0, 3196.0], [234.0, 3324.0], [233.0, 2511.0], [247.0, 394.0], [246.0, 3561.0], [245.0, 3211.0], [244.0, 1982.0], [243.0, 2120.0], [242.0, 1830.0], [241.0, 3428.0], [240.0, 2133.0], [255.0, 1414.0], [254.0, 2036.0], [253.0, 1881.0], [252.0, 6043.0], [251.0, 4029.0], [250.0, 438.0], [249.0, 5027.0], [248.0, 1207.0], [270.0, 634.0], [271.0, 1645.0], [269.0, 3631.0], [268.0, 2912.0], [267.0, 3825.0], [266.0, 643.0], [265.0, 5656.0], [264.0, 1099.0], [263.0, 691.0], [257.0, 6003.0], [256.0, 2691.0], [259.0, 685.0], [258.0, 685.0], [262.0, 2702.0], [261.0, 797.0], [260.0, 676.0], [286.0, 4649.0], [287.0, 3729.0], [285.0, 1750.0], [284.0, 576.0], [283.0, 2920.0], [282.0, 4858.0], [281.0, 4989.0], [280.0, 3134.0], [279.0, 4680.0], [273.0, 616.0], [272.0, 1790.0], [275.0, 1455.0], [274.0, 4899.0], [278.0, 3741.0], [277.0, 5861.0], [276.0, 602.0], [295.0, 4755.0], [294.0, 2531.0], [293.0, 1701.0], [292.0, 539.0], [291.0, 1873.0], [290.0, 1127.0], [289.0, 4947.0], [288.0, 556.0], [1.0, 195.62878787878782]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[10.068863013698671, 198.1061095890381]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 295.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 99.45, "minX": 1.7291955E12, "maxY": 1964076.3166666667, "series": [{"data": [[1.72919706E12, 1899432.2833333334], [1.72919646E12, 1916999.65], [1.72919676E12, 1916216.4333333333], [1.72919634E12, 1871310.1333333333], [1.72919664E12, 1931062.5333333334], [1.72919604E12, 1924036.15], [1.72919574E12, 1914174.0166666666], [1.72919592E12, 1949328.9333333333], [1.72919562E12, 1891669.3666666667], [1.72919694E12, 1915579.4], [1.72919682E12, 1917669.7], [1.72919712E12, 27405.833333333332], [1.72919622E12, 1915561.8833333333], [1.72919652E12, 1917003.5833333333], [1.7291961E12, 1919031.35], [1.7291964E12, 1964076.3166666667], [1.7291958E12, 1921211.35], [1.7291955E12, 1441875.8333333333], [1.72919568E12, 1944378.9166666667], [1.7291967E12, 1916216.2666666666], [1.729197E12, 1917695.8833333333], [1.72919658E12, 1902249.55], [1.72919688E12, 1913459.0833333333], [1.72919598E12, 1924034.1166666667], [1.72919628E12, 1913461.5166666666], [1.72919616E12, 1915513.6166666667], [1.72919586E12, 1873434.1], [1.72919556E12, 1923244.2333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72919706E12, 6892.65], [1.72919646E12, 6956.4], [1.72919676E12, 6953.85], [1.72919634E12, 6790.65], [1.72919664E12, 7007.4], [1.72919604E12, 6981.9], [1.72919574E12, 6946.2], [1.72919592E12, 7073.7], [1.72919562E12, 6864.6], [1.72919694E12, 6951.3], [1.72919682E12, 6958.95], [1.72919712E12, 99.45], [1.72919622E12, 6951.3], [1.72919652E12, 6956.4], [1.7291961E12, 6964.05], [1.7291964E12, 7127.25], [1.7291958E12, 6971.7], [1.7291955E12, 5232.6], [1.72919568E12, 7055.85], [1.7291967E12, 6953.85], [1.729197E12, 6958.95], [1.72919658E12, 6902.85], [1.72919688E12, 6943.65], [1.72919598E12, 6981.9], [1.72919628E12, 6943.65], [1.72919616E12, 6951.3], [1.72919586E12, 6798.3], [1.72919556E12, 6979.35]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919712E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 150.93940506794, "minX": 1.7291955E12, "maxY": 1196.4307992202719, "series": [{"data": [[1.72919706E12, 152.53163152053327], [1.72919646E12, 153.42668621700898], [1.72919676E12, 155.08397506417316], [1.72919634E12, 157.04168231318056], [1.72919664E12, 153.16921397379923], [1.72919604E12, 156.83272461650802], [1.72919574E12, 181.66005873715176], [1.72919592E12, 165.30064888248], [1.72919562E12, 326.02563150074286], [1.72919694E12, 151.7032281731476], [1.72919682E12, 153.51740564309242], [1.72919712E12, 159.94871794871798], [1.72919622E12, 154.83418928833478], [1.72919652E12, 153.37939882697916], [1.7291961E12, 159.5972171365798], [1.7291964E12, 156.5559928443652], [1.7291958E12, 180.6419166057064], [1.7291955E12, 1196.4307992202719], [1.72919568E12, 217.04553668232722], [1.7291967E12, 151.83755042170856], [1.729197E12, 151.38145840967357], [1.72919658E12, 152.11525674178057], [1.72919688E12, 150.93940506794], [1.72919598E12, 160.61796932067207], [1.72919628E12, 157.6243114212267], [1.72919616E12, 156.53191489361657], [1.72919586E12, 166.5232558139535], [1.72919556E12, 225.2988673730364]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919712E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 131.00990462215725, "minX": 1.7291955E12, "maxY": 993.6267056530223, "series": [{"data": [[1.72919706E12, 132.02404735479095], [1.72919646E12, 133.23863636363603], [1.72919676E12, 132.9552621928859], [1.72919634E12, 136.10289147577916], [1.72919664E12, 132.42721979621584], [1.72919604E12, 136.4558071585097], [1.72919574E12, 154.78634361233503], [1.72919592E12, 140.7238644556598], [1.72919562E12, 259.785661218425], [1.72919694E12, 131.00990462215725], [1.72919682E12, 133.42689629901076], [1.72919712E12, 133.74358974358975], [1.72919622E12, 134.79090242113037], [1.72919652E12, 132.63746334310844], [1.7291961E12, 138.3888685463197], [1.7291964E12, 134.8082289803224], [1.7291958E12, 155.03474762253157], [1.7291955E12, 993.6267056530223], [1.72919568E12, 181.32670762558732], [1.7291967E12, 133.75834250091683], [1.729197E12, 132.06559179186547], [1.72919658E12, 131.86811968969323], [1.72919688E12, 131.4450973191337], [1.72919598E12, 139.6880934989045], [1.72919628E12, 134.51597502754353], [1.72919616E12, 135.54915627292758], [1.72919586E12, 141.538634658665], [1.72919556E12, 187.60211910851274]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919712E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 86.73661041819533, "minX": 1.7291955E12, "maxY": 822.7314814814819, "series": [{"data": [[1.72919706E12, 87.53385127635975], [1.72919646E12, 87.41019061583583], [1.72919676E12, 87.96699669967013], [1.72919634E12, 90.5088246338716], [1.72919664E12, 87.42540029112085], [1.72919604E12, 90.23666910153383], [1.72919574E12, 104.17841409691637], [1.72919592E12, 93.54758471521258], [1.72919562E12, 170.8837295690935], [1.72919694E12, 86.73661041819533], [1.72919682E12, 88.44814950531321], [1.72919712E12, 88.97435897435899], [1.72919622E12, 88.95561261922234], [1.72919652E12, 88.23533724340182], [1.7291961E12, 91.89637495422912], [1.7291964E12, 89.15635062611814], [1.7291958E12, 104.73701536210697], [1.7291955E12, 822.7314814814819], [1.72919568E12, 122.46548608601393], [1.7291967E12, 88.44114411441136], [1.729197E12, 87.64492488090883], [1.72919658E12, 87.12818618396739], [1.72919688E12, 86.91296364304077], [1.72919598E12, 92.58436815193532], [1.72919628E12, 88.74293059125966], [1.72919616E12, 90.02201027145993], [1.72919586E12, 94.15903975994007], [1.72919556E12, 129.51845085860444]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919712E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 123.0, "minX": 1.7291955E12, "maxY": 18307.0, "series": [{"data": [[1.72919706E12, 1664.0], [1.72919646E12, 1150.0], [1.72919676E12, 2254.0], [1.72919634E12, 1173.0], [1.72919664E12, 2206.0], [1.72919604E12, 1177.0], [1.72919574E12, 1317.0], [1.72919592E12, 3258.0], [1.72919562E12, 4908.0], [1.72919694E12, 1218.0], [1.72919682E12, 1160.0], [1.72919712E12, 480.0], [1.72919622E12, 1158.0], [1.72919652E12, 1167.0], [1.7291961E12, 1189.0], [1.7291964E12, 4234.0], [1.7291958E12, 3310.0], [1.7291955E12, 18307.0], [1.72919568E12, 3183.0], [1.7291967E12, 1160.0], [1.729197E12, 1213.0], [1.72919658E12, 1167.0], [1.72919688E12, 1161.0], [1.72919598E12, 1253.0], [1.72919628E12, 2246.0], [1.72919616E12, 1159.0], [1.72919586E12, 2588.0], [1.72919556E12, 1502.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72919706E12, 162.0], [1.72919646E12, 163.0], [1.72919676E12, 162.0], [1.72919634E12, 163.0], [1.72919664E12, 160.0], [1.72919604E12, 166.0], [1.72919574E12, 247.0], [1.72919592E12, 203.0], [1.72919562E12, 848.4000000000005], [1.72919694E12, 159.0], [1.72919682E12, 163.0], [1.72919712E12, 156.0], [1.72919622E12, 171.0], [1.72919652E12, 161.0], [1.7291961E12, 177.0], [1.7291964E12, 162.0], [1.7291958E12, 232.0], [1.7291955E12, 3772.500000000002], [1.72919568E12, 309.0], [1.7291967E12, 161.20000000000027], [1.729197E12, 157.0], [1.72919658E12, 161.0], [1.72919688E12, 161.0], [1.72919598E12, 179.0], [1.72919628E12, 167.0], [1.72919616E12, 163.0], [1.72919586E12, 203.0], [1.72919556E12, 364.2000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72919706E12, 459.72000000000025], [1.72919646E12, 425.71000000000004], [1.72919676E12, 466.7199999999998], [1.72919634E12, 473.72000000000025], [1.72919664E12, 428.5899999999979], [1.72919604E12, 445.0], [1.72919574E12, 566.5], [1.72919592E12, 478.25], [1.72919562E12, 1824.380000000022], [1.72919694E12, 454.6500000000001], [1.72919682E12, 448.4999999999991], [1.72919712E12, 480.0], [1.72919622E12, 317.0], [1.72919652E12, 465.1300000000001], [1.7291961E12, 451.3599999999997], [1.7291964E12, 447.0], [1.7291958E12, 926.4000000000069], [1.7291955E12, 11966.120000000003], [1.72919568E12, 1174.3200000000002], [1.7291967E12, 235.3199999999988], [1.729197E12, 403.6999999999998], [1.72919658E12, 424.76000000000204], [1.72919688E12, 259.6399999999967], [1.72919598E12, 460.22000000000025], [1.72919628E12, 442.2799999999993], [1.72919616E12, 475.46000000000004], [1.72919586E12, 504.96999999999935], [1.72919556E12, 1217.579999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72919706E12, 172.0], [1.72919646E12, 183.0], [1.72919676E12, 173.0], [1.72919634E12, 188.0], [1.72919664E12, 175.0], [1.72919604E12, 189.0], [1.72919574E12, 321.0], [1.72919592E12, 250.5], [1.72919562E12, 1228.6999999999998], [1.72919694E12, 171.6500000000001], [1.72919682E12, 176.0], [1.72919712E12, 368.0], [1.72919622E12, 196.6500000000001], [1.72919652E12, 176.54999999999973], [1.7291961E12, 217.4000000000001], [1.7291964E12, 187.0], [1.7291958E12, 323.0], [1.7291955E12, 6830.399999999992], [1.72919568E12, 420.19999999999936], [1.7291967E12, 170.0], [1.729197E12, 169.0], [1.72919658E12, 178.0], [1.72919688E12, 175.0], [1.72919598E12, 213.04999999999973], [1.72919628E12, 202.0], [1.72919616E12, 200.0], [1.72919586E12, 249.6500000000001], [1.72919556E12, 592.1999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72919706E12, 125.0], [1.72919646E12, 125.0], [1.72919676E12, 125.0], [1.72919634E12, 127.0], [1.72919664E12, 126.0], [1.72919604E12, 128.0], [1.72919574E12, 126.0], [1.72919592E12, 125.0], [1.72919562E12, 130.0], [1.72919694E12, 124.0], [1.72919682E12, 123.0], [1.72919712E12, 133.0], [1.72919622E12, 125.0], [1.72919652E12, 124.0], [1.7291961E12, 126.0], [1.7291964E12, 125.0], [1.7291958E12, 127.0], [1.7291955E12, 134.0], [1.72919568E12, 126.0], [1.7291967E12, 125.0], [1.729197E12, 125.0], [1.72919658E12, 126.0], [1.72919688E12, 124.0], [1.72919598E12, 128.0], [1.72919628E12, 127.0], [1.72919616E12, 127.0], [1.72919586E12, 127.0], [1.72919556E12, 130.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72919706E12, 145.0], [1.72919646E12, 146.0], [1.72919676E12, 145.0], [1.72919634E12, 145.0], [1.72919664E12, 145.0], [1.72919604E12, 147.0], [1.72919574E12, 150.0], [1.72919592E12, 146.0], [1.72919562E12, 164.0], [1.72919694E12, 144.0], [1.72919682E12, 145.0], [1.72919712E12, 147.0], [1.72919622E12, 146.0], [1.72919652E12, 144.0], [1.7291961E12, 147.0], [1.7291964E12, 146.0], [1.7291958E12, 148.0], [1.7291955E12, 229.0], [1.72919568E12, 163.0], [1.7291967E12, 146.0], [1.729197E12, 144.0], [1.72919658E12, 145.0], [1.72919688E12, 145.0], [1.72919598E12, 147.0], [1.72919628E12, 146.0], [1.72919616E12, 146.0], [1.72919586E12, 146.0], [1.72919556E12, 162.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919712E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 138.0, "minX": 1.0, "maxY": 2551.0, "series": [{"data": [[3.0, 138.0], [4.0, 143.5], [6.0, 147.0], [8.0, 943.5], [9.0, 143.5], [10.0, 149.5], [11.0, 139.0], [12.0, 141.5], [14.0, 1086.0], [15.0, 140.0], [16.0, 144.5], [17.0, 229.5], [18.0, 142.0], [19.0, 152.0], [20.0, 200.5], [21.0, 148.0], [22.0, 176.0], [23.0, 150.0], [24.0, 147.5], [25.0, 158.0], [26.0, 145.0], [27.0, 147.0], [28.0, 149.0], [29.0, 143.0], [30.0, 146.5], [31.0, 145.0], [32.0, 149.0], [33.0, 146.0], [35.0, 148.0], [34.0, 151.0], [36.0, 146.5], [37.0, 146.0], [38.0, 152.0], [39.0, 149.0], [40.0, 150.0], [41.0, 146.0], [43.0, 146.0], [42.0, 147.0], [44.0, 146.0], [45.0, 145.0], [46.0, 146.0], [47.0, 146.0], [48.0, 147.0], [49.0, 146.0], [50.0, 147.0], [51.0, 148.0], [52.0, 149.0], [53.0, 146.0], [54.0, 147.5], [55.0, 147.0], [56.0, 152.0], [57.0, 157.0], [59.0, 154.0], [58.0, 156.0], [60.0, 157.0], [61.0, 148.0], [62.0, 163.5], [63.0, 147.0], [66.0, 1181.5], [65.0, 347.5], [67.0, 301.0], [64.0, 146.0], [70.0, 494.0], [71.0, 193.0], [68.0, 172.5], [69.0, 145.0], [75.0, 584.0], [72.0, 150.0], [73.0, 147.0], [76.0, 149.0], [79.0, 277.0], [80.0, 157.5], [83.0, 154.0], [85.0, 1924.0], [86.0, 159.0], [95.0, 154.0], [96.0, 360.5], [98.0, 150.0], [106.0, 753.0], [104.0, 485.5], [107.0, 149.0], [105.0, 145.0], [114.0, 2551.0], [1.0, 144.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 114.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 122.5, "minX": 1.0, "maxY": 1731.0, "series": [{"data": [[3.0, 122.5], [4.0, 127.5], [6.0, 128.0], [8.0, 704.0], [9.0, 128.5], [10.0, 133.0], [11.0, 123.0], [12.0, 126.0], [14.0, 1085.5], [15.0, 124.0], [16.0, 127.5], [17.0, 162.5], [18.0, 126.0], [19.0, 134.0], [20.0, 173.5], [21.0, 131.0], [22.0, 142.5], [23.0, 133.0], [24.0, 130.5], [25.0, 140.0], [26.0, 128.5], [27.0, 130.0], [28.0, 132.0], [29.0, 126.0], [30.0, 129.0], [31.0, 129.0], [32.0, 132.0], [33.0, 130.0], [35.0, 131.0], [34.0, 133.0], [36.0, 130.0], [37.0, 129.0], [38.0, 134.0], [39.0, 132.0], [40.0, 133.0], [41.0, 130.0], [43.0, 130.0], [42.0, 130.0], [44.0, 129.0], [45.0, 129.0], [46.0, 129.0], [47.0, 130.0], [48.0, 130.0], [49.0, 129.0], [50.0, 130.0], [51.0, 131.0], [52.0, 132.0], [53.0, 130.0], [54.0, 131.0], [55.0, 131.0], [56.0, 134.0], [57.0, 138.0], [59.0, 136.0], [58.0, 137.0], [60.0, 139.0], [61.0, 131.0], [62.0, 140.0], [63.0, 131.0], [66.0, 944.0], [65.0, 288.0], [67.0, 249.0], [64.0, 129.0], [70.0, 291.0], [71.0, 167.0], [68.0, 140.5], [69.0, 129.0], [75.0, 439.0], [72.0, 132.0], [73.0, 131.0], [76.0, 133.5], [79.0, 159.0], [80.0, 139.0], [83.0, 135.0], [85.0, 704.0], [86.0, 141.0], [95.0, 135.0], [96.0, 290.0], [98.0, 131.5], [106.0, 618.5], [104.0, 211.0], [107.0, 132.0], [105.0, 129.0], [114.0, 1731.0], [1.0, 128.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 114.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.4166666666666667, "minX": 1.7291955E12, "maxY": 46.56666666666667, "series": [{"data": [[1.72919706E12, 45.13333333333333], [1.72919646E12, 45.483333333333334], [1.72919676E12, 45.45], [1.72919634E12, 44.38333333333333], [1.72919664E12, 45.86666666666667], [1.72919604E12, 45.63333333333333], [1.72919574E12, 45.2], [1.72919592E12, 46.15], [1.72919562E12, 44.88333333333333], [1.72919694E12, 45.46666666666667], [1.72919682E12, 45.46666666666667], [1.72919712E12, 0.4166666666666667], [1.72919622E12, 45.4], [1.72919652E12, 45.46666666666667], [1.7291961E12, 45.5], [1.7291964E12, 46.56666666666667], [1.7291958E12, 45.68333333333333], [1.7291955E12, 34.31666666666667], [1.72919568E12, 46.2], [1.7291967E12, 45.45], [1.729197E12, 45.46666666666667], [1.72919658E12, 45.03333333333333], [1.72919688E12, 45.416666666666664], [1.72919598E12, 45.61666666666667], [1.72919628E12, 45.43333333333333], [1.72919616E12, 45.45], [1.72919586E12, 44.516666666666666], [1.72919556E12, 45.61666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919712E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.7291955E12, "maxY": 46.583333333333336, "series": [{"data": [[1.72919706E12, 45.05], [1.72919646E12, 45.46666666666667], [1.72919676E12, 45.45], [1.72919634E12, 44.38333333333333], [1.72919664E12, 45.8], [1.72919604E12, 45.63333333333333], [1.72919574E12, 45.4], [1.72919592E12, 46.233333333333334], [1.72919562E12, 44.86666666666667], [1.72919694E12, 45.43333333333333], [1.72919682E12, 45.483333333333334], [1.72919712E12, 0.65], [1.72919622E12, 45.43333333333333], [1.72919652E12, 45.46666666666667], [1.7291961E12, 45.516666666666666], [1.7291964E12, 46.583333333333336], [1.7291958E12, 45.56666666666667], [1.7291955E12, 34.2], [1.72919568E12, 46.11666666666667], [1.7291967E12, 45.45], [1.729197E12, 45.483333333333334], [1.72919658E12, 45.11666666666667], [1.72919688E12, 45.38333333333333], [1.72919598E12, 45.63333333333333], [1.72919628E12, 45.38333333333333], [1.72919616E12, 45.43333333333333], [1.72919586E12, 44.43333333333333], [1.72919556E12, 45.61666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919712E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.7291955E12, "maxY": 46.583333333333336, "series": [{"data": [[1.72919706E12, 45.05], [1.72919646E12, 45.46666666666667], [1.72919676E12, 45.45], [1.72919634E12, 44.38333333333333], [1.72919664E12, 45.8], [1.72919604E12, 45.63333333333333], [1.72919574E12, 45.4], [1.72919592E12, 46.233333333333334], [1.72919562E12, 44.86666666666667], [1.72919694E12, 45.43333333333333], [1.72919682E12, 45.483333333333334], [1.72919712E12, 0.65], [1.72919622E12, 45.43333333333333], [1.72919652E12, 45.46666666666667], [1.7291961E12, 45.516666666666666], [1.7291964E12, 46.583333333333336], [1.7291958E12, 45.56666666666667], [1.7291955E12, 34.2], [1.72919568E12, 46.11666666666667], [1.7291967E12, 45.45], [1.729197E12, 45.483333333333334], [1.72919658E12, 45.11666666666667], [1.72919688E12, 45.38333333333333], [1.72919598E12, 45.63333333333333], [1.72919628E12, 45.38333333333333], [1.72919616E12, 45.43333333333333], [1.72919586E12, 44.43333333333333], [1.72919556E12, 45.61666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919712E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.65, "minX": 1.7291955E12, "maxY": 46.583333333333336, "series": [{"data": [[1.72919706E12, 45.05], [1.72919646E12, 45.46666666666667], [1.72919676E12, 45.45], [1.72919634E12, 44.38333333333333], [1.72919664E12, 45.8], [1.72919604E12, 45.63333333333333], [1.72919574E12, 45.4], [1.72919592E12, 46.233333333333334], [1.72919562E12, 44.86666666666667], [1.72919694E12, 45.43333333333333], [1.72919682E12, 45.483333333333334], [1.72919712E12, 0.65], [1.72919622E12, 45.43333333333333], [1.72919652E12, 45.46666666666667], [1.7291961E12, 45.516666666666666], [1.7291964E12, 46.583333333333336], [1.7291958E12, 45.56666666666667], [1.7291955E12, 34.2], [1.72919568E12, 46.11666666666667], [1.7291967E12, 45.45], [1.729197E12, 45.483333333333334], [1.72919658E12, 45.11666666666667], [1.72919688E12, 45.38333333333333], [1.72919598E12, 45.63333333333333], [1.72919628E12, 45.38333333333333], [1.72919616E12, 45.43333333333333], [1.72919586E12, 44.43333333333333], [1.72919556E12, 45.61666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919712E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

