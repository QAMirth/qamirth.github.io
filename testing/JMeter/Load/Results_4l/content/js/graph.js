/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 145.0, "minX": 0.0, "maxY": 170589.0, "series": [{"data": [[0.0, 145.0], [0.1, 154.0], [0.2, 156.0], [0.3, 157.0], [0.4, 157.0], [0.5, 158.0], [0.6, 158.0], [0.7, 159.0], [0.8, 159.0], [0.9, 159.0], [1.0, 160.0], [1.1, 160.0], [1.2, 160.0], [1.3, 160.0], [1.4, 161.0], [1.5, 161.0], [1.6, 161.0], [1.7, 161.0], [1.8, 161.0], [1.9, 162.0], [2.0, 162.0], [2.1, 162.0], [2.2, 162.0], [2.3, 162.0], [2.4, 162.0], [2.5, 162.0], [2.6, 163.0], [2.7, 163.0], [2.8, 163.0], [2.9, 163.0], [3.0, 163.0], [3.1, 163.0], [3.2, 163.0], [3.3, 163.0], [3.4, 163.0], [3.5, 164.0], [3.6, 164.0], [3.7, 164.0], [3.8, 164.0], [3.9, 164.0], [4.0, 164.0], [4.1, 164.0], [4.2, 164.0], [4.3, 164.0], [4.4, 164.0], [4.5, 164.0], [4.6, 165.0], [4.7, 165.0], [4.8, 165.0], [4.9, 165.0], [5.0, 165.0], [5.1, 165.0], [5.2, 165.0], [5.3, 165.0], [5.4, 165.0], [5.5, 165.0], [5.6, 165.0], [5.7, 165.0], [5.8, 165.0], [5.9, 166.0], [6.0, 166.0], [6.1, 166.0], [6.2, 166.0], [6.3, 166.0], [6.4, 166.0], [6.5, 166.0], [6.6, 166.0], [6.7, 166.0], [6.8, 166.0], [6.9, 166.0], [7.0, 166.0], [7.1, 166.0], [7.2, 166.0], [7.3, 166.0], [7.4, 166.0], [7.5, 167.0], [7.6, 167.0], [7.7, 167.0], [7.8, 167.0], [7.9, 167.0], [8.0, 167.0], [8.1, 167.0], [8.2, 167.0], [8.3, 167.0], [8.4, 167.0], [8.5, 167.0], [8.6, 167.0], [8.7, 167.0], [8.8, 167.0], [8.9, 167.0], [9.0, 167.0], [9.1, 167.0], [9.2, 167.0], [9.3, 168.0], [9.4, 168.0], [9.5, 168.0], [9.6, 168.0], [9.7, 168.0], [9.8, 168.0], [9.9, 168.0], [10.0, 168.0], [10.1, 168.0], [10.2, 168.0], [10.3, 168.0], [10.4, 168.0], [10.5, 168.0], [10.6, 168.0], [10.7, 168.0], [10.8, 168.0], [10.9, 168.0], [11.0, 168.0], [11.1, 168.0], [11.2, 168.0], [11.3, 168.0], [11.4, 169.0], [11.5, 169.0], [11.6, 169.0], [11.7, 169.0], [11.8, 169.0], [11.9, 169.0], [12.0, 169.0], [12.1, 169.0], [12.2, 169.0], [12.3, 169.0], [12.4, 169.0], [12.5, 169.0], [12.6, 169.0], [12.7, 169.0], [12.8, 169.0], [12.9, 169.0], [13.0, 169.0], [13.1, 169.0], [13.2, 169.0], [13.3, 169.0], [13.4, 170.0], [13.5, 170.0], [13.6, 170.0], [13.7, 170.0], [13.8, 170.0], [13.9, 170.0], [14.0, 170.0], [14.1, 170.0], [14.2, 170.0], [14.3, 170.0], [14.4, 170.0], [14.5, 170.0], [14.6, 170.0], [14.7, 170.0], [14.8, 170.0], [14.9, 170.0], [15.0, 170.0], [15.1, 170.0], [15.2, 170.0], [15.3, 170.0], [15.4, 170.0], [15.5, 170.0], [15.6, 171.0], [15.7, 171.0], [15.8, 171.0], [15.9, 171.0], [16.0, 171.0], [16.1, 171.0], [16.2, 171.0], [16.3, 171.0], [16.4, 171.0], [16.5, 171.0], [16.6, 171.0], [16.7, 171.0], [16.8, 171.0], [16.9, 171.0], [17.0, 171.0], [17.1, 171.0], [17.2, 171.0], [17.3, 171.0], [17.4, 171.0], [17.5, 171.0], [17.6, 171.0], [17.7, 171.0], [17.8, 172.0], [17.9, 172.0], [18.0, 172.0], [18.1, 172.0], [18.2, 172.0], [18.3, 172.0], [18.4, 172.0], [18.5, 172.0], [18.6, 172.0], [18.7, 172.0], [18.8, 172.0], [18.9, 172.0], [19.0, 172.0], [19.1, 172.0], [19.2, 172.0], [19.3, 172.0], [19.4, 172.0], [19.5, 172.0], [19.6, 172.0], [19.7, 172.0], [19.8, 172.0], [19.9, 172.0], [20.0, 173.0], [20.1, 173.0], [20.2, 173.0], [20.3, 173.0], [20.4, 173.0], [20.5, 173.0], [20.6, 173.0], [20.7, 173.0], [20.8, 173.0], [20.9, 173.0], [21.0, 173.0], [21.1, 173.0], [21.2, 173.0], [21.3, 173.0], [21.4, 173.0], [21.5, 173.0], [21.6, 173.0], [21.7, 173.0], [21.8, 173.0], [21.9, 173.0], [22.0, 173.0], [22.1, 173.0], [22.2, 174.0], [22.3, 174.0], [22.4, 174.0], [22.5, 174.0], [22.6, 174.0], [22.7, 174.0], [22.8, 174.0], [22.9, 174.0], [23.0, 174.0], [23.1, 174.0], [23.2, 174.0], [23.3, 174.0], [23.4, 174.0], [23.5, 174.0], [23.6, 174.0], [23.7, 174.0], [23.8, 174.0], [23.9, 174.0], [24.0, 174.0], [24.1, 174.0], [24.2, 174.0], [24.3, 174.0], [24.4, 175.0], [24.5, 175.0], [24.6, 175.0], [24.7, 175.0], [24.8, 175.0], [24.9, 175.0], [25.0, 175.0], [25.1, 175.0], [25.2, 175.0], [25.3, 175.0], [25.4, 175.0], [25.5, 175.0], [25.6, 175.0], [25.7, 175.0], [25.8, 175.0], [25.9, 175.0], [26.0, 175.0], [26.1, 175.0], [26.2, 175.0], [26.3, 175.0], [26.4, 175.0], [26.5, 176.0], [26.6, 176.0], [26.7, 176.0], [26.8, 176.0], [26.9, 176.0], [27.0, 176.0], [27.1, 176.0], [27.2, 176.0], [27.3, 176.0], [27.4, 176.0], [27.5, 176.0], [27.6, 176.0], [27.7, 176.0], [27.8, 176.0], [27.9, 176.0], [28.0, 176.0], [28.1, 176.0], [28.2, 176.0], [28.3, 176.0], [28.4, 176.0], [28.5, 176.0], [28.6, 177.0], [28.7, 177.0], [28.8, 177.0], [28.9, 177.0], [29.0, 177.0], [29.1, 177.0], [29.2, 177.0], [29.3, 177.0], [29.4, 177.0], [29.5, 177.0], [29.6, 177.0], [29.7, 177.0], [29.8, 177.0], [29.9, 177.0], [30.0, 177.0], [30.1, 177.0], [30.2, 177.0], [30.3, 177.0], [30.4, 177.0], [30.5, 177.0], [30.6, 178.0], [30.7, 178.0], [30.8, 178.0], [30.9, 178.0], [31.0, 178.0], [31.1, 178.0], [31.2, 178.0], [31.3, 178.0], [31.4, 178.0], [31.5, 178.0], [31.6, 178.0], [31.7, 178.0], [31.8, 178.0], [31.9, 178.0], [32.0, 178.0], [32.1, 178.0], [32.2, 178.0], [32.3, 178.0], [32.4, 178.0], [32.5, 179.0], [32.6, 179.0], [32.7, 179.0], [32.8, 179.0], [32.9, 179.0], [33.0, 179.0], [33.1, 179.0], [33.2, 179.0], [33.3, 179.0], [33.4, 179.0], [33.5, 179.0], [33.6, 179.0], [33.7, 179.0], [33.8, 179.0], [33.9, 179.0], [34.0, 179.0], [34.1, 179.0], [34.2, 179.0], [34.3, 179.0], [34.4, 180.0], [34.5, 180.0], [34.6, 180.0], [34.7, 180.0], [34.8, 180.0], [34.9, 180.0], [35.0, 180.0], [35.1, 180.0], [35.2, 180.0], [35.3, 180.0], [35.4, 180.0], [35.5, 180.0], [35.6, 180.0], [35.7, 180.0], [35.8, 180.0], [35.9, 180.0], [36.0, 180.0], [36.1, 181.0], [36.2, 181.0], [36.3, 181.0], [36.4, 181.0], [36.5, 181.0], [36.6, 181.0], [36.7, 181.0], [36.8, 181.0], [36.9, 181.0], [37.0, 181.0], [37.1, 181.0], [37.2, 181.0], [37.3, 181.0], [37.4, 181.0], [37.5, 181.0], [37.6, 181.0], [37.7, 181.0], [37.8, 182.0], [37.9, 182.0], [38.0, 182.0], [38.1, 182.0], [38.2, 182.0], [38.3, 182.0], [38.4, 182.0], [38.5, 182.0], [38.6, 182.0], [38.7, 182.0], [38.8, 182.0], [38.9, 182.0], [39.0, 182.0], [39.1, 182.0], [39.2, 182.0], [39.3, 182.0], [39.4, 183.0], [39.5, 183.0], [39.6, 183.0], [39.7, 183.0], [39.8, 183.0], [39.9, 183.0], [40.0, 183.0], [40.1, 183.0], [40.2, 183.0], [40.3, 183.0], [40.4, 183.0], [40.5, 183.0], [40.6, 183.0], [40.7, 183.0], [40.8, 183.0], [40.9, 183.0], [41.0, 184.0], [41.1, 184.0], [41.2, 184.0], [41.3, 184.0], [41.4, 184.0], [41.5, 184.0], [41.6, 184.0], [41.7, 184.0], [41.8, 184.0], [41.9, 184.0], [42.0, 184.0], [42.1, 184.0], [42.2, 184.0], [42.3, 184.0], [42.4, 184.0], [42.5, 185.0], [42.6, 185.0], [42.7, 185.0], [42.8, 185.0], [42.9, 185.0], [43.0, 185.0], [43.1, 185.0], [43.2, 185.0], [43.3, 185.0], [43.4, 185.0], [43.5, 185.0], [43.6, 185.0], [43.7, 185.0], [43.8, 186.0], [43.9, 186.0], [44.0, 186.0], [44.1, 186.0], [44.2, 186.0], [44.3, 186.0], [44.4, 186.0], [44.5, 186.0], [44.6, 186.0], [44.7, 186.0], [44.8, 186.0], [44.9, 186.0], [45.0, 186.0], [45.1, 187.0], [45.2, 187.0], [45.3, 187.0], [45.4, 187.0], [45.5, 187.0], [45.6, 187.0], [45.7, 187.0], [45.8, 187.0], [45.9, 187.0], [46.0, 187.0], [46.1, 187.0], [46.2, 187.0], [46.3, 187.0], [46.4, 188.0], [46.5, 188.0], [46.6, 188.0], [46.7, 188.0], [46.8, 188.0], [46.9, 188.0], [47.0, 188.0], [47.1, 188.0], [47.2, 188.0], [47.3, 188.0], [47.4, 188.0], [47.5, 188.0], [47.6, 189.0], [47.7, 189.0], [47.8, 189.0], [47.9, 189.0], [48.0, 189.0], [48.1, 189.0], [48.2, 189.0], [48.3, 189.0], [48.4, 189.0], [48.5, 189.0], [48.6, 189.0], [48.7, 189.0], [48.8, 190.0], [48.9, 190.0], [49.0, 190.0], [49.1, 190.0], [49.2, 190.0], [49.3, 190.0], [49.4, 190.0], [49.5, 190.0], [49.6, 190.0], [49.7, 190.0], [49.8, 190.0], [49.9, 191.0], [50.0, 191.0], [50.1, 191.0], [50.2, 191.0], [50.3, 191.0], [50.4, 191.0], [50.5, 191.0], [50.6, 191.0], [50.7, 191.0], [50.8, 191.0], [50.9, 192.0], [51.0, 192.0], [51.1, 192.0], [51.2, 192.0], [51.3, 192.0], [51.4, 192.0], [51.5, 192.0], [51.6, 192.0], [51.7, 192.0], [51.8, 192.0], [51.9, 193.0], [52.0, 193.0], [52.1, 193.0], [52.2, 193.0], [52.3, 193.0], [52.4, 193.0], [52.5, 193.0], [52.6, 193.0], [52.7, 193.0], [52.8, 194.0], [52.9, 194.0], [53.0, 194.0], [53.1, 194.0], [53.2, 194.0], [53.3, 194.0], [53.4, 194.0], [53.5, 194.0], [53.6, 194.0], [53.7, 194.0], [53.8, 195.0], [53.9, 195.0], [54.0, 195.0], [54.1, 195.0], [54.2, 195.0], [54.3, 195.0], [54.4, 195.0], [54.5, 195.0], [54.6, 195.0], [54.7, 196.0], [54.8, 196.0], [54.9, 196.0], [55.0, 196.0], [55.1, 196.0], [55.2, 196.0], [55.3, 196.0], [55.4, 196.0], [55.5, 197.0], [55.6, 197.0], [55.7, 197.0], [55.8, 197.0], [55.9, 197.0], [56.0, 197.0], [56.1, 197.0], [56.2, 197.0], [56.3, 197.0], [56.4, 198.0], [56.5, 198.0], [56.6, 198.0], [56.7, 198.0], [56.8, 198.0], [56.9, 198.0], [57.0, 198.0], [57.1, 198.0], [57.2, 199.0], [57.3, 199.0], [57.4, 199.0], [57.5, 199.0], [57.6, 199.0], [57.7, 199.0], [57.8, 199.0], [57.9, 200.0], [58.0, 200.0], [58.1, 200.0], [58.2, 200.0], [58.3, 200.0], [58.4, 200.0], [58.5, 200.0], [58.6, 201.0], [58.7, 201.0], [58.8, 201.0], [58.9, 201.0], [59.0, 201.0], [59.1, 201.0], [59.2, 201.0], [59.3, 201.0], [59.4, 202.0], [59.5, 202.0], [59.6, 202.0], [59.7, 202.0], [59.8, 202.0], [59.9, 202.0], [60.0, 203.0], [60.1, 203.0], [60.2, 203.0], [60.3, 203.0], [60.4, 203.0], [60.5, 203.0], [60.6, 203.0], [60.7, 204.0], [60.8, 204.0], [60.9, 204.0], [61.0, 204.0], [61.1, 204.0], [61.2, 204.0], [61.3, 205.0], [61.4, 205.0], [61.5, 205.0], [61.6, 205.0], [61.7, 205.0], [61.8, 205.0], [61.9, 206.0], [62.0, 206.0], [62.1, 206.0], [62.2, 206.0], [62.3, 206.0], [62.4, 206.0], [62.5, 206.0], [62.6, 207.0], [62.7, 207.0], [62.8, 207.0], [62.9, 207.0], [63.0, 207.0], [63.1, 207.0], [63.2, 208.0], [63.3, 208.0], [63.4, 208.0], [63.5, 208.0], [63.6, 208.0], [63.7, 208.0], [63.8, 208.0], [63.9, 209.0], [64.0, 209.0], [64.1, 209.0], [64.2, 209.0], [64.3, 209.0], [64.4, 210.0], [64.5, 210.0], [64.6, 210.0], [64.7, 210.0], [64.8, 210.0], [64.9, 211.0], [65.0, 211.0], [65.1, 211.0], [65.2, 211.0], [65.3, 211.0], [65.4, 211.0], [65.5, 212.0], [65.6, 212.0], [65.7, 212.0], [65.8, 212.0], [65.9, 212.0], [66.0, 213.0], [66.1, 213.0], [66.2, 213.0], [66.3, 213.0], [66.4, 213.0], [66.5, 214.0], [66.6, 214.0], [66.7, 214.0], [66.8, 214.0], [66.9, 214.0], [67.0, 214.0], [67.1, 215.0], [67.2, 215.0], [67.3, 215.0], [67.4, 215.0], [67.5, 215.0], [67.6, 216.0], [67.7, 216.0], [67.8, 216.0], [67.9, 216.0], [68.0, 216.0], [68.1, 217.0], [68.2, 217.0], [68.3, 217.0], [68.4, 217.0], [68.5, 218.0], [68.6, 218.0], [68.7, 218.0], [68.8, 218.0], [68.9, 218.0], [69.0, 219.0], [69.1, 219.0], [69.2, 219.0], [69.3, 219.0], [69.4, 219.0], [69.5, 220.0], [69.6, 220.0], [69.7, 220.0], [69.8, 220.0], [69.9, 221.0], [70.0, 221.0], [70.1, 221.0], [70.2, 221.0], [70.3, 221.0], [70.4, 222.0], [70.5, 222.0], [70.6, 222.0], [70.7, 222.0], [70.8, 223.0], [70.9, 223.0], [71.0, 223.0], [71.1, 223.0], [71.2, 224.0], [71.3, 224.0], [71.4, 224.0], [71.5, 224.0], [71.6, 225.0], [71.7, 225.0], [71.8, 225.0], [71.9, 226.0], [72.0, 226.0], [72.1, 226.0], [72.2, 226.0], [72.3, 227.0], [72.4, 227.0], [72.5, 227.0], [72.6, 227.0], [72.7, 228.0], [72.8, 228.0], [72.9, 228.0], [73.0, 229.0], [73.1, 229.0], [73.2, 229.0], [73.3, 230.0], [73.4, 230.0], [73.5, 230.0], [73.6, 230.0], [73.7, 231.0], [73.8, 231.0], [73.9, 231.0], [74.0, 232.0], [74.1, 232.0], [74.2, 232.0], [74.3, 233.0], [74.4, 233.0], [74.5, 233.0], [74.6, 234.0], [74.7, 234.0], [74.8, 234.0], [74.9, 235.0], [75.0, 235.0], [75.1, 235.0], [75.2, 236.0], [75.3, 236.0], [75.4, 236.0], [75.5, 237.0], [75.6, 237.0], [75.7, 237.0], [75.8, 238.0], [75.9, 238.0], [76.0, 239.0], [76.1, 239.0], [76.2, 239.0], [76.3, 240.0], [76.4, 240.0], [76.5, 240.0], [76.6, 241.0], [76.7, 241.0], [76.8, 242.0], [76.9, 242.0], [77.0, 242.0], [77.1, 243.0], [77.2, 243.0], [77.3, 243.0], [77.4, 244.0], [77.5, 244.0], [77.6, 245.0], [77.7, 245.0], [77.8, 246.0], [77.9, 246.0], [78.0, 247.0], [78.1, 247.0], [78.2, 247.0], [78.3, 248.0], [78.4, 248.0], [78.5, 249.0], [78.6, 249.0], [78.7, 249.0], [78.8, 250.0], [78.9, 250.0], [79.0, 251.0], [79.1, 251.0], [79.2, 252.0], [79.3, 252.0], [79.4, 253.0], [79.5, 253.0], [79.6, 254.0], [79.7, 254.0], [79.8, 255.0], [79.9, 255.0], [80.0, 256.0], [80.1, 256.0], [80.2, 257.0], [80.3, 258.0], [80.4, 258.0], [80.5, 259.0], [80.6, 260.0], [80.7, 260.0], [80.8, 261.0], [80.9, 261.0], [81.0, 262.0], [81.1, 262.0], [81.2, 263.0], [81.3, 264.0], [81.4, 264.0], [81.5, 265.0], [81.6, 266.0], [81.7, 267.0], [81.8, 267.0], [81.9, 268.0], [82.0, 268.0], [82.1, 269.0], [82.2, 270.0], [82.3, 270.0], [82.4, 271.0], [82.5, 272.0], [82.6, 273.0], [82.7, 273.0], [82.8, 274.0], [82.9, 275.0], [83.0, 276.0], [83.1, 276.0], [83.2, 277.0], [83.3, 278.0], [83.4, 279.0], [83.5, 280.0], [83.6, 281.0], [83.7, 282.0], [83.8, 282.0], [83.9, 283.0], [84.0, 284.0], [84.1, 285.0], [84.2, 286.0], [84.3, 287.0], [84.4, 287.0], [84.5, 288.0], [84.6, 289.0], [84.7, 290.0], [84.8, 291.0], [84.9, 292.0], [85.0, 293.0], [85.1, 294.0], [85.2, 295.0], [85.3, 297.0], [85.4, 298.0], [85.5, 299.0], [85.6, 300.0], [85.7, 301.0], [85.8, 303.0], [85.9, 304.0], [86.0, 305.0], [86.1, 306.0], [86.2, 308.0], [86.3, 310.0], [86.4, 311.0], [86.5, 313.0], [86.6, 315.0], [86.7, 316.0], [86.8, 318.0], [86.9, 320.0], [87.0, 322.0], [87.1, 324.0], [87.2, 326.0], [87.3, 329.0], [87.4, 331.0], [87.5, 333.0], [87.6, 335.0], [87.7, 338.0], [87.8, 340.0], [87.9, 343.0], [88.0, 346.0], [88.1, 348.0], [88.2, 350.0], [88.3, 353.0], [88.4, 356.0], [88.5, 358.0], [88.6, 363.0], [88.7, 366.0], [88.8, 369.0], [88.9, 372.0], [89.0, 376.0], [89.1, 379.0], [89.2, 384.0], [89.3, 388.0], [89.4, 392.0], [89.5, 395.0], [89.6, 401.0], [89.7, 405.0], [89.8, 411.0], [89.9, 417.0], [90.0, 422.0], [90.1, 426.0], [90.2, 432.0], [90.3, 437.0], [90.4, 443.0], [90.5, 449.0], [90.6, 454.0], [90.7, 459.0], [90.8, 466.0], [90.9, 471.0], [91.0, 478.0], [91.1, 486.0], [91.2, 494.0], [91.3, 501.0], [91.4, 507.0], [91.5, 516.0], [91.6, 529.0], [91.7, 539.0], [91.8, 548.0], [91.9, 557.0], [92.0, 570.0], [92.1, 581.0], [92.2, 594.0], [92.3, 603.0], [92.4, 617.0], [92.5, 629.0], [92.6, 648.0], [92.7, 663.0], [92.8, 675.0], [92.9, 693.0], [93.0, 712.0], [93.1, 740.0], [93.2, 762.0], [93.3, 782.0], [93.4, 808.0], [93.5, 829.0], [93.6, 856.0], [93.7, 888.0], [93.8, 923.0], [93.9, 969.0], [94.0, 1010.0], [94.1, 1068.0], [94.2, 1118.0], [94.3, 1158.0], [94.4, 1173.0], [94.5, 1181.0], [94.6, 1187.0], [94.7, 1193.0], [94.8, 1200.0], [94.9, 1210.0], [95.0, 1221.0], [95.1, 1232.0], [95.2, 1245.0], [95.3, 1261.0], [95.4, 1278.0], [95.5, 1294.0], [95.6, 1308.0], [95.7, 1325.0], [95.8, 1348.0], [95.9, 1367.0], [96.0, 1386.0], [96.1, 1413.0], [96.2, 1445.0], [96.3, 1482.0], [96.4, 1524.0], [96.5, 1558.0], [96.6, 1622.0], [96.7, 1682.0], [96.8, 1749.0], [96.9, 1836.0], [97.0, 1929.0], [97.1, 2006.0], [97.2, 2074.0], [97.3, 2156.0], [97.4, 2213.0], [97.5, 2303.0], [97.6, 2414.0], [97.7, 2527.0], [97.8, 2634.0], [97.9, 2766.0], [98.0, 2904.0], [98.1, 3061.0], [98.2, 3240.0], [98.3, 3425.0], [98.4, 3585.0], [98.5, 3829.0], [98.6, 4047.0], [98.7, 4259.0], [98.8, 4520.0], [98.9, 4916.0], [99.0, 5503.0], [99.1, 6090.0], [99.2, 6542.0], [99.3, 7585.0], [99.4, 8127.0], [99.5, 9737.0], [99.6, 12154.0], [99.7, 14508.0], [99.8, 16337.0], [99.9, 22376.0], [100.0, 170589.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 30657.0, "series": [{"data": [[90700.0, 1.0], [100.0, 30657.0], [33300.0, 1.0], [35300.0, 1.0], [38100.0, 1.0], [38900.0, 1.0], [42500.0, 1.0], [200.0, 14671.0], [300.0, 2144.0], [400.0, 905.0], [500.0, 515.0], [600.0, 363.0], [700.0, 231.0], [800.0, 188.0], [900.0, 129.0], [1000.0, 101.0], [1100.0, 331.0], [1200.0, 399.0], [1300.0, 276.0], [1400.0, 156.0], [1500.0, 115.0], [1600.0, 79.0], [1700.0, 81.0], [1800.0, 49.0], [1900.0, 66.0], [2000.0, 73.0], [2100.0, 78.0], [2200.0, 66.0], [2300.0, 49.0], [2400.0, 42.0], [2500.0, 53.0], [2600.0, 41.0], [2700.0, 42.0], [2800.0, 39.0], [2900.0, 27.0], [3000.0, 33.0], [3100.0, 29.0], [3300.0, 32.0], [3200.0, 34.0], [3400.0, 29.0], [3500.0, 33.0], [3700.0, 20.0], [3600.0, 23.0], [3800.0, 26.0], [3900.0, 20.0], [4000.0, 31.0], [4300.0, 20.0], [4100.0, 23.0], [4200.0, 21.0], [4400.0, 18.0], [4500.0, 27.0], [4600.0, 13.0], [4700.0, 7.0], [4800.0, 8.0], [5100.0, 12.0], [5000.0, 7.0], [4900.0, 10.0], [5200.0, 9.0], [5300.0, 10.0], [5600.0, 12.0], [5500.0, 17.0], [5400.0, 7.0], [5800.0, 8.0], [5700.0, 5.0], [5900.0, 6.0], [6000.0, 7.0], [6100.0, 8.0], [6300.0, 16.0], [6200.0, 15.0], [6400.0, 8.0], [6600.0, 5.0], [6500.0, 7.0], [6800.0, 6.0], [6900.0, 5.0], [6700.0, 3.0], [7100.0, 8.0], [7000.0, 6.0], [7400.0, 7.0], [7200.0, 3.0], [7300.0, 4.0], [7500.0, 9.0], [7600.0, 28.0], [7700.0, 7.0], [7800.0, 4.0], [7900.0, 1.0], [8100.0, 6.0], [8000.0, 6.0], [8200.0, 6.0], [8600.0, 3.0], [8700.0, 5.0], [8500.0, 1.0], [8300.0, 3.0], [8400.0, 1.0], [9200.0, 4.0], [9000.0, 6.0], [8800.0, 6.0], [8900.0, 3.0], [9100.0, 3.0], [9600.0, 2.0], [9700.0, 4.0], [9300.0, 2.0], [9400.0, 2.0], [9500.0, 2.0], [10100.0, 4.0], [9900.0, 2.0], [10200.0, 3.0], [10000.0, 3.0], [9800.0, 2.0], [10400.0, 2.0], [10600.0, 2.0], [10700.0, 4.0], [10500.0, 1.0], [10300.0, 3.0], [11000.0, 4.0], [11100.0, 1.0], [11200.0, 1.0], [10900.0, 2.0], [10800.0, 1.0], [11300.0, 1.0], [11600.0, 2.0], [11700.0, 2.0], [11400.0, 2.0], [11500.0, 2.0], [12200.0, 2.0], [12100.0, 3.0], [11800.0, 1.0], [11900.0, 3.0], [12600.0, 2.0], [12400.0, 2.0], [12500.0, 2.0], [12700.0, 3.0], [13000.0, 4.0], [12800.0, 3.0], [12900.0, 2.0], [13300.0, 2.0], [13200.0, 4.0], [13500.0, 4.0], [13600.0, 2.0], [13400.0, 4.0], [13800.0, 1.0], [14200.0, 4.0], [14300.0, 3.0], [14000.0, 1.0], [14100.0, 1.0], [14400.0, 5.0], [14500.0, 2.0], [14600.0, 2.0], [14700.0, 5.0], [15300.0, 7.0], [14900.0, 4.0], [15100.0, 1.0], [15200.0, 3.0], [15500.0, 3.0], [15800.0, 2.0], [15400.0, 6.0], [15700.0, 3.0], [15600.0, 11.0], [16200.0, 2.0], [16300.0, 1.0], [15900.0, 1.0], [16100.0, 1.0], [16400.0, 3.0], [16800.0, 4.0], [17400.0, 1.0], [18400.0, 1.0], [17800.0, 1.0], [17600.0, 2.0], [18000.0, 1.0], [19200.0, 1.0], [20400.0, 1.0], [20000.0, 2.0], [21200.0, 2.0], [21800.0, 6.0], [22400.0, 1.0], [22800.0, 2.0], [22600.0, 1.0], [23400.0, 1.0], [23000.0, 1.0], [24000.0, 1.0], [24200.0, 1.0], [25000.0, 1.0], [25200.0, 3.0], [25800.0, 1.0], [26600.0, 1.0], [27600.0, 2.0], [27200.0, 2.0], [29400.0, 1.0], [42000.0, 1.0], [45200.0, 1.0], [52000.0, 1.0], [55600.0, 1.0], [58000.0, 1.0], [170500.0, 1.0], [33900.0, 1.0], [40700.0, 1.0], [43900.0, 1.0], [45900.0, 1.0], [52700.0, 1.0], [17300.0, 3.0], [16700.0, 1.0], [16900.0, 1.0], [17100.0, 3.0], [16500.0, 1.0], [17500.0, 1.0], [17700.0, 4.0], [18100.0, 2.0], [18300.0, 1.0], [19500.0, 1.0], [21500.0, 1.0], [20700.0, 1.0], [21100.0, 2.0], [20900.0, 1.0], [22100.0, 2.0], [21700.0, 2.0], [22300.0, 1.0], [22500.0, 1.0], [23900.0, 1.0], [24100.0, 1.0], [25100.0, 1.0], [25700.0, 2.0], [26500.0, 1.0], [26900.0, 2.0], [26700.0, 1.0], [27100.0, 1.0], [27900.0, 1.0], [31300.0, 1.0], [32300.0, 1.0], [41800.0, 1.0], [42600.0, 1.0], [57000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 170500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 48386.0, "series": [{"data": [[0.0, 48386.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 2682.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1927.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.687772194304864, "minX": 1.7291607E12, "maxY": 216.38518518518498, "series": [{"data": [[1.72916088E12, 16.022397891963156], [1.72916154E12, 12.313437812604162], [1.72916124E12, 10.687772194304864], [1.72916094E12, 13.915294117647086], [1.72916112E12, 11.490378234903762], [1.72916178E12, 10.927906976744179], [1.72916082E12, 40.03630470016219], [1.72916148E12, 11.668754119973617], [1.72916118E12, 10.834167500834166], [1.72916136E12, 17.89639970609848], [1.72916106E12, 11.265547877591342], [1.72916172E12, 13.236490993996009], [1.72916076E12, 77.64906937394248], [1.72916142E12, 32.869846153846126], [1.7291616E12, 11.07466666666667], [1.7291613E12, 13.148738379814038], [1.729161E12, 12.445637583892601], [1.72916166E12, 13.471038615179772], [1.7291607E12, 216.38518518518498]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916178E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 189.18782608695636, "minX": 1.0, "maxY": 13577.0, "series": [{"data": [[2.0, 289.67195767195756], [3.0, 240.63636363636365], [4.0, 231.00338983050835], [5.0, 225.36543209876535], [6.0, 224.11816578483248], [7.0, 211.21874999999991], [8.0, 204.80527261833439], [9.0, 189.18782608695636], [10.0, 193.56343046189022], [11.0, 205.10734051849695], [12.0, 210.19506966773832], [13.0, 272.9011406844108], [14.0, 229.72305389221566], [15.0, 236.80729653882085], [16.0, 252.4538964901847], [17.0, 333.7494722026747], [18.0, 311.024701873935], [19.0, 268.48235294117586], [20.0, 335.58243080625766], [21.0, 502.93659942363144], [22.0, 379.56454388984486], [23.0, 447.23706896551715], [24.0, 471.54285714285766], [25.0, 513.9487951807233], [26.0, 579.4967948717948], [27.0, 473.3849206349204], [28.0, 624.4567901234566], [29.0, 784.213953488372], [30.0, 532.34703196347], [31.0, 474.57560975609755], [33.0, 668.7853107344635], [32.0, 669.7386934673361], [35.0, 977.6016260162596], [34.0, 534.059701492537], [37.0, 454.28800000000007], [36.0, 1561.134453781512], [39.0, 679.4782608695654], [38.0, 902.0080645161287], [41.0, 1196.575471698113], [40.0, 563.3619047619046], [43.0, 887.7628865979383], [42.0, 1096.4270833333335], [45.0, 499.2823529411765], [44.0, 1182.2112676056338], [47.0, 893.8000000000003], [46.0, 1201.3461538461536], [49.0, 1452.9375000000002], [48.0, 860.4406779661017], [51.0, 591.7346938775511], [50.0, 606.5909090909091], [53.0, 982.9999999999998], [52.0, 641.7619047619048], [55.0, 867.9310344827588], [54.0, 2191.9736842105267], [57.0, 2525.733333333334], [56.0, 594.2682926829269], [59.0, 1862.6315789473686], [58.0, 2390.846153846154], [61.0, 698.391304347826], [60.0, 2367.3214285714284], [63.0, 1319.5294117647059], [62.0, 403.1875], [67.0, 1327.8499999999997], [66.0, 1002.782608695652], [65.0, 1203.894736842105], [64.0, 815.6666666666667], [71.0, 1731.909090909091], [70.0, 796.5454545454546], [69.0, 2513.1153846153848], [68.0, 1300.625], [75.0, 788.9333333333333], [74.0, 1766.7619047619048], [73.0, 2793.7894736842104], [72.0, 828.9259259259259], [79.0, 2763.142857142858], [78.0, 2465.0000000000005], [77.0, 2726.947368421052], [76.0, 1816.4444444444441], [82.0, 2337.9523809523816], [81.0, 1188.2307692307693], [80.0, 2394.9999999999995], [83.0, 1725.4285714285713], [87.0, 4471.470588235294], [86.0, 1139.2142857142858], [85.0, 1052.0454545454543], [84.0, 2688.6666666666665], [91.0, 1465.4444444444446], [90.0, 1714.2], [89.0, 571.3333333333334], [88.0, 3590.733333333334], [95.0, 3586.8275862068967], [94.0, 2020.4400000000005], [93.0, 2412.242424242424], [92.0, 2679.444444444445], [99.0, 2580.5555555555557], [98.0, 2344.299999999999], [97.0, 938.0344827586209], [96.0, 1434.2592592592594], [103.0, 2079.5599999999995], [102.0, 1728.5], [101.0, 3578.045454545454], [100.0, 3553.16], [107.0, 3221.6666666666665], [106.0, 3543.666666666668], [105.0, 2699.3333333333335], [104.0, 2967.8695652173915], [111.0, 1043.0625], [110.0, 1892.904761904762], [109.0, 2379.1176470588243], [108.0, 1499.681818181818], [115.0, 1739.5263157894735], [114.0, 1312.1052631578948], [113.0, 3138.3750000000005], [112.0, 5119.642857142858], [119.0, 4585.500000000001], [118.0, 1818.6956521739128], [117.0, 2555.380952380952], [116.0, 2358.1], [123.0, 3735.363636363637], [122.0, 2599.75], [121.0, 1162.375], [120.0, 2906.090909090909], [127.0, 1160.3846153846152], [126.0, 2619.1666666666674], [125.0, 3607.3846153846166], [124.0, 2676.5454545454545], [135.0, 986.5555555555555], [134.0, 2834.833333333334], [133.0, 1144.7857142857144], [132.0, 9059.000000000002], [131.0, 1327.913043478261], [130.0, 2026.6111111111109], [129.0, 2266.0], [128.0, 2328.538461538462], [143.0, 2859.222222222222], [142.0, 6560.9000000000015], [141.0, 1051.7777777777778], [140.0, 979.6363636363636], [139.0, 3209.75], [138.0, 3378.2], [137.0, 4031.2727272727266], [136.0, 929.6], [151.0, 4436.000000000001], [149.0, 4657.0], [148.0, 1925.2307692307695], [147.0, 3522.3333333333335], [150.0, 2920.0], [146.0, 5034.857142857144], [145.0, 1057.4285714285716], [144.0, 1503.7142857142856], [159.0, 3004.181818181818], [158.0, 2535.416666666667], [157.0, 1441.3333333333335], [156.0, 1873.769230769231], [155.0, 4736.0], [154.0, 2179.545454545455], [153.0, 2369.3], [152.0, 6640.2], [167.0, 2964.0], [166.0, 2460.3333333333335], [164.0, 782.75], [163.0, 1235.0], [162.0, 2262.4], [161.0, 1815.0], [160.0, 1424.9999999999998], [165.0, 1197.25], [175.0, 3832.8571428571427], [174.0, 1452.0], [173.0, 3824.75], [172.0, 1473.2], [171.0, 1899.0], [170.0, 1244.6666666666667], [168.0, 2637.6], [169.0, 1457.5], [183.0, 1758.6666666666665], [182.0, 1559.6], [181.0, 1424.625], [179.0, 1990.0], [178.0, 1657.1428571428573], [177.0, 1713.5], [176.0, 1968.8], [180.0, 1959.5], [191.0, 3639.555555555555], [190.0, 2387.166666666667], [189.0, 2416.0], [188.0, 3103.7999999999997], [187.0, 1369.6], [186.0, 1171.6666666666665], [185.0, 3313.0], [184.0, 3008.6666666666665], [199.0, 2796.3333333333326], [198.0, 3282.105263157895], [197.0, 4460.999999999999], [196.0, 2459.866666666667], [195.0, 4315.499999999999], [194.0, 1860.0], [193.0, 3026.4545454545455], [192.0, 1463.4545454545455], [207.0, 1938.8333333333337], [206.0, 3551.7058823529414], [205.0, 5049.375], [203.0, 4294.352941176469], [202.0, 3059.5], [201.0, 3640.4285714285716], [200.0, 2189.25], [204.0, 3704.3571428571427], [215.0, 3247.9166666666665], [214.0, 3509.4999999999995], [213.0, 1595.8181818181818], [212.0, 2661.7142857142853], [211.0, 2317.1333333333337], [210.0, 2584.717391304348], [209.0, 2890.333333333334], [208.0, 2303.7999999999997], [223.0, 2703.4761904761904], [221.0, 2376.909090909091], [220.0, 3511.782608695653], [218.0, 3181.4074074074065], [217.0, 2615.2000000000003], [216.0, 3551.1212121212134], [219.0, 5877.826086956521], [222.0, 2914.4], [231.0, 3760.3749999999995], [230.0, 3526.375], [229.0, 3100.2222222222226], [228.0, 3102.2692307692305], [227.0, 1906.8], [226.0, 2663.9285714285706], [225.0, 1965.8947368421054], [224.0, 3953.857142857143], [239.0, 3613.3750000000005], [238.0, 2920.0], [237.0, 4922.9], [236.0, 2642.3333333333335], [235.0, 3148.6666666666665], [234.0, 4205.0], [233.0, 2955.8888888888887], [232.0, 3446.5714285714284], [247.0, 2898.5], [246.0, 3763.9999999999995], [245.0, 3016.6], [244.0, 4263.2], [243.0, 3245.1428571428573], [242.0, 4168.636363636364], [241.0, 2493.6], [240.0, 2432.75], [255.0, 3009.9999999999995], [254.0, 3980.0], [253.0, 4437.166666666667], [252.0, 2902.1666666666665], [251.0, 4774.6], [250.0, 3391.0], [249.0, 4313.6], [248.0, 1903.0], [270.0, 3371.75], [271.0, 2331.3636363636365], [269.0, 2069.3333333333335], [268.0, 2245.75], [267.0, 1257.4], [266.0, 1357.0], [265.0, 1962.0], [264.0, 1472.75], [263.0, 1160.6], [257.0, 3053.8333333333335], [256.0, 3977.6], [259.0, 4132.285714285715], [258.0, 3531.714285714286], [262.0, 2157.6666666666665], [261.0, 3284.8571428571427], [260.0, 3021.333333333333], [286.0, 4764.333333333333], [287.0, 2381.5], [285.0, 1457.0], [284.0, 6976.0], [283.0, 2457.0], [282.0, 4268.5], [281.0, 1702.0], [280.0, 2088.0], [279.0, 2449.3333333333335], [272.0, 3059.6666666666665], [274.0, 4765.166666666667], [275.0, 2170.0], [273.0, 3584.8888888888887], [278.0, 1782.0], [277.0, 2813.5], [276.0, 1978.0], [301.0, 2935.5], [302.0, 3296.6], [300.0, 2387.0], [291.0, 1496.3333333333333], [290.0, 10729.0], [289.0, 1876.3333333333333], [288.0, 5165.0], [299.0, 4138.2], [298.0, 2909.9999999999995], [297.0, 2403.8], [296.0, 5903.833333333333], [295.0, 3778.25], [294.0, 5779.333333333333], [293.0, 3351.5], [292.0, 495.0], [303.0, 2095.5], [317.0, 2998.214285714286], [318.0, 4118.0625], [316.0, 2796.7500000000005], [307.0, 3659.5], [306.0, 4273.666666666667], [305.0, 3324.222222222222], [304.0, 2183.4285714285716], [315.0, 4152.5], [314.0, 5255.0], [313.0, 4384.2], [312.0, 3484.4], [319.0, 5534.75], [311.0, 2977.4000000000005], [309.0, 3875.4444444444443], [308.0, 2914.5], [310.0, 2552.166666666667], [335.0, 3529.625], [332.0, 3937.8], [320.0, 4094.2], [321.0, 2764.25], [323.0, 7722.5], [322.0, 6164.0], [328.0, 3225.6666666666665], [334.0, 2091.5714285714284], [333.0, 2738.714285714286], [331.0, 3882.4444444444443], [330.0, 4588.571428571428], [329.0, 2887.25], [327.0, 4113.0], [326.0, 4681.6], [325.0, 3249.6666666666665], [324.0, 5604.0], [350.0, 3835.0], [338.0, 2372.0], [339.0, 3165.222222222222], [337.0, 4136.857142857143], [336.0, 2962.0], [342.0, 3255.625], [340.0, 3295.666666666667], [341.0, 1779.5], [343.0, 3944.75], [351.0, 3258.0], [344.0, 3691.05], [348.0, 3645.222222222222], [349.0, 1971.8333333333335], [346.0, 3840.2500000000005], [347.0, 2076.5], [345.0, 2851.3333333333335], [355.0, 2124.8], [359.0, 3099.8888888888887], [360.0, 3254.923076923077], [358.0, 3392.6666666666665], [357.0, 5708.222222222223], [364.0, 3665.0000000000005], [365.0, 1928.0], [367.0, 2993.5], [366.0, 3746.0], [354.0, 4149.0], [353.0, 2947.0], [352.0, 2441.777777777778], [363.0, 4284.0], [362.0, 2690.0], [361.0, 2181.3333333333335], [356.0, 6423.555555555557], [375.0, 13577.0], [374.0, 8640.0], [373.0, 8794.5], [372.0, 10654.0], [371.0, 7913.25], [370.0, 5556.25], [369.0, 5269.0], [368.0, 1662.0], [1.0, 235.47706422018348]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[24.909754716981332, 440.6623773584893]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 375.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 860.0, "minX": 1.7291607E12, "maxY": 3658023.6166666667, "series": [{"data": [[1.72916088E12, 3417175.7666666666], [1.72916154E12, 3375547.7666666666], [1.72916124E12, 3359815.816666667], [1.72916094E12, 3348534.433333333], [1.72916112E12, 3392454.5833333335], [1.72916178E12, 483993.2], [1.72916082E12, 3472309.9166666665], [1.72916148E12, 3414927.5166666666], [1.72916118E12, 3373321.6], [1.72916136E12, 3063698.3833333333], [1.72916106E12, 3420590.2], [1.72916172E12, 3374444.15], [1.72916076E12, 3325948.8], [1.72916142E12, 3658023.6166666667], [1.7291616E12, 3376685.8833333333], [1.7291613E12, 3390139.283333333], [1.729161E12, 3354175.2666666666], [1.72916166E12, 3381194.3666666667], [1.7291607E12, 1666027.1333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72916088E12, 6072.0], [1.72916154E12, 5998.0], [1.72916124E12, 5970.0], [1.72916094E12, 5950.0], [1.72916112E12, 6028.0], [1.72916178E12, 860.0], [1.72916082E12, 6170.0], [1.72916148E12, 6068.0], [1.72916118E12, 5994.0], [1.72916136E12, 5444.0], [1.72916106E12, 6078.0], [1.72916172E12, 5996.0], [1.72916076E12, 5910.0], [1.72916142E12, 6500.0], [1.7291616E12, 6000.0], [1.7291613E12, 6024.0], [1.729161E12, 5960.0], [1.72916166E12, 6008.0], [1.7291607E12, 2960.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916178E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 188.28595261928584, "minX": 1.7291607E12, "maxY": 3585.382491582491, "series": [{"data": [[1.72916088E12, 358.8857048748363], [1.72916154E12, 204.52050683561214], [1.72916124E12, 195.72294807370182], [1.72916094E12, 262.7152941176475], [1.72916112E12, 206.7465162574654], [1.72916178E12, 202.38837209302318], [1.72916082E12, 879.9692058346843], [1.72916148E12, 205.74390243902448], [1.72916118E12, 188.28595261928584], [1.72916136E12, 261.4511388684791], [1.72916106E12, 194.14116485686085], [1.72916172E12, 206.3102068045358], [1.72916076E12, 1436.744500846022], [1.72916142E12, 482.19353846153956], [1.7291616E12, 201.38066666666677], [1.7291613E12, 243.355245683931], [1.729161E12, 218.1446308724832], [1.72916166E12, 209.25133155792244], [1.7291607E12, 3585.382491582491]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916178E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 140.16049382716054, "minX": 1.7291607E12, "maxY": 2503.9663299663302, "series": [{"data": [[1.72916088E12, 233.67819499341218], [1.72916154E12, 154.59319773257695], [1.72916124E12, 145.8844221105527], [1.72916094E12, 194.1956302521008], [1.72916112E12, 154.97312541473136], [1.72916178E12, 156.35348837209293], [1.72916082E12, 629.0998379254456], [1.72916148E12, 155.33618984838515], [1.72916118E12, 140.16049382716054], [1.72916136E12, 195.1021307861868], [1.72916106E12, 145.92662059888107], [1.72916172E12, 157.24316210807237], [1.72916076E12, 962.1370558375619], [1.72916142E12, 378.4159999999997], [1.7291616E12, 151.80033333333353], [1.7291613E12, 184.1513944223109], [1.729161E12, 163.26812080536936], [1.72916166E12, 158.30292942743026], [1.7291607E12, 2503.9663299663302]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916178E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 92.18585251918594, "minX": 1.7291607E12, "maxY": 1775.8127946127968, "series": [{"data": [[1.72916088E12, 167.88241106719371], [1.72916154E12, 102.78592864288086], [1.72916124E12, 95.68743718592962], [1.72916094E12, 132.79226890756277], [1.72916112E12, 103.86794956867953], [1.72916178E12, 107.49534883720926], [1.72916082E12, 425.45380875202676], [1.72916148E12, 103.36684245220818], [1.72916118E12, 92.18585251918594], [1.72916136E12, 130.40007347538557], [1.72916106E12, 96.29911154985196], [1.72916172E12, 107.28118745830534], [1.72916076E12, 597.34856175973], [1.72916142E12, 297.05323076923077], [1.7291616E12, 101.46833333333336], [1.7291613E12, 126.00630810092946], [1.729161E12, 109.68825503355694], [1.72916166E12, 106.77097203728333], [1.7291607E12, 1775.8127946127968]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916178E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 145.0, "minX": 1.7291607E12, "maxY": 170589.0, "series": [{"data": [[1.72916088E12, 170589.0], [1.72916154E12, 1257.0], [1.72916124E12, 1372.0], [1.72916094E12, 2579.0], [1.72916112E12, 1342.0], [1.72916178E12, 1225.0], [1.72916082E12, 45977.0], [1.72916148E12, 1262.0], [1.72916118E12, 1209.0], [1.72916136E12, 3327.0], [1.72916106E12, 1229.0], [1.72916172E12, 3181.0], [1.72916076E12, 90760.0], [1.72916142E12, 15512.0], [1.7291616E12, 3240.0], [1.7291613E12, 1522.0], [1.729161E12, 3376.0], [1.72916166E12, 3194.0], [1.7291607E12, 27629.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72916088E12, 456.0], [1.72916154E12, 243.0], [1.72916124E12, 226.0], [1.72916094E12, 326.0], [1.72916112E12, 240.0], [1.72916178E12, 208.0], [1.72916082E12, 1391.8000000000002], [1.72916148E12, 252.0], [1.72916118E12, 210.0], [1.72916136E12, 365.0], [1.72916106E12, 216.0], [1.72916172E12, 232.0], [1.72916076E12, 3138.000000000002], [1.72916142E12, 1188.0], [1.7291616E12, 235.0], [1.7291613E12, 304.40000000000055], [1.729161E12, 271.0], [1.72916166E12, 248.0], [1.7291607E12, 10061.9]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72916088E12, 1685.7100000000019], [1.72916154E12, 717.0], [1.72916124E12, 454.0], [1.72916094E12, 1353.8799999999974], [1.72916112E12, 727.6499999999919], [1.72916178E12, 1193.38], [1.72916082E12, 15288.199999999997], [1.72916148E12, 677.2000000000025], [1.72916118E12, 409.6799999999994], [1.72916136E12, 1220.3899999999999], [1.72916106E12, 452.5999999999999], [1.72916172E12, 1182.0099999999998], [1.72916076E12, 13442.000000000004], [1.72916142E12, 4206.949999999988], [1.7291616E12, 543.9299999999985], [1.7291613E12, 1282.7399999999998], [1.729161E12, 1178.4700000000007], [1.72916166E12, 1174.9499999999998], [1.7291607E12, 23565.510000000024]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72916088E12, 853.4500000000003], [1.72916154E12, 286.0], [1.72916124E12, 267.6999999999998], [1.72916094E12, 561.1999999999998], [1.72916112E12, 284.25], [1.72916178E12, 259.9], [1.72916082E12, 3014.0999999999995], [1.72916148E12, 288.0], [1.72916118E12, 238.0999999999999], [1.72916136E12, 492.5499999999997], [1.72916106E12, 254.0], [1.72916172E12, 259.0], [1.72916076E12, 4684.399999999999], [1.72916142E12, 1797.699999999999], [1.7291616E12, 270.9499999999998], [1.7291613E12, 394.0], [1.729161E12, 346.0], [1.72916166E12, 284.75], [1.7291607E12, 15337.650000000001]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72916088E12, 149.0], [1.72916154E12, 149.0], [1.72916124E12, 152.0], [1.72916094E12, 155.0], [1.72916112E12, 152.0], [1.72916178E12, 149.0], [1.72916082E12, 161.0], [1.72916148E12, 149.0], [1.72916118E12, 145.0], [1.72916136E12, 149.0], [1.72916106E12, 153.0], [1.72916172E12, 150.0], [1.72916076E12, 170.0], [1.72916142E12, 150.0], [1.7291616E12, 149.0], [1.7291613E12, 154.0], [1.729161E12, 153.0], [1.72916166E12, 150.0], [1.7291607E12, 171.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72916088E12, 194.0], [1.72916154E12, 182.0], [1.72916124E12, 181.0], [1.72916094E12, 206.0], [1.72916112E12, 183.0], [1.72916178E12, 174.0], [1.72916082E12, 247.0], [1.72916148E12, 181.0], [1.72916118E12, 176.0], [1.72916136E12, 210.0], [1.72916106E12, 178.0], [1.72916172E12, 181.0], [1.72916076E12, 345.0], [1.72916142E12, 197.0], [1.7291616E12, 180.0], [1.7291613E12, 203.0], [1.729161E12, 187.0], [1.72916166E12, 181.0], [1.7291607E12, 1555.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916178E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 169.5, "minX": 1.0, "maxY": 12891.0, "series": [{"data": [[2.0, 170.0], [3.0, 169.5], [5.0, 2329.5], [6.0, 169.5], [8.0, 170.5], [9.0, 1167.0], [10.0, 177.0], [11.0, 179.5], [12.0, 176.0], [13.0, 172.0], [14.0, 217.5], [15.0, 187.0], [16.0, 175.5], [17.0, 174.0], [18.0, 3986.5], [19.0, 188.0], [20.0, 199.5], [21.0, 188.0], [22.0, 173.0], [23.0, 188.0], [24.0, 220.5], [25.0, 175.0], [26.0, 201.0], [27.0, 174.5], [28.0, 177.0], [29.0, 178.0], [30.0, 367.0], [31.0, 195.0], [32.0, 193.0], [33.0, 323.5], [35.0, 174.0], [34.0, 244.5], [36.0, 221.0], [37.0, 197.0], [38.0, 208.0], [39.0, 179.0], [41.0, 239.0], [40.0, 203.0], [42.0, 201.0], [43.0, 193.0], [44.0, 194.0], [45.0, 184.0], [47.0, 183.0], [46.0, 201.0], [49.0, 188.0], [48.0, 184.0], [50.0, 181.0], [51.0, 181.0], [53.0, 188.0], [52.0, 180.0], [54.0, 187.0], [55.0, 184.0], [57.0, 188.0], [56.0, 199.0], [58.0, 191.0], [59.0, 182.0], [60.0, 186.0], [61.0, 194.0], [62.0, 185.0], [63.0, 196.0], [67.0, 225.0], [64.0, 208.5], [65.0, 181.0], [66.0, 201.0], [70.0, 191.0], [71.0, 276.0], [68.0, 219.5], [69.0, 216.0], [72.0, 261.5], [74.0, 236.5], [73.0, 180.0], [78.0, 259.0], [77.0, 487.0], [76.0, 206.5], [79.0, 240.0], [83.0, 301.0], [81.0, 825.0], [80.0, 207.0], [87.0, 764.0], [85.0, 259.0], [86.0, 480.0], [89.0, 293.0], [88.0, 1678.0], [94.0, 2270.5], [93.0, 184.0], [95.0, 184.0], [99.0, 178.0], [102.0, 804.0], [100.0, 377.0], [105.0, 1665.0], [107.0, 1400.0], [104.0, 507.0], [111.0, 1792.0], [1.0, 1178.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[70.0, 12891.0], [49.0, 9025.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 111.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3372.5, "series": [{"data": [[2.0, 129.5], [3.0, 127.0], [5.0, 1079.5], [6.0, 122.0], [8.0, 128.0], [9.0, 1046.0], [10.0, 136.5], [11.0, 130.5], [12.0, 130.0], [13.0, 129.0], [14.0, 157.0], [15.0, 145.0], [16.0, 132.5], [17.0, 132.0], [18.0, 3372.5], [19.0, 139.5], [20.0, 141.5], [21.0, 139.0], [22.0, 131.0], [23.0, 138.0], [24.0, 154.5], [25.0, 133.0], [26.0, 141.0], [27.0, 129.5], [28.0, 133.0], [29.0, 133.0], [30.0, 201.0], [31.0, 145.0], [32.0, 141.0], [33.0, 234.5], [35.0, 132.0], [34.0, 180.0], [36.0, 162.0], [37.0, 143.0], [38.0, 153.5], [39.0, 135.0], [41.0, 167.0], [40.0, 147.0], [42.0, 148.0], [43.0, 142.0], [44.0, 142.0], [45.0, 138.0], [47.0, 137.0], [46.0, 149.0], [49.0, 139.0], [48.0, 137.0], [50.0, 135.0], [51.0, 135.0], [53.0, 140.0], [52.0, 135.0], [54.0, 139.0], [55.0, 137.0], [57.0, 139.0], [56.0, 147.0], [58.0, 142.0], [59.0, 136.0], [60.0, 138.0], [61.0, 144.0], [62.0, 137.0], [63.0, 145.0], [67.0, 167.0], [64.0, 150.0], [65.0, 135.0], [66.0, 146.0], [70.0, 142.0], [71.0, 190.0], [68.0, 159.0], [69.0, 156.0], [72.0, 200.5], [74.0, 166.0], [73.0, 133.0], [78.0, 197.0], [77.0, 268.5], [76.0, 155.5], [79.0, 175.0], [83.0, 218.0], [81.0, 515.0], [80.0, 155.0], [87.0, 514.0], [85.0, 185.0], [86.0, 185.0], [89.0, 226.0], [88.0, 1245.0], [94.0, 1510.5], [93.0, 137.0], [95.0, 136.0], [99.0, 132.0], [102.0, 584.0], [100.0, 242.0], [105.0, 1224.0], [107.0, 865.0], [104.0, 366.5], [111.0, 1598.0], [1.0, 1132.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[70.0, 0.0], [49.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 111.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 6.983333333333333, "minX": 1.7291607E12, "maxY": 51.78333333333333, "series": [{"data": [[1.72916088E12, 50.5], [1.72916154E12, 49.96666666666667], [1.72916124E12, 49.61666666666667], [1.72916094E12, 49.75], [1.72916112E12, 50.03333333333333], [1.72916178E12, 6.983333333333333], [1.72916082E12, 49.483333333333334], [1.72916148E12, 50.483333333333334], [1.72916118E12, 49.95], [1.72916136E12, 47.86666666666667], [1.72916106E12, 50.833333333333336], [1.72916172E12, 50.05], [1.72916076E12, 50.68333333333333], [1.72916142E12, 51.78333333333333], [1.7291616E12, 50.0], [1.7291613E12, 50.333333333333336], [1.729161E12, 49.516666666666666], [1.72916166E12, 50.0], [1.7291607E12, 25.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916178E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.7291607E12, "maxY": 54.166666666666664, "series": [{"data": [[1.72916088E12, 50.6], [1.72916154E12, 49.983333333333334], [1.72916124E12, 49.75], [1.72916094E12, 49.583333333333336], [1.72916112E12, 50.233333333333334], [1.72916178E12, 7.166666666666667], [1.72916082E12, 51.416666666666664], [1.72916148E12, 50.56666666666667], [1.72916118E12, 49.95], [1.72916136E12, 45.36666666666667], [1.72916106E12, 50.65], [1.72916172E12, 49.96666666666667], [1.72916076E12, 49.25], [1.72916142E12, 54.166666666666664], [1.7291616E12, 50.0], [1.7291613E12, 50.2], [1.729161E12, 49.666666666666664], [1.72916166E12, 50.06666666666667], [1.7291607E12, 24.666666666666668]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7291607E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72916178E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.7291607E12, "maxY": 54.166666666666664, "series": [{"data": [[1.72916088E12, 50.6], [1.72916154E12, 49.983333333333334], [1.72916124E12, 49.75], [1.72916094E12, 49.583333333333336], [1.72916112E12, 50.233333333333334], [1.72916178E12, 7.166666666666667], [1.72916082E12, 51.416666666666664], [1.72916148E12, 50.56666666666667], [1.72916118E12, 49.95], [1.72916136E12, 45.36666666666667], [1.72916106E12, 50.65], [1.72916172E12, 49.96666666666667], [1.72916076E12, 49.25], [1.72916142E12, 54.166666666666664], [1.7291616E12, 50.0], [1.7291613E12, 50.2], [1.729161E12, 49.666666666666664], [1.72916166E12, 50.06666666666667], [1.7291607E12, 24.666666666666668]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7291607E12, 0.08333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916178E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.08333333333333333, "minX": 1.7291607E12, "maxY": 54.166666666666664, "series": [{"data": [[1.72916088E12, 50.6], [1.72916154E12, 49.983333333333334], [1.72916124E12, 49.75], [1.72916094E12, 49.583333333333336], [1.72916112E12, 50.233333333333334], [1.72916178E12, 7.166666666666667], [1.72916082E12, 51.416666666666664], [1.72916148E12, 50.56666666666667], [1.72916118E12, 49.95], [1.72916136E12, 45.36666666666667], [1.72916106E12, 50.65], [1.72916172E12, 49.96666666666667], [1.72916076E12, 49.25], [1.72916142E12, 54.166666666666664], [1.7291616E12, 50.0], [1.7291613E12, 50.2], [1.729161E12, 49.666666666666664], [1.72916166E12, 50.06666666666667], [1.7291607E12, 24.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7291607E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72916178E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

