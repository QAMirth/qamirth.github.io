/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 120.0, "minX": 0.0, "maxY": 36776.0, "series": [{"data": [[0.0, 120.0], [0.1, 128.0], [0.2, 129.0], [0.3, 130.0], [0.4, 130.0], [0.5, 131.0], [0.6, 131.0], [0.7, 131.0], [0.8, 132.0], [0.9, 132.0], [1.0, 132.0], [1.1, 132.0], [1.2, 133.0], [1.3, 133.0], [1.4, 133.0], [1.5, 133.0], [1.6, 133.0], [1.7, 133.0], [1.8, 133.0], [1.9, 134.0], [2.0, 134.0], [2.1, 134.0], [2.2, 134.0], [2.3, 134.0], [2.4, 134.0], [2.5, 134.0], [2.6, 134.0], [2.7, 135.0], [2.8, 135.0], [2.9, 135.0], [3.0, 135.0], [3.1, 135.0], [3.2, 135.0], [3.3, 135.0], [3.4, 135.0], [3.5, 135.0], [3.6, 135.0], [3.7, 135.0], [3.8, 135.0], [3.9, 136.0], [4.0, 136.0], [4.1, 136.0], [4.2, 136.0], [4.3, 136.0], [4.4, 136.0], [4.5, 136.0], [4.6, 136.0], [4.7, 136.0], [4.8, 136.0], [4.9, 136.0], [5.0, 136.0], [5.1, 136.0], [5.2, 137.0], [5.3, 137.0], [5.4, 137.0], [5.5, 137.0], [5.6, 137.0], [5.7, 137.0], [5.8, 137.0], [5.9, 137.0], [6.0, 137.0], [6.1, 137.0], [6.2, 137.0], [6.3, 137.0], [6.4, 137.0], [6.5, 137.0], [6.6, 137.0], [6.7, 137.0], [6.8, 137.0], [6.9, 137.0], [7.0, 138.0], [7.1, 138.0], [7.2, 138.0], [7.3, 138.0], [7.4, 138.0], [7.5, 138.0], [7.6, 138.0], [7.7, 138.0], [7.8, 138.0], [7.9, 138.0], [8.0, 138.0], [8.1, 138.0], [8.2, 138.0], [8.3, 138.0], [8.4, 138.0], [8.5, 138.0], [8.6, 138.0], [8.7, 138.0], [8.8, 138.0], [8.9, 138.0], [9.0, 139.0], [9.1, 139.0], [9.2, 139.0], [9.3, 139.0], [9.4, 139.0], [9.5, 139.0], [9.6, 139.0], [9.7, 139.0], [9.8, 139.0], [9.9, 139.0], [10.0, 139.0], [10.1, 139.0], [10.2, 139.0], [10.3, 139.0], [10.4, 139.0], [10.5, 139.0], [10.6, 139.0], [10.7, 139.0], [10.8, 139.0], [10.9, 139.0], [11.0, 139.0], [11.1, 139.0], [11.2, 139.0], [11.3, 139.0], [11.4, 139.0], [11.5, 140.0], [11.6, 140.0], [11.7, 140.0], [11.8, 140.0], [11.9, 140.0], [12.0, 140.0], [12.1, 140.0], [12.2, 140.0], [12.3, 140.0], [12.4, 140.0], [12.5, 140.0], [12.6, 140.0], [12.7, 140.0], [12.8, 140.0], [12.9, 140.0], [13.0, 140.0], [13.1, 140.0], [13.2, 140.0], [13.3, 140.0], [13.4, 140.0], [13.5, 140.0], [13.6, 140.0], [13.7, 140.0], [13.8, 140.0], [13.9, 140.0], [14.0, 140.0], [14.1, 141.0], [14.2, 141.0], [14.3, 141.0], [14.4, 141.0], [14.5, 141.0], [14.6, 141.0], [14.7, 141.0], [14.8, 141.0], [14.9, 141.0], [15.0, 141.0], [15.1, 141.0], [15.2, 141.0], [15.3, 141.0], [15.4, 141.0], [15.5, 141.0], [15.6, 141.0], [15.7, 141.0], [15.8, 141.0], [15.9, 141.0], [16.0, 141.0], [16.1, 141.0], [16.2, 141.0], [16.3, 141.0], [16.4, 141.0], [16.5, 141.0], [16.6, 141.0], [16.7, 141.0], [16.8, 141.0], [16.9, 141.0], [17.0, 141.0], [17.1, 142.0], [17.2, 142.0], [17.3, 142.0], [17.4, 142.0], [17.5, 142.0], [17.6, 142.0], [17.7, 142.0], [17.8, 142.0], [17.9, 142.0], [18.0, 142.0], [18.1, 142.0], [18.2, 142.0], [18.3, 142.0], [18.4, 142.0], [18.5, 142.0], [18.6, 142.0], [18.7, 142.0], [18.8, 142.0], [18.9, 142.0], [19.0, 142.0], [19.1, 142.0], [19.2, 142.0], [19.3, 142.0], [19.4, 142.0], [19.5, 142.0], [19.6, 142.0], [19.7, 142.0], [19.8, 142.0], [19.9, 142.0], [20.0, 142.0], [20.1, 143.0], [20.2, 143.0], [20.3, 143.0], [20.4, 143.0], [20.5, 143.0], [20.6, 143.0], [20.7, 143.0], [20.8, 143.0], [20.9, 143.0], [21.0, 143.0], [21.1, 143.0], [21.2, 143.0], [21.3, 143.0], [21.4, 143.0], [21.5, 143.0], [21.6, 143.0], [21.7, 143.0], [21.8, 143.0], [21.9, 143.0], [22.0, 143.0], [22.1, 143.0], [22.2, 143.0], [22.3, 143.0], [22.4, 143.0], [22.5, 143.0], [22.6, 143.0], [22.7, 143.0], [22.8, 143.0], [22.9, 143.0], [23.0, 143.0], [23.1, 143.0], [23.2, 144.0], [23.3, 144.0], [23.4, 144.0], [23.5, 144.0], [23.6, 144.0], [23.7, 144.0], [23.8, 144.0], [23.9, 144.0], [24.0, 144.0], [24.1, 144.0], [24.2, 144.0], [24.3, 144.0], [24.4, 144.0], [24.5, 144.0], [24.6, 144.0], [24.7, 144.0], [24.8, 144.0], [24.9, 144.0], [25.0, 144.0], [25.1, 144.0], [25.2, 144.0], [25.3, 144.0], [25.4, 144.0], [25.5, 144.0], [25.6, 144.0], [25.7, 144.0], [25.8, 144.0], [25.9, 144.0], [26.0, 144.0], [26.1, 144.0], [26.2, 144.0], [26.3, 144.0], [26.4, 144.0], [26.5, 145.0], [26.6, 145.0], [26.7, 145.0], [26.8, 145.0], [26.9, 145.0], [27.0, 145.0], [27.1, 145.0], [27.2, 145.0], [27.3, 145.0], [27.4, 145.0], [27.5, 145.0], [27.6, 145.0], [27.7, 145.0], [27.8, 145.0], [27.9, 145.0], [28.0, 145.0], [28.1, 145.0], [28.2, 145.0], [28.3, 145.0], [28.4, 145.0], [28.5, 145.0], [28.6, 145.0], [28.7, 145.0], [28.8, 145.0], [28.9, 145.0], [29.0, 145.0], [29.1, 145.0], [29.2, 145.0], [29.3, 145.0], [29.4, 145.0], [29.5, 145.0], [29.6, 146.0], [29.7, 146.0], [29.8, 146.0], [29.9, 146.0], [30.0, 146.0], [30.1, 146.0], [30.2, 146.0], [30.3, 146.0], [30.4, 146.0], [30.5, 146.0], [30.6, 146.0], [30.7, 146.0], [30.8, 146.0], [30.9, 146.0], [31.0, 146.0], [31.1, 146.0], [31.2, 146.0], [31.3, 146.0], [31.4, 146.0], [31.5, 146.0], [31.6, 146.0], [31.7, 146.0], [31.8, 146.0], [31.9, 146.0], [32.0, 146.0], [32.1, 146.0], [32.2, 146.0], [32.3, 146.0], [32.4, 146.0], [32.5, 146.0], [32.6, 147.0], [32.7, 147.0], [32.8, 147.0], [32.9, 147.0], [33.0, 147.0], [33.1, 147.0], [33.2, 147.0], [33.3, 147.0], [33.4, 147.0], [33.5, 147.0], [33.6, 147.0], [33.7, 147.0], [33.8, 147.0], [33.9, 147.0], [34.0, 147.0], [34.1, 147.0], [34.2, 147.0], [34.3, 147.0], [34.4, 147.0], [34.5, 147.0], [34.6, 147.0], [34.7, 147.0], [34.8, 147.0], [34.9, 147.0], [35.0, 147.0], [35.1, 147.0], [35.2, 147.0], [35.3, 147.0], [35.4, 147.0], [35.5, 147.0], [35.6, 148.0], [35.7, 148.0], [35.8, 148.0], [35.9, 148.0], [36.0, 148.0], [36.1, 148.0], [36.2, 148.0], [36.3, 148.0], [36.4, 148.0], [36.5, 148.0], [36.6, 148.0], [36.7, 148.0], [36.8, 148.0], [36.9, 148.0], [37.0, 148.0], [37.1, 148.0], [37.2, 148.0], [37.3, 148.0], [37.4, 148.0], [37.5, 148.0], [37.6, 148.0], [37.7, 148.0], [37.8, 148.0], [37.9, 148.0], [38.0, 148.0], [38.1, 148.0], [38.2, 148.0], [38.3, 148.0], [38.4, 149.0], [38.5, 149.0], [38.6, 149.0], [38.7, 149.0], [38.8, 149.0], [38.9, 149.0], [39.0, 149.0], [39.1, 149.0], [39.2, 149.0], [39.3, 149.0], [39.4, 149.0], [39.5, 149.0], [39.6, 149.0], [39.7, 149.0], [39.8, 149.0], [39.9, 149.0], [40.0, 149.0], [40.1, 149.0], [40.2, 149.0], [40.3, 149.0], [40.4, 149.0], [40.5, 149.0], [40.6, 149.0], [40.7, 149.0], [40.8, 149.0], [40.9, 150.0], [41.0, 150.0], [41.1, 150.0], [41.2, 150.0], [41.3, 150.0], [41.4, 150.0], [41.5, 150.0], [41.6, 150.0], [41.7, 150.0], [41.8, 150.0], [41.9, 150.0], [42.0, 150.0], [42.1, 150.0], [42.2, 150.0], [42.3, 150.0], [42.4, 150.0], [42.5, 150.0], [42.6, 150.0], [42.7, 150.0], [42.8, 150.0], [42.9, 150.0], [43.0, 150.0], [43.1, 150.0], [43.2, 150.0], [43.3, 151.0], [43.4, 151.0], [43.5, 151.0], [43.6, 151.0], [43.7, 151.0], [43.8, 151.0], [43.9, 151.0], [44.0, 151.0], [44.1, 151.0], [44.2, 151.0], [44.3, 151.0], [44.4, 151.0], [44.5, 151.0], [44.6, 151.0], [44.7, 151.0], [44.8, 151.0], [44.9, 151.0], [45.0, 151.0], [45.1, 151.0], [45.2, 151.0], [45.3, 151.0], [45.4, 151.0], [45.5, 152.0], [45.6, 152.0], [45.7, 152.0], [45.8, 152.0], [45.9, 152.0], [46.0, 152.0], [46.1, 152.0], [46.2, 152.0], [46.3, 152.0], [46.4, 152.0], [46.5, 152.0], [46.6, 152.0], [46.7, 152.0], [46.8, 152.0], [46.9, 152.0], [47.0, 152.0], [47.1, 152.0], [47.2, 152.0], [47.3, 152.0], [47.4, 152.0], [47.5, 152.0], [47.6, 153.0], [47.7, 153.0], [47.8, 153.0], [47.9, 153.0], [48.0, 153.0], [48.1, 153.0], [48.2, 153.0], [48.3, 153.0], [48.4, 153.0], [48.5, 153.0], [48.6, 153.0], [48.7, 153.0], [48.8, 153.0], [48.9, 153.0], [49.0, 153.0], [49.1, 153.0], [49.2, 153.0], [49.3, 153.0], [49.4, 153.0], [49.5, 154.0], [49.6, 154.0], [49.7, 154.0], [49.8, 154.0], [49.9, 154.0], [50.0, 154.0], [50.1, 154.0], [50.2, 154.0], [50.3, 154.0], [50.4, 154.0], [50.5, 154.0], [50.6, 154.0], [50.7, 154.0], [50.8, 154.0], [50.9, 154.0], [51.0, 154.0], [51.1, 154.0], [51.2, 155.0], [51.3, 155.0], [51.4, 155.0], [51.5, 155.0], [51.6, 155.0], [51.7, 155.0], [51.8, 155.0], [51.9, 155.0], [52.0, 155.0], [52.1, 155.0], [52.2, 155.0], [52.3, 155.0], [52.4, 155.0], [52.5, 155.0], [52.6, 155.0], [52.7, 155.0], [52.8, 156.0], [52.9, 156.0], [53.0, 156.0], [53.1, 156.0], [53.2, 156.0], [53.3, 156.0], [53.4, 156.0], [53.5, 156.0], [53.6, 156.0], [53.7, 156.0], [53.8, 156.0], [53.9, 156.0], [54.0, 156.0], [54.1, 156.0], [54.2, 156.0], [54.3, 157.0], [54.4, 157.0], [54.5, 157.0], [54.6, 157.0], [54.7, 157.0], [54.8, 157.0], [54.9, 157.0], [55.0, 157.0], [55.1, 157.0], [55.2, 157.0], [55.3, 157.0], [55.4, 157.0], [55.5, 158.0], [55.6, 158.0], [55.7, 158.0], [55.8, 158.0], [55.9, 158.0], [56.0, 158.0], [56.1, 158.0], [56.2, 158.0], [56.3, 158.0], [56.4, 158.0], [56.5, 158.0], [56.6, 159.0], [56.7, 159.0], [56.8, 159.0], [56.9, 159.0], [57.0, 159.0], [57.1, 159.0], [57.2, 159.0], [57.3, 159.0], [57.4, 159.0], [57.5, 159.0], [57.6, 159.0], [57.7, 159.0], [57.8, 160.0], [57.9, 160.0], [58.0, 160.0], [58.1, 160.0], [58.2, 160.0], [58.3, 160.0], [58.4, 160.0], [58.5, 160.0], [58.6, 160.0], [58.7, 160.0], [58.8, 161.0], [58.9, 161.0], [59.0, 161.0], [59.1, 161.0], [59.2, 161.0], [59.3, 161.0], [59.4, 161.0], [59.5, 161.0], [59.6, 161.0], [59.7, 162.0], [59.8, 162.0], [59.9, 162.0], [60.0, 162.0], [60.1, 162.0], [60.2, 162.0], [60.3, 162.0], [60.4, 162.0], [60.5, 163.0], [60.6, 163.0], [60.7, 163.0], [60.8, 163.0], [60.9, 163.0], [61.0, 163.0], [61.1, 163.0], [61.2, 163.0], [61.3, 164.0], [61.4, 164.0], [61.5, 164.0], [61.6, 164.0], [61.7, 164.0], [61.8, 164.0], [61.9, 164.0], [62.0, 165.0], [62.1, 165.0], [62.2, 165.0], [62.3, 165.0], [62.4, 165.0], [62.5, 165.0], [62.6, 165.0], [62.7, 166.0], [62.8, 166.0], [62.9, 166.0], [63.0, 166.0], [63.1, 166.0], [63.2, 166.0], [63.3, 166.0], [63.4, 167.0], [63.5, 167.0], [63.6, 167.0], [63.7, 167.0], [63.8, 167.0], [63.9, 168.0], [64.0, 168.0], [64.1, 168.0], [64.2, 168.0], [64.3, 168.0], [64.4, 168.0], [64.5, 169.0], [64.6, 169.0], [64.7, 169.0], [64.8, 169.0], [64.9, 170.0], [65.0, 170.0], [65.1, 170.0], [65.2, 170.0], [65.3, 170.0], [65.4, 171.0], [65.5, 171.0], [65.6, 171.0], [65.7, 171.0], [65.8, 171.0], [65.9, 172.0], [66.0, 172.0], [66.1, 172.0], [66.2, 172.0], [66.3, 172.0], [66.4, 173.0], [66.5, 173.0], [66.6, 173.0], [66.7, 174.0], [66.8, 174.0], [66.9, 174.0], [67.0, 174.0], [67.1, 175.0], [67.2, 175.0], [67.3, 175.0], [67.4, 176.0], [67.5, 176.0], [67.6, 176.0], [67.7, 176.0], [67.8, 177.0], [67.9, 177.0], [68.0, 177.0], [68.1, 178.0], [68.2, 178.0], [68.3, 178.0], [68.4, 179.0], [68.5, 179.0], [68.6, 179.0], [68.7, 180.0], [68.8, 180.0], [68.9, 180.0], [69.0, 181.0], [69.1, 181.0], [69.2, 181.0], [69.3, 182.0], [69.4, 182.0], [69.5, 182.0], [69.6, 183.0], [69.7, 183.0], [69.8, 183.0], [69.9, 184.0], [70.0, 184.0], [70.1, 185.0], [70.2, 185.0], [70.3, 186.0], [70.4, 186.0], [70.5, 187.0], [70.6, 187.0], [70.7, 188.0], [70.8, 188.0], [70.9, 188.0], [71.0, 189.0], [71.1, 189.0], [71.2, 190.0], [71.3, 190.0], [71.4, 191.0], [71.5, 191.0], [71.6, 192.0], [71.7, 192.0], [71.8, 193.0], [71.9, 193.0], [72.0, 194.0], [72.1, 195.0], [72.2, 195.0], [72.3, 196.0], [72.4, 196.0], [72.5, 197.0], [72.6, 197.0], [72.7, 198.0], [72.8, 199.0], [72.9, 200.0], [73.0, 200.0], [73.1, 201.0], [73.2, 202.0], [73.3, 202.0], [73.4, 203.0], [73.5, 204.0], [73.6, 204.0], [73.7, 205.0], [73.8, 206.0], [73.9, 207.0], [74.0, 207.0], [74.1, 208.0], [74.2, 209.0], [74.3, 210.0], [74.4, 210.0], [74.5, 211.0], [74.6, 212.0], [74.7, 213.0], [74.8, 213.0], [74.9, 214.0], [75.0, 215.0], [75.1, 216.0], [75.2, 217.0], [75.3, 218.0], [75.4, 219.0], [75.5, 220.0], [75.6, 221.0], [75.7, 222.0], [75.8, 224.0], [75.9, 225.0], [76.0, 226.0], [76.1, 227.0], [76.2, 229.0], [76.3, 230.0], [76.4, 231.0], [76.5, 232.0], [76.6, 233.0], [76.7, 235.0], [76.8, 237.0], [76.9, 238.0], [77.0, 239.0], [77.1, 241.0], [77.2, 243.0], [77.3, 244.0], [77.4, 246.0], [77.5, 247.0], [77.6, 249.0], [77.7, 250.0], [77.8, 251.0], [77.9, 253.0], [78.0, 255.0], [78.1, 256.0], [78.2, 258.0], [78.3, 259.0], [78.4, 261.0], [78.5, 262.0], [78.6, 263.0], [78.7, 265.0], [78.8, 266.0], [78.9, 267.0], [79.0, 269.0], [79.1, 271.0], [79.2, 272.0], [79.3, 274.0], [79.4, 275.0], [79.5, 277.0], [79.6, 279.0], [79.7, 281.0], [79.8, 282.0], [79.9, 284.0], [80.0, 285.0], [80.1, 287.0], [80.2, 289.0], [80.3, 291.0], [80.4, 293.0], [80.5, 295.0], [80.6, 297.0], [80.7, 300.0], [80.8, 303.0], [80.9, 306.0], [81.0, 309.0], [81.1, 312.0], [81.2, 316.0], [81.3, 321.0], [81.4, 325.0], [81.5, 330.0], [81.6, 334.0], [81.7, 339.0], [81.8, 345.0], [81.9, 349.0], [82.0, 353.0], [82.1, 357.0], [82.2, 364.0], [82.3, 370.0], [82.4, 376.0], [82.5, 381.0], [82.6, 387.0], [82.7, 392.0], [82.8, 396.0], [82.9, 400.0], [83.0, 403.0], [83.1, 406.0], [83.2, 409.0], [83.3, 412.0], [83.4, 414.0], [83.5, 416.0], [83.6, 419.0], [83.7, 422.0], [83.8, 424.0], [83.9, 425.0], [84.0, 427.0], [84.1, 429.0], [84.2, 431.0], [84.3, 432.0], [84.4, 434.0], [84.5, 436.0], [84.6, 437.0], [84.7, 438.0], [84.8, 439.0], [84.9, 441.0], [85.0, 442.0], [85.1, 443.0], [85.2, 444.0], [85.3, 445.0], [85.4, 446.0], [85.5, 447.0], [85.6, 447.0], [85.7, 448.0], [85.8, 449.0], [85.9, 450.0], [86.0, 451.0], [86.1, 452.0], [86.2, 453.0], [86.3, 453.0], [86.4, 454.0], [86.5, 455.0], [86.6, 456.0], [86.7, 457.0], [86.8, 457.0], [86.9, 458.0], [87.0, 459.0], [87.1, 460.0], [87.2, 460.0], [87.3, 461.0], [87.4, 462.0], [87.5, 462.0], [87.6, 463.0], [87.7, 464.0], [87.8, 464.0], [87.9, 465.0], [88.0, 466.0], [88.1, 466.0], [88.2, 467.0], [88.3, 468.0], [88.4, 469.0], [88.5, 469.0], [88.6, 470.0], [88.7, 471.0], [88.8, 472.0], [88.9, 472.0], [89.0, 473.0], [89.1, 474.0], [89.2, 475.0], [89.3, 476.0], [89.4, 477.0], [89.5, 478.0], [89.6, 479.0], [89.7, 480.0], [89.8, 481.0], [89.9, 482.0], [90.0, 484.0], [90.1, 485.0], [90.2, 486.0], [90.3, 487.0], [90.4, 489.0], [90.5, 491.0], [90.6, 492.0], [90.7, 494.0], [90.8, 496.0], [90.9, 499.0], [91.0, 501.0], [91.1, 504.0], [91.2, 507.0], [91.3, 510.0], [91.4, 513.0], [91.5, 517.0], [91.6, 520.0], [91.7, 524.0], [91.8, 528.0], [91.9, 531.0], [92.0, 537.0], [92.1, 542.0], [92.2, 547.0], [92.3, 552.0], [92.4, 557.0], [92.5, 561.0], [92.6, 565.0], [92.7, 569.0], [92.8, 574.0], [92.9, 579.0], [93.0, 585.0], [93.1, 592.0], [93.2, 599.0], [93.3, 607.0], [93.4, 615.0], [93.5, 626.0], [93.6, 635.0], [93.7, 646.0], [93.8, 660.0], [93.9, 676.0], [94.0, 693.0], [94.1, 709.0], [94.2, 722.0], [94.3, 734.0], [94.4, 748.0], [94.5, 762.0], [94.6, 778.0], [94.7, 798.0], [94.8, 821.0], [94.9, 851.0], [95.0, 874.0], [95.1, 912.0], [95.2, 947.0], [95.3, 990.0], [95.4, 1036.0], [95.5, 1092.0], [95.6, 1138.0], [95.7, 1142.0], [95.8, 1146.0], [95.9, 1148.0], [96.0, 1149.0], [96.1, 1151.0], [96.2, 1153.0], [96.3, 1154.0], [96.4, 1155.0], [96.5, 1157.0], [96.6, 1159.0], [96.7, 1161.0], [96.8, 1163.0], [96.9, 1166.0], [97.0, 1169.0], [97.1, 1174.0], [97.2, 1183.0], [97.3, 1193.0], [97.4, 1205.0], [97.5, 1220.0], [97.6, 1233.0], [97.7, 1252.0], [97.8, 1271.0], [97.9, 1292.0], [98.0, 1315.0], [98.1, 1338.0], [98.2, 1370.0], [98.3, 1418.0], [98.4, 1454.0], [98.5, 1476.0], [98.6, 1501.0], [98.7, 1535.0], [98.8, 1588.0], [98.9, 1659.0], [99.0, 1763.0], [99.1, 1877.0], [99.2, 2113.0], [99.3, 2451.0], [99.4, 3063.0], [99.5, 3347.0], [99.6, 4023.0], [99.7, 6049.0], [99.8, 7623.0], [99.9, 12111.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 49565.0, "series": [{"data": [[100.0, 49565.0], [36700.0, 1.0], [200.0, 5302.0], [300.0, 1501.0], [400.0, 5468.0], [500.0, 1543.0], [600.0, 579.0], [700.0, 447.0], [800.0, 248.0], [900.0, 166.0], [1000.0, 133.0], [1100.0, 1251.0], [1200.0, 393.0], [1300.0, 224.0], [1400.0, 223.0], [1500.0, 151.0], [1600.0, 80.0], [1700.0, 73.0], [1800.0, 48.0], [1900.0, 28.0], [2000.0, 28.0], [2100.0, 31.0], [2300.0, 20.0], [2200.0, 14.0], [2400.0, 13.0], [2500.0, 13.0], [2600.0, 13.0], [2700.0, 12.0], [2800.0, 8.0], [2900.0, 10.0], [3000.0, 12.0], [3100.0, 32.0], [3300.0, 16.0], [3200.0, 21.0], [3400.0, 15.0], [3500.0, 12.0], [3600.0, 16.0], [3700.0, 4.0], [3800.0, 8.0], [3900.0, 5.0], [4000.0, 9.0], [4300.0, 5.0], [4100.0, 7.0], [4200.0, 1.0], [4400.0, 6.0], [4500.0, 6.0], [4600.0, 1.0], [4700.0, 4.0], [4800.0, 3.0], [4900.0, 5.0], [5000.0, 2.0], [5200.0, 3.0], [5300.0, 4.0], [5400.0, 3.0], [5600.0, 1.0], [5500.0, 3.0], [5700.0, 4.0], [5800.0, 2.0], [6100.0, 6.0], [5900.0, 1.0], [6000.0, 5.0], [6200.0, 5.0], [6300.0, 3.0], [6400.0, 2.0], [6500.0, 3.0], [6600.0, 2.0], [6700.0, 4.0], [6800.0, 5.0], [6900.0, 4.0], [7000.0, 8.0], [7100.0, 6.0], [7300.0, 3.0], [7400.0, 2.0], [7200.0, 5.0], [7500.0, 4.0], [7600.0, 5.0], [7900.0, 4.0], [7800.0, 6.0], [7700.0, 5.0], [8100.0, 3.0], [8000.0, 3.0], [8300.0, 3.0], [8400.0, 5.0], [8500.0, 2.0], [8700.0, 1.0], [8800.0, 1.0], [9000.0, 1.0], [9400.0, 2.0], [9600.0, 2.0], [9500.0, 2.0], [9700.0, 1.0], [10200.0, 1.0], [10100.0, 3.0], [10000.0, 1.0], [10400.0, 1.0], [10600.0, 1.0], [10700.0, 3.0], [10500.0, 1.0], [10800.0, 2.0], [10900.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11500.0, 3.0], [11400.0, 1.0], [11600.0, 1.0], [12100.0, 3.0], [11900.0, 2.0], [12300.0, 2.0], [12400.0, 2.0], [12600.0, 1.0], [12700.0, 4.0], [12500.0, 2.0], [13000.0, 3.0], [13100.0, 2.0], [13200.0, 3.0], [13300.0, 1.0], [12900.0, 3.0], [12800.0, 2.0], [13700.0, 1.0], [13400.0, 2.0], [13500.0, 3.0], [13800.0, 1.0], [14000.0, 2.0], [14100.0, 3.0], [14200.0, 2.0], [13900.0, 1.0], [14500.0, 2.0], [14800.0, 4.0], [14700.0, 2.0], [15100.0, 2.0], [15200.0, 2.0], [15300.0, 1.0], [15400.0, 1.0], [15600.0, 1.0], [15700.0, 3.0], [15800.0, 1.0], [16000.0, 1.0], [15900.0, 1.0], [17000.0, 1.0], [18300.0, 1.0], [32700.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 36700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 61854.0, "series": [{"data": [[0.0, 61854.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5190.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 955.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.716778523489916, "minX": 1.72919292E12, "maxY": 69.91980944819362, "series": [{"data": [[1.72919334E12, 12.038870431893677], [1.72919364E12, 12.882489241972864], [1.72919418E12, 13.275074478649474], [1.72919394E12, 14.590321511435166], [1.72919298E12, 22.208402800933666], [1.72919328E12, 13.471310116086242], [1.7291931E12, 19.096881220968875], [1.72919406E12, 11.02430093209057], [1.7291934E12, 12.757360406091372], [1.7291937E12, 11.992268907563018], [1.72919412E12, 10.716778523489916], [1.729194E12, 11.426289517470908], [1.72919304E12, 27.886635638297886], [1.72919382E12, 11.113031914893606], [1.72919316E12, 14.349547131834925], [1.72919346E12, 12.152759526938217], [1.72919376E12, 11.164900662251652], [1.72919358E12, 11.513440860215045], [1.72919424E12, 12.93116089613035], [1.72919388E12, 14.496973772696697], [1.72919292E12, 69.91980944819362], [1.72919322E12, 13.696898966322129], [1.72919352E12, 12.282666666666666]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919424E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 190.32756933115834, "minX": 1.0, "maxY": 13652.666666666666, "series": [{"data": [[2.0, 286.1764705882353], [3.0, 290.7280701754386], [4.0, 284.2784810126582], [5.0, 246.80344827586194], [6.0, 208.16409266409275], [7.0, 200.3174061433448], [8.0, 190.32756933115834], [9.0, 190.50404448938298], [10.0, 199.5399283337594], [11.0, 212.13396715643913], [12.0, 227.8653896273135], [13.0, 244.3003310261816], [14.0, 246.88993525603283], [15.0, 264.7455685846747], [16.0, 282.8556169429106], [17.0, 304.93880524526384], [18.0, 324.81253998720405], [19.0, 321.1831999999995], [20.0, 370.768526989936], [21.0, 387.0201271186434], [22.0, 407.56707317073125], [23.0, 404.747382198953], [24.0, 413.7623318385654], [25.0, 427.60909090909075], [26.0, 544.1218074656191], [27.0, 426.3724604966135], [28.0, 461.69193154034235], [29.0, 446.5367412140575], [30.0, 450.3186440677966], [31.0, 524.9679715302494], [33.0, 445.9482758620692], [32.0, 407.27413127413126], [35.0, 516.8793103448276], [34.0, 543.837563451777], [37.0, 495.6400000000001], [36.0, 504.68354430379725], [39.0, 512.7281553398063], [38.0, 526.0747663551405], [41.0, 615.7894736842105], [40.0, 856.9859154929577], [43.0, 443.1379310344828], [42.0, 606.5471698113208], [45.0, 800.6346153846154], [44.0, 563.4642857142858], [47.0, 948.2558139534887], [46.0, 830.7777777777777], [49.0, 953.7435897435898], [48.0, 1228.7115384615388], [51.0, 577.962962962963], [50.0, 967.6571428571428], [53.0, 534.5000000000001], [52.0, 472.84615384615387], [55.0, 1567.8125], [54.0, 418.6], [57.0, 1556.8666666666666], [56.0, 2508.7894736842104], [59.0, 483.625], [58.0, 1101.9444444444443], [61.0, 2212.1999999999994], [60.0, 496.90909090909076], [63.0, 530.2727272727273], [62.0, 748.9000000000001], [67.0, 423.1818181818182], [66.0, 3221.7000000000007], [64.0, 400.75], [65.0, 543.1250000000001], [71.0, 4498.727272727272], [70.0, 2711.416666666667], [69.0, 440.0], [68.0, 1506.923076923077], [74.0, 1768.9999999999998], [73.0, 3874.0], [75.0, 2162.7000000000003], [72.0, 3758.0], [79.0, 2779.909090909091], [78.0, 3799.0000000000005], [77.0, 361.45454545454544], [76.0, 1549.916666666667], [83.0, 405.6], [82.0, 2461.75], [81.0, 3537.375], [80.0, 2761.923076923077], [87.0, 7680.0], [86.0, 447.6666666666667], [85.0, 4001.0000000000005], [84.0, 943.0], [91.0, 717.0], [90.0, 7529.0], [89.0, 5224.333333333334], [88.0, 2731.75], [95.0, 8088.666666666666], [94.0, 2850.0], [93.0, 251.0], [92.0, 716.0], [99.0, 2349.0], [97.0, 533.5], [96.0, 269.5], [98.0, 259.0], [103.0, 6986.5], [102.0, 439.6666666666667], [101.0, 294.0], [100.0, 441.0], [107.0, 872.0], [111.0, 1599.5], [110.0, 3734.0000000000005], [109.0, 692.0], [108.0, 8000.0], [115.0, 408.0], [114.0, 13652.666666666666], [113.0, 7795.25], [112.0, 2172.0], [118.0, 2207.3333333333335], [117.0, 2003.5], [119.0, 754.0], [116.0, 469.0], [123.0, 3864.125], [122.0, 4310.6], [121.0, 490.0], [120.0, 3366.6666666666665], [127.0, 5609.5], [126.0, 1500.3333333333333], [125.0, 2066.666666666667], [124.0, 10346.25], [135.0, 5396.333333333333], [134.0, 6686.333333333333], [133.0, 1926.0], [132.0, 376.0], [131.0, 775.3333333333334], [130.0, 335.6], [129.0, 3278.1818181818176], [128.0, 5842.75], [143.0, 6840.666666666666], [142.0, 237.0], [141.0, 5868.5], [139.0, 236.0], [138.0, 5292.5], [137.0, 1389.0], [136.0, 308.3333333333333], [151.0, 4018.25], [149.0, 4620.0], [148.0, 4329.0], [147.0, 3237.25], [146.0, 2088.0], [150.0, 7837.0], [145.0, 4008.75], [144.0, 6386.0], [159.0, 3292.0], [158.0, 3306.0], [157.0, 3331.0], [156.0, 560.0], [155.0, 5786.5], [154.0, 8784.5], [153.0, 9222.0], [152.0, 6918.0], [167.0, 6717.0], [166.0, 5869.0], [165.0, 7836.0], [164.0, 4507.0], [163.0, 4340.0], [162.0, 6931.0], [161.0, 10790.0], [160.0, 10789.0], [175.0, 4127.333333333333], [174.0, 2933.0], [173.0, 7088.0], [171.0, 803.0], [170.0, 2445.5], [169.0, 7753.0], [168.0, 7354.0], [183.0, 1241.5], [182.0, 865.0], [181.0, 870.0], [180.0, 2248.0], [179.0, 6261.0], [178.0, 3367.0], [177.0, 615.0], [176.0, 5646.5], [191.0, 2914.0], [190.0, 4080.0], [189.0, 1549.0], [188.0, 487.0], [187.0, 530.0], [186.0, 968.0], [185.0, 5801.0], [184.0, 2201.0], [199.0, 1035.0], [198.0, 3949.3333333333335], [197.0, 1345.0], [196.0, 1629.3333333333333], [195.0, 1092.0], [194.0, 2388.0], [193.0, 9679.0], [192.0, 4727.0], [206.0, 2685.0], [205.0, 2752.0], [204.0, 1579.0], [203.0, 2075.8], [202.0, 3440.5714285714284], [201.0, 3176.6666666666665], [200.0, 3603.5], [215.0, 7829.0], [214.0, 2937.75], [213.0, 1260.6666666666667], [212.0, 5683.666666666667], [211.0, 3047.0], [210.0, 1541.5], [209.0, 2695.0], [208.0, 6029.5], [223.0, 4047.5], [222.0, 474.0], [221.0, 481.0], [220.0, 3607.0], [219.0, 1937.0], [218.0, 8771.0], [217.0, 1091.0], [216.0, 2317.0], [231.0, 2447.3333333333335], [230.0, 2452.0], [229.0, 6310.5], [228.0, 6148.0], [227.0, 2969.0], [226.0, 2693.5], [225.0, 1515.6666666666665], [224.0, 670.6666666666666], [233.0, 3056.0], [232.0, 2643.666666666667], [239.0, 753.0], [238.0, 3133.0], [237.0, 2973.3333333333335], [236.0, 471.0], [235.0, 523.0], [234.0, 4513.0], [247.0, 8355.0], [246.0, 3092.0], [245.0, 6691.333333333333], [244.0, 8475.0], [243.0, 1336.3333333333333], [241.0, 2145.5], [252.0, 907.5], [251.0, 1910.2857142857142], [255.0, 6890.0], [254.0, 2055.0], [253.0, 9468.0], [249.0, 9644.0], [248.0, 767.0], [264.0, 2784.0], [262.0, 1865.8333333333333], [261.0, 3961.5], [260.0, 2246.0], [267.0, 835.0], [266.0, 4566.0], [265.0, 5235.0], [263.0, 2988.0], [271.0, 5292.0], [269.0, 4210.5], [268.0, 2036.0], [259.0, 2655.0], [258.0, 1881.0], [257.0, 3490.5], [256.0, 1691.0], [270.0, 1961.0], [285.0, 3864.4285714285716], [274.0, 6267.666666666667], [273.0, 3932.333333333333], [272.0, 4539.2], [279.0, 3248.333333333333], [278.0, 2072.0], [277.0, 3795.6], [276.0, 3342.0], [287.0, 2961.8], [286.0, 3375.0], [284.0, 3693.0], [275.0, 3716.6666666666665], [283.0, 1527.3333333333333], [282.0, 3247.75], [281.0, 837.3333333333334], [280.0, 3149.5], [301.0, 3510.6666666666665], [302.0, 3979.75], [300.0, 4092.25], [291.0, 2903.6666666666665], [290.0, 3689.75], [289.0, 1595.4285714285713], [288.0, 2212.0], [299.0, 2430.1666666666665], [297.0, 1715.7142857142858], [296.0, 3583.3333333333335], [303.0, 3942.3333333333335], [295.0, 2038.0], [298.0, 1885.0], [294.0, 3881.272727272727], [293.0, 4097.0], [292.0, 2691.2], [305.0, 5014.5], [310.0, 3303.5], [311.0, 2386.0], [304.0, 2587.0], [309.0, 3672.3333333333335], [307.0, 4767.0], [313.0, 3690.666666666667], [312.0, 2183.0], [308.0, 2077.0], [306.0, 7016.0], [1.0, 567.5588235294118]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[16.041088235294016, 298.7175882352922]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 313.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6260.25, "minX": 1.72919292E12, "maxY": 2139068.466666667, "series": [{"data": [[1.72919334E12, 2115173.0166666666], [1.72919364E12, 2122860.3333333335], [1.72919418E12, 2122810.3], [1.72919394E12, 2120091.9833333334], [1.72919298E12, 2107352.25], [1.72919328E12, 2118684.433333333], [1.7291931E12, 2117949.6333333333], [1.72919406E12, 2110959.3666666667], [1.7291934E12, 2076525.4333333333], [1.7291937E12, 2090546.7], [1.72919412E12, 2093992.6], [1.729194E12, 2111661.1], [1.72919304E12, 2113722.4833333334], [1.72919382E12, 2113757.7], [1.72919316E12, 2094778.1833333333], [1.72919346E12, 2139068.466666667], [1.72919376E12, 2122178.9], [1.72919358E12, 2091189.1], [1.72919424E12, 1725130.25], [1.72919388E12, 2089871.0166666666], [1.72919292E12, 1769379.6333333333], [1.72919322E12, 2107434.1333333333], [1.72919352E12, 2108046.283333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72919334E12, 7675.5], [1.72919364E12, 7703.55], [1.72919418E12, 7703.55], [1.72919394E12, 7693.35], [1.72919298E12, 7647.45], [1.72919328E12, 7688.25], [1.7291931E12, 7685.7], [1.72919406E12, 7660.2], [1.7291934E12, 7535.25], [1.7291937E12, 7586.25], [1.72919412E12, 7599.0], [1.729194E12, 7662.75], [1.72919304E12, 7670.4], [1.72919382E12, 7670.4], [1.72919316E12, 7601.55], [1.72919346E12, 7762.2], [1.72919376E12, 7701.0], [1.72919358E12, 7588.8], [1.72919424E12, 6260.25], [1.72919388E12, 7583.7], [1.72919292E12, 6420.9], [1.72919322E12, 7647.45], [1.72919352E12, 7650.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919424E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 183.6563758389256, "minX": 1.72919292E12, "maxY": 1450.2981341802304, "series": [{"data": [[1.72919334E12, 229.29136212624564], [1.72919364E12, 232.9655743131413], [1.72919418E12, 206.3237338629593], [1.72919394E12, 272.4739807756052], [1.72919298E12, 421.26075358452874], [1.72919328E12, 256.13233830845815], [1.7291931E12, 352.84671532846727], [1.72919406E12, 188.4267643142475], [1.7291934E12, 238.92825719120108], [1.7291937E12, 223.98789915966378], [1.72919412E12, 183.6563758389256], [1.729194E12, 198.16306156405986], [1.72919304E12, 497.2945478723399], [1.72919382E12, 204.9079122340427], [1.72919316E12, 274.34619255283474], [1.72919346E12, 223.35249671484908], [1.72919376E12, 210.0612582781457], [1.72919358E12, 218.3780241935487], [1.72919424E12, 209.74867617107967], [1.72919388E12, 275.93712172158683], [1.72919292E12, 1450.2981341802304], [1.72919322E12, 251.68922974324752], [1.72919352E12, 218.43133333333313]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919424E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 161.34261744966454, "minX": 1.72919292E12, "maxY": 1225.0309646685178, "series": [{"data": [[1.72919334E12, 200.11727574750853], [1.72919364E12, 207.39225422045678], [1.72919418E12, 178.79609400860627], [1.72919394E12, 236.90951276102112], [1.72919298E12, 370.70390130043256], [1.72919328E12, 221.78706467661684], [1.7291931E12, 302.81055076310537], [1.72919406E12, 166.18408788282275], [1.7291934E12, 212.65008460236862], [1.7291937E12, 200.09243697478965], [1.72919412E12, 161.34261744966454], [1.729194E12, 173.59900166389335], [1.72919304E12, 426.31449468085134], [1.72919382E12, 177.21775265957416], [1.72919316E12, 240.45286816504532], [1.72919346E12, 198.33377135348178], [1.72919376E12, 184.8009933774839], [1.72919358E12, 193.55981182795702], [1.72919424E12, 181.00488798370733], [1.72919388E12, 240.23133826496246], [1.72919292E12, 1225.0309646685178], [1.72919322E12, 220.93997999333112], [1.72919352E12, 193.29166666666688]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919424E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 109.79530201342293, "minX": 1.72919292E12, "maxY": 1055.8447796744713, "series": [{"data": [[1.72919334E12, 140.20498338870414], [1.72919364E12, 145.31247931148653], [1.72919418E12, 124.00662032439587], [1.72919394E12, 159.28239973483585], [1.72919298E12, 267.3804601533841], [1.72919328E12, 156.7791044776115], [1.7291931E12, 224.61015262110115], [1.72919406E12, 115.92077230359531], [1.7291934E12, 150.03316412859596], [1.7291937E12, 142.6894117647057], [1.72919412E12, 109.79530201342293], [1.729194E12, 117.90515806988358], [1.72919304E12, 305.9976728723403], [1.72919382E12, 119.97905585106388], [1.72919316E12, 170.75511573297584], [1.72919346E12, 138.9733902759528], [1.72919376E12, 127.47384105960259], [1.72919358E12, 136.5668682795692], [1.72919424E12, 122.28431771894098], [1.72919388E12, 164.34969737726973], [1.72919292E12, 1055.8447796744713], [1.72919322E12, 155.76692230743603], [1.72919352E12, 135.63633333333325]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919424E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 120.0, "minX": 1.72919292E12, "maxY": 36776.0, "series": [{"data": [[1.72919334E12, 3527.0], [1.72919364E12, 3248.0], [1.72919418E12, 2282.0], [1.72919394E12, 3167.0], [1.72919298E12, 7542.0], [1.72919328E12, 4088.0], [1.7291931E12, 7177.0], [1.72919406E12, 1527.0], [1.7291934E12, 3326.0], [1.7291937E12, 7169.0], [1.72919412E12, 1341.0], [1.729194E12, 3194.0], [1.72919304E12, 6772.0], [1.72919382E12, 3984.0], [1.72919316E12, 3637.0], [1.72919346E12, 3169.0], [1.72919376E12, 3175.0], [1.72919358E12, 3481.0], [1.72919424E12, 6976.0], [1.72919388E12, 4792.0], [1.72919292E12, 36776.0], [1.72919322E12, 3392.0], [1.72919352E12, 3410.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72919334E12, 435.0], [1.72919364E12, 465.0], [1.72919418E12, 275.0], [1.72919394E12, 470.2000000000003], [1.72919298E12, 928.0], [1.72919328E12, 475.0], [1.7291931E12, 845.0], [1.72919406E12, 188.0], [1.7291934E12, 463.0], [1.7291937E12, 431.4000000000001], [1.72919412E12, 220.0], [1.729194E12, 315.4000000000001], [1.72919304E12, 1203.3999999999996], [1.72919382E12, 363.0999999999999], [1.72919316E12, 530.8000000000002], [1.72919346E12, 432.0], [1.72919376E12, 295.0], [1.72919358E12, 419.3000000000002], [1.72919424E12, 294.0], [1.72919388E12, 471.0], [1.72919292E12, 4106.699999999999], [1.72919322E12, 474.0], [1.72919352E12, 411.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72919334E12, 1206.0], [1.72919364E12, 1192.5800000000022], [1.72919418E12, 1163.5600000000004], [1.72919394E12, 1260.3600000000079], [1.72919298E12, 2073.0], [1.72919328E12, 1411.2000000000007], [1.7291931E12, 2185.7], [1.72919406E12, 1165.8999999999996], [1.7291934E12, 1238.920000000001], [1.7291937E12, 1175.4799999999996], [1.72919412E12, 1154.19], [1.729194E12, 1153.0], [1.72919304E12, 2337.8099999999868], [1.72919382E12, 1150.0], [1.72919316E12, 1431.8799999999974], [1.72919346E12, 1169.0], [1.72919376E12, 1173.79], [1.72919358E12, 1187.8400000000001], [1.72919424E12, 1140.0], [1.72919388E12, 1178.25], [1.72919292E12, 14508.789999999986], [1.72919322E12, 1256.0], [1.72919352E12, 1179.9799999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72919334E12, 564.1499999999987], [1.72919364E12, 711.2000000000016], [1.72919418E12, 428.7000000000003], [1.72919394E12, 534.1999999999998], [1.72919298E12, 1291.0], [1.72919328E12, 871.1999999999971], [1.7291931E12, 1269.25], [1.72919406E12, 444.75], [1.7291934E12, 738.5999999999995], [1.7291937E12, 546.5999999999985], [1.72919412E12, 270.84999999999945], [1.729194E12, 466.0], [1.72919304E12, 1528.5499999999997], [1.72919382E12, 443.5499999999997], [1.72919316E12, 863.2000000000007], [1.72919346E12, 505.5], [1.72919376E12, 465.0], [1.72919358E12, 498.1500000000001], [1.72919424E12, 341.0], [1.72919388E12, 501.25], [1.72919292E12, 7829.3499999999985], [1.72919322E12, 588.0], [1.72919352E12, 499.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72919334E12, 127.0], [1.72919364E12, 120.0], [1.72919418E12, 126.0], [1.72919394E12, 125.0], [1.72919298E12, 128.0], [1.72919328E12, 124.0], [1.7291931E12, 126.0], [1.72919406E12, 127.0], [1.7291934E12, 123.0], [1.7291937E12, 125.0], [1.72919412E12, 123.0], [1.729194E12, 122.0], [1.72919304E12, 129.0], [1.72919382E12, 126.0], [1.72919316E12, 128.0], [1.72919346E12, 127.0], [1.72919376E12, 127.0], [1.72919358E12, 125.0], [1.72919424E12, 126.0], [1.72919388E12, 127.0], [1.72919292E12, 134.0], [1.72919322E12, 127.0], [1.72919352E12, 123.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72919334E12, 156.0], [1.72919364E12, 151.0], [1.72919418E12, 152.0], [1.72919394E12, 152.0], [1.72919298E12, 239.0], [1.72919328E12, 155.0], [1.7291931E12, 171.0], [1.72919406E12, 148.0], [1.7291934E12, 152.0], [1.7291937E12, 148.0], [1.72919412E12, 149.0], [1.729194E12, 148.0], [1.72919304E12, 347.5], [1.72919382E12, 149.0], [1.72919316E12, 157.0], [1.72919346E12, 149.0], [1.72919376E12, 150.0], [1.72919358E12, 150.0], [1.72919424E12, 152.0], [1.72919388E12, 151.0], [1.72919292E12, 430.5], [1.72919322E12, 160.0], [1.72919352E12, 150.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919424E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 140.0, "minX": 1.0, "maxY": 9581.0, "series": [{"data": [[3.0, 140.0], [4.0, 498.5], [7.0, 144.5], [8.0, 145.5], [9.0, 142.5], [10.0, 193.5], [11.0, 209.0], [12.0, 172.5], [13.0, 145.0], [14.0, 152.0], [15.0, 157.0], [16.0, 158.0], [17.0, 147.0], [18.0, 298.5], [19.0, 373.0], [20.0, 149.0], [21.0, 2874.0], [22.0, 145.5], [24.0, 155.0], [25.0, 547.0], [26.0, 175.0], [28.0, 175.0], [29.0, 375.5], [30.0, 149.0], [31.0, 258.0], [32.0, 295.5], [33.0, 150.0], [35.0, 156.0], [34.0, 153.5], [36.0, 162.0], [37.0, 165.0], [39.0, 165.0], [38.0, 207.0], [40.0, 168.0], [41.0, 163.0], [42.0, 174.0], [43.0, 151.0], [44.0, 152.5], [45.0, 168.0], [46.0, 151.0], [47.0, 150.0], [48.0, 152.0], [49.0, 150.0], [50.0, 151.0], [51.0, 152.0], [52.0, 151.0], [53.0, 152.0], [55.0, 154.5], [54.0, 154.0], [56.0, 154.0], [57.0, 154.0], [59.0, 162.5], [58.0, 154.0], [61.0, 206.0], [60.0, 153.0], [62.0, 154.0], [63.0, 162.0], [65.0, 434.0], [64.0, 202.0], [66.0, 157.5], [67.0, 168.0], [70.0, 176.5], [71.0, 179.5], [68.0, 181.0], [69.0, 155.0], [74.0, 171.0], [75.0, 172.0], [72.0, 153.5], [78.0, 332.5], [79.0, 553.0], [77.0, 170.0], [81.0, 209.0], [83.0, 223.0], [85.0, 179.0], [84.0, 354.0], [86.0, 231.0], [91.0, 542.0], [89.0, 149.0], [88.0, 147.5], [92.0, 412.0], [93.0, 153.0], [96.0, 165.0], [99.0, 148.0], [103.0, 165.0], [107.0, 151.0], [111.0, 2231.5], [108.0, 351.5], [109.0, 427.0], [113.0, 189.0], [118.0, 190.0], [1.0, 3849.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[111.0, 9581.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 118.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2557.0, "series": [{"data": [[3.0, 124.0], [4.0, 427.5], [7.0, 135.5], [8.0, 130.0], [9.0, 125.5], [10.0, 171.0], [11.0, 184.0], [12.0, 138.5], [13.0, 128.0], [14.0, 134.5], [15.0, 140.0], [16.0, 138.5], [17.0, 130.5], [18.0, 263.5], [19.0, 350.5], [20.0, 130.0], [21.0, 2557.0], [22.0, 129.5], [24.0, 136.5], [25.0, 436.0], [26.0, 153.0], [28.0, 146.0], [29.0, 374.5], [30.0, 132.0], [31.0, 221.0], [32.0, 199.5], [33.0, 133.0], [35.0, 138.0], [34.0, 136.0], [36.0, 143.5], [37.0, 146.5], [39.0, 144.0], [38.0, 172.0], [40.0, 146.5], [41.0, 142.0], [42.0, 147.0], [43.0, 134.0], [44.0, 135.0], [45.0, 145.0], [46.0, 133.0], [47.0, 133.0], [48.0, 134.0], [49.0, 133.0], [50.0, 133.0], [51.0, 134.0], [52.0, 134.0], [53.0, 134.0], [55.0, 136.0], [54.0, 136.0], [56.0, 136.0], [57.0, 136.0], [59.0, 143.0], [58.0, 136.0], [61.0, 170.5], [60.0, 135.0], [62.0, 136.0], [63.0, 142.0], [65.0, 365.0], [64.0, 171.0], [66.0, 138.0], [67.0, 148.0], [70.0, 151.0], [71.0, 151.0], [68.0, 160.0], [69.0, 135.0], [74.0, 153.5], [75.0, 151.0], [72.0, 136.0], [78.0, 271.5], [79.0, 499.0], [77.0, 147.5], [81.0, 179.0], [83.0, 191.0], [85.0, 152.0], [84.0, 321.0], [86.0, 201.5], [91.0, 486.0], [89.0, 132.0], [88.0, 130.5], [92.0, 321.5], [93.0, 136.0], [96.0, 144.0], [99.0, 130.0], [103.0, 145.0], [107.0, 135.0], [111.0, 1805.5], [108.0, 226.0], [109.0, 295.0], [113.0, 166.0], [118.0, 163.0], [1.0, 559.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[111.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 118.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 40.81666666666667, "minX": 1.72919292E12, "maxY": 50.666666666666664, "series": [{"data": [[1.72919334E12, 50.11666666666667], [1.72919364E12, 50.333333333333336], [1.72919418E12, 50.3], [1.72919394E12, 50.35], [1.72919298E12, 50.05], [1.72919328E12, 50.333333333333336], [1.7291931E12, 50.1], [1.72919406E12, 50.0], [1.7291934E12, 49.333333333333336], [1.7291937E12, 49.95], [1.72919412E12, 49.65], [1.729194E12, 50.0], [1.72919304E12, 50.03333333333333], [1.72919382E12, 50.0], [1.72919316E12, 49.68333333333333], [1.72919346E12, 50.666666666666664], [1.72919376E12, 50.083333333333336], [1.72919358E12, 49.63333333333333], [1.72919424E12, 40.81666666666667], [1.72919388E12, 49.63333333333333], [1.72919292E12, 42.3], [1.72919322E12, 49.96666666666667], [1.72919352E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919424E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72919292E12, "maxY": 50.733333333333334, "series": [{"data": [[1.72919334E12, 50.166666666666664], [1.72919364E12, 50.35], [1.72919418E12, 50.35], [1.72919394E12, 50.28333333333333], [1.72919298E12, 49.983333333333334], [1.72919328E12, 50.25], [1.7291931E12, 50.233333333333334], [1.72919406E12, 50.06666666666667], [1.7291934E12, 49.25], [1.7291937E12, 49.583333333333336], [1.72919412E12, 49.666666666666664], [1.729194E12, 50.083333333333336], [1.72919304E12, 50.13333333333333], [1.72919382E12, 50.13333333333333], [1.72919316E12, 49.68333333333333], [1.72919346E12, 50.733333333333334], [1.72919376E12, 50.333333333333336], [1.72919358E12, 49.6], [1.72919424E12, 40.916666666666664], [1.72919388E12, 49.56666666666667], [1.72919292E12, 41.96666666666667], [1.72919322E12, 49.983333333333334], [1.72919352E12, 50.0]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72919292E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72919424E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72919292E12, "maxY": 50.733333333333334, "series": [{"data": [[1.72919334E12, 50.166666666666664], [1.72919364E12, 50.35], [1.72919418E12, 50.35], [1.72919394E12, 50.28333333333333], [1.72919298E12, 49.983333333333334], [1.72919328E12, 50.25], [1.7291931E12, 50.233333333333334], [1.72919406E12, 50.06666666666667], [1.7291934E12, 49.25], [1.7291937E12, 49.583333333333336], [1.72919412E12, 49.666666666666664], [1.729194E12, 50.083333333333336], [1.72919304E12, 50.13333333333333], [1.72919382E12, 50.13333333333333], [1.72919316E12, 49.68333333333333], [1.72919346E12, 50.733333333333334], [1.72919376E12, 50.333333333333336], [1.72919358E12, 49.6], [1.72919424E12, 40.916666666666664], [1.72919388E12, 49.56666666666667], [1.72919292E12, 41.96666666666667], [1.72919322E12, 49.983333333333334], [1.72919352E12, 50.0]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72919292E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919424E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72919292E12, "maxY": 50.733333333333334, "series": [{"data": [[1.72919334E12, 50.166666666666664], [1.72919364E12, 50.35], [1.72919418E12, 50.35], [1.72919394E12, 50.28333333333333], [1.72919298E12, 49.983333333333334], [1.72919328E12, 50.25], [1.7291931E12, 50.233333333333334], [1.72919406E12, 50.06666666666667], [1.7291934E12, 49.25], [1.7291937E12, 49.583333333333336], [1.72919412E12, 49.666666666666664], [1.729194E12, 50.083333333333336], [1.72919304E12, 50.13333333333333], [1.72919382E12, 50.13333333333333], [1.72919316E12, 49.68333333333333], [1.72919346E12, 50.733333333333334], [1.72919376E12, 50.333333333333336], [1.72919358E12, 49.6], [1.72919424E12, 40.916666666666664], [1.72919388E12, 49.56666666666667], [1.72919292E12, 41.96666666666667], [1.72919322E12, 49.983333333333334], [1.72919352E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72919292E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72919424E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

