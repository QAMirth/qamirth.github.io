/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 122.0, "minX": 0.0, "maxY": 60191.0, "series": [{"data": [[0.0, 122.0], [0.1, 127.0], [0.2, 128.0], [0.3, 129.0], [0.4, 130.0], [0.5, 130.0], [0.6, 130.0], [0.7, 130.0], [0.8, 131.0], [0.9, 131.0], [1.0, 131.0], [1.1, 131.0], [1.2, 131.0], [1.3, 132.0], [1.4, 132.0], [1.5, 132.0], [1.6, 132.0], [1.7, 132.0], [1.8, 132.0], [1.9, 132.0], [2.0, 132.0], [2.1, 133.0], [2.2, 133.0], [2.3, 133.0], [2.4, 133.0], [2.5, 133.0], [2.6, 133.0], [2.7, 133.0], [2.8, 133.0], [2.9, 133.0], [3.0, 133.0], [3.1, 133.0], [3.2, 133.0], [3.3, 134.0], [3.4, 134.0], [3.5, 134.0], [3.6, 134.0], [3.7, 134.0], [3.8, 134.0], [3.9, 134.0], [4.0, 134.0], [4.1, 134.0], [4.2, 134.0], [4.3, 134.0], [4.4, 134.0], [4.5, 134.0], [4.6, 134.0], [4.7, 134.0], [4.8, 135.0], [4.9, 135.0], [5.0, 135.0], [5.1, 135.0], [5.2, 135.0], [5.3, 135.0], [5.4, 135.0], [5.5, 135.0], [5.6, 135.0], [5.7, 135.0], [5.8, 135.0], [5.9, 135.0], [6.0, 135.0], [6.1, 135.0], [6.2, 135.0], [6.3, 135.0], [6.4, 135.0], [6.5, 135.0], [6.6, 135.0], [6.7, 135.0], [6.8, 135.0], [6.9, 136.0], [7.0, 136.0], [7.1, 136.0], [7.2, 136.0], [7.3, 136.0], [7.4, 136.0], [7.5, 136.0], [7.6, 136.0], [7.7, 136.0], [7.8, 136.0], [7.9, 136.0], [8.0, 136.0], [8.1, 136.0], [8.2, 136.0], [8.3, 136.0], [8.4, 136.0], [8.5, 136.0], [8.6, 136.0], [8.7, 136.0], [8.8, 136.0], [8.9, 136.0], [9.0, 136.0], [9.1, 136.0], [9.2, 136.0], [9.3, 136.0], [9.4, 137.0], [9.5, 137.0], [9.6, 137.0], [9.7, 137.0], [9.8, 137.0], [9.9, 137.0], [10.0, 137.0], [10.1, 137.0], [10.2, 137.0], [10.3, 137.0], [10.4, 137.0], [10.5, 137.0], [10.6, 137.0], [10.7, 137.0], [10.8, 137.0], [10.9, 137.0], [11.0, 137.0], [11.1, 137.0], [11.2, 137.0], [11.3, 137.0], [11.4, 137.0], [11.5, 137.0], [11.6, 137.0], [11.7, 137.0], [11.8, 137.0], [11.9, 137.0], [12.0, 137.0], [12.1, 137.0], [12.2, 137.0], [12.3, 137.0], [12.4, 138.0], [12.5, 138.0], [12.6, 138.0], [12.7, 138.0], [12.8, 138.0], [12.9, 138.0], [13.0, 138.0], [13.1, 138.0], [13.2, 138.0], [13.3, 138.0], [13.4, 138.0], [13.5, 138.0], [13.6, 138.0], [13.7, 138.0], [13.8, 138.0], [13.9, 138.0], [14.0, 138.0], [14.1, 138.0], [14.2, 138.0], [14.3, 138.0], [14.4, 138.0], [14.5, 138.0], [14.6, 138.0], [14.7, 138.0], [14.8, 138.0], [14.9, 138.0], [15.0, 138.0], [15.1, 138.0], [15.2, 138.0], [15.3, 138.0], [15.4, 138.0], [15.5, 138.0], [15.6, 138.0], [15.7, 138.0], [15.8, 138.0], [15.9, 138.0], [16.0, 138.0], [16.1, 139.0], [16.2, 139.0], [16.3, 139.0], [16.4, 139.0], [16.5, 139.0], [16.6, 139.0], [16.7, 139.0], [16.8, 139.0], [16.9, 139.0], [17.0, 139.0], [17.1, 139.0], [17.2, 139.0], [17.3, 139.0], [17.4, 139.0], [17.5, 139.0], [17.6, 139.0], [17.7, 139.0], [17.8, 139.0], [17.9, 139.0], [18.0, 139.0], [18.1, 139.0], [18.2, 139.0], [18.3, 139.0], [18.4, 139.0], [18.5, 139.0], [18.6, 139.0], [18.7, 139.0], [18.8, 139.0], [18.9, 139.0], [19.0, 139.0], [19.1, 139.0], [19.2, 139.0], [19.3, 139.0], [19.4, 139.0], [19.5, 139.0], [19.6, 139.0], [19.7, 139.0], [19.8, 139.0], [19.9, 139.0], [20.0, 139.0], [20.1, 139.0], [20.2, 139.0], [20.3, 139.0], [20.4, 140.0], [20.5, 140.0], [20.6, 140.0], [20.7, 140.0], [20.8, 140.0], [20.9, 140.0], [21.0, 140.0], [21.1, 140.0], [21.2, 140.0], [21.3, 140.0], [21.4, 140.0], [21.5, 140.0], [21.6, 140.0], [21.7, 140.0], [21.8, 140.0], [21.9, 140.0], [22.0, 140.0], [22.1, 140.0], [22.2, 140.0], [22.3, 140.0], [22.4, 140.0], [22.5, 140.0], [22.6, 140.0], [22.7, 140.0], [22.8, 140.0], [22.9, 140.0], [23.0, 140.0], [23.1, 140.0], [23.2, 140.0], [23.3, 140.0], [23.4, 140.0], [23.5, 140.0], [23.6, 140.0], [23.7, 140.0], [23.8, 140.0], [23.9, 140.0], [24.0, 140.0], [24.1, 140.0], [24.2, 140.0], [24.3, 140.0], [24.4, 140.0], [24.5, 140.0], [24.6, 140.0], [24.7, 140.0], [24.8, 140.0], [24.9, 141.0], [25.0, 141.0], [25.1, 141.0], [25.2, 141.0], [25.3, 141.0], [25.4, 141.0], [25.5, 141.0], [25.6, 141.0], [25.7, 141.0], [25.8, 141.0], [25.9, 141.0], [26.0, 141.0], [26.1, 141.0], [26.2, 141.0], [26.3, 141.0], [26.4, 141.0], [26.5, 141.0], [26.6, 141.0], [26.7, 141.0], [26.8, 141.0], [26.9, 141.0], [27.0, 141.0], [27.1, 141.0], [27.2, 141.0], [27.3, 141.0], [27.4, 141.0], [27.5, 141.0], [27.6, 141.0], [27.7, 141.0], [27.8, 141.0], [27.9, 141.0], [28.0, 141.0], [28.1, 141.0], [28.2, 141.0], [28.3, 141.0], [28.4, 141.0], [28.5, 141.0], [28.6, 141.0], [28.7, 141.0], [28.8, 141.0], [28.9, 141.0], [29.0, 141.0], [29.1, 141.0], [29.2, 141.0], [29.3, 141.0], [29.4, 141.0], [29.5, 141.0], [29.6, 141.0], [29.7, 142.0], [29.8, 142.0], [29.9, 142.0], [30.0, 142.0], [30.1, 142.0], [30.2, 142.0], [30.3, 142.0], [30.4, 142.0], [30.5, 142.0], [30.6, 142.0], [30.7, 142.0], [30.8, 142.0], [30.9, 142.0], [31.0, 142.0], [31.1, 142.0], [31.2, 142.0], [31.3, 142.0], [31.4, 142.0], [31.5, 142.0], [31.6, 142.0], [31.7, 142.0], [31.8, 142.0], [31.9, 142.0], [32.0, 142.0], [32.1, 142.0], [32.2, 142.0], [32.3, 142.0], [32.4, 142.0], [32.5, 142.0], [32.6, 142.0], [32.7, 142.0], [32.8, 142.0], [32.9, 142.0], [33.0, 142.0], [33.1, 142.0], [33.2, 142.0], [33.3, 142.0], [33.4, 142.0], [33.5, 142.0], [33.6, 142.0], [33.7, 142.0], [33.8, 142.0], [33.9, 142.0], [34.0, 142.0], [34.1, 142.0], [34.2, 142.0], [34.3, 142.0], [34.4, 142.0], [34.5, 142.0], [34.6, 143.0], [34.7, 143.0], [34.8, 143.0], [34.9, 143.0], [35.0, 143.0], [35.1, 143.0], [35.2, 143.0], [35.3, 143.0], [35.4, 143.0], [35.5, 143.0], [35.6, 143.0], [35.7, 143.0], [35.8, 143.0], [35.9, 143.0], [36.0, 143.0], [36.1, 143.0], [36.2, 143.0], [36.3, 143.0], [36.4, 143.0], [36.5, 143.0], [36.6, 143.0], [36.7, 143.0], [36.8, 143.0], [36.9, 143.0], [37.0, 143.0], [37.1, 143.0], [37.2, 143.0], [37.3, 143.0], [37.4, 143.0], [37.5, 143.0], [37.6, 143.0], [37.7, 143.0], [37.8, 143.0], [37.9, 143.0], [38.0, 143.0], [38.1, 143.0], [38.2, 143.0], [38.3, 143.0], [38.4, 143.0], [38.5, 143.0], [38.6, 143.0], [38.7, 143.0], [38.8, 143.0], [38.9, 143.0], [39.0, 143.0], [39.1, 143.0], [39.2, 143.0], [39.3, 143.0], [39.4, 144.0], [39.5, 144.0], [39.6, 144.0], [39.7, 144.0], [39.8, 144.0], [39.9, 144.0], [40.0, 144.0], [40.1, 144.0], [40.2, 144.0], [40.3, 144.0], [40.4, 144.0], [40.5, 144.0], [40.6, 144.0], [40.7, 144.0], [40.8, 144.0], [40.9, 144.0], [41.0, 144.0], [41.1, 144.0], [41.2, 144.0], [41.3, 144.0], [41.4, 144.0], [41.5, 144.0], [41.6, 144.0], [41.7, 144.0], [41.8, 144.0], [41.9, 144.0], [42.0, 144.0], [42.1, 144.0], [42.2, 144.0], [42.3, 144.0], [42.4, 144.0], [42.5, 144.0], [42.6, 144.0], [42.7, 144.0], [42.8, 144.0], [42.9, 144.0], [43.0, 144.0], [43.1, 144.0], [43.2, 144.0], [43.3, 144.0], [43.4, 144.0], [43.5, 144.0], [43.6, 144.0], [43.7, 144.0], [43.8, 144.0], [43.9, 144.0], [44.0, 145.0], [44.1, 145.0], [44.2, 145.0], [44.3, 145.0], [44.4, 145.0], [44.5, 145.0], [44.6, 145.0], [44.7, 145.0], [44.8, 145.0], [44.9, 145.0], [45.0, 145.0], [45.1, 145.0], [45.2, 145.0], [45.3, 145.0], [45.4, 145.0], [45.5, 145.0], [45.6, 145.0], [45.7, 145.0], [45.8, 145.0], [45.9, 145.0], [46.0, 145.0], [46.1, 145.0], [46.2, 145.0], [46.3, 145.0], [46.4, 145.0], [46.5, 145.0], [46.6, 145.0], [46.7, 145.0], [46.8, 145.0], [46.9, 145.0], [47.0, 145.0], [47.1, 145.0], [47.2, 145.0], [47.3, 145.0], [47.4, 145.0], [47.5, 145.0], [47.6, 145.0], [47.7, 145.0], [47.8, 145.0], [47.9, 145.0], [48.0, 145.0], [48.1, 145.0], [48.2, 145.0], [48.3, 145.0], [48.4, 145.0], [48.5, 146.0], [48.6, 146.0], [48.7, 146.0], [48.8, 146.0], [48.9, 146.0], [49.0, 146.0], [49.1, 146.0], [49.2, 146.0], [49.3, 146.0], [49.4, 146.0], [49.5, 146.0], [49.6, 146.0], [49.7, 146.0], [49.8, 146.0], [49.9, 146.0], [50.0, 146.0], [50.1, 146.0], [50.2, 146.0], [50.3, 146.0], [50.4, 146.0], [50.5, 146.0], [50.6, 146.0], [50.7, 146.0], [50.8, 146.0], [50.9, 146.0], [51.0, 146.0], [51.1, 146.0], [51.2, 146.0], [51.3, 146.0], [51.4, 146.0], [51.5, 146.0], [51.6, 146.0], [51.7, 146.0], [51.8, 146.0], [51.9, 146.0], [52.0, 146.0], [52.1, 146.0], [52.2, 146.0], [52.3, 146.0], [52.4, 146.0], [52.5, 146.0], [52.6, 146.0], [52.7, 147.0], [52.8, 147.0], [52.9, 147.0], [53.0, 147.0], [53.1, 147.0], [53.2, 147.0], [53.3, 147.0], [53.4, 147.0], [53.5, 147.0], [53.6, 147.0], [53.7, 147.0], [53.8, 147.0], [53.9, 147.0], [54.0, 147.0], [54.1, 147.0], [54.2, 147.0], [54.3, 147.0], [54.4, 147.0], [54.5, 147.0], [54.6, 147.0], [54.7, 147.0], [54.8, 147.0], [54.9, 147.0], [55.0, 147.0], [55.1, 147.0], [55.2, 147.0], [55.3, 147.0], [55.4, 147.0], [55.5, 147.0], [55.6, 147.0], [55.7, 147.0], [55.8, 147.0], [55.9, 147.0], [56.0, 147.0], [56.1, 147.0], [56.2, 147.0], [56.3, 147.0], [56.4, 148.0], [56.5, 148.0], [56.6, 148.0], [56.7, 148.0], [56.8, 148.0], [56.9, 148.0], [57.0, 148.0], [57.1, 148.0], [57.2, 148.0], [57.3, 148.0], [57.4, 148.0], [57.5, 148.0], [57.6, 148.0], [57.7, 148.0], [57.8, 148.0], [57.9, 148.0], [58.0, 148.0], [58.1, 148.0], [58.2, 148.0], [58.3, 148.0], [58.4, 148.0], [58.5, 148.0], [58.6, 148.0], [58.7, 148.0], [58.8, 148.0], [58.9, 148.0], [59.0, 148.0], [59.1, 148.0], [59.2, 148.0], [59.3, 148.0], [59.4, 148.0], [59.5, 148.0], [59.6, 148.0], [59.7, 148.0], [59.8, 148.0], [59.9, 149.0], [60.0, 149.0], [60.1, 149.0], [60.2, 149.0], [60.3, 149.0], [60.4, 149.0], [60.5, 149.0], [60.6, 149.0], [60.7, 149.0], [60.8, 149.0], [60.9, 149.0], [61.0, 149.0], [61.1, 149.0], [61.2, 149.0], [61.3, 149.0], [61.4, 149.0], [61.5, 149.0], [61.6, 149.0], [61.7, 149.0], [61.8, 149.0], [61.9, 149.0], [62.0, 149.0], [62.1, 149.0], [62.2, 149.0], [62.3, 149.0], [62.4, 149.0], [62.5, 149.0], [62.6, 149.0], [62.7, 149.0], [62.8, 149.0], [62.9, 150.0], [63.0, 150.0], [63.1, 150.0], [63.2, 150.0], [63.3, 150.0], [63.4, 150.0], [63.5, 150.0], [63.6, 150.0], [63.7, 150.0], [63.8, 150.0], [63.9, 150.0], [64.0, 150.0], [64.1, 150.0], [64.2, 150.0], [64.3, 150.0], [64.4, 150.0], [64.5, 150.0], [64.6, 150.0], [64.7, 150.0], [64.8, 150.0], [64.9, 150.0], [65.0, 150.0], [65.1, 150.0], [65.2, 150.0], [65.3, 150.0], [65.4, 150.0], [65.5, 150.0], [65.6, 151.0], [65.7, 151.0], [65.8, 151.0], [65.9, 151.0], [66.0, 151.0], [66.1, 151.0], [66.2, 151.0], [66.3, 151.0], [66.4, 151.0], [66.5, 151.0], [66.6, 151.0], [66.7, 151.0], [66.8, 151.0], [66.9, 151.0], [67.0, 151.0], [67.1, 151.0], [67.2, 151.0], [67.3, 151.0], [67.4, 151.0], [67.5, 151.0], [67.6, 151.0], [67.7, 151.0], [67.8, 151.0], [67.9, 151.0], [68.0, 152.0], [68.1, 152.0], [68.2, 152.0], [68.3, 152.0], [68.4, 152.0], [68.5, 152.0], [68.6, 152.0], [68.7, 152.0], [68.8, 152.0], [68.9, 152.0], [69.0, 152.0], [69.1, 152.0], [69.2, 152.0], [69.3, 152.0], [69.4, 152.0], [69.5, 152.0], [69.6, 152.0], [69.7, 152.0], [69.8, 152.0], [69.9, 152.0], [70.0, 152.0], [70.1, 152.0], [70.2, 153.0], [70.3, 153.0], [70.4, 153.0], [70.5, 153.0], [70.6, 153.0], [70.7, 153.0], [70.8, 153.0], [70.9, 153.0], [71.0, 153.0], [71.1, 153.0], [71.2, 153.0], [71.3, 153.0], [71.4, 153.0], [71.5, 153.0], [71.6, 153.0], [71.7, 153.0], [71.8, 153.0], [71.9, 153.0], [72.0, 153.0], [72.1, 153.0], [72.2, 153.0], [72.3, 154.0], [72.4, 154.0], [72.5, 154.0], [72.6, 154.0], [72.7, 154.0], [72.8, 154.0], [72.9, 154.0], [73.0, 154.0], [73.1, 154.0], [73.2, 154.0], [73.3, 154.0], [73.4, 154.0], [73.5, 154.0], [73.6, 154.0], [73.7, 154.0], [73.8, 154.0], [73.9, 154.0], [74.0, 154.0], [74.1, 155.0], [74.2, 155.0], [74.3, 155.0], [74.4, 155.0], [74.5, 155.0], [74.6, 155.0], [74.7, 155.0], [74.8, 155.0], [74.9, 155.0], [75.0, 155.0], [75.1, 155.0], [75.2, 155.0], [75.3, 155.0], [75.4, 155.0], [75.5, 155.0], [75.6, 155.0], [75.7, 156.0], [75.8, 156.0], [75.9, 156.0], [76.0, 156.0], [76.1, 156.0], [76.2, 156.0], [76.3, 156.0], [76.4, 156.0], [76.5, 156.0], [76.6, 156.0], [76.7, 156.0], [76.8, 156.0], [76.9, 156.0], [77.0, 156.0], [77.1, 157.0], [77.2, 157.0], [77.3, 157.0], [77.4, 157.0], [77.5, 157.0], [77.6, 157.0], [77.7, 157.0], [77.8, 157.0], [77.9, 157.0], [78.0, 157.0], [78.1, 157.0], [78.2, 157.0], [78.3, 157.0], [78.4, 158.0], [78.5, 158.0], [78.6, 158.0], [78.7, 158.0], [78.8, 158.0], [78.9, 158.0], [79.0, 158.0], [79.1, 158.0], [79.2, 158.0], [79.3, 158.0], [79.4, 158.0], [79.5, 159.0], [79.6, 159.0], [79.7, 159.0], [79.8, 159.0], [79.9, 159.0], [80.0, 159.0], [80.1, 159.0], [80.2, 159.0], [80.3, 159.0], [80.4, 159.0], [80.5, 159.0], [80.6, 160.0], [80.7, 160.0], [80.8, 160.0], [80.9, 160.0], [81.0, 160.0], [81.1, 160.0], [81.2, 160.0], [81.3, 160.0], [81.4, 160.0], [81.5, 161.0], [81.6, 161.0], [81.7, 161.0], [81.8, 161.0], [81.9, 161.0], [82.0, 161.0], [82.1, 161.0], [82.2, 161.0], [82.3, 161.0], [82.4, 162.0], [82.5, 162.0], [82.6, 162.0], [82.7, 162.0], [82.8, 162.0], [82.9, 162.0], [83.0, 162.0], [83.1, 163.0], [83.2, 163.0], [83.3, 163.0], [83.4, 163.0], [83.5, 163.0], [83.6, 163.0], [83.7, 163.0], [83.8, 163.0], [83.9, 164.0], [84.0, 164.0], [84.1, 164.0], [84.2, 164.0], [84.3, 164.0], [84.4, 164.0], [84.5, 164.0], [84.6, 165.0], [84.7, 165.0], [84.8, 165.0], [84.9, 165.0], [85.0, 165.0], [85.1, 166.0], [85.2, 166.0], [85.3, 166.0], [85.4, 166.0], [85.5, 166.0], [85.6, 167.0], [85.7, 167.0], [85.8, 167.0], [85.9, 167.0], [86.0, 167.0], [86.1, 168.0], [86.2, 168.0], [86.3, 168.0], [86.4, 168.0], [86.5, 168.0], [86.6, 169.0], [86.7, 169.0], [86.8, 169.0], [86.9, 169.0], [87.0, 170.0], [87.1, 170.0], [87.2, 170.0], [87.3, 170.0], [87.4, 171.0], [87.5, 171.0], [87.6, 171.0], [87.7, 172.0], [87.8, 172.0], [87.9, 172.0], [88.0, 173.0], [88.1, 173.0], [88.2, 173.0], [88.3, 174.0], [88.4, 174.0], [88.5, 175.0], [88.6, 175.0], [88.7, 176.0], [88.8, 176.0], [88.9, 177.0], [89.0, 177.0], [89.1, 178.0], [89.2, 178.0], [89.3, 179.0], [89.4, 180.0], [89.5, 180.0], [89.6, 181.0], [89.7, 181.0], [89.8, 182.0], [89.9, 183.0], [90.0, 184.0], [90.1, 184.0], [90.2, 185.0], [90.3, 186.0], [90.4, 187.0], [90.5, 188.0], [90.6, 189.0], [90.7, 190.0], [90.8, 190.0], [90.9, 191.0], [91.0, 192.0], [91.1, 193.0], [91.2, 194.0], [91.3, 195.0], [91.4, 197.0], [91.5, 198.0], [91.6, 199.0], [91.7, 200.0], [91.8, 201.0], [91.9, 202.0], [92.0, 204.0], [92.1, 205.0], [92.2, 206.0], [92.3, 208.0], [92.4, 209.0], [92.5, 210.0], [92.6, 212.0], [92.7, 213.0], [92.8, 215.0], [92.9, 217.0], [93.0, 218.0], [93.1, 220.0], [93.2, 221.0], [93.3, 223.0], [93.4, 225.0], [93.5, 227.0], [93.6, 229.0], [93.7, 231.0], [93.8, 233.0], [93.9, 235.0], [94.0, 237.0], [94.1, 239.0], [94.2, 242.0], [94.3, 244.0], [94.4, 248.0], [94.5, 252.0], [94.6, 255.0], [94.7, 259.0], [94.8, 264.0], [94.9, 268.0], [95.0, 272.0], [95.1, 275.0], [95.2, 280.0], [95.3, 284.0], [95.4, 288.0], [95.5, 294.0], [95.6, 299.0], [95.7, 307.0], [95.8, 315.0], [95.9, 325.0], [96.0, 334.0], [96.1, 343.0], [96.2, 350.0], [96.3, 363.0], [96.4, 376.0], [96.5, 393.0], [96.6, 408.0], [96.7, 421.0], [96.8, 445.0], [96.9, 469.0], [97.0, 493.0], [97.1, 523.0], [97.2, 564.0], [97.3, 594.0], [97.4, 652.0], [97.5, 725.0], [97.6, 880.0], [97.7, 1042.0], [97.8, 1149.0], [97.9, 1166.0], [98.0, 1221.0], [98.1, 1321.0], [98.2, 1511.0], [98.3, 1693.0], [98.4, 1950.0], [98.5, 2429.0], [98.6, 3357.0], [98.7, 4459.0], [98.8, 6012.0], [98.9, 7101.0], [99.0, 7495.0], [99.1, 8343.0], [99.2, 9152.0], [99.3, 10230.0], [99.4, 11198.0], [99.5, 12112.0], [99.6, 13871.0], [99.7, 15515.0], [99.8, 17569.0], [99.9, 21470.0], [100.0, 60191.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 57758.0, "series": [{"data": [[100.0, 57758.0], [38500.0, 1.0], [200.0, 2478.0], [60100.0, 1.0], [300.0, 589.0], [400.0, 297.0], [500.0, 182.0], [600.0, 107.0], [700.0, 50.0], [800.0, 33.0], [900.0, 43.0], [1000.0, 28.0], [1100.0, 162.0], [1200.0, 65.0], [1300.0, 37.0], [1400.0, 35.0], [1500.0, 37.0], [1600.0, 28.0], [1700.0, 14.0], [1800.0, 30.0], [1900.0, 34.0], [2000.0, 10.0], [2100.0, 12.0], [2200.0, 14.0], [2300.0, 4.0], [2400.0, 11.0], [2500.0, 6.0], [2600.0, 4.0], [2700.0, 10.0], [2800.0, 9.0], [2900.0, 2.0], [3000.0, 4.0], [3100.0, 9.0], [3300.0, 6.0], [3200.0, 12.0], [3400.0, 4.0], [3500.0, 3.0], [3700.0, 10.0], [3600.0, 3.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 11.0], [4100.0, 3.0], [4200.0, 7.0], [4300.0, 5.0], [4400.0, 7.0], [4600.0, 3.0], [4500.0, 1.0], [4800.0, 2.0], [4700.0, 4.0], [5100.0, 8.0], [5000.0, 1.0], [4900.0, 2.0], [5300.0, 4.0], [5200.0, 1.0], [5500.0, 5.0], [5600.0, 6.0], [5400.0, 5.0], [5800.0, 4.0], [5700.0, 8.0], [6000.0, 4.0], [5900.0, 5.0], [6100.0, 5.0], [6300.0, 9.0], [6200.0, 4.0], [6600.0, 5.0], [6500.0, 3.0], [6400.0, 2.0], [6700.0, 12.0], [6800.0, 7.0], [6900.0, 3.0], [7000.0, 9.0], [7100.0, 23.0], [7300.0, 11.0], [7400.0, 9.0], [7200.0, 21.0], [7600.0, 12.0], [7500.0, 12.0], [7700.0, 12.0], [7900.0, 3.0], [7800.0, 5.0], [8100.0, 6.0], [8000.0, 4.0], [8400.0, 14.0], [8300.0, 7.0], [8500.0, 12.0], [8600.0, 8.0], [8700.0, 4.0], [8200.0, 5.0], [9100.0, 6.0], [9200.0, 4.0], [9000.0, 6.0], [8800.0, 8.0], [8900.0, 4.0], [9700.0, 2.0], [9400.0, 8.0], [9300.0, 10.0], [9600.0, 5.0], [9500.0, 5.0], [10100.0, 7.0], [9900.0, 9.0], [10200.0, 8.0], [10000.0, 5.0], [9800.0, 3.0], [10600.0, 5.0], [10400.0, 8.0], [10700.0, 4.0], [10300.0, 4.0], [10500.0, 4.0], [11100.0, 11.0], [10800.0, 8.0], [11200.0, 8.0], [11000.0, 6.0], [10900.0, 8.0], [11300.0, 4.0], [11600.0, 9.0], [11400.0, 5.0], [11700.0, 9.0], [11500.0, 6.0], [11900.0, 4.0], [11800.0, 8.0], [12000.0, 7.0], [12200.0, 7.0], [12100.0, 8.0], [12300.0, 7.0], [12400.0, 3.0], [12600.0, 1.0], [12500.0, 3.0], [12800.0, 4.0], [12900.0, 3.0], [13300.0, 3.0], [13200.0, 3.0], [13000.0, 3.0], [13100.0, 1.0], [13500.0, 3.0], [13800.0, 5.0], [13700.0, 4.0], [13600.0, 4.0], [13400.0, 5.0], [14200.0, 1.0], [13900.0, 3.0], [14100.0, 10.0], [14000.0, 4.0], [14300.0, 1.0], [14600.0, 4.0], [14500.0, 1.0], [14700.0, 3.0], [14800.0, 1.0], [15100.0, 4.0], [14900.0, 4.0], [15200.0, 8.0], [15300.0, 7.0], [15000.0, 1.0], [15400.0, 8.0], [15600.0, 11.0], [15500.0, 12.0], [15800.0, 4.0], [15700.0, 4.0], [16000.0, 4.0], [16200.0, 2.0], [16300.0, 3.0], [15900.0, 1.0], [16100.0, 1.0], [17200.0, 2.0], [16800.0, 4.0], [17400.0, 3.0], [16600.0, 2.0], [17000.0, 1.0], [18400.0, 3.0], [17800.0, 2.0], [18000.0, 1.0], [17600.0, 1.0], [18200.0, 1.0], [18600.0, 3.0], [19400.0, 2.0], [19200.0, 1.0], [18800.0, 1.0], [19000.0, 1.0], [20000.0, 2.0], [19600.0, 1.0], [21400.0, 3.0], [21200.0, 2.0], [21000.0, 1.0], [21600.0, 1.0], [22000.0, 2.0], [23200.0, 1.0], [22800.0, 2.0], [23000.0, 3.0], [22600.0, 1.0], [23800.0, 1.0], [24400.0, 2.0], [24600.0, 1.0], [25400.0, 1.0], [24800.0, 1.0], [26200.0, 1.0], [27600.0, 1.0], [26800.0, 2.0], [27800.0, 1.0], [28000.0, 1.0], [29000.0, 1.0], [29800.0, 2.0], [38000.0, 1.0], [58400.0, 1.0], [33900.0, 1.0], [16700.0, 2.0], [17100.0, 1.0], [16500.0, 2.0], [16900.0, 1.0], [17300.0, 2.0], [17500.0, 5.0], [17900.0, 5.0], [17700.0, 2.0], [18300.0, 1.0], [18500.0, 3.0], [19300.0, 4.0], [18700.0, 1.0], [19100.0, 2.0], [18900.0, 1.0], [20300.0, 2.0], [19900.0, 1.0], [20100.0, 1.0], [19700.0, 1.0], [19500.0, 3.0], [20500.0, 3.0], [20900.0, 4.0], [20700.0, 1.0], [21300.0, 1.0], [22100.0, 3.0], [21700.0, 4.0], [22300.0, 1.0], [22500.0, 1.0], [23300.0, 2.0], [23500.0, 1.0], [24100.0, 1.0], [23900.0, 2.0], [24500.0, 1.0], [23700.0, 1.0], [25500.0, 1.0], [25300.0, 2.0], [26500.0, 2.0], [26900.0, 2.0], [27100.0, 1.0], [27300.0, 1.0], [28100.0, 1.0], [29300.0, 1.0], [29100.0, 1.0], [32100.0, 1.0], [34600.0, 1.0], [35400.0, 1.0], [52200.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 60100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 61126.0, "series": [{"data": [[0.0, 61126.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 738.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1130.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.946773120425822, "minX": 1.72920582E12, "maxY": 296.88797814207624, "series": [{"data": [[1.72920594E12, 11.322655989322666], [1.72920624E12, 9.623100303951409], [1.7292063E12, 11.354797577303161], [1.7292066E12, 8.59227181878747], [1.7292069E12, 9.658666666666663], [1.72920666E12, 8.181606131289575], [1.729206E12, 9.697080291970805], [1.72920702E12, 8.584099868593945], [1.72920606E12, 9.551196808510642], [1.72920696E12, 8.197292724196297], [1.72920636E12, 8.196000000000009], [1.72920642E12, 8.184615384615382], [1.72920708E12, 8.893655049151024], [1.72920678E12, 8.481392966882886], [1.72920582E12, 296.88797814207624], [1.72920672E12, 8.371790596865617], [1.72920612E12, 8.285238253915379], [1.72920618E12, 8.475878704341815], [1.72920684E12, 8.84006514657979], [1.72920648E12, 8.249167221852108], [1.72920654E12, 7.946773120425822], [1.72920588E12, 13.774480712166167]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72920708E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 144.14124347413295, "minX": 1.0, "maxY": 25316.0, "series": [{"data": [[2.0, 149.81904761904758], [3.0, 147.19213973799123], [4.0, 161.3415841584159], [5.0, 150.7546012269937], [6.0, 148.47458410351226], [7.0, 144.14124347413295], [8.0, 147.5779889818746], [9.0, 155.6377619490028], [10.0, 179.13520749665386], [11.0, 206.20111214087092], [12.0, 227.30164158686753], [13.0, 193.84284377923282], [14.0, 287.5639269406396], [15.0, 210.49999999999983], [16.0, 277.5766129032259], [17.0, 223.1472081218275], [18.0, 232.95709570957115], [19.0, 217.14590747330948], [20.0, 326.65789473684225], [21.0, 233.47150259067354], [22.0, 587.0285714285708], [23.0, 523.1985294117652], [24.0, 288.71052631578954], [25.0, 293.90196078431364], [26.0, 300.0000000000001], [27.0, 291.13000000000017], [28.0, 329.3506493506495], [29.0, 693.1917808219176], [30.0, 865.3055555555554], [31.0, 771.603448275862], [33.0, 300.5757575757576], [32.0, 856.6792452830188], [35.0, 2001.4285714285718], [34.0, 1628.7959183673465], [37.0, 3206.142857142857], [36.0, 1046.3589743589746], [39.0, 307.75], [38.0, 348.3888888888888], [41.0, 979.4999999999997], [40.0, 316.94117647058823], [43.0, 350.57894736842104], [42.0, 472.8947368421052], [45.0, 472.42857142857144], [44.0, 301.3529411764706], [47.0, 364.0], [46.0, 389.1666666666667], [49.0, 405.6666666666667], [48.0, 629.5], [51.0, 216.88888888888889], [50.0, 862.0], [53.0, 288.1666666666667], [52.0, 482.69230769230774], [54.0, 245.30769230769235], [55.0, 410.75], [57.0, 877.3333333333334], [56.0, 1175.619047619048], [59.0, 366.7], [58.0, 535.8571428571428], [61.0, 366.0], [60.0, 475.33333333333337], [63.0, 456.5], [62.0, 430.3333333333333], [67.0, 449.0], [66.0, 526.5714285714286], [65.0, 478.5], [64.0, 10043.0], [71.0, 1000.5], [70.0, 831.0], [69.0, 407.5], [68.0, 563.0], [75.0, 14332.0], [74.0, 464.6666666666667], [72.0, 457.0], [73.0, 437.0], [76.0, 5675.999999999999], [78.0, 16312.0], [79.0, 372.0], [77.0, 497.5], [80.0, 368.0], [91.0, 565.0], [90.0, 458.5], [89.0, 783.4666666666667], [95.0, 596.6666666666666], [94.0, 485.0], [93.0, 589.0], [92.0, 574.5], [98.0, 526.6666666666666], [96.0, 1571.75], [97.0, 13646.5], [103.0, 414.5], [102.0, 421.5], [100.0, 513.3333333333334], [107.0, 1022.0], [106.0, 1662.5], [105.0, 728.0], [104.0, 17322.0], [111.0, 8891.666666666668], [110.0, 9612.0], [109.0, 1718.6666666666667], [108.0, 1260.0], [115.0, 8569.5], [113.0, 2128.6666666666665], [114.0, 853.6666666666666], [112.0, 6992.0], [119.0, 1702.142857142857], [118.0, 3045.285714285714], [117.0, 3361.0], [116.0, 2675.5], [123.0, 6847.416666666667], [122.0, 11620.222222222223], [121.0, 13683.142857142857], [120.0, 4208.400000000001], [127.0, 5318.777777777777], [126.0, 7606.333333333334], [125.0, 7654.111111111111], [124.0, 5927.875], [135.0, 2888.4285714285716], [134.0, 7823.285714285714], [132.0, 8691.333333333334], [131.0, 3055.6666666666665], [130.0, 8139.5714285714275], [129.0, 12401.166666666666], [133.0, 5526.111111111111], [128.0, 7001.333333333333], [143.0, 5984.666666666666], [142.0, 1399.0], [141.0, 7927.333333333333], [140.0, 1155.6666666666667], [139.0, 12627.0], [138.0, 10237.75], [137.0, 3898.5], [136.0, 6353.666666666667], [151.0, 1904.6666666666665], [149.0, 577.5], [147.0, 1726.0], [146.0, 3625.0], [145.0, 7998.5], [144.0, 9915.0], [159.0, 5340.25], [158.0, 2993.0], [157.0, 4193.5], [156.0, 6587.500000000001], [154.0, 5587.833333333334], [153.0, 486.5], [152.0, 2017.0], [155.0, 6193.0], [167.0, 2086.6], [166.0, 11871.2], [165.0, 9426.25], [164.0, 4365.5], [163.0, 1183.25], [162.0, 4696.142857142858], [161.0, 804.0], [160.0, 313.0], [175.0, 7077.5], [174.0, 1586.0], [173.0, 6538.0], [172.0, 1215.0], [171.0, 6454.0], [170.0, 9879.0], [169.0, 5050.666666666666], [168.0, 5151.0], [183.0, 982.0], [182.0, 991.0], [181.0, 16896.0], [180.0, 456.0], [179.0, 539.0], [178.0, 14071.0], [177.0, 7196.5], [176.0, 7382.5], [191.0, 408.5], [189.0, 17451.0], [187.0, 9093.666666666666], [190.0, 24411.0], [188.0, 391.0], [186.0, 398.0], [185.0, 5591.0], [184.0, 392.0], [199.0, 448.0], [198.0, 8545.0], [196.0, 1110.0], [194.0, 5358.333333333333], [193.0, 1676.0], [192.0, 384.0], [195.0, 16639.0], [207.0, 346.0], [206.0, 1988.5], [205.0, 25316.0], [204.0, 541.0], [203.0, 1058.0], [201.0, 609.0], [200.0, 420.0], [215.0, 7180.333333333333], [214.0, 1761.6666666666665], [213.0, 3894.5], [212.0, 9164.5], [210.0, 2888.0], [209.0, 346.0], [208.0, 19708.0], [223.0, 10574.8], [221.0, 10816.5], [219.0, 624.0], [218.0, 620.0], [217.0, 16335.0], [216.0, 7865.0], [230.0, 2837.0], [229.0, 7884.8], [228.0, 5932.0], [226.0, 9338.0], [227.0, 10969.666666666668], [231.0, 12530.2], [225.0, 399.0], [224.0, 13409.0], [239.0, 1364.0], [238.0, 16819.0], [237.0, 293.0], [236.0, 23880.0], [235.0, 3275.0], [234.0, 683.0], [233.0, 455.0], [232.0, 9498.0], [247.0, 517.0], [246.0, 398.0], [245.0, 587.0], [244.0, 530.0], [243.0, 501.6666666666667], [242.0, 1765.0], [241.0, 8500.5], [240.0, 370.0], [249.0, 13534.0], [251.0, 944.0], [250.0, 949.0], [248.0, 766.0], [270.0, 1232.0], [271.0, 2739.0], [269.0, 1876.0], [268.0, 1170.0], [267.0, 7414.25], [265.0, 886.0], [266.0, 1798.0], [264.0, 334.0], [263.0, 1548.25], [261.0, 15369.5], [262.0, 670.5833333333334], [286.0, 12041.0], [287.0, 984.0], [285.0, 1148.0], [275.0, 1720.0], [274.0, 1867.0], [273.0, 2295.0], [272.0, 1161.0], [283.0, 1223.0], [282.0, 1233.0], [281.0, 933.0], [280.0, 1221.0], [279.0, 1216.3333333333333], [277.0, 1975.0], [302.0, 4237.0], [303.0, 20710.0], [301.0, 2530.0], [300.0, 3855.0], [299.0, 2212.0], [298.0, 2187.0], [297.0, 4562.0], [296.0, 7890.666666666666], [295.0, 5472.4], [289.0, 975.0], [288.0, 1463.0], [291.0, 8309.0], [290.0, 7027.0], [294.0, 3115.166666666667], [293.0, 4427.5], [292.0, 2886.0], [318.0, 15431.0], [317.0, 6775.0], [315.0, 4458.0], [312.0, 9095.666666666666], [311.0, 15157.0], [310.0, 8827.0], [309.0, 8706.0], [308.0, 14593.5], [316.0, 11790.666666666666], [307.0, 5788.0], [306.0, 6861.4], [304.0, 7350.4], [305.0, 3291.0], [314.0, 6609.0], [313.0, 15052.0], [322.0, 15873.0], [334.0, 10820.5], [335.0, 13555.5], [332.0, 12862.5], [321.0, 1868.0], [320.0, 8735.0], [330.0, 5625.5], [328.0, 15307.0], [327.0, 19284.0], [326.0, 12107.0], [325.0, 15261.0], [324.0, 13782.0], [350.0, 3335.5], [351.0, 7571.0], [349.0, 11116.6], [348.0, 6567.0], [346.0, 3123.5], [347.0, 12161.0], [345.0, 8114.666666666667], [344.0, 14704.5], [343.0, 9747.666666666666], [336.0, 10057.0], [339.0, 16980.0], [338.0, 12287.5], [342.0, 10491.0], [341.0, 8989.0], [340.0, 13390.333333333334], [367.0, 4277.333333333333], [360.0, 3958.0], [366.0, 4702.666666666667], [365.0, 12099.2], [364.0, 13824.857142857143], [355.0, 3238.3333333333335], [353.0, 7873.6], [352.0, 7258.0], [354.0, 5672.0], [363.0, 9813.0], [362.0, 9420.666666666668], [361.0, 12497.666666666666], [359.0, 6526.5], [358.0, 13966.333333333332], [357.0, 7328.0], [356.0, 4993.5], [382.0, 1530.0], [374.0, 2831.25], [373.0, 4149.4], [372.0, 2551.3333333333335], [383.0, 360.0], [381.0, 2744.0], [380.0, 6454.0], [375.0, 1005.5], [369.0, 1961.3333333333335], [368.0, 7226.666666666667], [371.0, 4451.0], [370.0, 5353.5], [379.0, 8173.583333333334], [378.0, 5835.5], [377.0, 9675.4], [376.0, 7320.75], [398.0, 4581.0], [399.0, 3158.0], [397.0, 4111.5], [396.0, 3473.0], [395.0, 5909.333333333334], [394.0, 6821.666666666667], [393.0, 6342.5], [391.0, 3771.0], [387.0, 6004.0], [385.0, 357.0], [384.0, 1544.0], [390.0, 16805.0], [389.0, 8383.5], [388.0, 2996.5], [392.0, 10711.666666666666], [414.0, 3269.333333333333], [415.0, 3521.5], [413.0, 6827.666666666666], [412.0, 2165.3333333333335], [411.0, 14488.0], [410.0, 11732.5], [409.0, 10136.0], [408.0, 3572.0], [407.0, 2764.0], [401.0, 5790.8], [400.0, 5010.5], [403.0, 4170.75], [402.0, 4663.2], [406.0, 2236.0], [405.0, 5326.666666666666], [404.0, 7257.5], [430.0, 6265.0], [418.0, 4348.6], [419.0, 6926.0], [417.0, 3193.0], [416.0, 2638.0], [423.0, 1232.0], [421.0, 5928.333333333333], [420.0, 1291.0], [431.0, 2316.0], [424.0, 5977.5], [429.0, 374.0], [427.0, 379.0], [426.0, 1573.5], [445.0, 5388.0], [440.0, 2620.0], [438.0, 4682.333333333334], [437.0, 386.0], [436.0, 1888.0], [441.0, 2588.5], [447.0, 550.0], [446.0, 4250.666666666667], [444.0, 1743.8], [435.0, 433.0], [434.0, 1178.5], [432.0, 3513.0], [439.0, 459.0], [443.0, 9124.333333333334], [442.0, 745.0], [462.0, 687.0], [463.0, 1118.6666666666667], [461.0, 565.5], [460.0, 9498.5], [459.0, 536.0], [458.0, 5912.333333333333], [457.0, 4531.75], [456.0, 1304.0], [455.0, 2327.0], [451.0, 6046.333333333333], [449.0, 7109.0], [454.0, 5605.0], [453.0, 411.0], [478.0, 1231.0], [468.0, 4958.5], [479.0, 1714.0], [476.0, 3860.5], [467.0, 881.6666666666666], [466.0, 1072.0], [465.0, 2003.0], [464.0, 1125.0], [474.0, 661.0], [473.0, 3881.0], [472.0, 4222.5], [471.0, 4045.0], [470.0, 1838.0], [469.0, 1376.0], [494.0, 8833.666666666666], [495.0, 7401.0], [493.0, 8344.75], [492.0, 4663.857142857143], [491.0, 3593.2], [490.0, 4707.166666666667], [489.0, 4415.75], [488.0, 4102.0], [486.0, 7290.4], [482.0, 4641.0], [481.0, 1637.0], [480.0, 1660.0], [483.0, 2024.6666666666667], [487.0, 3492.3809523809523], [485.0, 3360.0], [484.0, 4313.0], [511.0, 7412.0], [503.0, 7357.571428571428], [504.0, 8178.249999999999], [505.0, 8408.25], [502.0, 7767.454545454546], [501.0, 7159.444444444444], [500.0, 4833.75], [510.0, 8063.4], [509.0, 7081.250000000001], [508.0, 9875.125000000002], [499.0, 5759.6], [498.0, 6899.0], [497.0, 3979.7499999999995], [496.0, 5836.0], [507.0, 10261.0], [506.0, 7326.5], [537.0, 11258.2], [515.0, 3970.0], [514.0, 11113.57142857143], [513.0, 5581.4], [512.0, 8261.666666666666], [516.0, 11758.666666666666], [517.0, 13872.5], [519.0, 10545.0], [536.0, 10226.6], [538.0, 9389.333333333332], [539.0, 8966.333333333334], [540.0, 9312.42857142857], [541.0, 9633.0], [542.0, 10627.57142857143], [543.0, 9359.0], [528.0, 12263.0], [532.0, 5639.333333333334], [531.0, 13217.5], [530.0, 13785.0], [529.0, 8216.0], [533.0, 8263.5], [535.0, 13216.0], [534.0, 13284.0], [527.0, 11974.0], [526.0, 15696.0], [525.0, 15691.0], [524.0, 12235.0], [523.0, 12251.0], [522.0, 11619.0], [521.0, 16533.0], [520.0, 10122.0], [572.0, 11493.0], [547.0, 12985.25], [545.0, 10204.5], [550.0, 11752.636363636362], [552.0, 11839.2], [553.0, 4106.0], [555.0, 10509.0], [554.0, 9263.5], [551.0, 9243.333333333334], [569.0, 7293.0], [568.0, 7272.0], [571.0, 7248.0], [570.0, 7258.0], [573.0, 6668.0], [574.0, 9502.5], [575.0, 7721.0], [561.0, 11113.5], [562.0, 5990.0], [563.0, 11328.0], [564.0, 8533.333333333334], [567.0, 7060.0], [565.0, 8852.0], [560.0, 13739.6], [548.0, 10774.111111111111], [546.0, 11035.0], [544.0, 10413.166666666666], [559.0, 11559.2], [558.0, 12208.888888888889], [557.0, 10043.5], [556.0, 10887.5], [549.0, 12019.714285714284], [582.0, 7741.0], [576.0, 7787.0], [578.0, 8830.0], [579.0, 10349.833333333334], [581.0, 8447.0], [580.0, 7669.0], [577.0, 8596.25], [583.0, 8694.0], [600.0, 7658.0], [602.0, 7632.0], [601.0, 7633.0], [604.0, 9806.0], [603.0, 7878.0], [606.0, 17291.0], [592.0, 6762.0], [605.0, 9654.5], [593.0, 10741.0], [597.0, 11551.0], [596.0, 13194.0], [595.0, 7053.0], [594.0, 6739.0], [599.0, 8001.5], [598.0, 15158.0], [584.0, 8329.0], [585.0, 7140.0], [586.0, 13041.0], [589.0, 10136.666666666666], [588.0, 7573.0], [587.0, 7588.0], [591.0, 9533.0], [590.0, 8404.0], [1.0, 144.97580645161293]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[17.539333333333435, 331.6777142857153]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 606.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2853.45, "minX": 1.72920582E12, "maxY": 2204419.3833333333, "series": [{"data": [[1.72920594E12, 2105985.35], [1.72920624E12, 2080739.0166666666], [1.7292063E12, 2204419.3833333333], [1.7292066E12, 2109516.3333333335], [1.7292069E12, 2108147.1], [1.72920666E12, 2108826.6166666667], [1.729206E12, 2117948.183333333], [1.72920702E12, 2138992.35], [1.72920606E12, 2113749.4], [1.72920696E12, 2076525.95], [1.72920636E12, 2108148.466666667], [1.72920642E12, 2101045.8], [1.72920708E12, 786300.7166666667], [1.72920678E12, 2058247.15], [1.72920582E12, 1285234.1], [1.72920672E12, 2107431.1333333333], [1.72920612E12, 2108838.3833333333], [1.72920618E12, 2039275.2833333334], [1.72920684E12, 2157335.0], [1.72920648E12, 2109452.5833333335], [1.72920654E12, 2112311.15], [1.72920588E12, 2128005.6666666665]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72920594E12, 7642.35], [1.72920624E12, 7550.55], [1.7292063E12, 7999.35], [1.7292066E12, 7655.1], [1.7292069E12, 7650.0], [1.72920666E12, 7652.55], [1.729206E12, 7685.7], [1.72920702E12, 7762.2], [1.72920606E12, 7670.4], [1.72920696E12, 7535.25], [1.72920636E12, 7650.0], [1.72920642E12, 7624.5], [1.72920708E12, 2853.45], [1.72920678E12, 7468.95], [1.72920582E12, 4663.95], [1.72920672E12, 7647.45], [1.72920612E12, 7652.55], [1.72920618E12, 7400.1], [1.72920684E12, 7828.5], [1.72920648E12, 7655.1], [1.72920654E12, 7665.3], [1.72920588E12, 7721.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72920708E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 145.6916890080429, "minX": 1.72920582E12, "maxY": 5802.936065573772, "series": [{"data": [[1.72920594E12, 209.87287287287256], [1.72920624E12, 160.25734549138807], [1.7292063E12, 177.16990755498895], [1.7292066E12, 153.03564290473014], [1.7292069E12, 162.39033333333356], [1.72920666E12, 147.46184605131648], [1.729206E12, 175.64698075646976], [1.72920702E12, 146.77628120893567], [1.72920606E12, 158.0209441489363], [1.72920696E12, 146.948900169205], [1.72920636E12, 150.5439999999997], [1.72920642E12, 149.47458193979944], [1.72920708E12, 145.6916890080429], [1.72920678E12, 147.21850460908152], [1.72920582E12, 5802.936065573772], [1.72920672E12, 147.93097699233093], [1.72920612E12, 154.44351882705755], [1.72920618E12, 152.15265334252237], [1.72920684E12, 152.73941368078212], [1.72920648E12, 148.76815456362445], [1.72920654E12, 146.68962075848296], [1.72920588E12, 377.2614573030012]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72920708E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 129.08579088471853, "minX": 1.72920582E12, "maxY": 4649.782513661199, "series": [{"data": [[1.72920594E12, 179.9446112779445], [1.72920624E12, 141.52144545761558], [1.7292063E12, 153.19987248963938], [1.7292066E12, 135.17055296469033], [1.7292069E12, 144.5973333333335], [1.72920666E12, 130.7280906364544], [1.729206E12, 154.40278699402793], [1.72920702E12, 129.89224704336428], [1.72920606E12, 139.1878324468087], [1.72920696E12, 130.30084602368888], [1.72920636E12, 133.41399999999996], [1.72920642E12, 132.3070234113716], [1.72920708E12, 129.08579088471853], [1.72920678E12, 130.52850802321606], [1.72920582E12, 4649.782513661199], [1.72920672E12, 130.96932310770217], [1.72920612E12, 136.3798733755415], [1.72920618E12, 134.33631977946192], [1.72920684E12, 135.3521172638434], [1.72920648E12, 131.5203197868086], [1.72920654E12, 130.03326679973378], [1.72920588E12, 231.03428948236072]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72920708E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 85.61036639857024, "minX": 1.72920582E12, "maxY": 3355.535519125681, "series": [{"data": [[1.72920594E12, 122.17083750417083], [1.72920624E12, 95.42418101992556], [1.7292063E12, 105.26840930825628], [1.7292066E12, 89.45736175882766], [1.7292069E12, 99.52200000000006], [1.72920666E12, 86.7540819726757], [1.729206E12, 106.02455209024541], [1.72920702E12, 85.63731931668845], [1.72920606E12, 92.58676861702128], [1.72920696E12, 86.3871404399326], [1.72920636E12, 88.57166666666646], [1.72920642E12, 87.07190635451504], [1.72920708E12, 85.61036639857024], [1.72920678E12, 86.26903379993182], [1.72920582E12, 3355.535519125681], [1.72920672E12, 86.59353117705906], [1.72920612E12, 90.7854048650452], [1.72920618E12, 89.09338387319079], [1.72920684E12, 90.71042345276861], [1.72920648E12, 87.14756828780818], [1.72920654E12, 85.85595475715239], [1.72920588E12, 204.5084075173091]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72920708E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 122.0, "minX": 1.72920582E12, "maxY": 60191.0, "series": [{"data": [[1.72920594E12, 1518.0], [1.72920624E12, 1175.0], [1.7292063E12, 2191.0], [1.7292066E12, 1218.0], [1.7292069E12, 3172.0], [1.72920666E12, 1163.0], [1.729206E12, 1346.0], [1.72920702E12, 1169.0], [1.72920606E12, 1171.0], [1.72920696E12, 1167.0], [1.72920636E12, 1154.0], [1.72920642E12, 523.0], [1.72920708E12, 1160.0], [1.72920678E12, 1156.0], [1.72920582E12, 32121.0], [1.72920672E12, 1528.0], [1.72920612E12, 1156.0], [1.72920618E12, 1155.0], [1.72920684E12, 1169.0], [1.72920648E12, 1139.0], [1.72920654E12, 1154.0], [1.72920588E12, 60191.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72920594E12, 320.0], [1.72920624E12, 174.0], [1.7292063E12, 182.0], [1.7292066E12, 170.0], [1.7292069E12, 166.0], [1.72920666E12, 156.0], [1.729206E12, 213.5], [1.72920702E12, 159.0], [1.72920606E12, 184.0], [1.72920696E12, 157.0], [1.72920636E12, 162.0], [1.72920642E12, 163.0], [1.72920708E12, 154.0], [1.72920678E12, 160.0], [1.72920582E12, 15432.0], [1.72920672E12, 160.0], [1.72920612E12, 168.0], [1.72920618E12, 164.0], [1.72920684E12, 163.0], [1.72920648E12, 159.0], [1.72920654E12, 156.0], [1.72920588E12, 287.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72920594E12, 1045.6199999999994], [1.72920624E12, 396.90000000000055], [1.7292063E12, 1146.8599999999997], [1.7292066E12, 241.9699999999998], [1.7292069E12, 1143.9899999999998], [1.72920666E12, 204.0], [1.729206E12, 1147.6499999999992], [1.72920702E12, 184.65000000000055], [1.72920606E12, 313.8199999999997], [1.72920696E12, 184.44000000000005], [1.72920636E12, 286.9399999999987], [1.72920642E12, 234.09000000000015], [1.72920708E12, 170.0], [1.72920678E12, 191.69999999999982], [1.72920582E12, 25106.000000000033], [1.72920672E12, 199.0], [1.72920612E12, 304.98], [1.72920618E12, 294.9699999999998], [1.72920684E12, 221.28999999999996], [1.72920648E12, 266.9699999999998], [1.72920654E12, 214.85999999999967], [1.72920588E12, 1281.8400000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72920594E12, 419.0999999999999], [1.72920624E12, 220.0], [1.7292063E12, 286.0999999999999], [1.7292066E12, 188.8499999999999], [1.7292069E12, 177.0], [1.72920666E12, 164.9000000000001], [1.729206E12, 281.0], [1.72920702E12, 166.0], [1.72920606E12, 220.0], [1.72920696E12, 164.0], [1.72920636E12, 175.0], [1.72920642E12, 186.0], [1.72920708E12, 159.0], [1.72920678E12, 167.0], [1.72920582E12, 18595.0], [1.72920672E12, 168.0], [1.72920612E12, 213.9000000000001], [1.72920618E12, 202.8499999999999], [1.72920684E12, 172.0], [1.72920648E12, 170.0], [1.72920654E12, 164.0], [1.72920588E12, 392.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72920594E12, 127.0], [1.72920624E12, 126.0], [1.7292063E12, 127.0], [1.7292066E12, 128.0], [1.7292069E12, 125.0], [1.72920666E12, 125.0], [1.729206E12, 126.0], [1.72920702E12, 124.0], [1.72920606E12, 124.0], [1.72920696E12, 125.0], [1.72920636E12, 124.0], [1.72920642E12, 127.0], [1.72920708E12, 127.0], [1.72920678E12, 126.0], [1.72920582E12, 136.0], [1.72920672E12, 122.0], [1.72920612E12, 126.0], [1.72920618E12, 125.0], [1.72920684E12, 124.0], [1.72920648E12, 123.0], [1.72920654E12, 127.0], [1.72920588E12, 122.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72920594E12, 158.0], [1.72920624E12, 145.0], [1.7292063E12, 145.0], [1.7292066E12, 147.0], [1.7292069E12, 146.0], [1.72920666E12, 143.0], [1.729206E12, 148.0], [1.72920702E12, 144.0], [1.72920606E12, 147.0], [1.72920696E12, 144.0], [1.72920636E12, 144.0], [1.72920642E12, 144.0], [1.72920708E12, 143.0], [1.72920678E12, 144.0], [1.72920582E12, 2678.0], [1.72920672E12, 144.0], [1.72920612E12, 145.0], [1.72920618E12, 145.0], [1.72920684E12, 146.0], [1.72920648E12, 144.0], [1.72920654E12, 143.0], [1.72920588E12, 159.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72920708E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 138.5, "minX": 1.0, "maxY": 38574.0, "series": [{"data": [[3.0, 1795.0], [4.0, 143.5], [5.0, 158.0], [6.0, 139.0], [8.0, 153.5], [9.0, 140.0], [12.0, 142.0], [14.0, 153.0], [15.0, 141.0], [16.0, 142.5], [17.0, 142.0], [18.0, 140.5], [19.0, 10577.0], [20.0, 138.5], [21.0, 148.0], [22.0, 140.5], [23.0, 9436.5], [25.0, 142.0], [26.0, 292.0], [27.0, 141.0], [28.0, 142.0], [29.0, 139.0], [30.0, 158.5], [31.0, 144.0], [33.0, 145.0], [32.0, 145.0], [34.0, 146.0], [35.0, 146.0], [37.0, 143.0], [36.0, 140.5], [38.0, 150.0], [39.0, 143.0], [41.0, 190.5], [40.0, 149.0], [42.0, 152.0], [43.0, 148.0], [45.0, 146.0], [44.0, 155.0], [47.0, 146.0], [46.0, 144.0], [49.0, 145.0], [48.0, 145.0], [51.0, 145.0], [50.0, 144.0], [53.0, 146.0], [52.0, 144.0], [55.0, 148.5], [54.0, 146.0], [56.0, 149.0], [57.0, 148.0], [59.0, 148.0], [58.0, 149.0], [60.0, 206.5], [61.0, 147.0], [63.0, 150.0], [62.0, 145.0], [65.0, 155.0], [66.0, 156.0], [64.0, 143.0], [69.0, 6225.0], [70.0, 152.0], [68.0, 153.0], [71.0, 146.0], [73.0, 158.0], [75.0, 161.0], [72.0, 155.5], [74.0, 144.0], [77.0, 158.0], [80.0, 158.0], [81.0, 151.0], [87.0, 208.0], [84.0, 160.0], [85.0, 150.0], [90.0, 149.0], [94.0, 1536.5], [93.0, 396.0], [96.0, 174.0], [100.0, 1064.5], [103.0, 452.0], [108.0, 10888.0], [111.0, 1890.5], [113.0, 1223.0], [117.0, 181.0], [125.0, 7163.0], [1.0, 6386.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 38080.0], [41.0, 29087.0], [44.0, 29878.5], [50.0, 38574.0], [108.0, 10292.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10877.0, "series": [{"data": [[3.0, 1793.0], [4.0, 126.5], [5.0, 139.0], [6.0, 123.5], [8.0, 136.0], [9.0, 124.0], [12.0, 126.0], [14.0, 131.5], [15.0, 125.0], [16.0, 128.0], [17.0, 126.0], [18.0, 123.5], [19.0, 8707.0], [20.0, 123.0], [21.0, 131.0], [22.0, 124.0], [23.0, 7969.5], [25.0, 125.0], [26.0, 246.0], [27.0, 125.5], [28.0, 126.0], [29.0, 124.0], [30.0, 139.5], [31.0, 128.0], [33.0, 129.0], [32.0, 128.5], [34.0, 130.0], [35.0, 130.0], [37.0, 126.0], [36.0, 125.0], [38.0, 134.0], [39.0, 126.0], [41.0, 159.0], [40.0, 133.0], [42.0, 134.0], [43.0, 131.0], [45.0, 129.0], [44.0, 137.0], [47.0, 129.0], [46.0, 128.0], [49.0, 128.0], [48.0, 129.0], [51.0, 128.0], [50.0, 128.0], [53.0, 129.0], [52.0, 128.0], [55.0, 131.0], [54.0, 129.0], [56.0, 132.0], [57.0, 131.0], [59.0, 131.0], [58.0, 132.0], [60.0, 172.5], [61.0, 130.0], [63.0, 133.0], [62.0, 129.0], [65.0, 137.0], [66.0, 138.0], [64.0, 127.0], [69.0, 4814.0], [70.0, 135.0], [68.0, 136.0], [71.0, 129.0], [73.0, 139.0], [75.0, 143.0], [72.0, 137.0], [74.0, 128.0], [77.0, 140.0], [80.0, 137.0], [81.0, 133.0], [87.0, 187.0], [84.0, 140.0], [85.0, 133.0], [90.0, 131.5], [94.0, 1294.0], [93.0, 329.0], [96.0, 154.0], [100.0, 864.5], [103.0, 347.0], [108.0, 10877.0], [111.0, 1437.5], [113.0, 988.0], [117.0, 156.0], [125.0, 6411.0], [1.0, 5824.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 0.0], [41.0, 0.0], [44.0, 0.0], [50.0, 0.0], [108.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 125.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 18.533333333333335, "minX": 1.72920582E12, "maxY": 52.4, "series": [{"data": [[1.72920594E12, 49.983333333333334], [1.72920624E12, 49.35], [1.7292063E12, 52.4], [1.7292066E12, 50.06666666666667], [1.7292069E12, 50.0], [1.72920666E12, 50.0], [1.729206E12, 50.21666666666667], [1.72920702E12, 50.28333333333333], [1.72920606E12, 50.13333333333333], [1.72920696E12, 49.68333333333333], [1.72920636E12, 50.0], [1.72920642E12, 49.88333333333333], [1.72920708E12, 18.533333333333335], [1.72920678E12, 48.733333333333334], [1.72920582E12, 30.95], [1.72920672E12, 50.0], [1.72920612E12, 50.0], [1.72920618E12, 48.25], [1.72920684E12, 51.266666666666666], [1.72920648E12, 49.95], [1.72920654E12, 50.1], [1.72920588E12, 50.21666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72920708E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72920582E12, "maxY": 52.28333333333333, "series": [{"data": [[1.72920594E12, 49.95], [1.72920624E12, 49.35], [1.7292063E12, 52.28333333333333], [1.7292066E12, 50.03333333333333], [1.7292069E12, 50.0], [1.72920666E12, 50.016666666666666], [1.729206E12, 50.233333333333334], [1.72920702E12, 50.733333333333334], [1.72920606E12, 50.13333333333333], [1.72920696E12, 49.25], [1.72920636E12, 50.0], [1.72920642E12, 49.833333333333336], [1.72920708E12, 18.65], [1.72920678E12, 48.81666666666667], [1.72920582E12, 30.483333333333334], [1.72920672E12, 49.983333333333334], [1.72920612E12, 50.016666666666666], [1.72920618E12, 48.36666666666667], [1.72920684E12, 51.166666666666664], [1.72920648E12, 50.03333333333333], [1.72920654E12, 50.1], [1.72920588E12, 50.46666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72920582E12, 0.016666666666666666], [1.72920588E12, 0.08333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72920708E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72920582E12, "maxY": 52.28333333333333, "series": [{"data": [[1.72920594E12, 49.95], [1.72920624E12, 49.35], [1.7292063E12, 52.28333333333333], [1.7292066E12, 50.03333333333333], [1.7292069E12, 50.0], [1.72920666E12, 50.016666666666666], [1.729206E12, 50.233333333333334], [1.72920702E12, 50.733333333333334], [1.72920606E12, 50.13333333333333], [1.72920696E12, 49.25], [1.72920636E12, 50.0], [1.72920642E12, 49.833333333333336], [1.72920708E12, 18.65], [1.72920678E12, 48.81666666666667], [1.72920582E12, 30.483333333333334], [1.72920672E12, 49.983333333333334], [1.72920612E12, 50.016666666666666], [1.72920618E12, 48.36666666666667], [1.72920684E12, 51.166666666666664], [1.72920648E12, 50.03333333333333], [1.72920654E12, 50.1], [1.72920588E12, 50.46666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72920582E12, 0.016666666666666666], [1.72920588E12, 0.08333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72920708E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72920582E12, "maxY": 52.28333333333333, "series": [{"data": [[1.72920594E12, 49.95], [1.72920624E12, 49.35], [1.7292063E12, 52.28333333333333], [1.7292066E12, 50.03333333333333], [1.7292069E12, 50.0], [1.72920666E12, 50.016666666666666], [1.729206E12, 50.233333333333334], [1.72920702E12, 50.733333333333334], [1.72920606E12, 50.13333333333333], [1.72920696E12, 49.25], [1.72920636E12, 50.0], [1.72920642E12, 49.833333333333336], [1.72920708E12, 18.65], [1.72920678E12, 48.81666666666667], [1.72920582E12, 30.483333333333334], [1.72920672E12, 49.983333333333334], [1.72920612E12, 50.016666666666666], [1.72920618E12, 48.36666666666667], [1.72920684E12, 51.166666666666664], [1.72920648E12, 50.03333333333333], [1.72920654E12, 50.1], [1.72920588E12, 50.46666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72920582E12, 0.016666666666666666], [1.72920588E12, 0.08333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72920708E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

