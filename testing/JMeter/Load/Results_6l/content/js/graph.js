/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 154.0, "minX": 0.0, "maxY": 178888.0, "series": [{"data": [[0.0, 154.0], [0.1, 162.0], [0.2, 163.0], [0.3, 164.0], [0.4, 165.0], [0.5, 165.0], [0.6, 166.0], [0.7, 166.0], [0.8, 167.0], [0.9, 167.0], [1.0, 167.0], [1.1, 167.0], [1.2, 168.0], [1.3, 168.0], [1.4, 168.0], [1.5, 168.0], [1.6, 168.0], [1.7, 169.0], [1.8, 169.0], [1.9, 169.0], [2.0, 169.0], [2.1, 169.0], [2.2, 169.0], [2.3, 169.0], [2.4, 170.0], [2.5, 170.0], [2.6, 170.0], [2.7, 170.0], [2.8, 170.0], [2.9, 170.0], [3.0, 170.0], [3.1, 170.0], [3.2, 171.0], [3.3, 171.0], [3.4, 171.0], [3.5, 171.0], [3.6, 171.0], [3.7, 171.0], [3.8, 171.0], [3.9, 171.0], [4.0, 171.0], [4.1, 171.0], [4.2, 172.0], [4.3, 172.0], [4.4, 172.0], [4.5, 172.0], [4.6, 172.0], [4.7, 172.0], [4.8, 172.0], [4.9, 172.0], [5.0, 172.0], [5.1, 172.0], [5.2, 172.0], [5.3, 172.0], [5.4, 172.0], [5.5, 173.0], [5.6, 173.0], [5.7, 173.0], [5.8, 173.0], [5.9, 173.0], [6.0, 173.0], [6.1, 173.0], [6.2, 173.0], [6.3, 173.0], [6.4, 173.0], [6.5, 173.0], [6.6, 173.0], [6.7, 173.0], [6.8, 173.0], [6.9, 174.0], [7.0, 174.0], [7.1, 174.0], [7.2, 174.0], [7.3, 174.0], [7.4, 174.0], [7.5, 174.0], [7.6, 174.0], [7.7, 174.0], [7.8, 174.0], [7.9, 174.0], [8.0, 174.0], [8.1, 174.0], [8.2, 174.0], [8.3, 174.0], [8.4, 174.0], [8.5, 174.0], [8.6, 174.0], [8.7, 175.0], [8.8, 175.0], [8.9, 175.0], [9.0, 175.0], [9.1, 175.0], [9.2, 175.0], [9.3, 175.0], [9.4, 175.0], [9.5, 175.0], [9.6, 175.0], [9.7, 175.0], [9.8, 175.0], [9.9, 175.0], [10.0, 175.0], [10.1, 175.0], [10.2, 175.0], [10.3, 175.0], [10.4, 175.0], [10.5, 175.0], [10.6, 176.0], [10.7, 176.0], [10.8, 176.0], [10.9, 176.0], [11.0, 176.0], [11.1, 176.0], [11.2, 176.0], [11.3, 176.0], [11.4, 176.0], [11.5, 176.0], [11.6, 176.0], [11.7, 176.0], [11.8, 176.0], [11.9, 176.0], [12.0, 176.0], [12.1, 176.0], [12.2, 176.0], [12.3, 176.0], [12.4, 176.0], [12.5, 176.0], [12.6, 176.0], [12.7, 176.0], [12.8, 176.0], [12.9, 177.0], [13.0, 177.0], [13.1, 177.0], [13.2, 177.0], [13.3, 177.0], [13.4, 177.0], [13.5, 177.0], [13.6, 177.0], [13.7, 177.0], [13.8, 177.0], [13.9, 177.0], [14.0, 177.0], [14.1, 177.0], [14.2, 177.0], [14.3, 177.0], [14.4, 177.0], [14.5, 177.0], [14.6, 177.0], [14.7, 177.0], [14.8, 177.0], [14.9, 177.0], [15.0, 177.0], [15.1, 177.0], [15.2, 177.0], [15.3, 178.0], [15.4, 178.0], [15.5, 178.0], [15.6, 178.0], [15.7, 178.0], [15.8, 178.0], [15.9, 178.0], [16.0, 178.0], [16.1, 178.0], [16.2, 178.0], [16.3, 178.0], [16.4, 178.0], [16.5, 178.0], [16.6, 178.0], [16.7, 178.0], [16.8, 178.0], [16.9, 178.0], [17.0, 178.0], [17.1, 178.0], [17.2, 178.0], [17.3, 178.0], [17.4, 178.0], [17.5, 178.0], [17.6, 178.0], [17.7, 178.0], [17.8, 179.0], [17.9, 179.0], [18.0, 179.0], [18.1, 179.0], [18.2, 179.0], [18.3, 179.0], [18.4, 179.0], [18.5, 179.0], [18.6, 179.0], [18.7, 179.0], [18.8, 179.0], [18.9, 179.0], [19.0, 179.0], [19.1, 179.0], [19.2, 179.0], [19.3, 179.0], [19.4, 179.0], [19.5, 179.0], [19.6, 179.0], [19.7, 179.0], [19.8, 179.0], [19.9, 179.0], [20.0, 179.0], [20.1, 179.0], [20.2, 179.0], [20.3, 179.0], [20.4, 180.0], [20.5, 180.0], [20.6, 180.0], [20.7, 180.0], [20.8, 180.0], [20.9, 180.0], [21.0, 180.0], [21.1, 180.0], [21.2, 180.0], [21.3, 180.0], [21.4, 180.0], [21.5, 180.0], [21.6, 180.0], [21.7, 180.0], [21.8, 180.0], [21.9, 180.0], [22.0, 180.0], [22.1, 180.0], [22.2, 180.0], [22.3, 180.0], [22.4, 180.0], [22.5, 180.0], [22.6, 180.0], [22.7, 180.0], [22.8, 180.0], [22.9, 180.0], [23.0, 180.0], [23.1, 180.0], [23.2, 180.0], [23.3, 180.0], [23.4, 181.0], [23.5, 181.0], [23.6, 181.0], [23.7, 181.0], [23.8, 181.0], [23.9, 181.0], [24.0, 181.0], [24.1, 181.0], [24.2, 181.0], [24.3, 181.0], [24.4, 181.0], [24.5, 181.0], [24.6, 181.0], [24.7, 181.0], [24.8, 181.0], [24.9, 181.0], [25.0, 181.0], [25.1, 181.0], [25.2, 181.0], [25.3, 181.0], [25.4, 181.0], [25.5, 181.0], [25.6, 181.0], [25.7, 181.0], [25.8, 181.0], [25.9, 181.0], [26.0, 181.0], [26.1, 181.0], [26.2, 181.0], [26.3, 182.0], [26.4, 182.0], [26.5, 182.0], [26.6, 182.0], [26.7, 182.0], [26.8, 182.0], [26.9, 182.0], [27.0, 182.0], [27.1, 182.0], [27.2, 182.0], [27.3, 182.0], [27.4, 182.0], [27.5, 182.0], [27.6, 182.0], [27.7, 182.0], [27.8, 182.0], [27.9, 182.0], [28.0, 182.0], [28.1, 182.0], [28.2, 182.0], [28.3, 182.0], [28.4, 182.0], [28.5, 182.0], [28.6, 182.0], [28.7, 182.0], [28.8, 182.0], [28.9, 182.0], [29.0, 182.0], [29.1, 183.0], [29.2, 183.0], [29.3, 183.0], [29.4, 183.0], [29.5, 183.0], [29.6, 183.0], [29.7, 183.0], [29.8, 183.0], [29.9, 183.0], [30.0, 183.0], [30.1, 183.0], [30.2, 183.0], [30.3, 183.0], [30.4, 183.0], [30.5, 183.0], [30.6, 183.0], [30.7, 183.0], [30.8, 183.0], [30.9, 183.0], [31.0, 183.0], [31.1, 183.0], [31.2, 183.0], [31.3, 183.0], [31.4, 183.0], [31.5, 183.0], [31.6, 183.0], [31.7, 183.0], [31.8, 183.0], [31.9, 183.0], [32.0, 184.0], [32.1, 184.0], [32.2, 184.0], [32.3, 184.0], [32.4, 184.0], [32.5, 184.0], [32.6, 184.0], [32.7, 184.0], [32.8, 184.0], [32.9, 184.0], [33.0, 184.0], [33.1, 184.0], [33.2, 184.0], [33.3, 184.0], [33.4, 184.0], [33.5, 184.0], [33.6, 184.0], [33.7, 184.0], [33.8, 184.0], [33.9, 184.0], [34.0, 184.0], [34.1, 184.0], [34.2, 184.0], [34.3, 184.0], [34.4, 184.0], [34.5, 184.0], [34.6, 184.0], [34.7, 184.0], [34.8, 185.0], [34.9, 185.0], [35.0, 185.0], [35.1, 185.0], [35.2, 185.0], [35.3, 185.0], [35.4, 185.0], [35.5, 185.0], [35.6, 185.0], [35.7, 185.0], [35.8, 185.0], [35.9, 185.0], [36.0, 185.0], [36.1, 185.0], [36.2, 185.0], [36.3, 185.0], [36.4, 185.0], [36.5, 185.0], [36.6, 185.0], [36.7, 185.0], [36.8, 185.0], [36.9, 185.0], [37.0, 185.0], [37.1, 185.0], [37.2, 185.0], [37.3, 185.0], [37.4, 185.0], [37.5, 186.0], [37.6, 186.0], [37.7, 186.0], [37.8, 186.0], [37.9, 186.0], [38.0, 186.0], [38.1, 186.0], [38.2, 186.0], [38.3, 186.0], [38.4, 186.0], [38.5, 186.0], [38.6, 186.0], [38.7, 186.0], [38.8, 186.0], [38.9, 186.0], [39.0, 186.0], [39.1, 186.0], [39.2, 186.0], [39.3, 186.0], [39.4, 186.0], [39.5, 186.0], [39.6, 186.0], [39.7, 186.0], [39.8, 186.0], [39.9, 186.0], [40.0, 186.0], [40.1, 187.0], [40.2, 187.0], [40.3, 187.0], [40.4, 187.0], [40.5, 187.0], [40.6, 187.0], [40.7, 187.0], [40.8, 187.0], [40.9, 187.0], [41.0, 187.0], [41.1, 187.0], [41.2, 187.0], [41.3, 187.0], [41.4, 187.0], [41.5, 187.0], [41.6, 187.0], [41.7, 187.0], [41.8, 187.0], [41.9, 187.0], [42.0, 187.0], [42.1, 187.0], [42.2, 187.0], [42.3, 187.0], [42.4, 187.0], [42.5, 188.0], [42.6, 188.0], [42.7, 188.0], [42.8, 188.0], [42.9, 188.0], [43.0, 188.0], [43.1, 188.0], [43.2, 188.0], [43.3, 188.0], [43.4, 188.0], [43.5, 188.0], [43.6, 188.0], [43.7, 188.0], [43.8, 188.0], [43.9, 188.0], [44.0, 188.0], [44.1, 188.0], [44.2, 188.0], [44.3, 188.0], [44.4, 188.0], [44.5, 188.0], [44.6, 188.0], [44.7, 188.0], [44.8, 188.0], [44.9, 189.0], [45.0, 189.0], [45.1, 189.0], [45.2, 189.0], [45.3, 189.0], [45.4, 189.0], [45.5, 189.0], [45.6, 189.0], [45.7, 189.0], [45.8, 189.0], [45.9, 189.0], [46.0, 189.0], [46.1, 189.0], [46.2, 189.0], [46.3, 189.0], [46.4, 189.0], [46.5, 189.0], [46.6, 189.0], [46.7, 189.0], [46.8, 189.0], [46.9, 189.0], [47.0, 190.0], [47.1, 190.0], [47.2, 190.0], [47.3, 190.0], [47.4, 190.0], [47.5, 190.0], [47.6, 190.0], [47.7, 190.0], [47.8, 190.0], [47.9, 190.0], [48.0, 190.0], [48.1, 190.0], [48.2, 190.0], [48.3, 190.0], [48.4, 190.0], [48.5, 190.0], [48.6, 190.0], [48.7, 190.0], [48.8, 190.0], [48.9, 190.0], [49.0, 190.0], [49.1, 191.0], [49.2, 191.0], [49.3, 191.0], [49.4, 191.0], [49.5, 191.0], [49.6, 191.0], [49.7, 191.0], [49.8, 191.0], [49.9, 191.0], [50.0, 191.0], [50.1, 191.0], [50.2, 191.0], [50.3, 191.0], [50.4, 191.0], [50.5, 191.0], [50.6, 191.0], [50.7, 191.0], [50.8, 191.0], [50.9, 191.0], [51.0, 192.0], [51.1, 192.0], [51.2, 192.0], [51.3, 192.0], [51.4, 192.0], [51.5, 192.0], [51.6, 192.0], [51.7, 192.0], [51.8, 192.0], [51.9, 192.0], [52.0, 192.0], [52.1, 192.0], [52.2, 192.0], [52.3, 192.0], [52.4, 192.0], [52.5, 192.0], [52.6, 193.0], [52.7, 193.0], [52.8, 193.0], [52.9, 193.0], [53.0, 193.0], [53.1, 193.0], [53.2, 193.0], [53.3, 193.0], [53.4, 193.0], [53.5, 193.0], [53.6, 193.0], [53.7, 193.0], [53.8, 193.0], [53.9, 193.0], [54.0, 193.0], [54.1, 193.0], [54.2, 194.0], [54.3, 194.0], [54.4, 194.0], [54.5, 194.0], [54.6, 194.0], [54.7, 194.0], [54.8, 194.0], [54.9, 194.0], [55.0, 194.0], [55.1, 194.0], [55.2, 194.0], [55.3, 194.0], [55.4, 194.0], [55.5, 194.0], [55.6, 194.0], [55.7, 194.0], [55.8, 195.0], [55.9, 195.0], [56.0, 195.0], [56.1, 195.0], [56.2, 195.0], [56.3, 195.0], [56.4, 195.0], [56.5, 195.0], [56.6, 195.0], [56.7, 195.0], [56.8, 195.0], [56.9, 195.0], [57.0, 195.0], [57.1, 196.0], [57.2, 196.0], [57.3, 196.0], [57.4, 196.0], [57.5, 196.0], [57.6, 196.0], [57.7, 196.0], [57.8, 196.0], [57.9, 196.0], [58.0, 196.0], [58.1, 196.0], [58.2, 196.0], [58.3, 197.0], [58.4, 197.0], [58.5, 197.0], [58.6, 197.0], [58.7, 197.0], [58.8, 197.0], [58.9, 197.0], [59.0, 197.0], [59.1, 197.0], [59.2, 197.0], [59.3, 197.0], [59.4, 197.0], [59.5, 198.0], [59.6, 198.0], [59.7, 198.0], [59.8, 198.0], [59.9, 198.0], [60.0, 198.0], [60.1, 198.0], [60.2, 198.0], [60.3, 198.0], [60.4, 198.0], [60.5, 199.0], [60.6, 199.0], [60.7, 199.0], [60.8, 199.0], [60.9, 199.0], [61.0, 199.0], [61.1, 199.0], [61.2, 199.0], [61.3, 199.0], [61.4, 199.0], [61.5, 199.0], [61.6, 200.0], [61.7, 200.0], [61.8, 200.0], [61.9, 200.0], [62.0, 200.0], [62.1, 200.0], [62.2, 200.0], [62.3, 200.0], [62.4, 200.0], [62.5, 200.0], [62.6, 201.0], [62.7, 201.0], [62.8, 201.0], [62.9, 201.0], [63.0, 201.0], [63.1, 201.0], [63.2, 201.0], [63.3, 201.0], [63.4, 201.0], [63.5, 202.0], [63.6, 202.0], [63.7, 202.0], [63.8, 202.0], [63.9, 202.0], [64.0, 202.0], [64.1, 202.0], [64.2, 202.0], [64.3, 202.0], [64.4, 203.0], [64.5, 203.0], [64.6, 203.0], [64.7, 203.0], [64.8, 203.0], [64.9, 203.0], [65.0, 203.0], [65.1, 203.0], [65.2, 204.0], [65.3, 204.0], [65.4, 204.0], [65.5, 204.0], [65.6, 204.0], [65.7, 204.0], [65.8, 204.0], [65.9, 204.0], [66.0, 205.0], [66.1, 205.0], [66.2, 205.0], [66.3, 205.0], [66.4, 205.0], [66.5, 205.0], [66.6, 205.0], [66.7, 205.0], [66.8, 206.0], [66.9, 206.0], [67.0, 206.0], [67.1, 206.0], [67.2, 206.0], [67.3, 206.0], [67.4, 206.0], [67.5, 206.0], [67.6, 207.0], [67.7, 207.0], [67.8, 207.0], [67.9, 207.0], [68.0, 207.0], [68.1, 207.0], [68.2, 207.0], [68.3, 208.0], [68.4, 208.0], [68.5, 208.0], [68.6, 208.0], [68.7, 208.0], [68.8, 208.0], [68.9, 208.0], [69.0, 209.0], [69.1, 209.0], [69.2, 209.0], [69.3, 209.0], [69.4, 209.0], [69.5, 209.0], [69.6, 209.0], [69.7, 210.0], [69.8, 210.0], [69.9, 210.0], [70.0, 210.0], [70.1, 210.0], [70.2, 210.0], [70.3, 211.0], [70.4, 211.0], [70.5, 211.0], [70.6, 211.0], [70.7, 211.0], [70.8, 212.0], [70.9, 212.0], [71.0, 212.0], [71.1, 212.0], [71.2, 212.0], [71.3, 212.0], [71.4, 213.0], [71.5, 213.0], [71.6, 213.0], [71.7, 213.0], [71.8, 213.0], [71.9, 213.0], [72.0, 214.0], [72.1, 214.0], [72.2, 214.0], [72.3, 214.0], [72.4, 214.0], [72.5, 215.0], [72.6, 215.0], [72.7, 215.0], [72.8, 215.0], [72.9, 215.0], [73.0, 216.0], [73.1, 216.0], [73.2, 216.0], [73.3, 216.0], [73.4, 216.0], [73.5, 217.0], [73.6, 217.0], [73.7, 217.0], [73.8, 217.0], [73.9, 218.0], [74.0, 218.0], [74.1, 218.0], [74.2, 218.0], [74.3, 218.0], [74.4, 219.0], [74.5, 219.0], [74.6, 219.0], [74.7, 219.0], [74.8, 219.0], [74.9, 220.0], [75.0, 220.0], [75.1, 220.0], [75.2, 220.0], [75.3, 221.0], [75.4, 221.0], [75.5, 221.0], [75.6, 221.0], [75.7, 222.0], [75.8, 222.0], [75.9, 222.0], [76.0, 222.0], [76.1, 223.0], [76.2, 223.0], [76.3, 223.0], [76.4, 223.0], [76.5, 224.0], [76.6, 224.0], [76.7, 224.0], [76.8, 224.0], [76.9, 225.0], [77.0, 225.0], [77.1, 225.0], [77.2, 226.0], [77.3, 226.0], [77.4, 226.0], [77.5, 226.0], [77.6, 227.0], [77.7, 227.0], [77.8, 227.0], [77.9, 228.0], [78.0, 228.0], [78.1, 228.0], [78.2, 229.0], [78.3, 229.0], [78.4, 229.0], [78.5, 230.0], [78.6, 230.0], [78.7, 231.0], [78.8, 231.0], [78.9, 231.0], [79.0, 232.0], [79.1, 232.0], [79.2, 232.0], [79.3, 233.0], [79.4, 233.0], [79.5, 234.0], [79.6, 234.0], [79.7, 234.0], [79.8, 235.0], [79.9, 235.0], [80.0, 236.0], [80.1, 236.0], [80.2, 237.0], [80.3, 237.0], [80.4, 238.0], [80.5, 238.0], [80.6, 239.0], [80.7, 239.0], [80.8, 240.0], [80.9, 240.0], [81.0, 241.0], [81.1, 241.0], [81.2, 242.0], [81.3, 242.0], [81.4, 243.0], [81.5, 243.0], [81.6, 244.0], [81.7, 245.0], [81.8, 245.0], [81.9, 246.0], [82.0, 246.0], [82.1, 247.0], [82.2, 247.0], [82.3, 248.0], [82.4, 249.0], [82.5, 249.0], [82.6, 250.0], [82.7, 251.0], [82.8, 252.0], [82.9, 252.0], [83.0, 253.0], [83.1, 254.0], [83.2, 255.0], [83.3, 255.0], [83.4, 256.0], [83.5, 257.0], [83.6, 258.0], [83.7, 258.0], [83.8, 259.0], [83.9, 260.0], [84.0, 261.0], [84.1, 262.0], [84.2, 263.0], [84.3, 264.0], [84.4, 265.0], [84.5, 266.0], [84.6, 267.0], [84.7, 268.0], [84.8, 269.0], [84.9, 270.0], [85.0, 271.0], [85.1, 272.0], [85.2, 273.0], [85.3, 274.0], [85.4, 276.0], [85.5, 277.0], [85.6, 279.0], [85.7, 280.0], [85.8, 281.0], [85.9, 283.0], [86.0, 284.0], [86.1, 286.0], [86.2, 287.0], [86.3, 289.0], [86.4, 290.0], [86.5, 292.0], [86.6, 294.0], [86.7, 295.0], [86.8, 297.0], [86.9, 298.0], [87.0, 300.0], [87.1, 302.0], [87.2, 303.0], [87.3, 305.0], [87.4, 307.0], [87.5, 308.0], [87.6, 310.0], [87.7, 312.0], [87.8, 314.0], [87.9, 316.0], [88.0, 318.0], [88.1, 321.0], [88.2, 323.0], [88.3, 326.0], [88.4, 329.0], [88.5, 332.0], [88.6, 334.0], [88.7, 336.0], [88.8, 338.0], [88.9, 340.0], [89.0, 344.0], [89.1, 346.0], [89.2, 350.0], [89.3, 353.0], [89.4, 357.0], [89.5, 360.0], [89.6, 363.0], [89.7, 366.0], [89.8, 370.0], [89.9, 374.0], [90.0, 378.0], [90.1, 383.0], [90.2, 386.0], [90.3, 391.0], [90.4, 395.0], [90.5, 398.0], [90.6, 403.0], [90.7, 408.0], [90.8, 413.0], [90.9, 418.0], [91.0, 422.0], [91.1, 427.0], [91.2, 433.0], [91.3, 436.0], [91.4, 441.0], [91.5, 446.0], [91.6, 451.0], [91.7, 455.0], [91.8, 460.0], [91.9, 465.0], [92.0, 469.0], [92.1, 474.0], [92.2, 479.0], [92.3, 484.0], [92.4, 489.0], [92.5, 493.0], [92.6, 499.0], [92.7, 505.0], [92.8, 510.0], [92.9, 515.0], [93.0, 521.0], [93.1, 526.0], [93.2, 533.0], [93.3, 539.0], [93.4, 546.0], [93.5, 553.0], [93.6, 561.0], [93.7, 569.0], [93.8, 580.0], [93.9, 590.0], [94.0, 599.0], [94.1, 609.0], [94.2, 623.0], [94.3, 635.0], [94.4, 650.0], [94.5, 663.0], [94.6, 682.0], [94.7, 700.0], [94.8, 718.0], [94.9, 737.0], [95.0, 760.0], [95.1, 781.0], [95.2, 805.0], [95.3, 831.0], [95.4, 847.0], [95.5, 872.0], [95.6, 902.0], [95.7, 936.0], [95.8, 978.0], [95.9, 1016.0], [96.0, 1061.0], [96.1, 1125.0], [96.2, 1174.0], [96.3, 1184.0], [96.4, 1189.0], [96.5, 1192.0], [96.6, 1196.0], [96.7, 1201.0], [96.8, 1207.0], [96.9, 1217.0], [97.0, 1226.0], [97.1, 1237.0], [97.2, 1251.0], [97.3, 1264.0], [97.4, 1281.0], [97.5, 1299.0], [97.6, 1320.0], [97.7, 1340.0], [97.8, 1362.0], [97.9, 1385.0], [98.0, 1416.0], [98.1, 1456.0], [98.2, 1515.0], [98.3, 1580.0], [98.4, 1654.0], [98.5, 1749.0], [98.6, 1838.0], [98.7, 1992.0], [98.8, 2182.0], [98.9, 2413.0], [99.0, 2707.0], [99.1, 3212.0], [99.2, 3513.0], [99.3, 3995.0], [99.4, 4583.0], [99.5, 5487.0], [99.6, 7222.0], [99.7, 8925.0], [99.8, 12984.0], [99.9, 17002.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 44941.0, "series": [{"data": [[100.0, 44941.0], [38500.0, 1.0], [200.0, 18552.0], [300.0, 2599.0], [400.0, 1507.0], [500.0, 1027.0], [600.0, 504.0], [700.0, 348.0], [178800.0, 1.0], [800.0, 297.0], [900.0, 197.0], [1000.0, 149.0], [1100.0, 444.0], [1200.0, 612.0], [1300.0, 331.0], [1400.0, 156.0], [1500.0, 116.0], [1600.0, 101.0], [1700.0, 69.0], [1800.0, 63.0], [1900.0, 44.0], [2000.0, 42.0], [2100.0, 32.0], [2200.0, 43.0], [2300.0, 22.0], [2400.0, 25.0], [2500.0, 22.0], [2600.0, 25.0], [2700.0, 16.0], [2800.0, 8.0], [2900.0, 17.0], [3000.0, 11.0], [3100.0, 16.0], [3200.0, 33.0], [3300.0, 18.0], [3400.0, 24.0], [3500.0, 23.0], [3700.0, 15.0], [3600.0, 23.0], [3800.0, 7.0], [3900.0, 12.0], [4000.0, 9.0], [4300.0, 17.0], [4200.0, 12.0], [4100.0, 13.0], [4400.0, 10.0], [4600.0, 13.0], [4500.0, 12.0], [4700.0, 8.0], [4800.0, 1.0], [5100.0, 8.0], [4900.0, 8.0], [5000.0, 6.0], [5300.0, 16.0], [5200.0, 6.0], [5400.0, 6.0], [5600.0, 6.0], [5500.0, 7.0], [5700.0, 4.0], [5800.0, 4.0], [5900.0, 3.0], [6000.0, 6.0], [6100.0, 5.0], [6300.0, 4.0], [6200.0, 5.0], [6600.0, 2.0], [6500.0, 3.0], [6400.0, 2.0], [6800.0, 3.0], [6700.0, 6.0], [6900.0, 1.0], [7100.0, 5.0], [7000.0, 4.0], [7200.0, 6.0], [7400.0, 6.0], [7600.0, 8.0], [7500.0, 10.0], [7800.0, 6.0], [7900.0, 5.0], [7700.0, 4.0], [8100.0, 5.0], [8000.0, 3.0], [8400.0, 3.0], [8700.0, 3.0], [8200.0, 6.0], [8600.0, 2.0], [8500.0, 3.0], [8300.0, 1.0], [8900.0, 5.0], [8800.0, 3.0], [9000.0, 2.0], [9100.0, 2.0], [9400.0, 1.0], [9600.0, 2.0], [9500.0, 2.0], [9300.0, 2.0], [9900.0, 2.0], [10100.0, 2.0], [10000.0, 1.0], [10400.0, 1.0], [10600.0, 6.0], [10300.0, 1.0], [10500.0, 3.0], [10700.0, 1.0], [10800.0, 3.0], [10900.0, 3.0], [11000.0, 2.0], [11200.0, 4.0], [11100.0, 2.0], [11400.0, 2.0], [11300.0, 3.0], [11700.0, 2.0], [11600.0, 1.0], [11500.0, 1.0], [12200.0, 2.0], [11900.0, 2.0], [12000.0, 2.0], [12100.0, 1.0], [12300.0, 3.0], [12600.0, 2.0], [12400.0, 1.0], [12700.0, 3.0], [12500.0, 1.0], [12800.0, 1.0], [13100.0, 2.0], [13200.0, 2.0], [13300.0, 2.0], [12900.0, 1.0], [13000.0, 1.0], [13700.0, 1.0], [13600.0, 3.0], [13800.0, 2.0], [13500.0, 3.0], [13400.0, 2.0], [14000.0, 2.0], [14200.0, 1.0], [14100.0, 1.0], [14700.0, 1.0], [14600.0, 1.0], [14800.0, 3.0], [14500.0, 2.0], [15000.0, 1.0], [15200.0, 2.0], [14900.0, 1.0], [15300.0, 1.0], [15600.0, 5.0], [15800.0, 8.0], [15500.0, 10.0], [15700.0, 3.0], [15400.0, 1.0], [15900.0, 1.0], [16000.0, 2.0], [16100.0, 1.0], [16800.0, 3.0], [16600.0, 1.0], [17000.0, 2.0], [16400.0, 1.0], [17800.0, 3.0], [18000.0, 1.0], [18800.0, 1.0], [19000.0, 1.0], [20200.0, 1.0], [20400.0, 1.0], [20000.0, 1.0], [21200.0, 2.0], [21000.0, 1.0], [21600.0, 1.0], [22000.0, 1.0], [23400.0, 1.0], [23200.0, 1.0], [23800.0, 2.0], [24400.0, 1.0], [24800.0, 1.0], [25000.0, 1.0], [24600.0, 1.0], [25600.0, 1.0], [27400.0, 1.0], [26800.0, 1.0], [27000.0, 1.0], [29400.0, 2.0], [29800.0, 1.0], [31200.0, 1.0], [30800.0, 1.0], [32800.0, 1.0], [41200.0, 1.0], [36700.0, 1.0], [77400.0, 1.0], [112500.0, 1.0], [16900.0, 2.0], [17100.0, 1.0], [17700.0, 3.0], [18300.0, 2.0], [18900.0, 2.0], [20300.0, 2.0], [19700.0, 1.0], [20100.0, 1.0], [19900.0, 2.0], [20700.0, 1.0], [20900.0, 1.0], [21300.0, 1.0], [21700.0, 2.0], [22300.0, 1.0], [23300.0, 1.0], [24900.0, 1.0], [25300.0, 1.0], [26100.0, 1.0], [27300.0, 1.0], [26900.0, 1.0], [28500.0, 1.0], [27700.0, 2.0], [29300.0, 1.0], [31300.0, 1.0], [32700.0, 1.0], [51000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 178800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1336.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 67617.0, "series": [{"data": [[0.0, 67617.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 4047.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1336.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.02122547056467, "minX": 1.72917792E12, "maxY": 198.25806451612902, "series": [{"data": [[1.7291793E12, 9.92502975009917], [1.7291796E12, 11.08326661329062], [1.729179E12, 9.535488958990522], [1.7291787E12, 10.612826603325429], [1.72917888E12, 9.60559999999998], [1.72917858E12, 13.799599198396777], [1.72917828E12, 12.516979624450666], [1.72917798E12, 103.5001845699522], [1.72917912E12, 9.106671993607682], [1.72917882E12, 9.650139944022392], [1.72917852E12, 9.8925586947871], [1.72917822E12, 13.060435132957322], [1.7291784E12, 10.231574708014515], [1.7291781E12, 22.497066875244467], [1.72917942E12, 9.185599999999999], [1.72917972E12, 15.983935742971896], [1.72917864E12, 21.536506655909623], [1.72917834E12, 11.622500980007834], [1.72917804E12, 22.672442244224413], [1.72917966E12, 10.12834866053579], [1.72917792E12, 198.25806451612902], [1.72917954E12, 9.305477808876443], [1.72917924E12, 13.529601288763597], [1.72917894E12, 9.636769480519488], [1.72917816E12, 21.58691288639103], [1.72917918E12, 12.167935871743502], [1.72917948E12, 9.645458183273313], [1.72917936E12, 9.77329068372655], [1.72917906E12, 9.02122547056467], [1.72917876E12, 9.476837060702868], [1.72917846E12, 12.078705553336007]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72917972E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 193.42188575361246, "minX": 1.0, "maxY": 15633.0, "series": [{"data": [[2.0, 230.60209424083777], [3.0, 242.52112676056316], [4.0, 214.3702830188681], [5.0, 210.46353322528378], [6.0, 209.29777365491617], [7.0, 203.0629257216994], [8.0, 193.42188575361246], [9.0, 203.6697860128511], [10.0, 219.41391237509626], [11.0, 230.503142517411], [12.0, 295.3254742547417], [13.0, 263.40805051302334], [14.0, 332.62350494019677], [15.0, 296.3574244415244], [16.0, 311.1472602739722], [17.0, 338.4937238493724], [18.0, 462.58599508599497], [19.0, 358.5953757225435], [20.0, 416.89179755671944], [21.0, 388.2012195121953], [22.0, 625.3438914027147], [23.0, 500.35752688172033], [24.0, 810.3258426966293], [25.0, 504.0642201834867], [26.0, 753.1654929577472], [27.0, 647.21484375], [28.0, 624.5639810426542], [29.0, 689.7127071823209], [30.0, 702.9562841530054], [31.0, 634.9876543209878], [33.0, 802.2214765100673], [32.0, 993.9298245614026], [35.0, 969.7419354838713], [34.0, 886.2403100775191], [37.0, 616.0719999999999], [36.0, 854.7553956834535], [39.0, 1058.581967213115], [38.0, 803.5182481751829], [41.0, 1649.364485981309], [40.0, 659.3951612903226], [43.0, 1282.1348314606732], [42.0, 1314.294117647059], [45.0, 1442.6296296296302], [44.0, 1034.8307692307694], [47.0, 1190.9852941176475], [46.0, 928.3442622950815], [49.0, 916.686567164179], [48.0, 1460.9705882352944], [51.0, 616.8787878787876], [50.0, 1377.0481927710844], [53.0, 908.6981132075467], [52.0, 571.9682539682539], [55.0, 739.3906249999999], [54.0, 1167.8636363636367], [57.0, 1073.7368421052633], [56.0, 1212.2500000000002], [59.0, 759.0270270270272], [58.0, 744.140625], [61.0, 1145.459016393443], [60.0, 1482.7702702702697], [63.0, 2104.333333333333], [62.0, 949.1607142857144], [67.0, 2809.5416666666674], [66.0, 1389.9655172413793], [64.0, 1293.4615384615383], [65.0, 2201.25], [71.0, 836.8846153846154], [70.0, 964.72], [69.0, 882.375], [68.0, 1006.4814814814816], [75.0, 2530.925], [74.0, 2231.285714285714], [73.0, 1130.1935483870968], [72.0, 1102.7096774193549], [79.0, 2207.645161290323], [78.0, 1389.0645161290324], [77.0, 1590.0624999999995], [76.0, 2579.482758620689], [83.0, 2605.937500000001], [82.0, 2654.7777777777783], [81.0, 1350.2999999999997], [80.0, 1184.272727272727], [87.0, 2214.2142857142862], [86.0, 3030.692307692307], [85.0, 1400.6], [84.0, 1074.923076923077], [91.0, 2236.0], [90.0, 3377.1875], [89.0, 3488.5789473684213], [88.0, 2952.8461538461543], [95.0, 3531.0000000000005], [94.0, 2510.0], [93.0, 2154.2], [92.0, 3693.9999999999995], [99.0, 3168.5], [98.0, 2215.909090909091], [97.0, 4900.272727272728], [96.0, 2529.3333333333335], [103.0, 4772.75], [102.0, 4529.285714285714], [101.0, 879.25], [100.0, 3820.222222222222], [107.0, 4702.625], [106.0, 8015.666666666667], [105.0, 6050.333333333334], [104.0, 5645.0], [111.0, 3455.833333333333], [110.0, 5349.8], [109.0, 971.9999999999999], [108.0, 2089.0], [115.0, 1272.4], [114.0, 2693.0], [113.0, 748.6666666666666], [112.0, 548.2857142857142], [119.0, 1988.6666666666665], [118.0, 1428.8333333333333], [117.0, 1359.4], [116.0, 811.5], [123.0, 3193.3333333333335], [122.0, 3782.8], [121.0, 2973.25], [120.0, 3016.0], [127.0, 3387.6363636363635], [126.0, 3238.5714285714284], [125.0, 3451.6666666666665], [124.0, 3502.0], [135.0, 2508.0000000000005], [134.0, 1863.5714285714287], [133.0, 2500.1818181818185], [132.0, 608.7142857142857], [131.0, 7182.142857142857], [129.0, 6694.5], [130.0, 1480.5], [128.0, 3206.571428571429], [142.0, 3319.0], [143.0, 1415.5714285714284], [141.0, 1243.818181818182], [140.0, 1705.0000000000002], [139.0, 1560.0], [138.0, 1040.7777777777776], [137.0, 2274.272727272727], [136.0, 2980.416666666667], [150.0, 1973.75], [149.0, 4454.0], [148.0, 2216.3333333333335], [147.0, 1906.3333333333333], [146.0, 3880.454545454545], [145.0, 1530.75], [144.0, 7434.799999999998], [151.0, 2648.8333333333335], [159.0, 4224.25], [158.0, 1118.0], [157.0, 1846.8], [156.0, 5297.666666666667], [155.0, 3609.555555555555], [153.0, 263.0], [152.0, 4589.333333333333], [154.0, 3631.0], [167.0, 3357.818181818182], [166.0, 1464.1666666666667], [165.0, 3587.6000000000004], [164.0, 1853.1999999999998], [163.0, 1503.3333333333335], [162.0, 2677.5], [161.0, 1152.3333333333335], [160.0, 1086.75], [175.0, 1582.6], [174.0, 1473.75], [173.0, 2100.8], [172.0, 1925.8], [170.0, 2132.4166666666665], [169.0, 2417.222222222222], [168.0, 5070.083333333333], [171.0, 2693.5], [183.0, 8452.0], [182.0, 446.0], [181.0, 2491.5], [180.0, 1771.0], [179.0, 1912.0], [178.0, 3081.6], [177.0, 2149.0], [176.0, 1063.25], [191.0, 2742.25], [190.0, 4183.0], [188.0, 6912.666666666666], [184.0, 1952.3333333333335], [189.0, 3320.75], [187.0, 515.5], [186.0, 5561.0], [185.0, 3657.0], [199.0, 2101.5], [198.0, 1469.8], [195.0, 5783.2], [194.0, 5694.666666666667], [192.0, 1561.0], [197.0, 496.0], [196.0, 552.0], [193.0, 10707.5], [206.0, 2576.0], [205.0, 4077.3571428571427], [204.0, 4312.333333333333], [203.0, 3756.4999999999995], [202.0, 3818.6666666666665], [200.0, 7078.4], [207.0, 964.0], [201.0, 2763.0], [208.0, 3087.0], [213.0, 4113.333333333333], [215.0, 5255.6], [214.0, 417.0], [212.0, 1529.0], [211.0, 1372.5], [209.0, 325.0], [218.0, 1737.0], [222.0, 4685.5], [223.0, 3411.5], [221.0, 583.0], [220.0, 305.0], [219.0, 999.5], [216.0, 3050.571428571429], [217.0, 1434.0], [225.0, 3100.375], [224.0, 2355.8], [228.0, 2651.6666666666665], [227.0, 1213.0], [226.0, 2475.5], [229.0, 3761.0], [231.0, 3524.8333333333335], [230.0, 2105.0], [235.0, 1563.0], [239.0, 7054.75], [238.0, 6735.571428571428], [237.0, 7425.499999999999], [236.0, 3542.5], [234.0, 6332.25], [233.0, 4614.4], [232.0, 7456.4], [240.0, 3920.4], [247.0, 8631.0], [246.0, 6024.333333333334], [245.0, 4232.333333333333], [244.0, 3225.5], [243.0, 1530.0], [242.0, 7081.0], [241.0, 10453.333333333332], [254.0, 1718.5], [255.0, 15633.0], [253.0, 6320.0], [252.0, 1081.0], [251.0, 2758.2000000000003], [250.0, 5336.666666666667], [249.0, 4097.142857142857], [248.0, 6024.5], [258.0, 6974.8], [263.0, 5146.0], [257.0, 6084.75], [262.0, 2038.0], [261.0, 4878.5], [260.0, 2516.2], [259.0, 2614.6], [256.0, 4119.4], [267.0, 3371.25], [266.0, 3332.8], [265.0, 3269.8888888888887], [271.0, 6062.0], [264.0, 3031.5], [270.0, 2474.0], [269.0, 7139.666666666666], [268.0, 2425.666666666667], [275.0, 5908.0], [273.0, 4916.4], [274.0, 2960.25], [278.0, 3063.333333333333], [276.0, 4381.0], [277.0, 4292.833333333334], [279.0, 3894.0], [272.0, 3308.0], [285.0, 2283.8571428571427], [284.0, 3388.75], [282.0, 6564.6], [283.0, 4670.0], [281.0, 6921.0], [280.0, 1991.3333333333335], [287.0, 7116.5], [286.0, 5062.333333333333], [291.0, 5342.666666666666], [297.0, 2125.25], [298.0, 2727.5], [299.0, 4021.0], [296.0, 3404.625], [303.0, 3097.0], [302.0, 4423.0], [301.0, 3335.5], [300.0, 7241.2], [295.0, 3565.4285714285716], [294.0, 3164.25], [293.0, 2823.75], [292.0, 2094.0], [290.0, 3624.3], [289.0, 3579.75], [288.0, 5982.25], [316.0, 4144.4], [304.0, 4487.666666666666], [307.0, 3365.6], [306.0, 5550.0], [305.0, 2911.0], [310.0, 5283.666666666666], [311.0, 8163.0], [309.0, 2395.2], [308.0, 4372.0], [315.0, 3320.3333333333335], [314.0, 4801.666666666666], [313.0, 3562.3333333333335], [312.0, 3990.0], [319.0, 3725.666666666667], [317.0, 5024.5], [318.0, 4344.0], [333.0, 2873.0], [330.0, 2447.5], [332.0, 4233.2], [323.0, 1196.0], [322.0, 2675.0], [321.0, 2635.0], [320.0, 5600.333333333333], [331.0, 3263.0], [334.0, 5217.0], [329.0, 1881.6666666666667], [328.0, 10912.0], [327.0, 5336.333333333333], [326.0, 5019.0], [325.0, 1893.0], [324.0, 3183.5], [1.0, 262.4404761904762]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[15.714863013698556, 345.93978082192046]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 334.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 66.13333333333334, "minX": 1.72917792E12, "maxY": 4383224.933333334, "series": [{"data": [[1.7291793E12, 4079105.0166666666], [1.7291796E12, 4041924.783333333], [1.729179E12, 4103412.05], [1.7291787E12, 4087194.533333333], [1.72917888E12, 4045149.65], [1.72917858E12, 4036968.683333333], [1.72917828E12, 4050004.1166666667], [1.72917798E12, 4383224.933333334], [1.72917912E12, 4050015.9166666665], [1.72917882E12, 4046758.8], [1.72917852E12, 4066196.1166666667], [1.72917822E12, 4016015.5166666666], [1.7291784E12, 4017654.3666666667], [1.7291781E12, 4137354.25], [1.72917942E12, 4045141.8333333335], [1.72917972E12, 402898.26666666666], [1.72917864E12, 4011120.4], [1.72917834E12, 4127679.683333333], [1.72917804E12, 3922126.933333333], [1.72917966E12, 4046781.25], [1.72917792E12, 50158.26666666667], [1.72917954E12, 4046775.1166666667], [1.72917924E12, 4017591.6666666665], [1.72917894E12, 3986907.5166666666], [1.72917816E12, 4030568.283333333], [1.72917918E12, 4036967.8333333335], [1.72917948E12, 4043532.7333333334], [1.72917936E12, 4046748.283333333], [1.72917906E12, 4040309.7333333334], [1.72917876E12, 4051601.966666667], [1.72917846E12, 4050018.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7291793E12, 5378.133333333333], [1.7291796E12, 5329.066666666667], [1.729179E12, 5410.133333333333], [1.7291787E12, 5388.8], [1.72917888E12, 5333.333333333333], [1.72917858E12, 5322.666666666667], [1.72917828E12, 5339.733333333334], [1.72917798E12, 5779.2], [1.72917912E12, 5339.733333333334], [1.72917882E12, 5335.466666666666], [1.72917852E12, 5361.066666666667], [1.72917822E12, 5294.933333333333], [1.7291784E12, 5297.066666666667], [1.7291781E12, 5454.933333333333], [1.72917942E12, 5333.333333333333], [1.72917972E12, 531.2], [1.72917864E12, 5288.533333333334], [1.72917834E12, 5442.133333333333], [1.72917804E12, 5171.2], [1.72917966E12, 5335.466666666666], [1.72917792E12, 66.13333333333334], [1.72917954E12, 5335.466666666666], [1.72917924E12, 5297.066666666667], [1.72917894E12, 5256.533333333334], [1.72917816E12, 5314.133333333333], [1.72917918E12, 5322.666666666667], [1.72917948E12, 5331.2], [1.72917936E12, 5335.466666666666], [1.72917906E12, 5326.933333333333], [1.72917876E12, 5341.866666666667], [1.72917846E12, 5339.733333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72917972E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 197.17199999999997, "minX": 1.72917792E12, "maxY": 3794.0, "series": [{"data": [[1.7291793E12, 204.00436334787784], [1.7291796E12, 209.2473979183349], [1.729179E12, 206.2500000000001], [1.7291787E12, 234.66627078384846], [1.72917888E12, 211.39279999999985], [1.72917858E12, 310.7446893787581], [1.72917828E12, 283.31721933679614], [1.72917798E12, 2443.6718346253247], [1.72917912E12, 199.69356771873746], [1.72917882E12, 215.44622151139524], [1.72917852E12, 227.94389176283318], [1.72917822E12, 292.9589041095887], [1.7291784E12, 233.06202174788598], [1.7291781E12, 583.2041454829866], [1.72917942E12, 197.17199999999997], [1.72917972E12, 260.2369477911647], [1.72917864E12, 372.1089148850346], [1.72917834E12, 258.4437475499807], [1.72917804E12, 460.4269801980197], [1.72917966E12, 207.03438624550142], [1.72917792E12, 3794.0], [1.72917954E12, 199.3898440623754], [1.72917924E12, 241.91904953685093], [1.72917894E12, 216.94521103896116], [1.72917816E12, 476.3263749498194], [1.72917918E12, 267.94909819639355], [1.72917948E12, 199.79391756702685], [1.72917936E12, 203.65773690523793], [1.72917906E12, 198.95274329194996], [1.72917876E12, 211.54472843450492], [1.72917846E12, 257.4254894127048]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72917972E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 140.17519999999962, "minX": 1.72917792E12, "maxY": 3377.967741935484, "series": [{"data": [[1.7291793E12, 146.0880602935344], [1.7291796E12, 151.33186549239377], [1.729179E12, 148.39353312302822], [1.7291787E12, 170.10372129849594], [1.72917888E12, 150.9299999999998], [1.72917858E12, 227.34148296593222], [1.72917828E12, 204.7938473831401], [1.72917798E12, 1440.6884459209996], [1.72917912E12, 142.83060327606836], [1.72917882E12, 152.69012395041972], [1.72917852E12, 163.7588539594113], [1.72917822E12, 206.61402095084634], [1.7291784E12, 163.44905356423686], [1.7291781E12, 352.7477512710208], [1.72917942E12, 140.17519999999962], [1.72917972E12, 197.39357429718882], [1.72917864E12, 265.42315449778124], [1.72917834E12, 186.48921991375883], [1.72917804E12, 260.7021452145217], [1.72917966E12, 149.58376649340295], [1.72917792E12, 3377.967741935484], [1.72917954E12, 142.54498200719718], [1.72917924E12, 178.71405557792966], [1.72917894E12, 153.9586038961043], [1.72917816E12, 333.33641107988836], [1.72917918E12, 197.48176352705408], [1.72917948E12, 143.96758703481416], [1.72917936E12, 146.96841263494588], [1.72917906E12, 142.18141770124151], [1.72917876E12, 151.3574281150163], [1.72917846E12, 183.25289652417084]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72917972E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 91.90440000000002, "minX": 1.72917792E12, "maxY": 2853.322580645161, "series": [{"data": [[1.7291793E12, 97.524791749306], [1.7291796E12, 102.27862289831857], [1.729179E12, 99.08872239747616], [1.7291787E12, 117.8297703879651], [1.72917888E12, 100.38879999999995], [1.72917858E12, 163.20641282565128], [1.72917828E12, 142.2516979624449], [1.72917798E12, 1038.5378368401632], [1.72917912E12, 93.67718737514996], [1.72917882E12, 101.69932027189138], [1.72917852E12, 110.70274572224416], [1.72917822E12, 143.05801772763908], [1.7291784E12, 109.18364881192102], [1.7291781E12, 246.63238169730096], [1.72917942E12, 91.90440000000002], [1.72917972E12, 149.4859437751003], [1.72917864E12, 200.56353368293733], [1.72917834E12, 128.39592316738538], [1.72917804E12, 176.07054455445547], [1.72917966E12, 100.68532586965183], [1.72917792E12, 2853.322580645161], [1.72917954E12, 94.22391043582594], [1.72917924E12, 127.139750302054], [1.72917894E12, 101.40056818181819], [1.72917816E12, 238.97832195905244], [1.72917918E12, 142.97354709418823], [1.72917948E12, 96.26290516206481], [1.72917936E12, 98.5489804078368], [1.72917906E12, 93.61393672406903], [1.72917876E12, 101.30511182108631], [1.72917846E12, 125.27127447063516]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72917972E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 154.0, "minX": 1.72917792E12, "maxY": 178888.0, "series": [{"data": [[1.7291793E12, 1299.0], [1.7291796E12, 3204.0], [1.729179E12, 1428.0], [1.7291787E12, 3253.0], [1.72917888E12, 1377.0], [1.72917858E12, 7243.0], [1.72917828E12, 3212.0], [1.72917798E12, 51032.0], [1.72917912E12, 1228.0], [1.72917882E12, 1609.0], [1.72917852E12, 4307.0], [1.72917822E12, 3235.0], [1.7291784E12, 2493.0], [1.7291781E12, 178888.0], [1.72917942E12, 1254.0], [1.72917972E12, 1210.0], [1.72917864E12, 21230.0], [1.72917834E12, 3383.0], [1.72917804E12, 112536.0], [1.72917966E12, 1655.0], [1.72917792E12, 5181.0], [1.72917954E12, 2705.0], [1.72917924E12, 5508.0], [1.72917894E12, 1312.0], [1.72917816E12, 7943.0], [1.72917918E12, 3570.0], [1.72917948E12, 3200.0], [1.72917936E12, 3189.0], [1.72917906E12, 1224.0], [1.72917876E12, 1231.0], [1.72917846E12, 2389.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7291793E12, 218.0], [1.7291796E12, 223.0999999999999], [1.729179E12, 220.0], [1.7291787E12, 271.3000000000002], [1.72917888E12, 249.0], [1.72917858E12, 428.60000000000036], [1.72917828E12, 496.5999999999999], [1.72917798E12, 7466.0], [1.72917912E12, 219.0], [1.72917882E12, 261.0], [1.72917852E12, 255.5999999999999], [1.72917822E12, 523.4000000000005], [1.7291784E12, 302.5999999999999], [1.7291781E12, 1251.6000000000008], [1.72917942E12, 219.9000000000001], [1.72917972E12, 244.0], [1.72917864E12, 725.0], [1.72917834E12, 432.8000000000002], [1.72917804E12, 794.0], [1.72917966E12, 215.0], [1.72917792E12, 5097.8], [1.72917954E12, 216.0], [1.72917924E12, 254.0], [1.72917894E12, 261.0], [1.72917816E12, 1022.2000000000007], [1.72917918E12, 296.4000000000001], [1.72917948E12, 208.0], [1.72917936E12, 215.0], [1.72917906E12, 219.0], [1.72917876E12, 235.0], [1.72917846E12, 435.5999999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7291793E12, 578.1800000000062], [1.7291796E12, 1187.0], [1.729179E12, 769.5600000000013], [1.7291787E12, 1204.38], [1.72917888E12, 558.0], [1.72917858E12, 2086.999999999998], [1.72917828E12, 1310.8400000000001], [1.72917798E12, 24792.20000000002], [1.72917912E12, 507.96000000000004], [1.72917882E12, 612.96], [1.72917852E12, 1202.7200000000003], [1.72917822E12, 1260.6800000000003], [1.7291784E12, 1192.3199999999997], [1.7291781E12, 4308.200000000001], [1.72917942E12, 418.9899999999998], [1.72917972E12, 1202.0], [1.72917864E12, 2400.9999999999936], [1.72917834E12, 1207.92], [1.72917804E12, 2192.25], [1.72917966E12, 1183.98], [1.72917792E12, 5181.0], [1.72917954E12, 514.98], [1.72917924E12, 1266.9199999999983], [1.72917894E12, 499.39999999999964], [1.72917816E12, 2220.7199999999975], [1.72917918E12, 1454.08], [1.72917948E12, 533.0], [1.72917936E12, 661.9200000000001], [1.72917906E12, 523.0], [1.72917876E12, 656.0999999999967], [1.72917846E12, 1243.7200000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7291793E12, 237.9000000000001], [1.7291796E12, 261.0499999999997], [1.729179E12, 286.0], [1.7291787E12, 405.0], [1.72917888E12, 310.84999999999945], [1.72917858E12, 1204.0], [1.72917828E12, 878.3999999999965], [1.72917798E12, 13303.5], [1.72917912E12, 243.0], [1.72917882E12, 317.9000000000001], [1.72917852E12, 444.0], [1.72917822E12, 749.6999999999998], [1.7291784E12, 452.7999999999997], [1.7291781E12, 1523.1999999999998], [1.72917942E12, 237.0], [1.72917972E12, 1178.5], [1.72917864E12, 1278.0], [1.72917834E12, 627.4000000000005], [1.72917804E12, 1356.5], [1.72917966E12, 244.9000000000001], [1.72917792E12, 5151.6], [1.72917954E12, 236.0], [1.72917924E12, 332.59999999999945], [1.72917894E12, 294.0], [1.72917816E12, 1355.0], [1.72917918E12, 595.5999999999922], [1.72917948E12, 227.0], [1.72917936E12, 235.0], [1.72917906E12, 242.0], [1.72917876E12, 338.25], [1.72917846E12, 631.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7291793E12, 159.0], [1.7291796E12, 161.0], [1.729179E12, 161.0], [1.7291787E12, 162.0], [1.72917888E12, 154.0], [1.72917858E12, 160.0], [1.72917828E12, 158.0], [1.72917798E12, 169.0], [1.72917912E12, 160.0], [1.72917882E12, 156.0], [1.72917852E12, 159.0], [1.72917822E12, 161.0], [1.7291784E12, 161.0], [1.7291781E12, 164.0], [1.72917942E12, 158.0], [1.72917972E12, 164.0], [1.72917864E12, 159.0], [1.72917834E12, 160.0], [1.72917804E12, 169.0], [1.72917966E12, 158.0], [1.72917792E12, 1586.0], [1.72917954E12, 157.0], [1.72917924E12, 159.0], [1.72917894E12, 162.0], [1.72917816E12, 162.0], [1.72917918E12, 164.0], [1.72917948E12, 159.0], [1.72917936E12, 158.0], [1.72917906E12, 159.0], [1.72917876E12, 156.0], [1.72917846E12, 161.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7291793E12, 187.0], [1.7291796E12, 186.0], [1.729179E12, 184.0], [1.7291787E12, 192.0], [1.72917888E12, 188.0], [1.72917858E12, 191.0], [1.72917828E12, 191.0], [1.72917798E12, 406.0], [1.72917912E12, 184.0], [1.72917882E12, 191.0], [1.72917852E12, 188.0], [1.72917822E12, 196.0], [1.7291784E12, 188.0], [1.7291781E12, 245.0], [1.72917942E12, 185.0], [1.72917972E12, 192.0], [1.72917864E12, 193.0], [1.72917834E12, 189.0], [1.72917804E12, 224.0], [1.72917966E12, 184.0], [1.72917792E12, 4256.0], [1.72917954E12, 183.0], [1.72917924E12, 194.0], [1.72917894E12, 199.0], [1.72917816E12, 300.0], [1.72917918E12, 194.0], [1.72917948E12, 183.0], [1.72917936E12, 185.0], [1.72917906E12, 184.0], [1.72917876E12, 187.0], [1.72917846E12, 189.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72917972E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 174.0, "minX": 1.0, "maxY": 3823.0, "series": [{"data": [[2.0, 177.5], [3.0, 3823.0], [4.0, 188.0], [5.0, 174.0], [6.0, 909.0], [7.0, 184.0], [8.0, 178.0], [9.0, 181.5], [10.0, 186.0], [11.0, 552.0], [12.0, 183.0], [13.0, 193.5], [14.0, 210.5], [15.0, 214.5], [16.0, 187.0], [17.0, 189.5], [18.0, 213.5], [19.0, 414.5], [20.0, 361.5], [21.0, 191.5], [22.0, 211.0], [23.0, 383.0], [24.0, 438.0], [25.0, 195.0], [26.0, 679.0], [27.0, 210.0], [28.0, 194.0], [29.0, 192.0], [30.0, 192.0], [31.0, 294.0], [32.0, 188.0], [33.0, 190.0], [34.0, 191.0], [35.0, 193.0], [37.0, 192.0], [36.0, 200.0], [38.0, 190.0], [39.0, 192.0], [40.0, 187.0], [41.0, 187.0], [42.0, 187.0], [43.0, 187.0], [44.0, 190.0], [45.0, 189.0], [47.0, 193.0], [46.0, 192.0], [48.0, 191.0], [49.0, 191.0], [50.0, 203.5], [51.0, 204.5], [52.0, 192.0], [53.0, 197.0], [55.0, 221.0], [54.0, 204.0], [57.0, 195.0], [56.0, 203.0], [58.0, 215.5], [59.0, 241.5], [61.0, 213.0], [60.0, 200.0], [62.0, 238.5], [63.0, 234.0], [65.0, 200.5], [64.0, 212.5], [66.0, 280.0], [69.0, 1308.0], [71.0, 313.0], [68.0, 227.0], [70.0, 199.0], [72.0, 441.0], [75.0, 416.0], [73.0, 190.0], [78.0, 248.5], [76.0, 347.0], [77.0, 231.0], [80.0, 1388.5], [83.0, 577.0], [86.0, 251.0], [89.0, 329.0], [88.0, 446.5], [93.0, 430.0], [99.0, 1759.0], [102.0, 233.5], [1.0, 428.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 102.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 126.0, "minX": 1.0, "maxY": 1120.0, "series": [{"data": [[2.0, 127.0], [3.0, 1072.0], [4.0, 132.5], [5.0, 126.0], [6.0, 861.0], [7.0, 130.0], [8.0, 129.0], [9.0, 130.0], [10.0, 131.5], [11.0, 453.5], [12.0, 132.5], [13.0, 139.5], [14.0, 151.0], [15.0, 142.5], [16.0, 133.5], [17.0, 134.0], [18.0, 145.5], [19.0, 279.5], [20.0, 207.5], [21.0, 136.0], [22.0, 143.0], [23.0, 220.0], [24.0, 256.0], [25.0, 138.0], [26.0, 399.0], [27.0, 146.0], [28.0, 137.0], [29.0, 136.0], [30.0, 137.5], [31.0, 185.0], [32.0, 134.0], [33.0, 136.0], [34.0, 136.0], [35.0, 137.0], [37.0, 137.0], [36.0, 141.0], [38.0, 134.0], [39.0, 136.0], [40.0, 134.0], [41.0, 133.0], [42.0, 133.0], [43.0, 133.0], [44.0, 135.0], [45.0, 134.0], [47.0, 136.0], [46.0, 137.0], [48.0, 136.0], [49.0, 135.0], [50.0, 141.0], [51.0, 144.0], [52.0, 136.0], [53.0, 139.0], [55.0, 153.0], [54.0, 144.0], [57.0, 137.0], [56.0, 142.0], [58.0, 149.0], [59.0, 161.0], [61.0, 148.0], [60.0, 141.0], [62.0, 160.0], [63.0, 158.0], [65.0, 139.5], [64.0, 148.0], [66.0, 170.0], [69.0, 636.0], [71.0, 194.5], [68.0, 154.0], [70.0, 142.5], [72.0, 265.0], [75.0, 280.5], [73.0, 132.0], [78.0, 154.0], [76.0, 171.0], [77.0, 142.0], [80.0, 747.5], [83.0, 465.0], [86.0, 187.5], [89.0, 230.5], [88.0, 211.0], [93.0, 182.0], [99.0, 1120.0], [102.0, 156.5], [1.0, 375.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 102.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.9166666666666665, "minX": 1.72917792E12, "maxY": 42.483333333333334, "series": [{"data": [[1.7291793E12, 42.03333333333333], [1.7291796E12, 41.666666666666664], [1.729179E12, 42.3], [1.7291787E12, 42.016666666666666], [1.72917888E12, 41.666666666666664], [1.72917858E12, 41.55], [1.72917828E12, 40.916666666666664], [1.72917798E12, 41.93333333333333], [1.72917912E12, 41.65], [1.72917882E12, 41.71666666666667], [1.72917852E12, 41.86666666666667], [1.72917822E12, 42.15], [1.7291784E12, 41.31666666666667], [1.7291781E12, 41.68333333333333], [1.72917942E12, 41.68333333333333], [1.72917972E12, 4.0], [1.72917864E12, 41.45], [1.72917834E12, 42.483333333333334], [1.72917804E12, 41.56666666666667], [1.72917966E12, 41.666666666666664], [1.72917792E12, 3.9166666666666665], [1.72917954E12, 41.666666666666664], [1.72917924E12, 41.3], [1.72917894E12, 41.03333333333333], [1.72917816E12, 41.266666666666666], [1.72917918E12, 41.666666666666664], [1.72917948E12, 41.666666666666664], [1.72917936E12, 41.65], [1.72917906E12, 41.68333333333333], [1.72917876E12, 41.68333333333333], [1.72917846E12, 41.81666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72917972E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.72917792E12, "maxY": 45.15, "series": [{"data": [[1.7291793E12, 42.016666666666666], [1.7291796E12, 41.63333333333333], [1.729179E12, 42.266666666666666], [1.7291787E12, 42.1], [1.72917888E12, 41.666666666666664], [1.72917858E12, 41.583333333333336], [1.72917828E12, 41.71666666666667], [1.72917798E12, 45.15], [1.72917912E12, 41.71666666666667], [1.72917882E12, 41.68333333333333], [1.72917852E12, 41.88333333333333], [1.72917822E12, 41.36666666666667], [1.7291784E12, 41.38333333333333], [1.7291781E12, 42.61666666666667], [1.72917942E12, 41.666666666666664], [1.72917972E12, 4.15], [1.72917864E12, 41.31666666666667], [1.72917834E12, 42.516666666666666], [1.72917804E12, 40.4], [1.72917966E12, 41.68333333333333], [1.72917792E12, 0.5166666666666667], [1.72917954E12, 41.68333333333333], [1.72917924E12, 41.38333333333333], [1.72917894E12, 41.06666666666667], [1.72917816E12, 41.516666666666666], [1.72917918E12, 41.583333333333336], [1.72917948E12, 41.65], [1.72917936E12, 41.68333333333333], [1.72917906E12, 41.61666666666667], [1.72917876E12, 41.733333333333334], [1.72917846E12, 41.71666666666667]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72917972E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.72917792E12, "maxY": 45.15, "series": [{"data": [[1.7291793E12, 42.016666666666666], [1.7291796E12, 41.63333333333333], [1.729179E12, 42.266666666666666], [1.7291787E12, 42.1], [1.72917888E12, 41.666666666666664], [1.72917858E12, 41.583333333333336], [1.72917828E12, 41.71666666666667], [1.72917798E12, 45.15], [1.72917912E12, 41.71666666666667], [1.72917882E12, 41.68333333333333], [1.72917852E12, 41.88333333333333], [1.72917822E12, 41.36666666666667], [1.7291784E12, 41.38333333333333], [1.7291781E12, 42.61666666666667], [1.72917942E12, 41.666666666666664], [1.72917972E12, 4.15], [1.72917864E12, 41.31666666666667], [1.72917834E12, 42.516666666666666], [1.72917804E12, 40.4], [1.72917966E12, 41.68333333333333], [1.72917792E12, 0.5166666666666667], [1.72917954E12, 41.68333333333333], [1.72917924E12, 41.38333333333333], [1.72917894E12, 41.06666666666667], [1.72917816E12, 41.516666666666666], [1.72917918E12, 41.583333333333336], [1.72917948E12, 41.65], [1.72917936E12, 41.68333333333333], [1.72917906E12, 41.61666666666667], [1.72917876E12, 41.733333333333334], [1.72917846E12, 41.71666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72917972E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5166666666666667, "minX": 1.72917792E12, "maxY": 45.15, "series": [{"data": [[1.7291793E12, 42.016666666666666], [1.7291796E12, 41.63333333333333], [1.729179E12, 42.266666666666666], [1.7291787E12, 42.1], [1.72917888E12, 41.666666666666664], [1.72917858E12, 41.583333333333336], [1.72917828E12, 41.71666666666667], [1.72917798E12, 45.15], [1.72917912E12, 41.71666666666667], [1.72917882E12, 41.68333333333333], [1.72917852E12, 41.88333333333333], [1.72917822E12, 41.36666666666667], [1.7291784E12, 41.38333333333333], [1.7291781E12, 42.61666666666667], [1.72917942E12, 41.666666666666664], [1.72917972E12, 4.15], [1.72917864E12, 41.31666666666667], [1.72917834E12, 42.516666666666666], [1.72917804E12, 40.4], [1.72917966E12, 41.68333333333333], [1.72917792E12, 0.5166666666666667], [1.72917954E12, 41.68333333333333], [1.72917924E12, 41.38333333333333], [1.72917894E12, 41.06666666666667], [1.72917816E12, 41.516666666666666], [1.72917918E12, 41.583333333333336], [1.72917948E12, 41.65], [1.72917936E12, 41.68333333333333], [1.72917906E12, 41.61666666666667], [1.72917876E12, 41.733333333333334], [1.72917846E12, 41.71666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72917972E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

