/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 158.0, "minX": 0.0, "maxY": 1016544.0, "series": [{"data": [[0.0, 158.0], [0.1, 166.0], [0.2, 167.0], [0.3, 168.0], [0.4, 168.0], [0.5, 169.0], [0.6, 169.0], [0.7, 170.0], [0.8, 170.0], [0.9, 171.0], [1.0, 171.0], [1.1, 171.0], [1.2, 171.0], [1.3, 172.0], [1.4, 172.0], [1.5, 172.0], [1.6, 172.0], [1.7, 173.0], [1.8, 173.0], [1.9, 173.0], [2.0, 173.0], [2.1, 173.0], [2.2, 173.0], [2.3, 174.0], [2.4, 174.0], [2.5, 174.0], [2.6, 174.0], [2.7, 174.0], [2.8, 174.0], [2.9, 174.0], [3.0, 175.0], [3.1, 175.0], [3.2, 175.0], [3.3, 175.0], [3.4, 175.0], [3.5, 175.0], [3.6, 175.0], [3.7, 175.0], [3.8, 176.0], [3.9, 176.0], [4.0, 176.0], [4.1, 176.0], [4.2, 176.0], [4.3, 176.0], [4.4, 176.0], [4.5, 176.0], [4.6, 176.0], [4.7, 177.0], [4.8, 177.0], [4.9, 177.0], [5.0, 177.0], [5.1, 177.0], [5.2, 177.0], [5.3, 177.0], [5.4, 177.0], [5.5, 177.0], [5.6, 177.0], [5.7, 177.0], [5.8, 177.0], [5.9, 178.0], [6.0, 178.0], [6.1, 178.0], [6.2, 178.0], [6.3, 178.0], [6.4, 178.0], [6.5, 178.0], [6.6, 178.0], [6.7, 178.0], [6.8, 178.0], [6.9, 178.0], [7.0, 178.0], [7.1, 179.0], [7.2, 179.0], [7.3, 179.0], [7.4, 179.0], [7.5, 179.0], [7.6, 179.0], [7.7, 179.0], [7.8, 179.0], [7.9, 179.0], [8.0, 179.0], [8.1, 179.0], [8.2, 179.0], [8.3, 180.0], [8.4, 180.0], [8.5, 180.0], [8.6, 180.0], [8.7, 180.0], [8.8, 180.0], [8.9, 180.0], [9.0, 180.0], [9.1, 180.0], [9.2, 180.0], [9.3, 180.0], [9.4, 180.0], [9.5, 180.0], [9.6, 180.0], [9.7, 181.0], [9.8, 181.0], [9.9, 181.0], [10.0, 181.0], [10.1, 181.0], [10.2, 181.0], [10.3, 181.0], [10.4, 181.0], [10.5, 181.0], [10.6, 181.0], [10.7, 181.0], [10.8, 181.0], [10.9, 181.0], [11.0, 181.0], [11.1, 182.0], [11.2, 182.0], [11.3, 182.0], [11.4, 182.0], [11.5, 182.0], [11.6, 182.0], [11.7, 182.0], [11.8, 182.0], [11.9, 182.0], [12.0, 182.0], [12.1, 182.0], [12.2, 182.0], [12.3, 182.0], [12.4, 182.0], [12.5, 183.0], [12.6, 183.0], [12.7, 183.0], [12.8, 183.0], [12.9, 183.0], [13.0, 183.0], [13.1, 183.0], [13.2, 183.0], [13.3, 183.0], [13.4, 183.0], [13.5, 183.0], [13.6, 183.0], [13.7, 183.0], [13.8, 183.0], [13.9, 183.0], [14.0, 184.0], [14.1, 184.0], [14.2, 184.0], [14.3, 184.0], [14.4, 184.0], [14.5, 184.0], [14.6, 184.0], [14.7, 184.0], [14.8, 184.0], [14.9, 184.0], [15.0, 184.0], [15.1, 184.0], [15.2, 184.0], [15.3, 184.0], [15.4, 184.0], [15.5, 184.0], [15.6, 185.0], [15.7, 185.0], [15.8, 185.0], [15.9, 185.0], [16.0, 185.0], [16.1, 185.0], [16.2, 185.0], [16.3, 185.0], [16.4, 185.0], [16.5, 185.0], [16.6, 185.0], [16.7, 185.0], [16.8, 185.0], [16.9, 185.0], [17.0, 185.0], [17.1, 186.0], [17.2, 186.0], [17.3, 186.0], [17.4, 186.0], [17.5, 186.0], [17.6, 186.0], [17.7, 186.0], [17.8, 186.0], [17.9, 186.0], [18.0, 186.0], [18.1, 186.0], [18.2, 186.0], [18.3, 186.0], [18.4, 186.0], [18.5, 186.0], [18.6, 187.0], [18.7, 187.0], [18.8, 187.0], [18.9, 187.0], [19.0, 187.0], [19.1, 187.0], [19.2, 187.0], [19.3, 187.0], [19.4, 187.0], [19.5, 187.0], [19.6, 187.0], [19.7, 187.0], [19.8, 187.0], [19.9, 187.0], [20.0, 188.0], [20.1, 188.0], [20.2, 188.0], [20.3, 188.0], [20.4, 188.0], [20.5, 188.0], [20.6, 188.0], [20.7, 188.0], [20.8, 188.0], [20.9, 188.0], [21.0, 188.0], [21.1, 188.0], [21.2, 188.0], [21.3, 188.0], [21.4, 189.0], [21.5, 189.0], [21.6, 189.0], [21.7, 189.0], [21.8, 189.0], [21.9, 189.0], [22.0, 189.0], [22.1, 189.0], [22.2, 189.0], [22.3, 189.0], [22.4, 189.0], [22.5, 189.0], [22.6, 189.0], [22.7, 190.0], [22.8, 190.0], [22.9, 190.0], [23.0, 190.0], [23.1, 190.0], [23.2, 190.0], [23.3, 190.0], [23.4, 190.0], [23.5, 190.0], [23.6, 190.0], [23.7, 190.0], [23.8, 190.0], [23.9, 190.0], [24.0, 191.0], [24.1, 191.0], [24.2, 191.0], [24.3, 191.0], [24.4, 191.0], [24.5, 191.0], [24.6, 191.0], [24.7, 191.0], [24.8, 191.0], [24.9, 191.0], [25.0, 191.0], [25.1, 191.0], [25.2, 191.0], [25.3, 191.0], [25.4, 192.0], [25.5, 192.0], [25.6, 192.0], [25.7, 192.0], [25.8, 192.0], [25.9, 192.0], [26.0, 192.0], [26.1, 192.0], [26.2, 192.0], [26.3, 192.0], [26.4, 192.0], [26.5, 192.0], [26.6, 193.0], [26.7, 193.0], [26.8, 193.0], [26.9, 193.0], [27.0, 193.0], [27.1, 193.0], [27.2, 193.0], [27.3, 193.0], [27.4, 193.0], [27.5, 193.0], [27.6, 193.0], [27.7, 193.0], [27.8, 194.0], [27.9, 194.0], [28.0, 194.0], [28.1, 194.0], [28.2, 194.0], [28.3, 194.0], [28.4, 194.0], [28.5, 194.0], [28.6, 194.0], [28.7, 194.0], [28.8, 194.0], [28.9, 195.0], [29.0, 195.0], [29.1, 195.0], [29.2, 195.0], [29.3, 195.0], [29.4, 195.0], [29.5, 195.0], [29.6, 195.0], [29.7, 195.0], [29.8, 195.0], [29.9, 195.0], [30.0, 196.0], [30.1, 196.0], [30.2, 196.0], [30.3, 196.0], [30.4, 196.0], [30.5, 196.0], [30.6, 196.0], [30.7, 196.0], [30.8, 196.0], [30.9, 196.0], [31.0, 196.0], [31.1, 197.0], [31.2, 197.0], [31.3, 197.0], [31.4, 197.0], [31.5, 197.0], [31.6, 197.0], [31.7, 197.0], [31.8, 197.0], [31.9, 197.0], [32.0, 198.0], [32.1, 198.0], [32.2, 198.0], [32.3, 198.0], [32.4, 198.0], [32.5, 198.0], [32.6, 198.0], [32.7, 198.0], [32.8, 198.0], [32.9, 198.0], [33.0, 199.0], [33.1, 199.0], [33.2, 199.0], [33.3, 199.0], [33.4, 199.0], [33.5, 199.0], [33.6, 199.0], [33.7, 199.0], [33.8, 199.0], [33.9, 200.0], [34.0, 200.0], [34.1, 200.0], [34.2, 200.0], [34.3, 200.0], [34.4, 200.0], [34.5, 200.0], [34.6, 200.0], [34.7, 200.0], [34.8, 200.0], [34.9, 201.0], [35.0, 201.0], [35.1, 201.0], [35.2, 201.0], [35.3, 201.0], [35.4, 201.0], [35.5, 201.0], [35.6, 201.0], [35.7, 202.0], [35.8, 202.0], [35.9, 202.0], [36.0, 202.0], [36.1, 202.0], [36.2, 202.0], [36.3, 202.0], [36.4, 202.0], [36.5, 203.0], [36.6, 203.0], [36.7, 203.0], [36.8, 203.0], [36.9, 203.0], [37.0, 203.0], [37.1, 203.0], [37.2, 204.0], [37.3, 204.0], [37.4, 204.0], [37.5, 204.0], [37.6, 204.0], [37.7, 204.0], [37.8, 204.0], [37.9, 204.0], [38.0, 205.0], [38.1, 205.0], [38.2, 205.0], [38.3, 205.0], [38.4, 205.0], [38.5, 205.0], [38.6, 205.0], [38.7, 206.0], [38.8, 206.0], [38.9, 206.0], [39.0, 206.0], [39.1, 206.0], [39.2, 206.0], [39.3, 207.0], [39.4, 207.0], [39.5, 207.0], [39.6, 207.0], [39.7, 207.0], [39.8, 207.0], [39.9, 207.0], [40.0, 208.0], [40.1, 208.0], [40.2, 208.0], [40.3, 208.0], [40.4, 208.0], [40.5, 209.0], [40.6, 209.0], [40.7, 209.0], [40.8, 209.0], [40.9, 209.0], [41.0, 209.0], [41.1, 210.0], [41.2, 210.0], [41.3, 210.0], [41.4, 210.0], [41.5, 210.0], [41.6, 211.0], [41.7, 211.0], [41.8, 211.0], [41.9, 211.0], [42.0, 211.0], [42.1, 212.0], [42.2, 212.0], [42.3, 212.0], [42.4, 212.0], [42.5, 213.0], [42.6, 213.0], [42.7, 213.0], [42.8, 213.0], [42.9, 214.0], [43.0, 214.0], [43.1, 214.0], [43.2, 214.0], [43.3, 214.0], [43.4, 215.0], [43.5, 215.0], [43.6, 215.0], [43.7, 216.0], [43.8, 216.0], [43.9, 216.0], [44.0, 216.0], [44.1, 217.0], [44.2, 217.0], [44.3, 217.0], [44.4, 217.0], [44.5, 218.0], [44.6, 218.0], [44.7, 218.0], [44.8, 219.0], [44.9, 219.0], [45.0, 219.0], [45.1, 220.0], [45.2, 220.0], [45.3, 221.0], [45.4, 221.0], [45.5, 221.0], [45.6, 222.0], [45.7, 222.0], [45.8, 223.0], [45.9, 223.0], [46.0, 223.0], [46.1, 224.0], [46.2, 224.0], [46.3, 225.0], [46.4, 225.0], [46.5, 225.0], [46.6, 226.0], [46.7, 226.0], [46.8, 227.0], [46.9, 227.0], [47.0, 228.0], [47.1, 228.0], [47.2, 229.0], [47.3, 230.0], [47.4, 230.0], [47.5, 231.0], [47.6, 231.0], [47.7, 232.0], [47.8, 232.0], [47.9, 233.0], [48.0, 234.0], [48.1, 235.0], [48.2, 235.0], [48.3, 236.0], [48.4, 237.0], [48.5, 238.0], [48.6, 238.0], [48.7, 239.0], [48.8, 240.0], [48.9, 241.0], [49.0, 242.0], [49.1, 243.0], [49.2, 244.0], [49.3, 244.0], [49.4, 245.0], [49.5, 246.0], [49.6, 247.0], [49.7, 248.0], [49.8, 249.0], [49.9, 250.0], [50.0, 252.0], [50.1, 253.0], [50.2, 254.0], [50.3, 255.0], [50.4, 257.0], [50.5, 258.0], [50.6, 260.0], [50.7, 262.0], [50.8, 263.0], [50.9, 266.0], [51.0, 267.0], [51.1, 269.0], [51.2, 270.0], [51.3, 272.0], [51.4, 274.0], [51.5, 277.0], [51.6, 279.0], [51.7, 281.0], [51.8, 283.0], [51.9, 285.0], [52.0, 287.0], [52.1, 289.0], [52.2, 291.0], [52.3, 294.0], [52.4, 296.0], [52.5, 299.0], [52.6, 302.0], [52.7, 304.0], [52.8, 306.0], [52.9, 309.0], [53.0, 312.0], [53.1, 316.0], [53.2, 318.0], [53.3, 321.0], [53.4, 325.0], [53.5, 328.0], [53.6, 332.0], [53.7, 335.0], [53.8, 339.0], [53.9, 342.0], [54.0, 345.0], [54.1, 348.0], [54.2, 352.0], [54.3, 356.0], [54.4, 359.0], [54.5, 364.0], [54.6, 367.0], [54.7, 372.0], [54.8, 378.0], [54.9, 382.0], [55.0, 388.0], [55.1, 393.0], [55.2, 400.0], [55.3, 406.0], [55.4, 414.0], [55.5, 422.0], [55.6, 431.0], [55.7, 436.0], [55.8, 441.0], [55.9, 444.0], [56.0, 447.0], [56.1, 450.0], [56.2, 452.0], [56.3, 455.0], [56.4, 458.0], [56.5, 460.0], [56.6, 463.0], [56.7, 465.0], [56.8, 468.0], [56.9, 472.0], [57.0, 474.0], [57.1, 477.0], [57.2, 479.0], [57.3, 481.0], [57.4, 483.0], [57.5, 485.0], [57.6, 487.0], [57.7, 489.0], [57.8, 491.0], [57.9, 493.0], [58.0, 494.0], [58.1, 496.0], [58.2, 497.0], [58.3, 499.0], [58.4, 501.0], [58.5, 502.0], [58.6, 504.0], [58.7, 506.0], [58.8, 508.0], [58.9, 510.0], [59.0, 511.0], [59.1, 513.0], [59.2, 514.0], [59.3, 516.0], [59.4, 518.0], [59.5, 520.0], [59.6, 522.0], [59.7, 524.0], [59.8, 525.0], [59.9, 527.0], [60.0, 529.0], [60.1, 530.0], [60.2, 532.0], [60.3, 533.0], [60.4, 535.0], [60.5, 536.0], [60.6, 537.0], [60.7, 539.0], [60.8, 540.0], [60.9, 542.0], [61.0, 544.0], [61.1, 545.0], [61.2, 547.0], [61.3, 548.0], [61.4, 549.0], [61.5, 550.0], [61.6, 552.0], [61.7, 553.0], [61.8, 555.0], [61.9, 556.0], [62.0, 558.0], [62.1, 559.0], [62.2, 561.0], [62.3, 562.0], [62.4, 563.0], [62.5, 565.0], [62.6, 566.0], [62.7, 567.0], [62.8, 568.0], [62.9, 570.0], [63.0, 571.0], [63.1, 572.0], [63.2, 573.0], [63.3, 574.0], [63.4, 575.0], [63.5, 576.0], [63.6, 577.0], [63.7, 577.0], [63.8, 578.0], [63.9, 579.0], [64.0, 580.0], [64.1, 581.0], [64.2, 582.0], [64.3, 583.0], [64.4, 584.0], [64.5, 585.0], [64.6, 585.0], [64.7, 586.0], [64.8, 587.0], [64.9, 588.0], [65.0, 588.0], [65.1, 589.0], [65.2, 590.0], [65.3, 591.0], [65.4, 591.0], [65.5, 592.0], [65.6, 593.0], [65.7, 594.0], [65.8, 595.0], [65.9, 595.0], [66.0, 596.0], [66.1, 597.0], [66.2, 597.0], [66.3, 598.0], [66.4, 599.0], [66.5, 600.0], [66.6, 601.0], [66.7, 601.0], [66.8, 602.0], [66.9, 603.0], [67.0, 604.0], [67.1, 604.0], [67.2, 605.0], [67.3, 606.0], [67.4, 607.0], [67.5, 608.0], [67.6, 609.0], [67.7, 610.0], [67.8, 610.0], [67.9, 611.0], [68.0, 612.0], [68.1, 613.0], [68.2, 614.0], [68.3, 615.0], [68.4, 616.0], [68.5, 618.0], [68.6, 619.0], [68.7, 620.0], [68.8, 621.0], [68.9, 622.0], [69.0, 624.0], [69.1, 625.0], [69.2, 627.0], [69.3, 628.0], [69.4, 631.0], [69.5, 633.0], [69.6, 635.0], [69.7, 637.0], [69.8, 639.0], [69.9, 642.0], [70.0, 645.0], [70.1, 649.0], [70.2, 653.0], [70.3, 656.0], [70.4, 660.0], [70.5, 664.0], [70.6, 668.0], [70.7, 671.0], [70.8, 675.0], [70.9, 679.0], [71.0, 683.0], [71.1, 687.0], [71.2, 690.0], [71.3, 692.0], [71.4, 695.0], [71.5, 697.0], [71.6, 700.0], [71.7, 702.0], [71.8, 704.0], [71.9, 706.0], [72.0, 709.0], [72.1, 711.0], [72.2, 713.0], [72.3, 715.0], [72.4, 717.0], [72.5, 719.0], [72.6, 721.0], [72.7, 723.0], [72.8, 725.0], [72.9, 727.0], [73.0, 729.0], [73.1, 731.0], [73.2, 733.0], [73.3, 734.0], [73.4, 736.0], [73.5, 737.0], [73.6, 739.0], [73.7, 741.0], [73.8, 743.0], [73.9, 745.0], [74.0, 747.0], [74.1, 749.0], [74.2, 751.0], [74.3, 753.0], [74.4, 756.0], [74.5, 758.0], [74.6, 762.0], [74.7, 764.0], [74.8, 768.0], [74.9, 771.0], [75.0, 775.0], [75.1, 779.0], [75.2, 783.0], [75.3, 787.0], [75.4, 791.0], [75.5, 794.0], [75.6, 798.0], [75.7, 802.0], [75.8, 807.0], [75.9, 811.0], [76.0, 815.0], [76.1, 821.0], [76.2, 826.0], [76.3, 831.0], [76.4, 835.0], [76.5, 840.0], [76.6, 846.0], [76.7, 851.0], [76.8, 856.0], [76.9, 859.0], [77.0, 864.0], [77.1, 872.0], [77.2, 878.0], [77.3, 882.0], [77.4, 888.0], [77.5, 895.0], [77.6, 901.0], [77.7, 908.0], [77.8, 918.0], [77.9, 925.0], [78.0, 932.0], [78.1, 940.0], [78.2, 948.0], [78.3, 954.0], [78.4, 961.0], [78.5, 969.0], [78.6, 978.0], [78.7, 987.0], [78.8, 996.0], [78.9, 1005.0], [79.0, 1016.0], [79.1, 1027.0], [79.2, 1037.0], [79.3, 1047.0], [79.4, 1056.0], [79.5, 1067.0], [79.6, 1079.0], [79.7, 1091.0], [79.8, 1100.0], [79.9, 1113.0], [80.0, 1123.0], [80.1, 1135.0], [80.2, 1143.0], [80.3, 1151.0], [80.4, 1161.0], [80.5, 1171.0], [80.6, 1177.0], [80.7, 1180.0], [80.8, 1183.0], [80.9, 1184.0], [81.0, 1186.0], [81.1, 1187.0], [81.2, 1188.0], [81.3, 1189.0], [81.4, 1191.0], [81.5, 1192.0], [81.6, 1193.0], [81.7, 1194.0], [81.8, 1195.0], [81.9, 1196.0], [82.0, 1196.0], [82.1, 1198.0], [82.2, 1198.0], [82.3, 1199.0], [82.4, 1200.0], [82.5, 1201.0], [82.6, 1202.0], [82.7, 1203.0], [82.8, 1205.0], [82.9, 1206.0], [83.0, 1207.0], [83.1, 1208.0], [83.2, 1209.0], [83.3, 1211.0], [83.4, 1212.0], [83.5, 1214.0], [83.6, 1216.0], [83.7, 1217.0], [83.8, 1219.0], [83.9, 1221.0], [84.0, 1223.0], [84.1, 1226.0], [84.2, 1229.0], [84.3, 1232.0], [84.4, 1236.0], [84.5, 1241.0], [84.6, 1245.0], [84.7, 1252.0], [84.8, 1258.0], [84.9, 1265.0], [85.0, 1273.0], [85.1, 1279.0], [85.2, 1286.0], [85.3, 1293.0], [85.4, 1300.0], [85.5, 1308.0], [85.6, 1317.0], [85.7, 1324.0], [85.8, 1332.0], [85.9, 1341.0], [86.0, 1348.0], [86.1, 1356.0], [86.2, 1364.0], [86.3, 1373.0], [86.4, 1382.0], [86.5, 1391.0], [86.6, 1401.0], [86.7, 1412.0], [86.8, 1422.0], [86.9, 1433.0], [87.0, 1447.0], [87.1, 1460.0], [87.2, 1469.0], [87.3, 1480.0], [87.4, 1490.0], [87.5, 1498.0], [87.6, 1507.0], [87.7, 1515.0], [87.8, 1523.0], [87.9, 1533.0], [88.0, 1541.0], [88.1, 1550.0], [88.2, 1559.0], [88.3, 1568.0], [88.4, 1576.0], [88.5, 1584.0], [88.6, 1591.0], [88.7, 1597.0], [88.8, 1602.0], [88.9, 1607.0], [89.0, 1612.0], [89.1, 1617.0], [89.2, 1624.0], [89.3, 1629.0], [89.4, 1637.0], [89.5, 1644.0], [89.6, 1653.0], [89.7, 1664.0], [89.8, 1676.0], [89.9, 1686.0], [90.0, 1697.0], [90.1, 1708.0], [90.2, 1715.0], [90.3, 1724.0], [90.4, 1731.0], [90.5, 1739.0], [90.6, 1745.0], [90.7, 1751.0], [90.8, 1757.0], [90.9, 1764.0], [91.0, 1772.0], [91.1, 1782.0], [91.2, 1791.0], [91.3, 1803.0], [91.4, 1822.0], [91.5, 1837.0], [91.6, 1854.0], [91.7, 1872.0], [91.8, 1887.0], [91.9, 1905.0], [92.0, 1922.0], [92.1, 1942.0], [92.2, 1966.0], [92.3, 1989.0], [92.4, 2013.0], [92.5, 2037.0], [92.6, 2060.0], [92.7, 2088.0], [92.8, 2119.0], [92.9, 2151.0], [93.0, 2182.0], [93.1, 2208.0], [93.2, 2237.0], [93.3, 2278.0], [93.4, 2311.0], [93.5, 2345.0], [93.6, 2393.0], [93.7, 2433.0], [93.8, 2482.0], [93.9, 2538.0], [94.0, 2603.0], [94.1, 2659.0], [94.2, 2718.0], [94.3, 2772.0], [94.4, 2842.0], [94.5, 2939.0], [94.6, 3029.0], [94.7, 3144.0], [94.8, 3195.0], [94.9, 3204.0], [95.0, 3212.0], [95.1, 3224.0], [95.2, 3245.0], [95.3, 3302.0], [95.4, 3369.0], [95.5, 3436.0], [95.6, 3496.0], [95.7, 3547.0], [95.8, 3590.0], [95.9, 3619.0], [96.0, 3640.0], [96.1, 3684.0], [96.2, 3728.0], [96.3, 3761.0], [96.4, 3793.0], [96.5, 3849.0], [96.6, 3913.0], [96.7, 3995.0], [96.8, 4095.0], [96.9, 4201.0], [97.0, 4317.0], [97.1, 4480.0], [97.2, 4642.0], [97.3, 4836.0], [97.4, 5016.0], [97.5, 5246.0], [97.6, 5501.0], [97.7, 5791.0], [97.8, 6184.0], [97.9, 6536.0], [98.0, 6893.0], [98.1, 7219.0], [98.2, 7461.0], [98.3, 7644.0], [98.4, 7786.0], [98.5, 8013.0], [98.6, 8337.0], [98.7, 8844.0], [98.8, 9417.0], [98.9, 10307.0], [99.0, 11342.0], [99.1, 12782.0], [99.2, 14572.0], [99.3, 15647.0], [99.4, 15884.0], [99.5, 16849.0], [99.6, 20895.0], [99.7, 22850.0], [99.8, 32854.0], [99.9, 58783.0], [100.0, 1016544.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 19652.0, "series": [{"data": [[78700.0, 1.0], [83500.0, 1.0], [105900.0, 1.0], [175400.0, 1.0], [1016500.0, 1.0], [100.0, 19652.0], [34100.0, 1.0], [34500.0, 1.0], [35300.0, 1.0], [35700.0, 1.0], [36500.0, 1.0], [38100.0, 1.0], [40100.0, 1.0], [41300.0, 2.0], [41700.0, 1.0], [44100.0, 3.0], [46500.0, 1.0], [50500.0, 1.0], [200.0, 10809.0], [54900.0, 1.0], [53700.0, 1.0], [62100.0, 1.0], [300.0, 1551.0], [74600.0, 1.0], [80200.0, 1.0], [84200.0, 2.0], [400.0, 1821.0], [105000.0, 1.0], [500.0, 4720.0], [600.0, 2958.0], [700.0, 2361.0], [800.0, 1117.0], [900.0, 734.0], [1000.0, 556.0], [1100.0, 1467.0], [1200.0, 1783.0], [1300.0, 696.0], [1400.0, 534.0], [1500.0, 721.0], [1600.0, 732.0], [1700.0, 724.0], [1800.0, 349.0], [1900.0, 278.0], [2000.0, 224.0], [2100.0, 196.0], [2200.0, 173.0], [2300.0, 139.0], [2400.0, 131.0], [2500.0, 89.0], [2600.0, 99.0], [2700.0, 101.0], [2800.0, 74.0], [2900.0, 61.0], [3000.0, 50.0], [3100.0, 106.0], [3300.0, 90.0], [3200.0, 262.0], [208500.0, 1.0], [3400.0, 93.0], [3500.0, 126.0], [3600.0, 177.0], [3700.0, 165.0], [3800.0, 93.0], [3900.0, 75.0], [4000.0, 61.0], [4100.0, 53.0], [4200.0, 46.0], [4300.0, 39.0], [4500.0, 37.0], [4600.0, 28.0], [4400.0, 39.0], [4800.0, 32.0], [4700.0, 33.0], [5000.0, 36.0], [5100.0, 25.0], [4900.0, 24.0], [5300.0, 25.0], [5200.0, 28.0], [83300.0, 1.0], [5400.0, 14.0], [5600.0, 15.0], [5500.0, 23.0], [88900.0, 1.0], [5800.0, 12.0], [5700.0, 23.0], [6000.0, 17.0], [6100.0, 13.0], [5900.0, 15.0], [6200.0, 18.0], [6300.0, 24.0], [6500.0, 19.0], [6600.0, 17.0], [6400.0, 10.0], [6900.0, 15.0], [6700.0, 16.0], [6800.0, 13.0], [7100.0, 16.0], [7000.0, 13.0], [7200.0, 38.0], [7300.0, 13.0], [7400.0, 26.0], [7500.0, 25.0], [7600.0, 51.0], [7900.0, 24.0], [7800.0, 25.0], [7700.0, 40.0], [8100.0, 18.0], [8000.0, 24.0], [8300.0, 15.0], [8500.0, 12.0], [8600.0, 10.0], [8200.0, 13.0], [8700.0, 15.0], [8400.0, 7.0], [132600.0, 1.0], [9000.0, 13.0], [8900.0, 15.0], [9100.0, 9.0], [8800.0, 11.0], [9200.0, 7.0], [9300.0, 5.0], [9700.0, 6.0], [9400.0, 6.0], [9500.0, 9.0], [9600.0, 4.0], [9900.0, 13.0], [10100.0, 6.0], [10000.0, 6.0], [10200.0, 3.0], [9800.0, 6.0], [10400.0, 9.0], [10600.0, 5.0], [10300.0, 3.0], [10700.0, 2.0], [10500.0, 9.0], [11000.0, 6.0], [10800.0, 8.0], [10900.0, 5.0], [11100.0, 3.0], [11200.0, 4.0], [11600.0, 4.0], [11700.0, 3.0], [11400.0, 4.0], [11300.0, 9.0], [11500.0, 7.0], [12100.0, 8.0], [12000.0, 3.0], [11900.0, 4.0], [12200.0, 2.0], [12500.0, 3.0], [12300.0, 4.0], [12400.0, 3.0], [12600.0, 5.0], [12700.0, 5.0], [12900.0, 4.0], [12800.0, 6.0], [13100.0, 4.0], [13200.0, 2.0], [13000.0, 3.0], [13300.0, 3.0], [13800.0, 3.0], [13400.0, 3.0], [13600.0, 3.0], [13500.0, 3.0], [13700.0, 2.0], [13900.0, 4.0], [14100.0, 2.0], [14200.0, 3.0], [14300.0, 1.0], [14000.0, 6.0], [14700.0, 5.0], [14800.0, 5.0], [14400.0, 2.0], [14500.0, 3.0], [14600.0, 1.0], [15000.0, 7.0], [15200.0, 7.0], [14900.0, 3.0], [15300.0, 3.0], [15100.0, 1.0], [15600.0, 24.0], [15700.0, 34.0], [15500.0, 13.0], [15800.0, 14.0], [15400.0, 1.0], [16300.0, 3.0], [16200.0, 6.0], [16000.0, 8.0], [15900.0, 13.0], [16100.0, 4.0], [16800.0, 3.0], [16400.0, 10.0], [17400.0, 5.0], [17200.0, 5.0], [17000.0, 5.0], [16600.0, 1.0], [17600.0, 3.0], [18000.0, 1.0], [18800.0, 4.0], [19000.0, 1.0], [20200.0, 2.0], [20000.0, 1.0], [19600.0, 1.0], [20400.0, 1.0], [19800.0, 1.0], [20800.0, 2.0], [21000.0, 2.0], [21200.0, 4.0], [21400.0, 1.0], [22000.0, 6.0], [22400.0, 2.0], [21800.0, 7.0], [22200.0, 2.0], [21600.0, 3.0], [23000.0, 2.0], [22800.0, 3.0], [22600.0, 2.0], [23400.0, 1.0], [23800.0, 1.0], [24000.0, 1.0], [23600.0, 1.0], [25000.0, 2.0], [24600.0, 1.0], [25200.0, 1.0], [26200.0, 2.0], [26600.0, 1.0], [26400.0, 1.0], [27600.0, 1.0], [27000.0, 1.0], [28000.0, 1.0], [27800.0, 1.0], [29200.0, 1.0], [29000.0, 1.0], [29400.0, 1.0], [30600.0, 1.0], [31400.0, 1.0], [32800.0, 2.0], [34400.0, 1.0], [35600.0, 1.0], [41600.0, 1.0], [46800.0, 1.0], [46000.0, 1.0], [50000.0, 1.0], [53200.0, 1.0], [53600.0, 2.0], [58800.0, 1.0], [58400.0, 1.0], [60800.0, 1.0], [69600.0, 1.0], [75200.0, 1.0], [84800.0, 1.0], [89600.0, 1.0], [93600.0, 1.0], [99200.0, 1.0], [105600.0, 1.0], [116800.0, 1.0], [117600.0, 1.0], [120000.0, 1.0], [73500.0, 1.0], [82300.0, 1.0], [98300.0, 1.0], [103100.0, 2.0], [105500.0, 1.0], [104700.0, 1.0], [113500.0, 1.0], [142600.0, 1.0], [33900.0, 1.0], [35900.0, 1.0], [36300.0, 2.0], [36700.0, 1.0], [37100.0, 1.0], [42700.0, 1.0], [43100.0, 2.0], [45500.0, 2.0], [45900.0, 1.0], [49900.0, 1.0], [50700.0, 1.0], [52300.0, 1.0], [58700.0, 1.0], [59500.0, 1.0], [253900.0, 1.0], [84600.0, 2.0], [88600.0, 1.0], [94200.0, 1.0], [106200.0, 1.0], [117400.0, 1.0], [142800.0, 1.0], [158800.0, 1.0], [161300.0, 1.0], [67700.0, 1.0], [66900.0, 1.0], [71700.0, 1.0], [72500.0, 1.0], [76500.0, 1.0], [82100.0, 1.0], [94100.0, 1.0], [103700.0, 1.0], [16500.0, 8.0], [17300.0, 1.0], [17100.0, 3.0], [17500.0, 2.0], [17700.0, 2.0], [18100.0, 3.0], [17900.0, 4.0], [19300.0, 1.0], [18700.0, 1.0], [19100.0, 1.0], [19700.0, 3.0], [19500.0, 3.0], [20300.0, 1.0], [20100.0, 1.0], [21100.0, 4.0], [21500.0, 2.0], [21300.0, 1.0], [21700.0, 8.0], [22100.0, 2.0], [22500.0, 3.0], [22300.0, 1.0], [21900.0, 3.0], [22700.0, 4.0], [23100.0, 1.0], [23300.0, 1.0], [23500.0, 1.0], [22900.0, 2.0], [24500.0, 2.0], [23700.0, 1.0], [24100.0, 2.0], [26100.0, 2.0], [26300.0, 1.0], [25900.0, 2.0], [28300.0, 1.0], [28500.0, 1.0], [27900.0, 1.0], [29500.0, 2.0], [29100.0, 1.0], [30300.0, 1.0], [30500.0, 1.0], [30700.0, 1.0], [29700.0, 1.0], [30900.0, 2.0], [31500.0, 2.0], [32100.0, 1.0], [32700.0, 1.0], [31900.0, 1.0], [33000.0, 1.0], [35000.0, 1.0], [35400.0, 1.0], [38600.0, 1.0], [39800.0, 1.0], [43000.0, 1.0], [42600.0, 1.0], [47400.0, 1.0], [49000.0, 1.0], [50600.0, 2.0], [50200.0, 1.0], [49800.0, 2.0], [94000.0, 1.0], [100400.0, 1.0], [103600.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1016500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 33863.0, "series": [{"data": [[0.0, 33863.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 16901.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 7230.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 6.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.392664872139964, "minX": 1.72918806E12, "maxY": 386.830731306492, "series": [{"data": [[1.72918914E12, 20.870193887610913], [1.72918818E12, 51.368078175895704], [1.72918848E12, 95.86576517150411], [1.72918854E12, 43.682993197278854], [1.72918884E12, 26.600066711140748], [1.7291889E12, 22.367518493611282], [1.7291892E12, 20.926744690073708], [1.72918824E12, 42.05443548387096], [1.7291883E12, 41.28987880773015], [1.7291886E12, 24.528455284552855], [1.72918866E12, 22.577864838393737], [1.72918896E12, 20.69656992084429], [1.72918902E12, 18.392664872139964], [1.72918806E12, 386.830731306492], [1.72918836E12, 38.28696826468601], [1.72918842E12, 101.45156889495223], [1.72918872E12, 19.583528624037527], [1.72918878E12, 26.486881434739296], [1.72918908E12, 20.0073652494141], [1.72918812E12, 200.2107450281978]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291892E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 335.4096975088961, "minX": 1.0, "maxY": 13379.75, "series": [{"data": [[2.0, 1153.25], [3.0, 661.4], [4.0, 683.125], [5.0, 917.0], [6.0, 877.0], [7.0, 411.7413793103448], [8.0, 507.5555555555555], [9.0, 459.4368932038834], [10.0, 510.9389312977103], [11.0, 471.13068181818215], [12.0, 453.98954703832766], [13.0, 375.6562499999999], [14.0, 371.6582466567607], [15.0, 356.79017013232533], [16.0, 338.83455882352916], [17.0, 335.4096975088961], [18.0, 345.34721681588144], [19.0, 372.10832424572857], [20.0, 368.6966679433178], [21.0, 377.13279352226823], [22.0, 397.34064007014456], [23.0, 413.59777282850774], [24.0, 445.4626121635091], [25.0, 441.3325740318911], [26.0, 468.6182857142856], [27.0, 491.58926342072346], [28.0, 484.3767724510456], [29.0, 1287.5081481481488], [30.0, 521.971217105264], [31.0, 542.3313550939666], [33.0, 774.638118214716], [32.0, 733.5779427359487], [35.0, 1131.5951086956527], [34.0, 592.1815889028998], [37.0, 661.4565537555231], [36.0, 690.5206258890468], [39.0, 751.7605932203393], [38.0, 924.2404006677798], [41.0, 604.7700421940922], [40.0, 704.0233545647556], [43.0, 977.6950354609937], [42.0, 698.6467780429598], [45.0, 1442.6666666666663], [44.0, 1304.9259259259247], [47.0, 700.9498069498071], [46.0, 1520.670731707317], [49.0, 2343.0229007633575], [48.0, 781.7604562737641], [51.0, 995.0390625000005], [50.0, 1275.9717741935488], [53.0, 1462.256038647342], [52.0, 917.7871485943774], [55.0, 1853.7540983606564], [54.0, 1029.9723756906085], [57.0, 1316.763819095477], [56.0, 1761.0204081632653], [59.0, 2517.5047169811355], [58.0, 1333.8957345971558], [61.0, 899.7945205479454], [60.0, 2249.835], [63.0, 1517.9159663865537], [62.0, 2126.367187499999], [67.0, 1550.0119047619053], [66.0, 1474.4046242774566], [65.0, 1743.472222222222], [64.0, 2186.578947368421], [71.0, 1924.9785714285706], [70.0, 1257.0588235294115], [69.0, 1002.7482014388486], [68.0, 1608.8499999999995], [75.0, 1347.194915254237], [73.0, 1679.8518518518517], [72.0, 4670.206349206348], [74.0, 2321.719298245616], [79.0, 1492.5784313725496], [78.0, 2128.5408163265315], [77.0, 1950.5384615384617], [76.0, 1496.768292682927], [83.0, 1801.558823529412], [82.0, 1972.7395833333333], [81.0, 1749.474576271186], [80.0, 1298.009900990099], [87.0, 1744.8046874999995], [86.0, 1262.6692913385828], [85.0, 1858.5447154471553], [84.0, 1500.142857142857], [91.0, 2067.453389830508], [90.0, 1324.5701357466073], [89.0, 1324.4195402298847], [88.0, 1512.4935064935064], [95.0, 2298.9251101321597], [93.0, 1569.0717703349283], [92.0, 1450.4366197183094], [94.0, 1779.6405529953909], [99.0, 1921.530303030303], [98.0, 1542.604545454545], [97.0, 1722.9789915966398], [96.0, 1601.5922746781123], [103.0, 2890.4880000000007], [102.0, 1582.7884615384617], [101.0, 2420.853932584271], [100.0, 1920.2850241545898], [107.0, 1869.0000000000002], [106.0, 1787.4651162790701], [105.0, 1900.136], [104.0, 1815.9672131147531], [111.0, 1633.7764705882353], [110.0, 1448.5542168674694], [109.0, 1677.1739130434778], [108.0, 2086.3307086614177], [115.0, 2016.3157894736844], [114.0, 2674.854166666666], [113.0, 1412.6896551724137], [112.0, 2192.6901408450703], [119.0, 1204.9130434782612], [118.0, 2334.7407407407404], [117.0, 1515.7037037037037], [116.0, 2540.6176470588243], [123.0, 5152.500000000001], [121.0, 5522.6296296296305], [120.0, 1857.9199999999998], [122.0, 1463.8947368421057], [127.0, 3752.0833333333326], [126.0, 2918.6315789473683], [125.0, 3558.285714285714], [124.0, 6531.279999999999], [135.0, 2139.3548387096776], [134.0, 5010.857142857144], [133.0, 4658.16], [132.0, 1662.6], [131.0, 3254.3599999999997], [130.0, 4907.349999999999], [129.0, 2673.166666666667], [128.0, 2034.3999999999999], [143.0, 3886.6086956521744], [142.0, 1888.4230769230767], [141.0, 1991.578947368421], [140.0, 2243.9411764705883], [138.0, 2512.242424242424], [139.0, 1985.0975609756094], [137.0, 3751.9583333333335], [136.0, 6508.823529411764], [151.0, 6437.0], [150.0, 4706.7692307692305], [149.0, 1827.818181818182], [148.0, 5337.272727272729], [147.0, 1530.6], [146.0, 2000.5333333333333], [145.0, 3247.7647058823527], [144.0, 1683.25], [159.0, 3632.0000000000005], [158.0, 1919.6562500000005], [157.0, 4775.461538461538], [156.0, 2365.4666666666667], [155.0, 1982.875], [154.0, 3715.25], [153.0, 2096.5], [152.0, 1747.65], [167.0, 3113.809523809524], [166.0, 4734.722222222223], [165.0, 3022.888888888889], [164.0, 4630.928571428571], [163.0, 3624.8181818181815], [162.0, 3585.4090909090905], [161.0, 2505.448275862069], [160.0, 9484.608695652174], [175.0, 6206.380952380952], [174.0, 1357.1333333333332], [173.0, 2022.357142857143], [172.0, 5301.058823529412], [171.0, 1570.7333333333333], [170.0, 6503.4], [169.0, 6328.166666666666], [168.0, 2090.681818181818], [183.0, 1657.5625000000002], [182.0, 5581.571428571429], [180.0, 4832.124999999998], [179.0, 3815.4799999999996], [178.0, 2145.888888888889], [177.0, 4357.749999999998], [176.0, 4998.347826086956], [181.0, 1199.1], [191.0, 2359.0], [190.0, 5336.0], [189.0, 1496.217391304348], [188.0, 3761.631578947369], [187.0, 2668.1666666666665], [186.0, 1296.3000000000002], [185.0, 6012.307692307692], [184.0, 2700.5555555555557], [199.0, 2606.1250000000005], [198.0, 4969.529411764706], [197.0, 1388.9999999999998], [196.0, 7476.333333333333], [195.0, 2357.3888888888887], [194.0, 4889.689655172414], [193.0, 1960.7058823529414], [192.0, 2184.125], [207.0, 1161.6666666666667], [206.0, 2720.3333333333335], [205.0, 2569.3636363636365], [204.0, 1701.4666666666667], [203.0, 2361.2799999999997], [202.0, 3531.263157894737], [201.0, 1881.0], [200.0, 1770.642857142857], [215.0, 3012.35], [214.0, 2620.5000000000005], [213.0, 6097.461538461538], [212.0, 4559.818181818181], [211.0, 1125.0000000000002], [210.0, 3460.636363636364], [209.0, 942.8749999999999], [208.0, 4779.916666666667], [223.0, 1406.5], [222.0, 1623.1999999999996], [221.0, 3700.0], [220.0, 5676.875000000001], [219.0, 1529.142857142857], [218.0, 1788.4545454545455], [217.0, 2002.9999999999995], [216.0, 1903.8947368421057], [231.0, 1300.2631578947367], [230.0, 1491.2727272727273], [229.0, 4325.533333333333], [228.0, 6252.533333333334], [227.0, 1128.9333333333332], [226.0, 3579.5], [225.0, 3076.1428571428573], [224.0, 3171.1111111111113], [239.0, 6024.428571428572], [238.0, 4558.875000000001], [237.0, 1905.8000000000002], [235.0, 6529.5], [234.0, 1924.6153846153845], [233.0, 1332.7142857142858], [232.0, 2338.0], [236.0, 1897.0], [247.0, 2413.259259259259], [246.0, 6331.260869565217], [245.0, 6058.913043478259], [244.0, 3830.8260869565215], [243.0, 3548.25], [242.0, 6804.600000000001], [241.0, 3114.0], [240.0, 2582.9285714285716], [255.0, 7197.105263157895], [254.0, 5588.5], [253.0, 3560.75], [252.0, 7952.2307692307695], [251.0, 4400.125], [250.0, 4490.045454545455], [249.0, 4996.041666666668], [248.0, 2284.9166666666665], [270.0, 3432.454545454546], [271.0, 4177.941176470587], [269.0, 5081.0], [268.0, 4797.333333333334], [267.0, 4059.2], [266.0, 3355.909090909091], [265.0, 3626.642857142857], [264.0, 4615.714285714285], [263.0, 5080.625], [257.0, 3773.294117647059], [256.0, 5228.0], [259.0, 7806.545454545453], [258.0, 3077.9230769230767], [262.0, 5002.909090909091], [261.0, 4121.4], [260.0, 3942.1], [286.0, 1100.6], [287.0, 4097.0], [285.0, 5459.0], [284.0, 3588.4], [283.0, 7680.181818181818], [282.0, 6504.333333333333], [281.0, 2071.125], [280.0, 2452.0666666666666], [279.0, 2238.692307692308], [273.0, 5955.9333333333325], [272.0, 7426.857142857143], [275.0, 4247.944444444444], [274.0, 3049.642857142857], [278.0, 5021.428571428572], [277.0, 2937.769230769231], [276.0, 2068.090909090909], [302.0, 8324.1], [303.0, 1757.25], [301.0, 2418.6363636363635], [300.0, 4903.4], [299.0, 4503.153846153847], [298.0, 4789.692307692308], [297.0, 3722.857142857143], [296.0, 2235.166666666667], [295.0, 3622.181818181818], [289.0, 3188.4], [288.0, 3371.6], [291.0, 5549.333333333333], [290.0, 1442.6], [294.0, 1712.0], [293.0, 1586.0], [292.0, 2197.4], [318.0, 6418.166666666667], [319.0, 5310.333333333334], [317.0, 4635.571428571428], [316.0, 2787.0], [315.0, 7779.000000000001], [314.0, 1975.4999999999998], [313.0, 6313.899999999999], [312.0, 4022.3076923076924], [311.0, 4892.777777777777], [305.0, 6743.166666666667], [304.0, 10247.166666666666], [307.0, 4187.384615384615], [306.0, 3938.0999999999995], [310.0, 10284.222222222223], [309.0, 1747.909090909091], [308.0, 2908.0666666666666], [334.0, 1194.5714285714287], [335.0, 6030.714285714286], [333.0, 1177.6666666666667], [332.0, 1002.0], [331.0, 2750.0], [330.0, 3531.2], [329.0, 4034.0], [328.0, 3407.0], [327.0, 3442.666666666667], [321.0, 2377.0], [320.0, 1887.4], [323.0, 2884.6666666666665], [322.0, 5883.857142857143], [326.0, 1268.0], [325.0, 2487.0], [324.0, 1358.5], [350.0, 2293.8], [351.0, 1760.75], [349.0, 2328.333333333333], [348.0, 5527.2], [347.0, 3790.666666666667], [346.0, 2004.5714285714284], [345.0, 1941.0], [344.0, 2739.5], [343.0, 8242.666666666666], [337.0, 7150.875], [336.0, 2184.2], [339.0, 3483.8333333333335], [338.0, 6273.666666666667], [342.0, 8651.8], [341.0, 4105.4], [340.0, 6916.666666666666], [366.0, 2403.285714285714], [367.0, 3566.6000000000004], [364.0, 6794.6], [365.0, 7330.0], [355.0, 9305.0], [354.0, 5143.888888888889], [353.0, 8453.57142857143], [352.0, 3158.4285714285716], [363.0, 5926.125], [362.0, 7012.142857142857], [361.0, 6348.333333333334], [360.0, 7193.285714285715], [359.0, 9133.25], [358.0, 11009.5], [357.0, 5117.75], [356.0, 10471.0], [382.0, 1942.0], [383.0, 9597.666666666666], [381.0, 2481.6666666666665], [380.0, 2716.0], [379.0, 5539.666666666667], [378.0, 7170.75], [377.0, 3083.3333333333335], [376.0, 1485.5], [375.0, 7630.0], [368.0, 1929.6], [370.0, 1913.5], [371.0, 2893.0], [369.0, 2740.0], [374.0, 5587.857142857143], [372.0, 4589.0], [373.0, 1220.0], [386.0, 1626.0], [388.0, 4592.0], [393.0, 5210.499999999999], [395.0, 12013.833333333334], [394.0, 4409.166666666667], [392.0, 5993.0], [391.0, 6598.4], [390.0, 7118.25], [389.0, 3468.75], [387.0, 2720.6666666666665], [397.0, 3186.0], [396.0, 6605.333333333333], [399.0, 7340.125], [398.0, 5710.625], [384.0, 1725.6666666666667], [385.0, 3443.5], [414.0, 6579.454545454546], [415.0, 4808.772727272728], [413.0, 5257.2], [412.0, 6680.583333333333], [411.0, 5080.875], [410.0, 7140.8], [409.0, 9226.777777777777], [408.0, 9756.0], [407.0, 13379.75], [400.0, 5887.857142857143], [401.0, 7820.0], [403.0, 10205.0], [402.0, 3363.5], [406.0, 2190.25], [404.0, 4131.0], [405.0, 2302.8], [430.0, 5085.333333333334], [419.0, 6112.250000000002], [423.0, 5003.153846153846], [417.0, 4431.65], [416.0, 6609.1875], [418.0, 4224.3125], [431.0, 7370.8], [429.0, 5685.333333333333], [428.0, 5506.0], [427.0, 3776.818181818182], [426.0, 6113.818181818182], [425.0, 7193.923076923076], [424.0, 5255.555555555556], [422.0, 5930.599999999999], [421.0, 4188.1875], [420.0, 4558.0], [435.0, 9623.166666666668], [439.0, 5867.9333333333325], [438.0, 5239.75], [440.0, 6144.217391304347], [441.0, 4135.555555555556], [443.0, 5151.000000000001], [442.0, 4836.0], [434.0, 6441.181818181819], [432.0, 6149.466666666667], [436.0, 9310.0], [437.0, 9053.933333333334], [433.0, 5814.5], [447.0, 3143.0], [446.0, 9352.9], [445.0, 4412.2], [444.0, 4662.666666666667], [462.0, 6931.0], [463.0, 4010.1111111111113], [461.0, 13136.428571428572], [460.0, 7284.545454545455], [459.0, 8853.250000000002], [458.0, 5262.4], [457.0, 4543.823529411764], [456.0, 3900.4], [455.0, 6951.166666666666], [449.0, 5829.428571428572], [448.0, 4537.428571428571], [451.0, 8298.833333333334], [450.0, 5231.5], [454.0, 7918.090909090909], [453.0, 4405.222222222223], [452.0, 5998.571428571428], [477.0, 5372.153846153846], [476.0, 5946.2], [467.0, 5323.0], [465.0, 2744.3333333333335], [466.0, 7387.75], [464.0, 7048.111111111111], [478.0, 8293.199999999999], [479.0, 4922.0], [475.0, 6388.888888888889], [474.0, 6429.636363636364], [473.0, 4144.0], [472.0, 7803.6], [471.0, 6313.875], [470.0, 6554.0], [469.0, 5625.75], [468.0, 5558.900000000001], [485.0, 4739.5], [483.0, 8297.0], [482.0, 4009.0], [481.0, 5840.0], [480.0, 5334.0], [1.0, 7223.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[53.486327586207494, 1032.280413793102]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 485.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2592.0, "minX": 1.72918806E12, "maxY": 5448023.083333333, "series": [{"data": [[1.72918914E12, 4923774.233333333], [1.72918818E12, 4967402.283333333], [1.72918848E12, 4905974.216666667], [1.72918854E12, 4757114.183333334], [1.72918884E12, 4850920.883333334], [1.7291889E12, 4812102.016666667], [1.7291892E12, 3732878.7], [1.72918824E12, 4813761.4], [1.7291883E12, 4938368.55], [1.7291886E12, 4975554.2], [1.72918866E12, 4956063.733333333], [1.72918896E12, 4905961.75], [1.72918902E12, 4808887.2], [1.72918806E12, 1965991.6333333333], [1.72918836E12, 4792699.5], [1.72918842E12, 4744164.3], [1.72918872E12, 4833062.866666666], [1.72918878E12, 4871938.466666667], [1.72918908E12, 4833161.133333334], [1.72918812E12, 5448023.083333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72918914E12, 6491.733333333334], [1.72918818E12, 6549.333333333333], [1.72918848E12, 6468.266666666666], [1.72918854E12, 6272.0], [1.72918884E12, 6395.733333333334], [1.7291889E12, 6344.533333333334], [1.7291892E12, 4921.6], [1.72918824E12, 6346.666666666667], [1.7291883E12, 6510.933333333333], [1.7291886E12, 6560.0], [1.72918866E12, 6534.4], [1.72918896E12, 6468.266666666666], [1.72918902E12, 6340.266666666666], [1.72918806E12, 2592.0], [1.72918836E12, 6318.933333333333], [1.72918842E12, 6254.933333333333], [1.72918872E12, 6372.266666666666], [1.72918878E12, 6423.466666666666], [1.72918908E12, 6372.266666666666], [1.72918812E12, 7182.933333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291892E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 333.44078061911205, "minX": 1.72918806E12, "maxY": 5788.465899753491, "series": [{"data": [[1.72918914E12, 386.49326322707896], [1.72918818E12, 1757.7048859934916], [1.72918848E12, 1862.095976253299], [1.72918854E12, 916.5404761904758], [1.72918884E12, 500.311874583055], [1.7291889E12, 401.1533288500343], [1.7291892E12, 392.69830949284756], [1.72918824E12, 1038.9862231182794], [1.7291883E12, 848.9168031444493], [1.7291886E12, 413.5700813008144], [1.72918866E12, 376.7456741756449], [1.72918896E12, 359.21965699208454], [1.72918902E12, 333.44078061911205], [1.72918806E12, 5788.465899753491], [1.72918836E12, 721.7180958811608], [1.72918842E12, 1747.2602319236037], [1.72918872E12, 355.1288918647471], [1.72918878E12, 497.79475257389527], [1.72918908E12, 690.598928690996], [1.72918812E12, 3634.097061442571]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291892E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 271.90982503364813, "minX": 1.72918806E12, "maxY": 3509.1725554642553, "series": [{"data": [[1.72918914E12, 322.1176470588242], [1.72918818E12, 764.2644951140057], [1.72918848E12, 1433.9396437994703], [1.72918854E12, 701.9428571428573], [1.72918884E12, 392.6080720480316], [1.7291889E12, 324.8937457969064], [1.7291892E12, 328.37711313393993], [1.72918824E12, 595.5278897849458], [1.7291883E12, 600.6541107107751], [1.7291886E12, 339.2195121951212], [1.72918866E12, 310.3192948090096], [1.72918896E12, 295.932387862797], [1.72918902E12, 271.90982503364813], [1.72918806E12, 3509.1725554642553], [1.72918836E12, 581.4625253207299], [1.72918842E12, 1335.2817189631653], [1.72918872E12, 285.96886508202164], [1.72918878E12, 388.87446031218803], [1.72918908E12, 287.0046869769004], [1.72918812E12, 2255.705253784504]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291892E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 198.44818304172296, "minX": 1.72918806E12, "maxY": 2423.00328677075, "series": [{"data": [[1.72918914E12, 240.62339796253661], [1.72918818E12, 509.4729641693805], [1.72918848E12, 1204.7648416886545], [1.72918854E12, 564.1765306122442], [1.72918884E12, 289.24416277518395], [1.7291889E12, 235.87457969065213], [1.7291892E12, 246.35760728218486], [1.72918824E12, 487.6290322580642], [1.7291883E12, 485.9190959711751], [1.7291886E12, 257.02699186991885], [1.72918866E12, 232.14920013059148], [1.72918896E12, 220.40072559366752], [1.72918902E12, 198.44818304172296], [1.72918806E12, 2423.00328677075], [1.72918836E12, 440.77008777852853], [1.72918842E12, 1092.1800818553875], [1.72918872E12, 209.23736190157334], [1.72918878E12, 281.97376286947883], [1.72918908E12, 214.0823568798128], [1.72918812E12, 1687.6918967052534]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291892E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 158.0, "minX": 1.72918806E12, "maxY": 1016544.0, "series": [{"data": [[1.72918914E12, 7238.0], [1.72918818E12, 132617.0], [1.72918848E12, 58419.0], [1.72918854E12, 142826.0], [1.72918884E12, 13973.0], [1.7291889E12, 10848.0], [1.7291892E12, 7514.0], [1.72918824E12, 208521.0], [1.7291883E12, 253930.0], [1.7291886E12, 15215.0], [1.72918866E12, 7563.0], [1.72918896E12, 15214.0], [1.72918902E12, 7234.0], [1.72918806E12, 32858.0], [1.72918836E12, 15320.0], [1.72918842E12, 22888.0], [1.72918872E12, 16413.0], [1.72918878E12, 8713.0], [1.72918908E12, 1016544.0], [1.72918812E12, 89604.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72918914E12, 1180.0], [1.72918818E12, 1517.8000000000002], [1.72918848E12, 3739.0], [1.72918854E12, 1629.0], [1.72918884E12, 1189.0], [1.7291889E12, 868.0], [1.7291892E12, 1031.0000000000082], [1.72918824E12, 1593.0000000000005], [1.7291883E12, 1614.0], [1.7291886E12, 1116.800000000002], [1.72918866E12, 912.5999999999985], [1.72918896E12, 664.5000000000014], [1.72918902E12, 565.0], [1.72918806E12, 13572.40000000001], [1.72918836E12, 1496.2000000000016], [1.72918842E12, 3480.3000000000216], [1.72918872E12, 741.8000000000025], [1.72918878E12, 1189.8000000000002], [1.72918908E12, 815.8000000000025], [1.72918812E12, 7776.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72918914E12, 3192.3599999999997], [1.72918818E12, 80760.86999999994], [1.72918848E12, 15783.01], [1.72918854E12, 7299.130000000001], [1.72918884E12, 2861.3099999999217], [1.7291889E12, 2874.0], [1.7291892E12, 3212.92], [1.72918824E12, 4944.079999999947], [1.7291883E12, 4397.5499999999865], [1.7291886E12, 3211.0], [1.72918866E12, 3194.0], [1.72918896E12, 2255.570000000027], [1.72918902E12, 1698.3799999999983], [1.72918806E12, 26288.039999999994], [1.72918836E12, 4115.5199999999895], [1.72918842E12, 15766.380000000001], [1.72918872E12, 1818.6399999999894], [1.72918878E12, 2695.400000000006], [1.72918908E12, 1823.079999999999], [1.72918812E12, 46657.96000000006]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72918914E12, 1217.0], [1.72918818E12, 2188.299999999994], [1.72918848E12, 5376.749999999996], [1.72918854E12, 2548.2999999999975], [1.72918884E12, 1500.0499999999997], [1.7291889E12, 1213.0], [1.7291892E12, 1216.0], [1.72918824E12, 2187.2], [1.7291883E12, 2353.0999999999995], [1.7291886E12, 1234.1999999999998], [1.72918866E12, 1211.0], [1.72918896E12, 1204.0], [1.72918902E12, 1198.0], [1.72918806E12, 17429.0], [1.72918836E12, 1878.0999999999995], [1.72918842E12, 4653.2999999999965], [1.72918872E12, 1195.0], [1.72918878E12, 1529.000000000001], [1.72918908E12, 1202.6], [1.72918812E12, 15764.199999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72918914E12, 165.0], [1.72918818E12, 175.0], [1.72918848E12, 574.0], [1.72918854E12, 163.0], [1.72918884E12, 164.0], [1.7291889E12, 162.0], [1.7291892E12, 161.0], [1.72918824E12, 163.0], [1.7291883E12, 160.0], [1.7291886E12, 164.0], [1.72918866E12, 162.0], [1.72918896E12, 158.0], [1.72918902E12, 161.0], [1.72918806E12, 276.0], [1.72918836E12, 166.0], [1.72918842E12, 166.0], [1.72918872E12, 161.0], [1.72918878E12, 158.0], [1.72918908E12, 164.0], [1.72918812E12, 182.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72918914E12, 199.0], [1.72918818E12, 342.0], [1.72918848E12, 959.5], [1.72918854E12, 581.0], [1.72918884E12, 210.0], [1.7291889E12, 202.0], [1.7291892E12, 197.0], [1.72918824E12, 408.0], [1.7291883E12, 288.0], [1.7291886E12, 201.0], [1.72918866E12, 197.0], [1.72918896E12, 196.0], [1.72918902E12, 193.0], [1.72918806E12, 3810.0], [1.72918836E12, 544.0], [1.72918842E12, 957.5], [1.72918872E12, 192.0], [1.72918878E12, 205.0], [1.72918908E12, 196.0], [1.72918812E12, 1281.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291892E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 188.0, "minX": 1.0, "maxY": 158823.0, "series": [{"data": [[6.0, 2216.0], [7.0, 939.0], [8.0, 2565.5], [9.0, 1191.0], [10.0, 679.0], [11.0, 200.0], [12.0, 579.0], [13.0, 717.5], [14.0, 5139.0], [15.0, 449.0], [16.0, 561.0], [17.0, 828.0], [18.0, 1768.0], [19.0, 1726.0], [20.0, 188.0], [21.0, 209.0], [22.0, 809.5], [23.0, 856.0], [24.0, 843.5], [25.0, 952.0], [26.0, 536.5], [27.0, 1026.0], [28.0, 630.5], [29.0, 751.0], [30.0, 240.0], [31.0, 247.0], [32.0, 562.5], [33.0, 207.0], [34.0, 463.0], [35.0, 193.0], [36.0, 452.0], [37.0, 588.0], [39.0, 203.5], [38.0, 460.5], [41.0, 215.0], [40.0, 490.5], [43.0, 222.5], [42.0, 309.0], [44.0, 229.5], [45.0, 237.5], [47.0, 234.0], [46.0, 204.0], [49.0, 239.0], [48.0, 204.0], [51.0, 221.0], [50.0, 207.0], [52.0, 213.0], [53.0, 216.0], [55.0, 210.0], [54.0, 239.0], [56.0, 242.0], [57.0, 258.0], [58.0, 245.0], [59.0, 245.0], [60.0, 286.0], [61.0, 211.0], [63.0, 266.0], [62.0, 417.0], [65.0, 732.0], [64.0, 610.5], [66.0, 438.5], [67.0, 222.0], [69.0, 797.5], [70.0, 608.5], [68.0, 225.0], [74.0, 1610.0], [75.0, 1274.0], [72.0, 428.0], [73.0, 225.0], [79.0, 3375.5], [77.0, 1357.0], [76.0, 531.5], [78.0, 208.0], [81.0, 368.0], [80.0, 1076.5], [83.0, 607.0], [85.0, 2731.0], [84.0, 412.0], [87.0, 1381.5], [88.0, 1617.0], [91.0, 608.0], [90.0, 1246.0], [92.0, 821.0], [97.0, 741.0], [100.0, 1501.5], [106.0, 2225.0], [114.0, 2658.0], [121.0, 6564.0], [1.0, 4999.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[36.0, 15010.0], [73.0, 66922.0], [43.0, 10111.0], [84.0, 27076.0], [52.0, 31492.0], [55.0, 158823.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 121.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3566.5, "series": [{"data": [[6.0, 1248.5], [7.0, 756.0], [8.0, 1798.5], [9.0, 817.0], [10.0, 434.5], [11.0, 145.0], [12.0, 446.0], [13.0, 428.5], [14.0, 3566.5], [15.0, 379.0], [16.0, 415.0], [17.0, 456.0], [18.0, 1260.0], [19.0, 1208.0], [20.0, 136.0], [21.0, 153.0], [22.0, 476.0], [23.0, 515.0], [24.0, 390.5], [25.0, 558.0], [26.0, 385.0], [27.0, 502.0], [28.0, 430.5], [29.0, 445.0], [30.0, 170.0], [31.0, 147.0], [32.0, 393.5], [33.0, 148.0], [34.0, 370.5], [35.0, 141.0], [36.0, 308.0], [37.0, 414.0], [39.0, 146.0], [38.0, 332.5], [41.0, 152.0], [40.0, 383.5], [43.0, 155.0], [42.0, 194.0], [44.0, 160.5], [45.0, 165.0], [47.0, 167.0], [46.0, 146.0], [49.0, 166.0], [48.0, 145.0], [51.0, 156.0], [50.0, 148.0], [52.0, 152.0], [53.0, 152.0], [55.0, 149.0], [54.0, 166.0], [56.0, 168.0], [57.0, 180.0], [58.0, 171.0], [59.0, 168.0], [60.0, 198.0], [61.0, 151.0], [63.0, 177.5], [62.0, 257.0], [65.0, 475.0], [64.0, 415.0], [66.0, 286.5], [67.0, 155.0], [69.0, 442.5], [70.0, 423.0], [68.0, 157.0], [74.0, 1011.0], [75.0, 817.0], [72.0, 243.0], [73.0, 154.0], [79.0, 1924.0], [77.0, 1015.0], [76.0, 358.0], [78.0, 146.0], [81.0, 234.0], [80.0, 948.0], [83.0, 432.0], [85.0, 1834.5], [84.0, 242.0], [87.0, 1106.0], [88.0, 1177.0], [91.0, 295.5], [90.0, 1100.0], [92.0, 607.5], [97.0, 487.0], [100.0, 1166.5], [106.0, 1486.5], [114.0, 2084.0], [121.0, 3258.0], [1.0, 2737.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[36.0, 0.0], [73.0, 0.0], [43.0, 0.0], [84.0, 0.0], [52.0, 0.0], [55.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 121.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.1, "minX": 1.72918806E12, "maxY": 51.31666666666667, "series": [{"data": [[1.72918914E12, 50.68333333333333], [1.72918818E12, 50.61666666666667], [1.72918848E12, 50.45], [1.72918854E12, 47.56666666666667], [1.72918884E12, 50.0], [1.7291889E12, 49.38333333333333], [1.7291892E12, 38.15], [1.72918824E12, 50.266666666666666], [1.7291883E12, 49.96666666666667], [1.7291886E12, 51.28333333333333], [1.72918866E12, 51.31666666666667], [1.72918896E12, 50.6], [1.72918902E12, 49.6], [1.72918806E12, 28.1], [1.72918836E12, 49.9], [1.72918842E12, 49.6], [1.72918872E12, 49.81666666666667], [1.72918878E12, 50.21666666666667], [1.72918908E12, 49.68333333333333], [1.72918812E12, 49.46666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291892E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918806E12, "maxY": 56.11666666666667, "series": [{"data": [[1.72918914E12, 50.71666666666667], [1.72918818E12, 51.166666666666664], [1.72918848E12, 50.53333333333333], [1.72918854E12, 49.0], [1.72918884E12, 49.96666666666667], [1.7291889E12, 49.56666666666667], [1.7291892E12, 38.45], [1.72918824E12, 49.583333333333336], [1.7291883E12, 50.86666666666667], [1.7291886E12, 51.25], [1.72918866E12, 51.05], [1.72918896E12, 50.53333333333333], [1.72918902E12, 49.53333333333333], [1.72918806E12, 20.25], [1.72918836E12, 49.36666666666667], [1.72918842E12, 48.86666666666667], [1.72918872E12, 49.78333333333333], [1.72918878E12, 50.18333333333333], [1.72918908E12, 49.78333333333333], [1.72918812E12, 56.11666666666667]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72918806E12, 0.03333333333333333], [1.72918824E12, 0.016666666666666666], [1.7291883E12, 0.016666666666666666], [1.72918812E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7291892E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918806E12, "maxY": 56.11666666666667, "series": [{"data": [[1.72918914E12, 50.71666666666667], [1.72918818E12, 51.166666666666664], [1.72918848E12, 50.53333333333333], [1.72918854E12, 49.0], [1.72918884E12, 49.96666666666667], [1.7291889E12, 49.56666666666667], [1.7291892E12, 38.45], [1.72918824E12, 49.583333333333336], [1.7291883E12, 50.86666666666667], [1.7291886E12, 51.25], [1.72918866E12, 51.05], [1.72918896E12, 50.53333333333333], [1.72918902E12, 49.53333333333333], [1.72918806E12, 20.25], [1.72918836E12, 49.36666666666667], [1.72918842E12, 48.86666666666667], [1.72918872E12, 49.78333333333333], [1.72918878E12, 50.18333333333333], [1.72918908E12, 49.78333333333333], [1.72918812E12, 56.11666666666667]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72918806E12, 0.03333333333333333], [1.72918824E12, 0.016666666666666666], [1.7291883E12, 0.016666666666666666], [1.72918812E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291892E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72918806E12, "maxY": 56.11666666666667, "series": [{"data": [[1.72918914E12, 50.71666666666667], [1.72918818E12, 51.166666666666664], [1.72918848E12, 50.53333333333333], [1.72918854E12, 49.0], [1.72918884E12, 49.96666666666667], [1.7291889E12, 49.56666666666667], [1.7291892E12, 38.45], [1.72918824E12, 49.583333333333336], [1.7291883E12, 50.86666666666667], [1.7291886E12, 51.25], [1.72918866E12, 51.05], [1.72918896E12, 50.53333333333333], [1.72918902E12, 49.53333333333333], [1.72918806E12, 20.25], [1.72918836E12, 49.36666666666667], [1.72918842E12, 48.86666666666667], [1.72918872E12, 49.78333333333333], [1.72918878E12, 50.18333333333333], [1.72918908E12, 49.78333333333333], [1.72918812E12, 56.11666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72918806E12, 0.03333333333333333], [1.72918824E12, 0.016666666666666666], [1.7291883E12, 0.016666666666666666], [1.72918812E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7291892E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

