/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 150.0, "minX": 0.0, "maxY": 23987.0, "series": [{"data": [[0.0, 150.0], [0.1, 160.0], [0.2, 161.0], [0.3, 162.0], [0.4, 163.0], [0.5, 163.0], [0.6, 163.0], [0.7, 164.0], [0.8, 164.0], [0.9, 164.0], [1.0, 165.0], [1.1, 165.0], [1.2, 165.0], [1.3, 165.0], [1.4, 165.0], [1.5, 166.0], [1.6, 166.0], [1.7, 166.0], [1.8, 166.0], [1.9, 166.0], [2.0, 166.0], [2.1, 166.0], [2.2, 167.0], [2.3, 167.0], [2.4, 167.0], [2.5, 167.0], [2.6, 167.0], [2.7, 167.0], [2.8, 167.0], [2.9, 167.0], [3.0, 168.0], [3.1, 168.0], [3.2, 168.0], [3.3, 168.0], [3.4, 168.0], [3.5, 168.0], [3.6, 168.0], [3.7, 168.0], [3.8, 168.0], [3.9, 168.0], [4.0, 168.0], [4.1, 168.0], [4.2, 169.0], [4.3, 169.0], [4.4, 169.0], [4.5, 169.0], [4.6, 169.0], [4.7, 169.0], [4.8, 169.0], [4.9, 169.0], [5.0, 169.0], [5.1, 169.0], [5.2, 169.0], [5.3, 169.0], [5.4, 169.0], [5.5, 169.0], [5.6, 170.0], [5.7, 170.0], [5.8, 170.0], [5.9, 170.0], [6.0, 170.0], [6.1, 170.0], [6.2, 170.0], [6.3, 170.0], [6.4, 170.0], [6.5, 170.0], [6.6, 170.0], [6.7, 170.0], [6.8, 170.0], [6.9, 170.0], [7.0, 170.0], [7.1, 170.0], [7.2, 170.0], [7.3, 171.0], [7.4, 171.0], [7.5, 171.0], [7.6, 171.0], [7.7, 171.0], [7.8, 171.0], [7.9, 171.0], [8.0, 171.0], [8.1, 171.0], [8.2, 171.0], [8.3, 171.0], [8.4, 171.0], [8.5, 171.0], [8.6, 171.0], [8.7, 171.0], [8.8, 171.0], [8.9, 171.0], [9.0, 171.0], [9.1, 171.0], [9.2, 172.0], [9.3, 172.0], [9.4, 172.0], [9.5, 172.0], [9.6, 172.0], [9.7, 172.0], [9.8, 172.0], [9.9, 172.0], [10.0, 172.0], [10.1, 172.0], [10.2, 172.0], [10.3, 172.0], [10.4, 172.0], [10.5, 172.0], [10.6, 172.0], [10.7, 172.0], [10.8, 172.0], [10.9, 172.0], [11.0, 172.0], [11.1, 172.0], [11.2, 172.0], [11.3, 172.0], [11.4, 172.0], [11.5, 173.0], [11.6, 173.0], [11.7, 173.0], [11.8, 173.0], [11.9, 173.0], [12.0, 173.0], [12.1, 173.0], [12.2, 173.0], [12.3, 173.0], [12.4, 173.0], [12.5, 173.0], [12.6, 173.0], [12.7, 173.0], [12.8, 173.0], [12.9, 173.0], [13.0, 173.0], [13.1, 173.0], [13.2, 173.0], [13.3, 173.0], [13.4, 173.0], [13.5, 173.0], [13.6, 173.0], [13.7, 173.0], [13.8, 173.0], [13.9, 174.0], [14.0, 174.0], [14.1, 174.0], [14.2, 174.0], [14.3, 174.0], [14.4, 174.0], [14.5, 174.0], [14.6, 174.0], [14.7, 174.0], [14.8, 174.0], [14.9, 174.0], [15.0, 174.0], [15.1, 174.0], [15.2, 174.0], [15.3, 174.0], [15.4, 174.0], [15.5, 174.0], [15.6, 174.0], [15.7, 174.0], [15.8, 174.0], [15.9, 174.0], [16.0, 174.0], [16.1, 174.0], [16.2, 174.0], [16.3, 174.0], [16.4, 174.0], [16.5, 174.0], [16.6, 174.0], [16.7, 174.0], [16.8, 175.0], [16.9, 175.0], [17.0, 175.0], [17.1, 175.0], [17.2, 175.0], [17.3, 175.0], [17.4, 175.0], [17.5, 175.0], [17.6, 175.0], [17.7, 175.0], [17.8, 175.0], [17.9, 175.0], [18.0, 175.0], [18.1, 175.0], [18.2, 175.0], [18.3, 175.0], [18.4, 175.0], [18.5, 175.0], [18.6, 175.0], [18.7, 175.0], [18.8, 175.0], [18.9, 175.0], [19.0, 175.0], [19.1, 175.0], [19.2, 175.0], [19.3, 175.0], [19.4, 175.0], [19.5, 175.0], [19.6, 175.0], [19.7, 175.0], [19.8, 176.0], [19.9, 176.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 176.0], [20.4, 176.0], [20.5, 176.0], [20.6, 176.0], [20.7, 176.0], [20.8, 176.0], [20.9, 176.0], [21.0, 176.0], [21.1, 176.0], [21.2, 176.0], [21.3, 176.0], [21.4, 176.0], [21.5, 176.0], [21.6, 176.0], [21.7, 176.0], [21.8, 176.0], [21.9, 176.0], [22.0, 176.0], [22.1, 176.0], [22.2, 176.0], [22.3, 176.0], [22.4, 176.0], [22.5, 176.0], [22.6, 176.0], [22.7, 176.0], [22.8, 176.0], [22.9, 177.0], [23.0, 177.0], [23.1, 177.0], [23.2, 177.0], [23.3, 177.0], [23.4, 177.0], [23.5, 177.0], [23.6, 177.0], [23.7, 177.0], [23.8, 177.0], [23.9, 177.0], [24.0, 177.0], [24.1, 177.0], [24.2, 177.0], [24.3, 177.0], [24.4, 177.0], [24.5, 177.0], [24.6, 177.0], [24.7, 177.0], [24.8, 177.0], [24.9, 177.0], [25.0, 177.0], [25.1, 177.0], [25.2, 177.0], [25.3, 177.0], [25.4, 177.0], [25.5, 177.0], [25.6, 177.0], [25.7, 177.0], [25.8, 177.0], [25.9, 177.0], [26.0, 177.0], [26.1, 177.0], [26.2, 177.0], [26.3, 178.0], [26.4, 178.0], [26.5, 178.0], [26.6, 178.0], [26.7, 178.0], [26.8, 178.0], [26.9, 178.0], [27.0, 178.0], [27.1, 178.0], [27.2, 178.0], [27.3, 178.0], [27.4, 178.0], [27.5, 178.0], [27.6, 178.0], [27.7, 178.0], [27.8, 178.0], [27.9, 178.0], [28.0, 178.0], [28.1, 178.0], [28.2, 178.0], [28.3, 178.0], [28.4, 178.0], [28.5, 178.0], [28.6, 178.0], [28.7, 178.0], [28.8, 178.0], [28.9, 178.0], [29.0, 178.0], [29.1, 178.0], [29.2, 178.0], [29.3, 178.0], [29.4, 178.0], [29.5, 178.0], [29.6, 179.0], [29.7, 179.0], [29.8, 179.0], [29.9, 179.0], [30.0, 179.0], [30.1, 179.0], [30.2, 179.0], [30.3, 179.0], [30.4, 179.0], [30.5, 179.0], [30.6, 179.0], [30.7, 179.0], [30.8, 179.0], [30.9, 179.0], [31.0, 179.0], [31.1, 179.0], [31.2, 179.0], [31.3, 179.0], [31.4, 179.0], [31.5, 179.0], [31.6, 179.0], [31.7, 179.0], [31.8, 179.0], [31.9, 179.0], [32.0, 179.0], [32.1, 179.0], [32.2, 179.0], [32.3, 179.0], [32.4, 179.0], [32.5, 179.0], [32.6, 179.0], [32.7, 179.0], [32.8, 179.0], [32.9, 179.0], [33.0, 179.0], [33.1, 179.0], [33.2, 180.0], [33.3, 180.0], [33.4, 180.0], [33.5, 180.0], [33.6, 180.0], [33.7, 180.0], [33.8, 180.0], [33.9, 180.0], [34.0, 180.0], [34.1, 180.0], [34.2, 180.0], [34.3, 180.0], [34.4, 180.0], [34.5, 180.0], [34.6, 180.0], [34.7, 180.0], [34.8, 180.0], [34.9, 180.0], [35.0, 180.0], [35.1, 180.0], [35.2, 180.0], [35.3, 180.0], [35.4, 180.0], [35.5, 180.0], [35.6, 180.0], [35.7, 180.0], [35.8, 180.0], [35.9, 180.0], [36.0, 180.0], [36.1, 180.0], [36.2, 180.0], [36.3, 180.0], [36.4, 180.0], [36.5, 180.0], [36.6, 180.0], [36.7, 180.0], [36.8, 180.0], [36.9, 181.0], [37.0, 181.0], [37.1, 181.0], [37.2, 181.0], [37.3, 181.0], [37.4, 181.0], [37.5, 181.0], [37.6, 181.0], [37.7, 181.0], [37.8, 181.0], [37.9, 181.0], [38.0, 181.0], [38.1, 181.0], [38.2, 181.0], [38.3, 181.0], [38.4, 181.0], [38.5, 181.0], [38.6, 181.0], [38.7, 181.0], [38.8, 181.0], [38.9, 181.0], [39.0, 181.0], [39.1, 181.0], [39.2, 181.0], [39.3, 181.0], [39.4, 181.0], [39.5, 181.0], [39.6, 181.0], [39.7, 181.0], [39.8, 181.0], [39.9, 181.0], [40.0, 181.0], [40.1, 181.0], [40.2, 181.0], [40.3, 181.0], [40.4, 181.0], [40.5, 181.0], [40.6, 182.0], [40.7, 182.0], [40.8, 182.0], [40.9, 182.0], [41.0, 182.0], [41.1, 182.0], [41.2, 182.0], [41.3, 182.0], [41.4, 182.0], [41.5, 182.0], [41.6, 182.0], [41.7, 182.0], [41.8, 182.0], [41.9, 182.0], [42.0, 182.0], [42.1, 182.0], [42.2, 182.0], [42.3, 182.0], [42.4, 182.0], [42.5, 182.0], [42.6, 182.0], [42.7, 182.0], [42.8, 182.0], [42.9, 182.0], [43.0, 182.0], [43.1, 182.0], [43.2, 182.0], [43.3, 182.0], [43.4, 182.0], [43.5, 182.0], [43.6, 182.0], [43.7, 182.0], [43.8, 182.0], [43.9, 182.0], [44.0, 182.0], [44.1, 182.0], [44.2, 182.0], [44.3, 183.0], [44.4, 183.0], [44.5, 183.0], [44.6, 183.0], [44.7, 183.0], [44.8, 183.0], [44.9, 183.0], [45.0, 183.0], [45.1, 183.0], [45.2, 183.0], [45.3, 183.0], [45.4, 183.0], [45.5, 183.0], [45.6, 183.0], [45.7, 183.0], [45.8, 183.0], [45.9, 183.0], [46.0, 183.0], [46.1, 183.0], [46.2, 183.0], [46.3, 183.0], [46.4, 183.0], [46.5, 183.0], [46.6, 183.0], [46.7, 183.0], [46.8, 183.0], [46.9, 183.0], [47.0, 183.0], [47.1, 183.0], [47.2, 183.0], [47.3, 183.0], [47.4, 183.0], [47.5, 183.0], [47.6, 183.0], [47.7, 183.0], [47.8, 184.0], [47.9, 184.0], [48.0, 184.0], [48.1, 184.0], [48.2, 184.0], [48.3, 184.0], [48.4, 184.0], [48.5, 184.0], [48.6, 184.0], [48.7, 184.0], [48.8, 184.0], [48.9, 184.0], [49.0, 184.0], [49.1, 184.0], [49.2, 184.0], [49.3, 184.0], [49.4, 184.0], [49.5, 184.0], [49.6, 184.0], [49.7, 184.0], [49.8, 184.0], [49.9, 184.0], [50.0, 184.0], [50.1, 184.0], [50.2, 184.0], [50.3, 184.0], [50.4, 184.0], [50.5, 184.0], [50.6, 184.0], [50.7, 184.0], [50.8, 184.0], [50.9, 184.0], [51.0, 184.0], [51.1, 184.0], [51.2, 185.0], [51.3, 185.0], [51.4, 185.0], [51.5, 185.0], [51.6, 185.0], [51.7, 185.0], [51.8, 185.0], [51.9, 185.0], [52.0, 185.0], [52.1, 185.0], [52.2, 185.0], [52.3, 185.0], [52.4, 185.0], [52.5, 185.0], [52.6, 185.0], [52.7, 185.0], [52.8, 185.0], [52.9, 185.0], [53.0, 185.0], [53.1, 185.0], [53.2, 185.0], [53.3, 185.0], [53.4, 185.0], [53.5, 185.0], [53.6, 185.0], [53.7, 185.0], [53.8, 185.0], [53.9, 185.0], [54.0, 185.0], [54.1, 185.0], [54.2, 185.0], [54.3, 185.0], [54.4, 185.0], [54.5, 186.0], [54.6, 186.0], [54.7, 186.0], [54.8, 186.0], [54.9, 186.0], [55.0, 186.0], [55.1, 186.0], [55.2, 186.0], [55.3, 186.0], [55.4, 186.0], [55.5, 186.0], [55.6, 186.0], [55.7, 186.0], [55.8, 186.0], [55.9, 186.0], [56.0, 186.0], [56.1, 186.0], [56.2, 186.0], [56.3, 186.0], [56.4, 186.0], [56.5, 186.0], [56.6, 186.0], [56.7, 186.0], [56.8, 186.0], [56.9, 186.0], [57.0, 186.0], [57.1, 186.0], [57.2, 186.0], [57.3, 186.0], [57.4, 187.0], [57.5, 187.0], [57.6, 187.0], [57.7, 187.0], [57.8, 187.0], [57.9, 187.0], [58.0, 187.0], [58.1, 187.0], [58.2, 187.0], [58.3, 187.0], [58.4, 187.0], [58.5, 187.0], [58.6, 187.0], [58.7, 187.0], [58.8, 187.0], [58.9, 187.0], [59.0, 187.0], [59.1, 187.0], [59.2, 187.0], [59.3, 187.0], [59.4, 187.0], [59.5, 187.0], [59.6, 187.0], [59.7, 187.0], [59.8, 187.0], [59.9, 187.0], [60.0, 187.0], [60.1, 187.0], [60.2, 187.0], [60.3, 187.0], [60.4, 188.0], [60.5, 188.0], [60.6, 188.0], [60.7, 188.0], [60.8, 188.0], [60.9, 188.0], [61.0, 188.0], [61.1, 188.0], [61.2, 188.0], [61.3, 188.0], [61.4, 188.0], [61.5, 188.0], [61.6, 188.0], [61.7, 188.0], [61.8, 188.0], [61.9, 188.0], [62.0, 188.0], [62.1, 188.0], [62.2, 188.0], [62.3, 188.0], [62.4, 188.0], [62.5, 188.0], [62.6, 188.0], [62.7, 188.0], [62.8, 188.0], [62.9, 188.0], [63.0, 188.0], [63.1, 188.0], [63.2, 189.0], [63.3, 189.0], [63.4, 189.0], [63.5, 189.0], [63.6, 189.0], [63.7, 189.0], [63.8, 189.0], [63.9, 189.0], [64.0, 189.0], [64.1, 189.0], [64.2, 189.0], [64.3, 189.0], [64.4, 189.0], [64.5, 189.0], [64.6, 189.0], [64.7, 189.0], [64.8, 189.0], [64.9, 189.0], [65.0, 189.0], [65.1, 189.0], [65.2, 189.0], [65.3, 189.0], [65.4, 189.0], [65.5, 189.0], [65.6, 189.0], [65.7, 189.0], [65.8, 190.0], [65.9, 190.0], [66.0, 190.0], [66.1, 190.0], [66.2, 190.0], [66.3, 190.0], [66.4, 190.0], [66.5, 190.0], [66.6, 190.0], [66.7, 190.0], [66.8, 190.0], [66.9, 190.0], [67.0, 190.0], [67.1, 190.0], [67.2, 190.0], [67.3, 190.0], [67.4, 190.0], [67.5, 190.0], [67.6, 190.0], [67.7, 190.0], [67.8, 190.0], [67.9, 190.0], [68.0, 190.0], [68.1, 190.0], [68.2, 191.0], [68.3, 191.0], [68.4, 191.0], [68.5, 191.0], [68.6, 191.0], [68.7, 191.0], [68.8, 191.0], [68.9, 191.0], [69.0, 191.0], [69.1, 191.0], [69.2, 191.0], [69.3, 191.0], [69.4, 191.0], [69.5, 191.0], [69.6, 191.0], [69.7, 191.0], [69.8, 191.0], [69.9, 191.0], [70.0, 191.0], [70.1, 191.0], [70.2, 191.0], [70.3, 191.0], [70.4, 191.0], [70.5, 192.0], [70.6, 192.0], [70.7, 192.0], [70.8, 192.0], [70.9, 192.0], [71.0, 192.0], [71.1, 192.0], [71.2, 192.0], [71.3, 192.0], [71.4, 192.0], [71.5, 192.0], [71.6, 192.0], [71.7, 192.0], [71.8, 192.0], [71.9, 192.0], [72.0, 192.0], [72.1, 192.0], [72.2, 192.0], [72.3, 192.0], [72.4, 192.0], [72.5, 192.0], [72.6, 193.0], [72.7, 193.0], [72.8, 193.0], [72.9, 193.0], [73.0, 193.0], [73.1, 193.0], [73.2, 193.0], [73.3, 193.0], [73.4, 193.0], [73.5, 193.0], [73.6, 193.0], [73.7, 193.0], [73.8, 193.0], [73.9, 193.0], [74.0, 193.0], [74.1, 193.0], [74.2, 193.0], [74.3, 193.0], [74.4, 193.0], [74.5, 194.0], [74.6, 194.0], [74.7, 194.0], [74.8, 194.0], [74.9, 194.0], [75.0, 194.0], [75.1, 194.0], [75.2, 194.0], [75.3, 194.0], [75.4, 194.0], [75.5, 194.0], [75.6, 194.0], [75.7, 194.0], [75.8, 194.0], [75.9, 194.0], [76.0, 194.0], [76.1, 194.0], [76.2, 194.0], [76.3, 195.0], [76.4, 195.0], [76.5, 195.0], [76.6, 195.0], [76.7, 195.0], [76.8, 195.0], [76.9, 195.0], [77.0, 195.0], [77.1, 195.0], [77.2, 195.0], [77.3, 195.0], [77.4, 195.0], [77.5, 195.0], [77.6, 195.0], [77.7, 195.0], [77.8, 195.0], [77.9, 196.0], [78.0, 196.0], [78.1, 196.0], [78.2, 196.0], [78.3, 196.0], [78.4, 196.0], [78.5, 196.0], [78.6, 196.0], [78.7, 196.0], [78.8, 196.0], [78.9, 196.0], [79.0, 196.0], [79.1, 196.0], [79.2, 196.0], [79.3, 196.0], [79.4, 197.0], [79.5, 197.0], [79.6, 197.0], [79.7, 197.0], [79.8, 197.0], [79.9, 197.0], [80.0, 197.0], [80.1, 197.0], [80.2, 197.0], [80.3, 197.0], [80.4, 197.0], [80.5, 197.0], [80.6, 197.0], [80.7, 197.0], [80.8, 197.0], [80.9, 198.0], [81.0, 198.0], [81.1, 198.0], [81.2, 198.0], [81.3, 198.0], [81.4, 198.0], [81.5, 198.0], [81.6, 198.0], [81.7, 198.0], [81.8, 198.0], [81.9, 198.0], [82.0, 199.0], [82.1, 199.0], [82.2, 199.0], [82.3, 199.0], [82.4, 199.0], [82.5, 199.0], [82.6, 199.0], [82.7, 199.0], [82.8, 199.0], [82.9, 199.0], [83.0, 200.0], [83.1, 200.0], [83.2, 200.0], [83.3, 200.0], [83.4, 200.0], [83.5, 200.0], [83.6, 200.0], [83.7, 200.0], [83.8, 200.0], [83.9, 201.0], [84.0, 201.0], [84.1, 201.0], [84.2, 201.0], [84.3, 201.0], [84.4, 201.0], [84.5, 201.0], [84.6, 202.0], [84.7, 202.0], [84.8, 202.0], [84.9, 202.0], [85.0, 202.0], [85.1, 202.0], [85.2, 203.0], [85.3, 203.0], [85.4, 203.0], [85.5, 203.0], [85.6, 203.0], [85.7, 203.0], [85.8, 204.0], [85.9, 204.0], [86.0, 204.0], [86.1, 204.0], [86.2, 204.0], [86.3, 204.0], [86.4, 205.0], [86.5, 205.0], [86.6, 205.0], [86.7, 205.0], [86.8, 205.0], [86.9, 206.0], [87.0, 206.0], [87.1, 206.0], [87.2, 206.0], [87.3, 207.0], [87.4, 207.0], [87.5, 207.0], [87.6, 207.0], [87.7, 208.0], [87.8, 208.0], [87.9, 208.0], [88.0, 209.0], [88.1, 209.0], [88.2, 209.0], [88.3, 209.0], [88.4, 210.0], [88.5, 210.0], [88.6, 210.0], [88.7, 211.0], [88.8, 211.0], [88.9, 211.0], [89.0, 212.0], [89.1, 212.0], [89.2, 212.0], [89.3, 213.0], [89.4, 213.0], [89.5, 213.0], [89.6, 214.0], [89.7, 214.0], [89.8, 215.0], [89.9, 215.0], [90.0, 215.0], [90.1, 216.0], [90.2, 216.0], [90.3, 217.0], [90.4, 217.0], [90.5, 217.0], [90.6, 218.0], [90.7, 218.0], [90.8, 219.0], [90.9, 220.0], [91.0, 220.0], [91.1, 221.0], [91.2, 221.0], [91.3, 222.0], [91.4, 223.0], [91.5, 223.0], [91.6, 224.0], [91.7, 224.0], [91.8, 225.0], [91.9, 226.0], [92.0, 227.0], [92.1, 227.0], [92.2, 228.0], [92.3, 229.0], [92.4, 230.0], [92.5, 230.0], [92.6, 231.0], [92.7, 232.0], [92.8, 233.0], [92.9, 234.0], [93.0, 235.0], [93.1, 236.0], [93.2, 237.0], [93.3, 238.0], [93.4, 239.0], [93.5, 240.0], [93.6, 242.0], [93.7, 243.0], [93.8, 245.0], [93.9, 246.0], [94.0, 248.0], [94.1, 250.0], [94.2, 251.0], [94.3, 254.0], [94.4, 257.0], [94.5, 259.0], [94.6, 262.0], [94.7, 266.0], [94.8, 269.0], [94.9, 274.0], [95.0, 278.0], [95.1, 283.0], [95.2, 288.0], [95.3, 295.0], [95.4, 302.0], [95.5, 311.0], [95.6, 317.0], [95.7, 326.0], [95.8, 333.0], [95.9, 343.0], [96.0, 352.0], [96.1, 359.0], [96.2, 369.0], [96.3, 382.0], [96.4, 391.0], [96.5, 405.0], [96.6, 420.0], [96.7, 433.0], [96.8, 444.0], [96.9, 453.0], [97.0, 462.0], [97.1, 472.0], [97.2, 481.0], [97.3, 489.0], [97.4, 498.0], [97.5, 509.0], [97.6, 520.0], [97.7, 526.0], [97.8, 534.0], [97.9, 544.0], [98.0, 559.0], [98.1, 584.0], [98.2, 612.0], [98.3, 646.0], [98.4, 699.0], [98.5, 775.0], [98.6, 922.0], [98.7, 1177.0], [98.8, 1189.0], [98.9, 1199.0], [99.0, 1227.0], [99.1, 1292.0], [99.2, 1395.0], [99.3, 1745.0], [99.4, 2979.0], [99.5, 7384.0], [99.6, 9669.0], [99.7, 11771.0], [99.8, 15150.0], [99.9, 18423.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 41487.0, "series": [{"data": [[100.0, 41487.0], [200.0, 6197.0], [300.0, 547.0], [400.0, 477.0], [500.0, 367.0], [600.0, 125.0], [700.0, 57.0], [800.0, 38.0], [900.0, 18.0], [1000.0, 14.0], [1100.0, 128.0], [1200.0, 103.0], [1300.0, 44.0], [1400.0, 11.0], [1500.0, 19.0], [1600.0, 15.0], [1700.0, 11.0], [1800.0, 4.0], [1900.0, 2.0], [2000.0, 1.0], [2100.0, 1.0], [2300.0, 5.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 4.0], [2600.0, 7.0], [2800.0, 8.0], [2700.0, 2.0], [2900.0, 12.0], [3000.0, 7.0], [3100.0, 4.0], [3300.0, 4.0], [3200.0, 1.0], [3500.0, 2.0], [3600.0, 2.0], [3800.0, 1.0], [4000.0, 2.0], [4600.0, 2.0], [4700.0, 2.0], [4900.0, 2.0], [5100.0, 3.0], [5300.0, 1.0], [5800.0, 1.0], [6400.0, 1.0], [6900.0, 3.0], [6800.0, 2.0], [6700.0, 1.0], [7000.0, 2.0], [7300.0, 3.0], [7400.0, 1.0], [7500.0, 3.0], [7600.0, 4.0], [7700.0, 6.0], [7900.0, 9.0], [7800.0, 1.0], [8000.0, 3.0], [8100.0, 3.0], [8300.0, 4.0], [8400.0, 3.0], [8500.0, 2.0], [8200.0, 1.0], [9200.0, 1.0], [8800.0, 1.0], [9100.0, 1.0], [9500.0, 1.0], [9600.0, 4.0], [9700.0, 1.0], [9400.0, 1.0], [10100.0, 1.0], [10000.0, 3.0], [10200.0, 1.0], [9800.0, 2.0], [9900.0, 1.0], [10300.0, 6.0], [10600.0, 3.0], [10500.0, 4.0], [10700.0, 5.0], [10400.0, 3.0], [11200.0, 2.0], [10800.0, 1.0], [11100.0, 1.0], [10900.0, 3.0], [11600.0, 2.0], [11400.0, 4.0], [11300.0, 1.0], [11700.0, 3.0], [11500.0, 3.0], [11800.0, 1.0], [12100.0, 1.0], [12000.0, 3.0], [12200.0, 2.0], [12500.0, 3.0], [12600.0, 3.0], [12700.0, 4.0], [12300.0, 1.0], [13300.0, 1.0], [13200.0, 1.0], [12800.0, 2.0], [12900.0, 1.0], [13000.0, 1.0], [13400.0, 1.0], [13800.0, 1.0], [13500.0, 1.0], [13700.0, 3.0], [13600.0, 1.0], [14200.0, 2.0], [14300.0, 2.0], [14000.0, 2.0], [14700.0, 3.0], [14800.0, 2.0], [14900.0, 3.0], [15000.0, 2.0], [15100.0, 4.0], [15300.0, 1.0], [15200.0, 2.0], [15600.0, 1.0], [15400.0, 4.0], [15700.0, 1.0], [15800.0, 2.0], [16000.0, 5.0], [15900.0, 3.0], [16100.0, 2.0], [16200.0, 1.0], [16300.0, 2.0], [16600.0, 4.0], [16500.0, 1.0], [17400.0, 1.0], [16900.0, 1.0], [17100.0, 3.0], [17000.0, 2.0], [17200.0, 1.0], [16400.0, 1.0], [16700.0, 1.0], [16800.0, 1.0], [17900.0, 2.0], [18100.0, 1.0], [17500.0, 2.0], [18400.0, 4.0], [18000.0, 1.0], [18300.0, 1.0], [17700.0, 1.0], [18600.0, 3.0], [18500.0, 1.0], [18700.0, 4.0], [18900.0, 4.0], [19000.0, 1.0], [19400.0, 3.0], [19200.0, 1.0], [18800.0, 2.0], [19300.0, 1.0], [19700.0, 1.0], [19800.0, 2.0], [20000.0, 2.0], [19600.0, 1.0], [20400.0, 1.0], [19900.0, 1.0], [20100.0, 1.0], [20800.0, 4.0], [20900.0, 3.0], [21000.0, 1.0], [20700.0, 2.0], [21500.0, 1.0], [20600.0, 1.0], [21200.0, 1.0], [22400.0, 2.0], [23400.0, 1.0], [23900.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 23900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 387.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 48712.0, "series": [{"data": [[0.0, 48712.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 901.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 387.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.286247086247103, "minX": 1.72866528E12, "maxY": 89.21163366336627, "series": [{"data": [[1.72866558E12, 8.258796296296278], [1.72866576E12, 7.762060889929755], [1.72866642E12, 7.906585707613273], [1.72866612E12, 7.763456090651568], [1.72866552E12, 7.989449541284389], [1.72866582E12, 7.5409683426443275], [1.72866648E12, 7.8217775709632456], [1.72866618E12, 7.7994467496542415], [1.72866546E12, 7.98907363420427], [1.72866588E12, 7.475768872320599], [1.72866654E12, 7.961735884274389], [1.72866624E12, 8.131063432835825], [1.7286654E12, 7.943977591036413], [1.72866594E12, 7.286247086247103], [1.72866564E12, 7.512808570097819], [1.7286666E12, 7.77423887587822], [1.7286663E12, 8.074731433909422], [1.72866534E12, 10.336283185840722], [1.728666E12, 8.082710280373798], [1.7286657E12, 7.6936011209715165], [1.72866666E12, 7.636734693877544], [1.72866636E12, 7.590462833099585], [1.72866528E12, 89.21163366336627], [1.72866606E12, 7.539179104477623]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866666E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 186.8239937271294, "minX": 1.0, "maxY": 20894.5, "series": [{"data": [[2.0, 195.57978723404253], [3.0, 214.30434782608685], [4.0, 210.77985948477752], [5.0, 196.07603686635966], [6.0, 190.6767918088735], [7.0, 186.8239937271294], [8.0, 201.07204879798957], [9.0, 211.31833674164946], [10.0, 232.51974580117977], [11.0, 261.60348162475736], [12.0, 234.174358974359], [13.0, 268.41927083333314], [14.0, 287.37462235649525], [15.0, 249.6780821917809], [16.0, 474.91794871794843], [17.0, 266.24161073825496], [18.0, 304.7113402061856], [19.0, 319.72727272727263], [20.0, 332.1785714285715], [21.0, 1042.6346153846155], [22.0, 285.3333333333335], [23.0, 1576.2799999999997], [24.0, 332.5], [25.0, 288.2272727272727], [26.0, 288.36363636363643], [27.0, 2622.1111111111113], [28.0, 4448.4], [29.0, 3463.2], [30.0, 4445.6], [31.0, 10673.25], [33.0, 3237.428571428571], [32.0, 5507.333333333334], [35.0, 5893.25], [34.0, 317.0], [37.0, 5407.25], [36.0, 306.0], [39.0, 8054.0], [38.0, 15845.0], [40.0, 17099.0], [45.0, 10150.5], [44.0, 3322.166666666667], [47.0, 359.0], [46.0, 4782.75], [49.0, 10646.0], [48.0, 341.5], [51.0, 453.0], [50.0, 1792.5], [53.0, 489.0], [52.0, 478.5], [55.0, 8806.0], [54.0, 436.0], [57.0, 18173.5], [59.0, 547.0], [61.0, 20148.0], [60.0, 1131.0], [63.0, 8420.0], [62.0, 15443.0], [67.0, 10725.0], [66.0, 736.3333333333334], [65.0, 16704.0], [64.0, 20503.0], [71.0, 20894.5], [69.0, 535.5], [68.0, 540.0], [75.0, 15170.0], [74.0, 18818.5], [73.0, 15919.0], [72.0, 15219.0], [79.0, 8001.5], [78.0, 854.5], [77.0, 1206.0], [76.0, 1224.5], [83.0, 14850.0], [82.0, 589.5], [81.0, 18279.5], [80.0, 17423.0], [87.0, 432.0], [86.0, 19455.0], [85.0, 388.0], [84.0, 7482.0], [91.0, 10605.0], [89.0, 8041.8], [90.0, 17565.0], [88.0, 5657.333333333333], [95.0, 16260.666666666666], [94.0, 8302.25], [93.0, 19223.0], [92.0, 17987.5], [99.0, 992.0], [98.0, 834.0], [97.0, 1189.3333333333333], [96.0, 8930.0], [103.0, 10977.6], [102.0, 515.0], [101.0, 752.5], [100.0, 499.0], [107.0, 13773.0], [106.0, 18714.0], [105.0, 7249.0], [104.0, 9938.666666666668], [110.0, 389.5], [111.0, 1314.0], [109.0, 13771.0], [108.0, 19431.0], [115.0, 18990.0], [114.0, 460.0], [113.0, 1613.0], [112.0, 10476.333333333334], [118.0, 11300.333333333334], [116.0, 5250.5], [119.0, 15113.0], [117.0, 9863.5], [123.0, 18989.0], [122.0, 498.0], [121.0, 9545.0], [120.0, 9511.5], [126.0, 8009.0], [127.0, 421.0], [125.0, 910.0], [124.0, 18991.0], [135.0, 691.5], [134.0, 11847.0], [133.0, 13731.25], [132.0, 7251.25], [131.0, 6791.0], [130.0, 496.0], [129.0, 460.0], [128.0, 408.5], [143.0, 12719.0], [142.0, 841.0], [141.0, 1032.0], [140.0, 16783.5], [139.0, 895.0], [138.0, 1070.0], [137.0, 481.0], [136.0, 12789.0], [151.0, 12287.5], [150.0, 5825.0], [149.0, 6588.2], [148.0, 7729.25], [147.0, 9704.0], [146.0, 11046.0], [144.0, 554.0], [159.0, 11346.0], [158.0, 6893.0], [157.0, 6563.0], [156.0, 10993.0], [155.0, 664.0], [154.0, 758.0], [153.0, 1813.0], [152.0, 711.0], [167.0, 3290.0], [166.0, 11003.5], [165.0, 373.25], [163.0, 715.0], [162.0, 11692.4], [161.0, 7362.222222222223], [164.0, 7576.0], [160.0, 4368.333333333333], [175.0, 7543.333333333334], [174.0, 5520.5], [173.0, 5471.0], [172.0, 6322.0], [171.0, 3826.666666666667], [170.0, 375.0], [169.0, 777.5], [168.0, 362.3333333333333], [183.0, 629.0], [182.0, 738.0], [181.0, 555.0], [180.0, 16601.0], [179.0, 588.0], [178.0, 940.0], [177.0, 7424.666666666666], [176.0, 10382.0], [191.0, 474.0], [189.0, 3057.0], [190.0, 2065.0], [188.0, 857.0], [187.0, 9961.0], [186.0, 10329.0], [185.0, 10362.0], [184.0, 7015.333333333334], [199.0, 8556.0], [198.0, 6398.0], [197.0, 5376.125000000001], [196.0, 2849.0], [195.0, 2809.4], [194.0, 6328.0], [192.0, 2469.8], [193.0, 3471.25], [207.0, 8253.0], [205.0, 526.0], [204.0, 560.0], [203.0, 455.0], [202.0, 443.0], [201.0, 6055.0], [200.0, 475.5], [215.0, 1039.5], [213.0, 1634.0], [212.0, 4515.5], [211.0, 13242.0], [210.0, 887.0], [209.0, 3650.666666666667], [208.0, 5463.25], [223.0, 3327.333333333333], [222.0, 966.6], [221.0, 2006.1428571428573], [220.0, 486.3333333333333], [219.0, 1064.0], [218.0, 4663.0], [217.0, 436.0], [216.0, 475.0], [231.0, 1543.0], [230.0, 1193.5], [229.0, 1786.8333333333335], [228.0, 1784.5], [227.0, 419.5], [226.0, 498.0], [225.0, 1510.75], [224.0, 4542.666666666667], [239.0, 3216.8571428571427], [238.0, 837.0000000000001], [237.0, 6671.0], [236.0, 4168.0], [235.0, 2920.25], [234.0, 1612.6000000000001], [233.0, 567.1818181818182], [232.0, 1069.5714285714284], [247.0, 2021.5], [246.0, 853.25], [245.0, 1855.3333333333333], [244.0, 3031.125], [243.0, 3453.5714285714284], [242.0, 1020.1666666666666], [241.0, 841.25], [240.0, 774.8], [255.0, 6368.75], [254.0, 2848.0], [252.0, 3370.666666666667], [251.0, 3011.5], [250.0, 795.0], [249.0, 1880.1333333333334], [253.0, 1379.0], [248.0, 4202.2], [264.0, 1356.0], [269.0, 2697.0], [259.0, 2737.0], [258.0, 1756.0], [257.0, 1453.5], [267.0, 2925.0], [266.0, 3025.0], [265.0, 7995.0], [263.0, 2597.0], [262.0, 1050.0], [261.0, 8585.0], [260.0, 2683.0], [286.0, 7033.0], [287.0, 3557.0], [285.0, 3127.0], [284.0, 3004.0], [283.0, 7626.0], [282.0, 3004.0], [281.0, 2995.0], [279.0, 3004.0], [275.0, 7708.0], [274.0, 5673.666666666667], [272.0, 5461.5], [277.0, 3122.5], [302.0, 2656.0], [303.0, 2979.0], [301.0, 2984.0], [300.0, 7985.0], [299.0, 2495.0], [298.0, 2496.0], [297.0, 2742.5], [293.0, 8434.0], [291.0, 10027.0], [290.0, 3315.0], [288.0, 2994.0], [292.0, 5505.0], [318.0, 10368.0], [319.0, 7609.0], [317.0, 7936.0], [316.0, 7774.0], [315.0, 7650.0], [314.0, 7057.0], [313.0, 7945.0], [312.0, 7564.0], [311.0, 2628.0], [305.0, 8084.0], [304.0, 3107.0], [307.0, 6721.0], [306.0, 7960.0], [310.0, 8350.0], [309.0, 7953.0], [308.0, 7960.0], [334.0, 7451.0], [335.0, 4990.0], [333.0, 7991.0], [332.0, 4999.0], [331.0, 8332.0], [330.0, 7747.0], [329.0, 6976.0], [328.0, 8408.0], [327.0, 7614.0], [321.0, 8603.0], [323.0, 9522.0], [322.0, 2589.0], [326.0, 7899.0], [325.0, 8012.0], [324.0, 7396.0], [350.0, 6895.0], [351.0, 6918.0], [349.0, 1530.0], [348.0, 4038.0], [347.0, 8305.0], [346.0, 8371.0], [345.0, 7384.0], [344.0, 2369.0], [343.0, 2328.0], [337.0, 7552.0], [336.0, 7315.0], [339.0, 6951.0], [338.0, 3026.0], [342.0, 2328.0], [341.0, 7786.0], [340.0, 6884.0], [357.0, 4180.4], [356.0, 2994.0], [1.0, 219.24285714285713]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[10.54046000000006, 277.9240199999988]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 357.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2450.0, "minX": 1.72866528E12, "maxY": 2453705.35, "series": [{"data": [[1.72866558E12, 2431201.5166666666], [1.72866576E12, 2403078.8], [1.72866642E12, 2409832.65], [1.72866612E12, 2383920.5166666666], [1.72866552E12, 2453705.35], [1.72866582E12, 2417712.5166666666], [1.72866648E12, 2418774.25], [1.72866618E12, 2441331.1], [1.72866546E12, 2369284.2666666666], [1.72866588E12, 2415397.8333333335], [1.72866654E12, 2412014.6166666667], [1.72866624E12, 2413201.1666666665], [1.7286654E12, 2410927.2333333334], [1.72866594E12, 2414265.3333333335], [1.72866564E12, 2416578.9166666665], [1.7286666E12, 2403047.9], [1.7286663E12, 2409828.1], [1.72866534E12, 2416518.433333333], [1.728666E12, 2408675.966666667], [1.7286657E12, 2409829.966666667], [1.72866666E12, 1378799.1666666667], [1.72866636E12, 2407580.783333333], [1.72866528E12, 1818836.0], [1.72866606E12, 2413180.7]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72866558E12, 4320.0], [1.72866576E12, 4270.0], [1.72866642E12, 4282.0], [1.72866612E12, 4236.0], [1.72866552E12, 4360.0], [1.72866582E12, 4296.0], [1.72866648E12, 4298.0], [1.72866618E12, 4338.0], [1.72866546E12, 4210.0], [1.72866588E12, 4292.0], [1.72866654E12, 4286.0], [1.72866624E12, 4288.0], [1.7286654E12, 4284.0], [1.72866594E12, 4290.0], [1.72866564E12, 4294.0], [1.7286666E12, 4270.0], [1.7286663E12, 4282.0], [1.72866534E12, 4294.0], [1.728666E12, 4280.0], [1.7286657E12, 4282.0], [1.72866666E12, 2450.0], [1.72866636E12, 4278.0], [1.72866528E12, 3232.0], [1.72866606E12, 4288.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866666E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 188.74918414918434, "minX": 1.72866528E12, "maxY": 2638.2512376237637, "series": [{"data": [[1.72866558E12, 195.97453703703715], [1.72866576E12, 199.41217798594872], [1.72866642E12, 192.0625875758986], [1.72866612E12, 189.59915014164315], [1.72866552E12, 198.77522935779828], [1.72866582E12, 195.5223463687149], [1.72866648E12, 195.96882270823662], [1.72866618E12, 193.2627939142463], [1.72866546E12, 198.03087885985704], [1.72866588E12, 193.403541472507], [1.72866654E12, 199.22258516098915], [1.72866624E12, 194.41651119403], [1.7286654E12, 203.2138188608779], [1.72866594E12, 188.74918414918434], [1.72866564E12, 193.28877503493277], [1.7286666E12, 197.3644028103044], [1.7286663E12, 196.64876226062603], [1.72866534E12, 263.3102002794593], [1.728666E12, 210.27476635513997], [1.7286657E12, 197.12330686595035], [1.72866666E12, 192.7485714285712], [1.72866636E12, 192.78307620383376], [1.72866528E12, 2638.2512376237637], [1.72866606E12, 195.09608208955243]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866666E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 143.01398601398617, "minX": 1.72866528E12, "maxY": 2441.494430693072, "series": [{"data": [[1.72866558E12, 148.74768518518547], [1.72866576E12, 152.91709601873538], [1.72866642E12, 145.97244278374606], [1.72866612E12, 143.542492917847], [1.72866552E12, 151.5848623853209], [1.72866582E12, 148.5628491620113], [1.72866648E12, 148.14192647743167], [1.72866618E12, 147.2014753342555], [1.72866546E12, 150.34916864608132], [1.72866588E12, 147.47949673811772], [1.72866654E12, 151.5347643490438], [1.72866624E12, 147.46688432835833], [1.7286654E12, 154.17413632119545], [1.72866594E12, 143.01398601398617], [1.72866564E12, 147.67955286446178], [1.7286666E12, 150.2070257611242], [1.7286663E12, 150.296123306866], [1.72866534E12, 196.81089892873777], [1.728666E12, 161.1355140186918], [1.7286657E12, 150.7225595516113], [1.72866666E12, 146.08489795918382], [1.72866636E12, 146.66152407667175], [1.72866528E12, 2441.494430693072], [1.72866606E12, 148.3712686567165]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866666E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 92.36596736596744, "minX": 1.72866528E12, "maxY": 2269.207920792078, "series": [{"data": [[1.72866558E12, 97.54166666666659], [1.72866576E12, 101.41405152224817], [1.72866642E12, 95.72209248014929], [1.72866612E12, 93.73418319169], [1.72866552E12, 100.02889908256877], [1.72866582E12, 95.86964618249536], [1.72866648E12, 96.37319683573746], [1.72866618E12, 97.88796680497923], [1.72866546E12, 99.16864608076017], [1.72866588E12, 96.7982292637467], [1.72866654E12, 100.78861409239384], [1.72866624E12, 97.1464552238806], [1.7286654E12, 101.80905695611578], [1.72866594E12, 92.36596736596744], [1.72866564E12, 97.51700046576622], [1.7286666E12, 97.84121779859495], [1.7286663E12, 98.60485754320416], [1.72866534E12, 129.58872845831394], [1.728666E12, 107.29579439252315], [1.7286657E12, 98.96777206912638], [1.72866666E12, 96.76571428571421], [1.72866636E12, 95.17297802711549], [1.72866528E12, 2269.207920792078], [1.72866606E12, 97.19636194029849]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866666E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 150.0, "minX": 1.72866528E12, "maxY": 23987.0, "series": [{"data": [[1.72866558E12, 1378.0], [1.72866576E12, 1319.0], [1.72866642E12, 1207.0], [1.72866612E12, 1194.0], [1.72866552E12, 3315.0], [1.72866582E12, 1377.0], [1.72866648E12, 1384.0], [1.72866618E12, 1211.0], [1.72866546E12, 1343.0], [1.72866588E12, 1323.0], [1.72866654E12, 1395.0], [1.72866624E12, 1334.0], [1.7286654E12, 1341.0], [1.72866594E12, 1238.0], [1.72866564E12, 3201.0], [1.7286666E12, 1375.0], [1.7286663E12, 1464.0], [1.72866534E12, 1520.0], [1.728666E12, 3355.0], [1.7286657E12, 1774.0], [1.72866666E12, 1219.0], [1.72866636E12, 1207.0], [1.72866528E12, 23987.0], [1.72866606E12, 1324.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72866558E12, 208.0], [1.72866576E12, 199.0], [1.72866642E12, 199.0], [1.72866612E12, 199.0], [1.72866552E12, 212.0], [1.72866582E12, 201.0], [1.72866648E12, 200.0], [1.72866618E12, 199.0], [1.72866546E12, 209.0], [1.72866588E12, 198.0], [1.72866654E12, 206.0], [1.72866624E12, 200.0], [1.7286654E12, 228.0], [1.72866594E12, 197.0], [1.72866564E12, 198.0], [1.7286666E12, 202.0], [1.7286663E12, 202.0], [1.72866534E12, 391.20000000000005], [1.728666E12, 232.0], [1.7286657E12, 200.0], [1.72866666E12, 199.0], [1.72866636E12, 198.0], [1.72866528E12, 11390.399999999998], [1.72866606E12, 207.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72866558E12, 517.0199999999977], [1.72866576E12, 622.3199999999983], [1.72866642E12, 496.89999999999964], [1.72866612E12, 470.6199999999999], [1.72866552E12, 530.9500000000003], [1.72866582E12, 595.0], [1.72866648E12, 518.0], [1.72866618E12, 515.9000000000005], [1.72866546E12, 557.0400000000009], [1.72866588E12, 543.1800000000012], [1.72866654E12, 591.639999999999], [1.72866624E12, 573.6000000000022], [1.7286654E12, 463.1400000000003], [1.72866594E12, 471.77999999999975], [1.72866564E12, 500.5999999999999], [1.7286666E12, 573.0799999999972], [1.7286663E12, 535.0], [1.72866534E12, 688.5999999999999], [1.728666E12, 578.9000000000015], [1.7286657E12, 600.6999999999989], [1.72866666E12, 515.0], [1.72866636E12, 500.5999999999999], [1.72866528E12, 20751.889999999992], [1.72866606E12, 523.1000000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72866558E12, 226.94999999999982], [1.72866576E12, 215.19999999999982], [1.72866642E12, 209.0], [1.72866612E12, 211.0], [1.72866552E12, 232.0], [1.72866582E12, 219.0], [1.72866648E12, 217.5], [1.72866618E12, 208.0], [1.72866546E12, 242.69999999999982], [1.72866588E12, 211.0], [1.72866654E12, 223.0], [1.72866624E12, 210.0], [1.7286654E12, 249.0], [1.72866594E12, 204.0], [1.72866564E12, 210.5999999999999], [1.7286666E12, 219.0], [1.7286663E12, 217.0], [1.72866534E12, 458.5999999999999], [1.728666E12, 351.0], [1.7286657E12, 220.0], [1.72866666E12, 212.70000000000005], [1.72866636E12, 205.0], [1.72866528E12, 16070.949999999999], [1.72866606E12, 229.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72866558E12, 159.0], [1.72866576E12, 161.0], [1.72866642E12, 156.0], [1.72866612E12, 159.0], [1.72866552E12, 155.0], [1.72866582E12, 159.0], [1.72866648E12, 150.0], [1.72866618E12, 159.0], [1.72866546E12, 159.0], [1.72866588E12, 162.0], [1.72866654E12, 157.0], [1.72866624E12, 157.0], [1.7286654E12, 158.0], [1.72866594E12, 159.0], [1.72866564E12, 157.0], [1.7286666E12, 154.0], [1.7286663E12, 155.0], [1.72866534E12, 162.0], [1.728666E12, 157.0], [1.7286657E12, 161.0], [1.72866666E12, 157.0], [1.72866636E12, 160.0], [1.72866528E12, 168.0], [1.72866606E12, 158.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72866558E12, 185.0], [1.72866576E12, 184.0], [1.72866642E12, 182.0], [1.72866612E12, 182.0], [1.72866552E12, 184.0], [1.72866582E12, 184.0], [1.72866648E12, 183.0], [1.72866618E12, 183.0], [1.72866546E12, 183.0], [1.72866588E12, 182.0], [1.72866654E12, 184.0], [1.72866624E12, 184.0], [1.7286654E12, 189.0], [1.72866594E12, 182.0], [1.72866564E12, 182.0], [1.7286666E12, 183.0], [1.7286663E12, 183.0], [1.72866534E12, 218.0], [1.728666E12, 184.0], [1.7286657E12, 182.0], [1.72866666E12, 181.0], [1.72866636E12, 183.0], [1.72866528E12, 312.0], [1.72866606E12, 183.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866666E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 174.0, "minX": 1.0, "maxY": 6802.5, "series": [{"data": [[2.0, 464.0], [5.0, 174.0], [7.0, 194.0], [9.0, 183.5], [10.0, 174.5], [11.0, 181.0], [12.0, 196.0], [13.0, 180.0], [14.0, 178.5], [15.0, 179.0], [16.0, 381.5], [18.0, 183.5], [19.0, 190.0], [20.0, 224.0], [21.0, 204.5], [22.0, 186.0], [23.0, 185.0], [24.0, 186.0], [25.0, 181.0], [26.0, 184.0], [27.0, 182.0], [28.0, 183.0], [29.0, 184.0], [30.0, 183.0], [31.0, 183.0], [33.0, 184.0], [32.0, 184.0], [35.0, 184.0], [34.0, 184.0], [36.0, 183.0], [37.0, 184.0], [39.0, 183.0], [38.0, 183.0], [41.0, 187.0], [40.0, 182.0], [42.0, 185.0], [43.0, 188.0], [45.0, 195.0], [44.0, 185.0], [46.0, 187.0], [47.0, 187.0], [49.0, 199.0], [48.0, 187.0], [51.0, 229.0], [50.0, 181.0], [53.0, 238.0], [52.0, 199.0], [55.0, 194.0], [54.0, 189.0], [60.0, 1737.0], [61.0, 202.0], [63.0, 191.0], [65.0, 954.0], [67.0, 198.0], [68.0, 727.5], [70.0, 726.0], [72.0, 244.0], [77.0, 202.0], [85.0, 1208.0], [96.0, 6802.5], [1.0, 175.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 96.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 128.0, "minX": 1.0, "maxY": 5647.5, "series": [{"data": [[2.0, 371.0], [5.0, 128.0], [7.0, 145.0], [9.0, 140.5], [10.0, 133.0], [11.0, 136.0], [12.0, 145.5], [13.0, 138.0], [14.0, 135.5], [15.0, 134.0], [16.0, 252.5], [18.0, 137.5], [19.0, 146.0], [20.0, 158.5], [21.0, 150.0], [22.0, 140.0], [23.0, 141.0], [24.0, 139.0], [25.0, 135.5], [26.0, 138.0], [27.0, 137.0], [28.0, 137.0], [29.0, 138.0], [30.0, 138.0], [31.0, 137.0], [33.0, 138.0], [32.0, 138.0], [35.0, 138.0], [34.0, 138.0], [36.0, 138.0], [37.0, 138.0], [39.0, 138.0], [38.0, 138.0], [41.0, 140.0], [40.0, 137.0], [42.0, 139.0], [43.0, 141.0], [45.0, 144.0], [44.0, 139.0], [46.0, 140.0], [47.0, 140.0], [49.0, 150.0], [48.0, 140.0], [51.0, 170.0], [50.0, 135.0], [53.0, 178.0], [52.0, 150.5], [55.0, 148.0], [54.0, 142.0], [60.0, 1595.5], [61.0, 146.0], [63.0, 145.0], [65.0, 566.0], [67.0, 146.0], [68.0, 569.0], [70.0, 510.5], [72.0, 164.0], [77.0, 151.0], [85.0, 619.0], [96.0, 5647.5], [1.0, 138.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 96.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 20.316666666666666, "minX": 1.72866528E12, "maxY": 36.25, "series": [{"data": [[1.72866558E12, 36.083333333333336], [1.72866576E12, 35.61666666666667], [1.72866642E12, 35.666666666666664], [1.72866612E12, 35.25], [1.72866552E12, 36.25], [1.72866582E12, 35.78333333333333], [1.72866648E12, 35.78333333333333], [1.72866618E12, 36.18333333333333], [1.72866546E12, 35.083333333333336], [1.72866588E12, 35.75], [1.72866654E12, 35.71666666666667], [1.72866624E12, 35.75], [1.7286654E12, 35.61666666666667], [1.72866594E12, 35.733333333333334], [1.72866564E12, 35.78333333333333], [1.7286666E12, 35.56666666666667], [1.7286663E12, 35.68333333333333], [1.72866534E12, 35.766666666666666], [1.728666E12, 35.71666666666667], [1.7286657E12, 35.68333333333333], [1.72866666E12, 20.316666666666666], [1.72866636E12, 35.7], [1.72866528E12, 27.15], [1.72866606E12, 35.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866666E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 20.416666666666668, "minX": 1.72866528E12, "maxY": 36.333333333333336, "series": [{"data": [[1.72866558E12, 36.0], [1.72866576E12, 35.583333333333336], [1.72866642E12, 35.68333333333333], [1.72866612E12, 35.3], [1.72866552E12, 36.333333333333336], [1.72866582E12, 35.8], [1.72866648E12, 35.81666666666667], [1.72866618E12, 36.15], [1.72866546E12, 35.083333333333336], [1.72866588E12, 35.766666666666666], [1.72866654E12, 35.71666666666667], [1.72866624E12, 35.733333333333334], [1.7286654E12, 35.7], [1.72866594E12, 35.75], [1.72866564E12, 35.78333333333333], [1.7286666E12, 35.583333333333336], [1.7286663E12, 35.68333333333333], [1.72866534E12, 35.78333333333333], [1.728666E12, 35.666666666666664], [1.7286657E12, 35.68333333333333], [1.72866666E12, 20.416666666666668], [1.72866636E12, 35.65], [1.72866528E12, 26.933333333333334], [1.72866606E12, 35.733333333333334]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72866666E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 20.416666666666668, "minX": 1.72866528E12, "maxY": 36.333333333333336, "series": [{"data": [[1.72866558E12, 36.0], [1.72866576E12, 35.583333333333336], [1.72866642E12, 35.68333333333333], [1.72866612E12, 35.3], [1.72866552E12, 36.333333333333336], [1.72866582E12, 35.8], [1.72866648E12, 35.81666666666667], [1.72866618E12, 36.15], [1.72866546E12, 35.083333333333336], [1.72866588E12, 35.766666666666666], [1.72866654E12, 35.71666666666667], [1.72866624E12, 35.733333333333334], [1.7286654E12, 35.7], [1.72866594E12, 35.75], [1.72866564E12, 35.78333333333333], [1.7286666E12, 35.583333333333336], [1.7286663E12, 35.68333333333333], [1.72866534E12, 35.78333333333333], [1.728666E12, 35.666666666666664], [1.7286657E12, 35.68333333333333], [1.72866666E12, 20.416666666666668], [1.72866636E12, 35.65], [1.72866528E12, 26.933333333333334], [1.72866606E12, 35.733333333333334]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866666E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 20.416666666666668, "minX": 1.72866528E12, "maxY": 36.333333333333336, "series": [{"data": [[1.72866558E12, 36.0], [1.72866576E12, 35.583333333333336], [1.72866642E12, 35.68333333333333], [1.72866612E12, 35.3], [1.72866552E12, 36.333333333333336], [1.72866582E12, 35.8], [1.72866648E12, 35.81666666666667], [1.72866618E12, 36.15], [1.72866546E12, 35.083333333333336], [1.72866588E12, 35.766666666666666], [1.72866654E12, 35.71666666666667], [1.72866624E12, 35.733333333333334], [1.7286654E12, 35.7], [1.72866594E12, 35.75], [1.72866564E12, 35.78333333333333], [1.7286666E12, 35.583333333333336], [1.7286663E12, 35.68333333333333], [1.72866534E12, 35.78333333333333], [1.728666E12, 35.666666666666664], [1.7286657E12, 35.68333333333333], [1.72866666E12, 20.416666666666668], [1.72866636E12, 35.65], [1.72866528E12, 26.933333333333334], [1.72866606E12, 35.733333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72866666E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

