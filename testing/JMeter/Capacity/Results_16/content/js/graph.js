/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 150.0, "minX": 0.0, "maxY": 736049.0, "series": [{"data": [[0.0, 150.0], [0.1, 156.0], [0.2, 157.0], [0.3, 158.0], [0.4, 159.0], [0.5, 159.0], [0.6, 160.0], [0.7, 160.0], [0.8, 160.0], [0.9, 161.0], [1.0, 161.0], [1.1, 161.0], [1.2, 162.0], [1.3, 162.0], [1.4, 162.0], [1.5, 162.0], [1.6, 162.0], [1.7, 162.0], [1.8, 163.0], [1.9, 163.0], [2.0, 163.0], [2.1, 163.0], [2.2, 163.0], [2.3, 163.0], [2.4, 164.0], [2.5, 164.0], [2.6, 164.0], [2.7, 164.0], [2.8, 164.0], [2.9, 164.0], [3.0, 164.0], [3.1, 164.0], [3.2, 165.0], [3.3, 165.0], [3.4, 165.0], [3.5, 165.0], [3.6, 165.0], [3.7, 165.0], [3.8, 165.0], [3.9, 165.0], [4.0, 165.0], [4.1, 165.0], [4.2, 165.0], [4.3, 166.0], [4.4, 166.0], [4.5, 166.0], [4.6, 166.0], [4.7, 166.0], [4.8, 166.0], [4.9, 166.0], [5.0, 166.0], [5.1, 166.0], [5.2, 166.0], [5.3, 166.0], [5.4, 166.0], [5.5, 167.0], [5.6, 167.0], [5.7, 167.0], [5.8, 167.0], [5.9, 167.0], [6.0, 167.0], [6.1, 167.0], [6.2, 167.0], [6.3, 167.0], [6.4, 167.0], [6.5, 167.0], [6.6, 167.0], [6.7, 167.0], [6.8, 167.0], [6.9, 167.0], [7.0, 168.0], [7.1, 168.0], [7.2, 168.0], [7.3, 168.0], [7.4, 168.0], [7.5, 168.0], [7.6, 168.0], [7.7, 168.0], [7.8, 168.0], [7.9, 168.0], [8.0, 168.0], [8.1, 168.0], [8.2, 168.0], [8.3, 168.0], [8.4, 168.0], [8.5, 168.0], [8.6, 168.0], [8.7, 169.0], [8.8, 169.0], [8.9, 169.0], [9.0, 169.0], [9.1, 169.0], [9.2, 169.0], [9.3, 169.0], [9.4, 169.0], [9.5, 169.0], [9.6, 169.0], [9.7, 169.0], [9.8, 169.0], [9.9, 169.0], [10.0, 169.0], [10.1, 169.0], [10.2, 169.0], [10.3, 169.0], [10.4, 169.0], [10.5, 169.0], [10.6, 170.0], [10.7, 170.0], [10.8, 170.0], [10.9, 170.0], [11.0, 170.0], [11.1, 170.0], [11.2, 170.0], [11.3, 170.0], [11.4, 170.0], [11.5, 170.0], [11.6, 170.0], [11.7, 170.0], [11.8, 170.0], [11.9, 170.0], [12.0, 170.0], [12.1, 170.0], [12.2, 170.0], [12.3, 170.0], [12.4, 170.0], [12.5, 170.0], [12.6, 171.0], [12.7, 171.0], [12.8, 171.0], [12.9, 171.0], [13.0, 171.0], [13.1, 171.0], [13.2, 171.0], [13.3, 171.0], [13.4, 171.0], [13.5, 171.0], [13.6, 171.0], [13.7, 171.0], [13.8, 171.0], [13.9, 171.0], [14.0, 171.0], [14.1, 171.0], [14.2, 171.0], [14.3, 171.0], [14.4, 171.0], [14.5, 171.0], [14.6, 171.0], [14.7, 171.0], [14.8, 171.0], [14.9, 172.0], [15.0, 172.0], [15.1, 172.0], [15.2, 172.0], [15.3, 172.0], [15.4, 172.0], [15.5, 172.0], [15.6, 172.0], [15.7, 172.0], [15.8, 172.0], [15.9, 172.0], [16.0, 172.0], [16.1, 172.0], [16.2, 172.0], [16.3, 172.0], [16.4, 172.0], [16.5, 172.0], [16.6, 172.0], [16.7, 172.0], [16.8, 172.0], [16.9, 172.0], [17.0, 172.0], [17.1, 172.0], [17.2, 173.0], [17.3, 173.0], [17.4, 173.0], [17.5, 173.0], [17.6, 173.0], [17.7, 173.0], [17.8, 173.0], [17.9, 173.0], [18.0, 173.0], [18.1, 173.0], [18.2, 173.0], [18.3, 173.0], [18.4, 173.0], [18.5, 173.0], [18.6, 173.0], [18.7, 173.0], [18.8, 173.0], [18.9, 173.0], [19.0, 173.0], [19.1, 173.0], [19.2, 173.0], [19.3, 173.0], [19.4, 173.0], [19.5, 173.0], [19.6, 173.0], [19.7, 173.0], [19.8, 174.0], [19.9, 174.0], [20.0, 174.0], [20.1, 174.0], [20.2, 174.0], [20.3, 174.0], [20.4, 174.0], [20.5, 174.0], [20.6, 174.0], [20.7, 174.0], [20.8, 174.0], [20.9, 174.0], [21.0, 174.0], [21.1, 174.0], [21.2, 174.0], [21.3, 174.0], [21.4, 174.0], [21.5, 174.0], [21.6, 174.0], [21.7, 174.0], [21.8, 174.0], [21.9, 174.0], [22.0, 174.0], [22.1, 174.0], [22.2, 174.0], [22.3, 175.0], [22.4, 175.0], [22.5, 175.0], [22.6, 175.0], [22.7, 175.0], [22.8, 175.0], [22.9, 175.0], [23.0, 175.0], [23.1, 175.0], [23.2, 175.0], [23.3, 175.0], [23.4, 175.0], [23.5, 175.0], [23.6, 175.0], [23.7, 175.0], [23.8, 175.0], [23.9, 175.0], [24.0, 175.0], [24.1, 175.0], [24.2, 175.0], [24.3, 175.0], [24.4, 175.0], [24.5, 175.0], [24.6, 175.0], [24.7, 175.0], [24.8, 175.0], [24.9, 175.0], [25.0, 175.0], [25.1, 176.0], [25.2, 176.0], [25.3, 176.0], [25.4, 176.0], [25.5, 176.0], [25.6, 176.0], [25.7, 176.0], [25.8, 176.0], [25.9, 176.0], [26.0, 176.0], [26.1, 176.0], [26.2, 176.0], [26.3, 176.0], [26.4, 176.0], [26.5, 176.0], [26.6, 176.0], [26.7, 176.0], [26.8, 176.0], [26.9, 176.0], [27.0, 176.0], [27.1, 176.0], [27.2, 176.0], [27.3, 176.0], [27.4, 176.0], [27.5, 176.0], [27.6, 176.0], [27.7, 176.0], [27.8, 176.0], [27.9, 177.0], [28.0, 177.0], [28.1, 177.0], [28.2, 177.0], [28.3, 177.0], [28.4, 177.0], [28.5, 177.0], [28.6, 177.0], [28.7, 177.0], [28.8, 177.0], [28.9, 177.0], [29.0, 177.0], [29.1, 177.0], [29.2, 177.0], [29.3, 177.0], [29.4, 177.0], [29.5, 177.0], [29.6, 177.0], [29.7, 177.0], [29.8, 177.0], [29.9, 177.0], [30.0, 177.0], [30.1, 177.0], [30.2, 177.0], [30.3, 177.0], [30.4, 177.0], [30.5, 177.0], [30.6, 177.0], [30.7, 178.0], [30.8, 178.0], [30.9, 178.0], [31.0, 178.0], [31.1, 178.0], [31.2, 178.0], [31.3, 178.0], [31.4, 178.0], [31.5, 178.0], [31.6, 178.0], [31.7, 178.0], [31.8, 178.0], [31.9, 178.0], [32.0, 178.0], [32.1, 178.0], [32.2, 178.0], [32.3, 178.0], [32.4, 178.0], [32.5, 178.0], [32.6, 178.0], [32.7, 178.0], [32.8, 178.0], [32.9, 178.0], [33.0, 178.0], [33.1, 178.0], [33.2, 178.0], [33.3, 178.0], [33.4, 178.0], [33.5, 179.0], [33.6, 179.0], [33.7, 179.0], [33.8, 179.0], [33.9, 179.0], [34.0, 179.0], [34.1, 179.0], [34.2, 179.0], [34.3, 179.0], [34.4, 179.0], [34.5, 179.0], [34.6, 179.0], [34.7, 179.0], [34.8, 179.0], [34.9, 179.0], [35.0, 179.0], [35.1, 179.0], [35.2, 179.0], [35.3, 179.0], [35.4, 179.0], [35.5, 179.0], [35.6, 179.0], [35.7, 179.0], [35.8, 179.0], [35.9, 179.0], [36.0, 179.0], [36.1, 179.0], [36.2, 179.0], [36.3, 180.0], [36.4, 180.0], [36.5, 180.0], [36.6, 180.0], [36.7, 180.0], [36.8, 180.0], [36.9, 180.0], [37.0, 180.0], [37.1, 180.0], [37.2, 180.0], [37.3, 180.0], [37.4, 180.0], [37.5, 180.0], [37.6, 180.0], [37.7, 180.0], [37.8, 180.0], [37.9, 180.0], [38.0, 180.0], [38.1, 180.0], [38.2, 180.0], [38.3, 180.0], [38.4, 180.0], [38.5, 180.0], [38.6, 180.0], [38.7, 180.0], [38.8, 180.0], [38.9, 180.0], [39.0, 180.0], [39.1, 181.0], [39.2, 181.0], [39.3, 181.0], [39.4, 181.0], [39.5, 181.0], [39.6, 181.0], [39.7, 181.0], [39.8, 181.0], [39.9, 181.0], [40.0, 181.0], [40.1, 181.0], [40.2, 181.0], [40.3, 181.0], [40.4, 181.0], [40.5, 181.0], [40.6, 181.0], [40.7, 181.0], [40.8, 181.0], [40.9, 181.0], [41.0, 181.0], [41.1, 181.0], [41.2, 181.0], [41.3, 181.0], [41.4, 181.0], [41.5, 181.0], [41.6, 181.0], [41.7, 181.0], [41.8, 182.0], [41.9, 182.0], [42.0, 182.0], [42.1, 182.0], [42.2, 182.0], [42.3, 182.0], [42.4, 182.0], [42.5, 182.0], [42.6, 182.0], [42.7, 182.0], [42.8, 182.0], [42.9, 182.0], [43.0, 182.0], [43.1, 182.0], [43.2, 182.0], [43.3, 182.0], [43.4, 182.0], [43.5, 182.0], [43.6, 182.0], [43.7, 182.0], [43.8, 182.0], [43.9, 182.0], [44.0, 182.0], [44.1, 182.0], [44.2, 182.0], [44.3, 182.0], [44.4, 183.0], [44.5, 183.0], [44.6, 183.0], [44.7, 183.0], [44.8, 183.0], [44.9, 183.0], [45.0, 183.0], [45.1, 183.0], [45.2, 183.0], [45.3, 183.0], [45.4, 183.0], [45.5, 183.0], [45.6, 183.0], [45.7, 183.0], [45.8, 183.0], [45.9, 183.0], [46.0, 183.0], [46.1, 183.0], [46.2, 183.0], [46.3, 183.0], [46.4, 183.0], [46.5, 183.0], [46.6, 183.0], [46.7, 183.0], [46.8, 183.0], [46.9, 183.0], [47.0, 184.0], [47.1, 184.0], [47.2, 184.0], [47.3, 184.0], [47.4, 184.0], [47.5, 184.0], [47.6, 184.0], [47.7, 184.0], [47.8, 184.0], [47.9, 184.0], [48.0, 184.0], [48.1, 184.0], [48.2, 184.0], [48.3, 184.0], [48.4, 184.0], [48.5, 184.0], [48.6, 184.0], [48.7, 184.0], [48.8, 184.0], [48.9, 184.0], [49.0, 184.0], [49.1, 184.0], [49.2, 184.0], [49.3, 184.0], [49.4, 184.0], [49.5, 185.0], [49.6, 185.0], [49.7, 185.0], [49.8, 185.0], [49.9, 185.0], [50.0, 185.0], [50.1, 185.0], [50.2, 185.0], [50.3, 185.0], [50.4, 185.0], [50.5, 185.0], [50.6, 185.0], [50.7, 185.0], [50.8, 185.0], [50.9, 185.0], [51.0, 185.0], [51.1, 185.0], [51.2, 185.0], [51.3, 185.0], [51.4, 185.0], [51.5, 185.0], [51.6, 185.0], [51.7, 185.0], [51.8, 186.0], [51.9, 186.0], [52.0, 186.0], [52.1, 186.0], [52.2, 186.0], [52.3, 186.0], [52.4, 186.0], [52.5, 186.0], [52.6, 186.0], [52.7, 186.0], [52.8, 186.0], [52.9, 186.0], [53.0, 186.0], [53.1, 186.0], [53.2, 186.0], [53.3, 186.0], [53.4, 186.0], [53.5, 186.0], [53.6, 186.0], [53.7, 186.0], [53.8, 186.0], [53.9, 186.0], [54.0, 187.0], [54.1, 187.0], [54.2, 187.0], [54.3, 187.0], [54.4, 187.0], [54.5, 187.0], [54.6, 187.0], [54.7, 187.0], [54.8, 187.0], [54.9, 187.0], [55.0, 187.0], [55.1, 187.0], [55.2, 187.0], [55.3, 187.0], [55.4, 187.0], [55.5, 187.0], [55.6, 187.0], [55.7, 187.0], [55.8, 187.0], [55.9, 187.0], [56.0, 187.0], [56.1, 187.0], [56.2, 188.0], [56.3, 188.0], [56.4, 188.0], [56.5, 188.0], [56.6, 188.0], [56.7, 188.0], [56.8, 188.0], [56.9, 188.0], [57.0, 188.0], [57.1, 188.0], [57.2, 188.0], [57.3, 188.0], [57.4, 188.0], [57.5, 188.0], [57.6, 188.0], [57.7, 188.0], [57.8, 188.0], [57.9, 188.0], [58.0, 188.0], [58.1, 188.0], [58.2, 188.0], [58.3, 189.0], [58.4, 189.0], [58.5, 189.0], [58.6, 189.0], [58.7, 189.0], [58.8, 189.0], [58.9, 189.0], [59.0, 189.0], [59.1, 189.0], [59.2, 189.0], [59.3, 189.0], [59.4, 189.0], [59.5, 189.0], [59.6, 189.0], [59.7, 189.0], [59.8, 189.0], [59.9, 189.0], [60.0, 189.0], [60.1, 189.0], [60.2, 190.0], [60.3, 190.0], [60.4, 190.0], [60.5, 190.0], [60.6, 190.0], [60.7, 190.0], [60.8, 190.0], [60.9, 190.0], [61.0, 190.0], [61.1, 190.0], [61.2, 190.0], [61.3, 190.0], [61.4, 190.0], [61.5, 190.0], [61.6, 190.0], [61.7, 190.0], [61.8, 190.0], [61.9, 190.0], [62.0, 190.0], [62.1, 191.0], [62.2, 191.0], [62.3, 191.0], [62.4, 191.0], [62.5, 191.0], [62.6, 191.0], [62.7, 191.0], [62.8, 191.0], [62.9, 191.0], [63.0, 191.0], [63.1, 191.0], [63.2, 191.0], [63.3, 191.0], [63.4, 191.0], [63.5, 191.0], [63.6, 191.0], [63.7, 191.0], [63.8, 192.0], [63.9, 192.0], [64.0, 192.0], [64.1, 192.0], [64.2, 192.0], [64.3, 192.0], [64.4, 192.0], [64.5, 192.0], [64.6, 192.0], [64.7, 192.0], [64.8, 192.0], [64.9, 192.0], [65.0, 192.0], [65.1, 192.0], [65.2, 192.0], [65.3, 192.0], [65.4, 193.0], [65.5, 193.0], [65.6, 193.0], [65.7, 193.0], [65.8, 193.0], [65.9, 193.0], [66.0, 193.0], [66.1, 193.0], [66.2, 193.0], [66.3, 193.0], [66.4, 193.0], [66.5, 193.0], [66.6, 193.0], [66.7, 193.0], [66.8, 193.0], [66.9, 193.0], [67.0, 194.0], [67.1, 194.0], [67.2, 194.0], [67.3, 194.0], [67.4, 194.0], [67.5, 194.0], [67.6, 194.0], [67.7, 194.0], [67.8, 194.0], [67.9, 194.0], [68.0, 194.0], [68.1, 194.0], [68.2, 194.0], [68.3, 194.0], [68.4, 195.0], [68.5, 195.0], [68.6, 195.0], [68.7, 195.0], [68.8, 195.0], [68.9, 195.0], [69.0, 195.0], [69.1, 195.0], [69.2, 195.0], [69.3, 195.0], [69.4, 195.0], [69.5, 195.0], [69.6, 195.0], [69.7, 195.0], [69.8, 196.0], [69.9, 196.0], [70.0, 196.0], [70.1, 196.0], [70.2, 196.0], [70.3, 196.0], [70.4, 196.0], [70.5, 196.0], [70.6, 196.0], [70.7, 196.0], [70.8, 196.0], [70.9, 196.0], [71.0, 197.0], [71.1, 197.0], [71.2, 197.0], [71.3, 197.0], [71.4, 197.0], [71.5, 197.0], [71.6, 197.0], [71.7, 197.0], [71.8, 197.0], [71.9, 197.0], [72.0, 197.0], [72.1, 197.0], [72.2, 198.0], [72.3, 198.0], [72.4, 198.0], [72.5, 198.0], [72.6, 198.0], [72.7, 198.0], [72.8, 198.0], [72.9, 198.0], [73.0, 198.0], [73.1, 198.0], [73.2, 198.0], [73.3, 199.0], [73.4, 199.0], [73.5, 199.0], [73.6, 199.0], [73.7, 199.0], [73.8, 199.0], [73.9, 199.0], [74.0, 199.0], [74.1, 199.0], [74.2, 199.0], [74.3, 200.0], [74.4, 200.0], [74.5, 200.0], [74.6, 200.0], [74.7, 200.0], [74.8, 200.0], [74.9, 200.0], [75.0, 200.0], [75.1, 201.0], [75.2, 201.0], [75.3, 201.0], [75.4, 201.0], [75.5, 201.0], [75.6, 201.0], [75.7, 201.0], [75.8, 201.0], [75.9, 201.0], [76.0, 202.0], [76.1, 202.0], [76.2, 202.0], [76.3, 202.0], [76.4, 202.0], [76.5, 202.0], [76.6, 202.0], [76.7, 203.0], [76.8, 203.0], [76.9, 203.0], [77.0, 203.0], [77.1, 203.0], [77.2, 203.0], [77.3, 203.0], [77.4, 204.0], [77.5, 204.0], [77.6, 204.0], [77.7, 204.0], [77.8, 204.0], [77.9, 204.0], [78.0, 205.0], [78.1, 205.0], [78.2, 205.0], [78.3, 205.0], [78.4, 205.0], [78.5, 205.0], [78.6, 206.0], [78.7, 206.0], [78.8, 206.0], [78.9, 206.0], [79.0, 206.0], [79.1, 207.0], [79.2, 207.0], [79.3, 207.0], [79.4, 207.0], [79.5, 207.0], [79.6, 208.0], [79.7, 208.0], [79.8, 208.0], [79.9, 208.0], [80.0, 208.0], [80.1, 209.0], [80.2, 209.0], [80.3, 209.0], [80.4, 209.0], [80.5, 210.0], [80.6, 210.0], [80.7, 210.0], [80.8, 210.0], [80.9, 210.0], [81.0, 211.0], [81.1, 211.0], [81.2, 211.0], [81.3, 211.0], [81.4, 212.0], [81.5, 212.0], [81.6, 212.0], [81.7, 212.0], [81.8, 213.0], [81.9, 213.0], [82.0, 213.0], [82.1, 214.0], [82.2, 214.0], [82.3, 214.0], [82.4, 215.0], [82.5, 215.0], [82.6, 215.0], [82.7, 216.0], [82.8, 216.0], [82.9, 216.0], [83.0, 216.0], [83.1, 217.0], [83.2, 217.0], [83.3, 217.0], [83.4, 218.0], [83.5, 218.0], [83.6, 219.0], [83.7, 219.0], [83.8, 219.0], [83.9, 220.0], [84.0, 220.0], [84.1, 221.0], [84.2, 221.0], [84.3, 221.0], [84.4, 222.0], [84.5, 222.0], [84.6, 223.0], [84.7, 223.0], [84.8, 224.0], [84.9, 224.0], [85.0, 225.0], [85.1, 225.0], [85.2, 226.0], [85.3, 226.0], [85.4, 227.0], [85.5, 227.0], [85.6, 228.0], [85.7, 228.0], [85.8, 229.0], [85.9, 229.0], [86.0, 230.0], [86.1, 231.0], [86.2, 231.0], [86.3, 232.0], [86.4, 233.0], [86.5, 233.0], [86.6, 234.0], [86.7, 235.0], [86.8, 235.0], [86.9, 236.0], [87.0, 237.0], [87.1, 238.0], [87.2, 239.0], [87.3, 240.0], [87.4, 241.0], [87.5, 242.0], [87.6, 243.0], [87.7, 244.0], [87.8, 245.0], [87.9, 246.0], [88.0, 247.0], [88.1, 248.0], [88.2, 249.0], [88.3, 251.0], [88.4, 252.0], [88.5, 253.0], [88.6, 255.0], [88.7, 257.0], [88.8, 258.0], [88.9, 260.0], [89.0, 262.0], [89.1, 264.0], [89.2, 266.0], [89.3, 269.0], [89.4, 271.0], [89.5, 273.0], [89.6, 275.0], [89.7, 278.0], [89.8, 281.0], [89.9, 284.0], [90.0, 288.0], [90.1, 292.0], [90.2, 295.0], [90.3, 300.0], [90.4, 305.0], [90.5, 311.0], [90.6, 316.0], [90.7, 321.0], [90.8, 328.0], [90.9, 334.0], [91.0, 339.0], [91.1, 349.0], [91.2, 361.0], [91.3, 371.0], [91.4, 383.0], [91.5, 397.0], [91.6, 409.0], [91.7, 421.0], [91.8, 431.0], [91.9, 439.0], [92.0, 447.0], [92.1, 454.0], [92.2, 461.0], [92.3, 467.0], [92.4, 470.0], [92.5, 478.0], [92.6, 486.0], [92.7, 493.0], [92.8, 499.0], [92.9, 505.0], [93.0, 511.0], [93.1, 517.0], [93.2, 523.0], [93.3, 531.0], [93.4, 540.0], [93.5, 549.0], [93.6, 564.0], [93.7, 588.0], [93.8, 614.0], [93.9, 642.0], [94.0, 675.0], [94.1, 716.0], [94.2, 775.0], [94.3, 852.0], [94.4, 954.0], [94.5, 1138.0], [94.6, 1176.0], [94.7, 1182.0], [94.8, 1186.0], [94.9, 1191.0], [95.0, 1198.0], [95.1, 1204.0], [95.2, 1220.0], [95.3, 1246.0], [95.4, 1267.0], [95.5, 1293.0], [95.6, 1325.0], [95.7, 1359.0], [95.8, 1405.0], [95.9, 1504.0], [96.0, 1622.0], [96.1, 1843.0], [96.2, 2056.0], [96.3, 2219.0], [96.4, 2405.0], [96.5, 2713.0], [96.6, 2988.0], [96.7, 3214.0], [96.8, 3471.0], [96.9, 3662.0], [97.0, 4014.0], [97.1, 4423.0], [97.2, 4709.0], [97.3, 5022.0], [97.4, 5269.0], [97.5, 5516.0], [97.6, 5992.0], [97.7, 6495.0], [97.8, 6951.0], [97.9, 7614.0], [98.0, 7961.0], [98.1, 8373.0], [98.2, 8719.0], [98.3, 9057.0], [98.4, 9309.0], [98.5, 9516.0], [98.6, 9836.0], [98.7, 10363.0], [98.8, 10910.0], [98.9, 11583.0], [99.0, 12405.0], [99.1, 13846.0], [99.2, 14950.0], [99.3, 15446.0], [99.4, 16603.0], [99.5, 19091.0], [99.6, 20697.0], [99.7, 24170.0], [99.8, 25906.0], [99.9, 32357.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 44540.0, "series": [{"data": [[100.0, 44540.0], [33300.0, 1.0], [35300.0, 1.0], [41300.0, 1.0], [48100.0, 1.0], [200.0, 9636.0], [51300.0, 1.0], [54900.0, 1.0], [300.0, 734.0], [74600.0, 1.0], [400.0, 776.0], [500.0, 564.0], [600.0, 198.0], [700.0, 95.0], [800.0, 62.0], [900.0, 53.0], [1000.0, 32.0], [1100.0, 332.0], [1200.0, 295.0], [1300.0, 156.0], [1400.0, 67.0], [1500.0, 46.0], [1600.0, 40.0], [1700.0, 21.0], [1800.0, 36.0], [1900.0, 28.0], [2000.0, 18.0], [2100.0, 38.0], [2200.0, 43.0], [2300.0, 28.0], [2400.0, 23.0], [2500.0, 22.0], [2600.0, 14.0], [2700.0, 25.0], [2800.0, 12.0], [2900.0, 28.0], [3000.0, 21.0], [3100.0, 25.0], [3300.0, 27.0], [3200.0, 32.0], [3400.0, 21.0], [3500.0, 43.0], [3600.0, 17.0], [3700.0, 15.0], [3800.0, 20.0], [3900.0, 15.0], [4000.0, 24.0], [4200.0, 15.0], [4300.0, 8.0], [4100.0, 11.0], [68900.0, 1.0], [4500.0, 22.0], [4600.0, 28.0], [4400.0, 10.0], [4700.0, 17.0], [4800.0, 29.0], [5100.0, 16.0], [5000.0, 34.0], [4900.0, 11.0], [5300.0, 15.0], [5200.0, 21.0], [5400.0, 32.0], [5500.0, 28.0], [5600.0, 7.0], [5700.0, 9.0], [5800.0, 7.0], [6000.0, 13.0], [5900.0, 20.0], [6100.0, 6.0], [6300.0, 16.0], [6200.0, 15.0], [6500.0, 21.0], [6400.0, 11.0], [6600.0, 10.0], [6700.0, 10.0], [6900.0, 12.0], [6800.0, 11.0], [7000.0, 8.0], [7100.0, 2.0], [7200.0, 7.0], [7400.0, 7.0], [7300.0, 12.0], [7600.0, 16.0], [7500.0, 13.0], [7900.0, 13.0], [7700.0, 20.0], [7800.0, 22.0], [8100.0, 16.0], [8000.0, 9.0], [8200.0, 19.0], [8300.0, 15.0], [8600.0, 17.0], [8500.0, 16.0], [8700.0, 32.0], [8400.0, 18.0], [8800.0, 17.0], [9200.0, 26.0], [8900.0, 11.0], [9000.0, 7.0], [9100.0, 28.0], [9400.0, 26.0], [9500.0, 25.0], [9300.0, 33.0], [9700.0, 17.0], [9600.0, 16.0], [9800.0, 15.0], [9900.0, 11.0], [10100.0, 8.0], [10200.0, 10.0], [10000.0, 9.0], [10700.0, 12.0], [10300.0, 17.0], [10400.0, 16.0], [10500.0, 8.0], [10600.0, 8.0], [10800.0, 8.0], [11200.0, 10.0], [10900.0, 11.0], [11100.0, 7.0], [11000.0, 14.0], [11300.0, 8.0], [11500.0, 9.0], [11600.0, 6.0], [11700.0, 3.0], [11400.0, 6.0], [11800.0, 8.0], [12100.0, 5.0], [12200.0, 9.0], [12000.0, 10.0], [11900.0, 9.0], [12400.0, 7.0], [12500.0, 4.0], [12700.0, 3.0], [12300.0, 8.0], [12600.0, 4.0], [12800.0, 4.0], [13000.0, 5.0], [13200.0, 6.0], [13300.0, 7.0], [12900.0, 4.0], [13100.0, 2.0], [13400.0, 5.0], [13700.0, 5.0], [13800.0, 4.0], [13500.0, 1.0], [13600.0, 2.0], [13900.0, 10.0], [14200.0, 6.0], [14300.0, 2.0], [14100.0, 3.0], [14000.0, 2.0], [14700.0, 8.0], [14800.0, 4.0], [14500.0, 1.0], [14400.0, 5.0], [14600.0, 14.0], [15100.0, 1.0], [14900.0, 14.0], [15000.0, 39.0], [15300.0, 5.0], [15200.0, 1.0], [15800.0, 6.0], [15500.0, 10.0], [15700.0, 1.0], [15400.0, 6.0], [15600.0, 3.0], [16100.0, 1.0], [16000.0, 3.0], [16200.0, 4.0], [15900.0, 8.0], [16300.0, 6.0], [17200.0, 4.0], [17000.0, 1.0], [16600.0, 3.0], [17400.0, 3.0], [16800.0, 6.0], [16400.0, 10.0], [18200.0, 3.0], [18000.0, 3.0], [17600.0, 1.0], [17800.0, 3.0], [18400.0, 1.0], [19000.0, 5.0], [18800.0, 3.0], [18600.0, 3.0], [19400.0, 2.0], [19200.0, 2.0], [19600.0, 3.0], [19800.0, 3.0], [20000.0, 5.0], [20200.0, 8.0], [20400.0, 2.0], [20600.0, 4.0], [21000.0, 5.0], [20800.0, 1.0], [22400.0, 1.0], [23000.0, 1.0], [24400.0, 4.0], [24000.0, 1.0], [25000.0, 1.0], [24800.0, 3.0], [25200.0, 4.0], [24600.0, 2.0], [25400.0, 1.0], [25800.0, 21.0], [25600.0, 1.0], [26000.0, 2.0], [26400.0, 2.0], [26600.0, 1.0], [27000.0, 1.0], [26800.0, 2.0], [27400.0, 2.0], [28200.0, 3.0], [27800.0, 1.0], [28800.0, 2.0], [29400.0, 2.0], [30200.0, 3.0], [30000.0, 1.0], [30400.0, 1.0], [30800.0, 1.0], [31200.0, 1.0], [31000.0, 1.0], [32400.0, 6.0], [31800.0, 1.0], [32000.0, 1.0], [32800.0, 1.0], [34400.0, 1.0], [35600.0, 1.0], [38000.0, 1.0], [39200.0, 1.0], [51200.0, 1.0], [52400.0, 1.0], [68800.0, 1.0], [93600.0, 1.0], [736000.0, 1.0], [70300.0, 1.0], [33900.0, 1.0], [35100.0, 1.0], [37900.0, 1.0], [37100.0, 1.0], [43900.0, 1.0], [46300.0, 1.0], [47500.0, 1.0], [51100.0, 1.0], [51500.0, 1.0], [51900.0, 1.0], [53100.0, 1.0], [53500.0, 1.0], [58300.0, 2.0], [72500.0, 1.0], [154200.0, 1.0], [16900.0, 3.0], [16500.0, 3.0], [17300.0, 1.0], [17100.0, 1.0], [16700.0, 3.0], [17900.0, 2.0], [17500.0, 2.0], [17700.0, 1.0], [18100.0, 1.0], [18300.0, 1.0], [18500.0, 1.0], [19100.0, 9.0], [18900.0, 6.0], [19300.0, 2.0], [18700.0, 1.0], [19700.0, 5.0], [19900.0, 8.0], [19500.0, 2.0], [20100.0, 5.0], [20700.0, 16.0], [21500.0, 1.0], [20900.0, 14.0], [22500.0, 1.0], [21700.0, 3.0], [22100.0, 1.0], [22300.0, 1.0], [21900.0, 1.0], [22700.0, 5.0], [22900.0, 2.0], [24100.0, 2.0], [23900.0, 3.0], [24300.0, 1.0], [23700.0, 1.0], [24500.0, 3.0], [24700.0, 7.0], [25100.0, 4.0], [25300.0, 3.0], [25500.0, 1.0], [25700.0, 3.0], [25900.0, 1.0], [26500.0, 4.0], [27500.0, 1.0], [26900.0, 1.0], [26700.0, 1.0], [27700.0, 1.0], [28300.0, 1.0], [28100.0, 2.0], [27900.0, 1.0], [29500.0, 2.0], [28700.0, 2.0], [29100.0, 1.0], [29300.0, 1.0], [30700.0, 2.0], [30300.0, 4.0], [29900.0, 1.0], [31100.0, 5.0], [32300.0, 2.0], [32700.0, 1.0], [33800.0, 3.0], [33000.0, 1.0], [37400.0, 2.0], [39400.0, 1.0], [52600.0, 1.0], [51400.0, 5.0], [51800.0, 2.0], [55400.0, 1.0], [82000.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 736000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 55697.0, "series": [{"data": [[0.0, 55697.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1843.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2458.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 7.631317689530677, "minX": 1.72866678E12, "maxY": 291.404375441072, "series": [{"data": [[1.72866834E12, 9.228133453561755], [1.72866774E12, 7.631317689530677], [1.72866804E12, 9.722727272727278], [1.72866744E12, 9.060360360360363], [1.72866714E12, 9.524066576698184], [1.72866684E12, 66.52484472049686], [1.7286672E12, 11.265724703737469], [1.7286669E12, 291.404375441072], [1.72866822E12, 9.22008068130882], [1.72866762E12, 9.470407715914089], [1.72866792E12, 8.192376681614347], [1.72866732E12, 9.134641105662057], [1.72866702E12, 10.163301929116194], [1.72866768E12, 8.567290552584662], [1.72866738E12, 8.794871794871806], [1.72866708E12, 10.248884924174845], [1.72866678E12, 83.89636112390606], [1.7286681E12, 10.362749445676284], [1.7286684E12, 7.642857142857144], [1.7286675E12, 9.032170367014048], [1.7286678E12, 7.887892376681619], [1.72866786E12, 8.06092057761735], [1.72866816E12, 8.19349005424955], [1.72866756E12, 10.764487714418173], [1.72866726E12, 9.159641255605358], [1.72866696E12, 14.754054054054064], [1.72866798E12, 10.396653098145642], [1.72866828E12, 8.590112359550568]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286684E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 186.4254367575115, "minX": 1.0, "maxY": 26067.0, "series": [{"data": [[2.0, 240.13452914798205], [3.0, 220.38749999999996], [4.0, 209.13738738738724], [5.0, 198.54748603351945], [6.0, 252.3063444108761], [7.0, 186.4254367575115], [8.0, 192.81329697058996], [9.0, 204.73631428140524], [10.0, 237.11458183388686], [11.0, 456.3919197876737], [12.0, 307.966492146597], [13.0, 283.6840336134455], [14.0, 314.7293577981654], [15.0, 438.6054131054132], [16.0, 440.58541266794595], [17.0, 254.71140939597328], [18.0, 261.6525198938994], [19.0, 482.6666666666669], [20.0, 718.4007633587792], [21.0, 423.5941422594141], [22.0, 289.947867298578], [23.0, 477.1638418079099], [24.0, 607.1515151515149], [25.0, 769.8055555555554], [26.0, 698.6710526315794], [27.0, 1438.3858267716532], [28.0, 386.5981308411215], [29.0, 2018.051020408163], [30.0, 396.8571428571429], [31.0, 448.9062500000003], [33.0, 1979.4098360655728], [32.0, 372.16393442622933], [35.0, 1021.6578947368423], [34.0, 1406.7222222222222], [37.0, 455.6538461538462], [36.0, 3691.1176470588243], [39.0, 1615.842105263158], [38.0, 2702.1739130434776], [41.0, 6658.65], [40.0, 517.75], [43.0, 665.4545454545453], [42.0, 492.33333333333326], [45.0, 1514.333333333334], [44.0, 4222.282051282051], [47.0, 1542.4565217391303], [46.0, 3756.7254901960787], [49.0, 2162.787234042554], [48.0, 874.9761904761904], [51.0, 397.68421052631584], [50.0, 1603.8333333333333], [53.0, 965.1463414634147], [52.0, 719.8863636363635], [55.0, 646.2857142857143], [54.0, 535.5333333333332], [57.0, 4672.142857142859], [56.0, 3007.074074074074], [59.0, 1448.3999999999996], [58.0, 3923.0000000000014], [61.0, 768.8947368421052], [60.0, 1432.4516129032256], [63.0, 2556.090909090909], [62.0, 2200.3913043478256], [67.0, 2750.7777777777774], [66.0, 1585.409090909091], [65.0, 1420.7272727272725], [64.0, 1101.225806451613], [71.0, 2530.347826086957], [70.0, 3344.090909090909], [69.0, 2861.2083333333335], [68.0, 1685.3999999999996], [75.0, 912.2222222222223], [74.0, 3126.65], [73.0, 1409.1363636363635], [72.0, 2317.48], [79.0, 4509.416666666666], [78.0, 842.0], [77.0, 623.4615384615386], [76.0, 626.8461538461538], [83.0, 3609.666666666666], [82.0, 5799.300000000001], [81.0, 3920.0], [80.0, 2774.769230769231], [87.0, 7761.846153846154], [86.0, 4902.1], [85.0, 6282.000000000001], [84.0, 6243.125], [91.0, 4549.0], [90.0, 1886.25], [89.0, 5648.750000000001], [88.0, 5405.4], [95.0, 1432.3076923076924], [94.0, 4193.090909090909], [93.0, 3395.3], [92.0, 637.8888888888889], [99.0, 911.25], [98.0, 2722.285714285714], [97.0, 6867.875], [96.0, 5163.666666666667], [103.0, 1398.5714285714287], [102.0, 2916.0], [101.0, 3062.0], [100.0, 536.25], [107.0, 7171.2], [106.0, 852.4], [105.0, 483.5], [104.0, 2282.5], [111.0, 7868.5], [110.0, 5671.75], [109.0, 3225.0], [108.0, 618.5555555555557], [115.0, 715.5], [114.0, 4201.0], [113.0, 4908.2], [112.0, 4262.4], [119.0, 4103.428571428572], [118.0, 534.5], [117.0, 5575.333333333333], [116.0, 6658.333333333333], [123.0, 3014.0], [122.0, 2906.4], [121.0, 6102.857142857142], [120.0, 958.0], [127.0, 1057.5], [126.0, 787.5], [125.0, 1462.5], [124.0, 9217.0], [134.0, 2751.6666666666665], [133.0, 5873.333333333333], [131.0, 1368.0], [130.0, 774.6666666666667], [128.0, 2880.0], [135.0, 16603.0], [132.0, 2522.0], [129.0, 1340.0], [142.0, 965.0], [141.0, 1844.6666666666667], [139.0, 1416.3333333333335], [138.0, 811.0], [137.0, 3086.6], [136.0, 1724.6], [143.0, 2475.0], [140.0, 3617.0], [151.0, 1149.5], [150.0, 3513.5], [149.0, 1125.0], [148.0, 9616.5], [147.0, 3687.0], [146.0, 2729.0], [145.0, 6180.4], [144.0, 2730.6666666666665], [159.0, 1477.0], [158.0, 4342.75], [157.0, 5326.2], [156.0, 2778.1666666666665], [155.0, 1625.25], [154.0, 1816.25], [153.0, 6777.0], [152.0, 3663.6666666666665], [167.0, 3752.5], [166.0, 2089.0], [165.0, 1233.0], [164.0, 2093.0], [163.0, 9523.25], [162.0, 1482.5], [161.0, 1644.5], [160.0, 1628.5], [175.0, 4787.0], [174.0, 6015.0], [173.0, 4787.2], [172.0, 4916.6], [171.0, 5107.0], [170.0, 4806.75], [169.0, 5508.5], [168.0, 5768.0], [183.0, 4640.0], [182.0, 3880.833333333333], [181.0, 13823.5], [180.0, 2314.3333333333335], [179.0, 3184.0], [178.0, 6368.0], [177.0, 6847.5], [176.0, 1935.6666666666667], [190.0, 2352.166666666667], [188.0, 8375.5], [186.0, 4941.4], [185.0, 8861.75], [189.0, 2102.25], [191.0, 2917.0], [187.0, 3463.6666666666665], [184.0, 2337.5], [199.0, 4062.142857142858], [198.0, 3637.666666666667], [197.0, 7573.333333333333], [196.0, 5601.428571428572], [195.0, 2494.1666666666665], [193.0, 2804.2], [192.0, 6841.714285714286], [194.0, 6894.833333333333], [207.0, 2242.25], [206.0, 3911.666666666667], [205.0, 4633.375], [203.0, 12240.3], [202.0, 12652.666666666666], [204.0, 9244.4], [201.0, 7766.6], [200.0, 7017.2307692307695], [215.0, 2686.6666666666665], [214.0, 3990.0], [213.0, 5243.2], [212.0, 2504.0], [211.0, 4611.714285714286], [210.0, 4482.875], [209.0, 2816.8], [208.0, 6727.5], [223.0, 8649.0], [221.0, 1988.5], [220.0, 2464.0], [219.0, 2884.5], [218.0, 4003.0], [217.0, 2388.5], [216.0, 1911.0], [222.0, 3346.0], [231.0, 3958.285714285714], [230.0, 10243.875000000002], [229.0, 12498.75], [228.0, 8149.5], [226.0, 6771.333333333333], [225.0, 5508.0], [224.0, 7525.6], [227.0, 3237.5], [238.0, 2811.5], [236.0, 2613.8], [234.0, 2409.3333333333335], [233.0, 3715.1666666666665], [232.0, 10599.09090909091], [239.0, 2345.0], [237.0, 4901.5], [235.0, 3819.0], [247.0, 7912.4], [246.0, 6493.333333333333], [245.0, 7410.5], [244.0, 8183.0], [243.0, 10783.875], [242.0, 2971.5], [241.0, 4619.75], [240.0, 6456.833333333333], [255.0, 7511.0], [254.0, 12090.0], [253.0, 2675.0], [252.0, 6691.428571428572], [251.0, 11280.75], [250.0, 6281.666666666666], [249.0, 9896.333333333334], [248.0, 6996.142857142858], [269.0, 11287.0], [271.0, 14242.25], [270.0, 16813.0], [268.0, 10402.11111111111], [259.0, 3031.6666666666665], [258.0, 2991.0], [257.0, 5831.75], [256.0, 2756.3333333333335], [266.0, 10519.857142857143], [267.0, 8801.75], [265.0, 9433.4], [264.0, 5623.833333333334], [263.0, 10270.25], [262.0, 11866.714285714286], [260.0, 6982.0], [261.0, 20292.5], [286.0, 5592.25], [287.0, 9622.2], [284.0, 8913.25], [285.0, 5820.0], [275.0, 4144.25], [274.0, 12212.894736842105], [272.0, 13546.0], [273.0, 8516.0], [283.0, 8051.8], [282.0, 9319.0], [281.0, 6804.75], [280.0, 13646.857142857143], [279.0, 8201.666666666666], [278.0, 5037.75], [277.0, 15056.777777777777], [276.0, 12515.5], [302.0, 6168.142857142857], [303.0, 6939.222222222223], [301.0, 5293.076923076924], [300.0, 3872.0909090909086], [299.0, 6017.823529411765], [298.0, 6277.9333333333325], [297.0, 3977.777777777778], [296.0, 6470.0], [295.0, 5771.909090909091], [289.0, 1964.0], [288.0, 2178.0], [291.0, 5537.615384615385], [290.0, 3252.25], [294.0, 4133.1], [293.0, 5222.285714285714], [292.0, 2650.0], [304.0, 6446.733333333334], [307.0, 4426.5], [306.0, 4183.0], [305.0, 4651.0], [312.0, 4622.75], [319.0, 3061.0], [318.0, 2751.0], [314.0, 5257.5], [315.0, 3104.0], [313.0, 4659.666666666667], [311.0, 6525.5], [310.0, 4648.0], [309.0, 3570.3333333333335], [308.0, 4996.428571428572], [317.0, 5350.666666666667], [316.0, 5124.333333333333], [334.0, 4470.0], [321.0, 9607.333333333334], [320.0, 2988.0], [323.0, 2923.0], [322.0, 7501.0], [327.0, 2938.5], [325.0, 2956.0], [324.0, 2920.0], [335.0, 6611.0], [333.0, 4570.0], [332.0, 2839.5], [331.0, 15620.5], [330.0, 5016.0], [329.0, 4468.0], [328.0, 2271.0], [350.0, 7999.0], [351.0, 3362.0], [349.0, 2181.5], [347.0, 4545.0], [346.0, 3124.5], [345.0, 2954.5], [344.0, 2742.0], [343.0, 5341.0], [337.0, 8795.0], [339.0, 6206.0], [338.0, 18994.0], [342.0, 6592.0], [341.0, 6277.0], [340.0, 6534.0], [348.0, 8178.0], [366.0, 5091.0], [367.0, 3866.0], [365.0, 6572.333333333333], [364.0, 7531.333333333333], [363.0, 5763.666666666667], [362.0, 4633.0], [361.0, 19523.0], [360.0, 8624.0], [359.0, 4130.666666666667], [352.0, 4607.0], [355.0, 5172.0], [354.0, 3476.5], [358.0, 3853.0], [357.0, 3721.0], [356.0, 4133.0], [382.0, 7349.0], [383.0, 7357.0], [381.0, 7253.0], [380.0, 5222.0], [379.0, 4645.5], [378.0, 4574.0], [376.0, 4055.3333333333335], [377.0, 4102.5], [375.0, 10644.333333333334], [369.0, 4988.4], [368.0, 6342.5], [371.0, 14545.333333333332], [370.0, 15006.333333333332], [374.0, 5806.166666666667], [372.0, 12738.5], [373.0, 20871.25], [387.0, 4178.0], [398.0, 15048.0], [396.0, 25902.5], [394.0, 4279.0], [393.0, 4267.0], [392.0, 5240.0], [391.0, 4741.0], [389.0, 4209.0], [388.0, 5269.0], [386.0, 5203.0], [385.0, 5231.0], [384.0, 7345.0], [402.0, 4490.0], [413.0, 25842.0], [415.0, 25879.0], [412.0, 25842.5], [410.0, 25846.5], [408.0, 15168.0], [406.0, 15691.5], [404.0, 5562.5], [401.0, 5438.0], [400.0, 25726.0], [430.0, 26067.0], [431.0, 5946.0], [429.0, 5794.0], [419.0, 25841.5], [417.0, 25811.0], [427.0, 4533.0], [426.0, 4531.0], [425.0, 15195.0], [423.0, 25834.5], [421.0, 25834.5], [420.0, 25866.0], [445.0, 5953.0], [446.0, 5999.0], [444.0, 5987.0], [435.0, 4877.0], [434.0, 5940.0], [433.0, 4795.0], [432.0, 7950.0], [443.0, 5022.0], [442.0, 5992.0], [441.0, 10396.0], [440.0, 10360.0], [439.0, 6002.0], [438.0, 5992.0], [436.0, 5977.0], [451.0, 5988.0], [461.0, 6342.0], [462.0, 5491.0], [460.0, 5499.5], [450.0, 5965.0], [448.0, 5971.0], [458.0, 5490.5], [456.0, 5505.0], [455.0, 5502.0], [454.0, 5499.0], [453.0, 5239.0], [452.0, 5241.0], [478.0, 11153.0], [479.0, 25390.5], [477.0, 14607.0], [476.0, 9436.5], [475.0, 9383.25], [474.0, 10799.333333333334], [473.0, 5792.5], [472.0, 6718.0], [471.0, 6084.0], [464.0, 5494.0], [467.0, 5485.0], [466.0, 5490.5], [470.0, 5493.0], [469.0, 5490.0], [468.0, 13864.0], [494.0, 6515.0], [495.0, 6549.0], [493.0, 6495.0], [492.0, 6422.0], [491.0, 6410.0], [490.0, 6968.5], [488.0, 10982.333333333334], [489.0, 11389.0], [486.0, 11218.666666666666], [487.0, 12633.0], [482.0, 13123.75], [481.0, 25183.5], [483.0, 7823.0], [480.0, 10437.8], [485.0, 12112.75], [484.0, 9613.5], [510.0, 13714.333333333332], [511.0, 18602.666666666668], [509.0, 12936.5], [508.0, 12062.833333333334], [507.0, 8831.5], [506.0, 9593.666666666668], [505.0, 14486.142857142857], [504.0, 11477.0], [503.0, 7089.5], [502.0, 7147.0], [499.0, 7272.0], [498.0, 10100.0], [497.0, 7647.0], [496.0, 7682.0], [501.0, 10136.5], [500.0, 16127.5], [540.0, 9731.833333333332], [543.0, 11188.4], [529.0, 7512.0], [528.0, 8818.0], [531.0, 8144.5], [530.0, 7560.0], [533.0, 12028.333333333334], [532.0, 14956.0], [542.0, 9799.25], [541.0, 10682.200000000003], [539.0, 8347.25], [538.0, 9851.666666666666], [537.0, 8132.5], [536.0, 9413.5], [527.0, 8308.5], [513.0, 15564.0], [512.0, 15559.5], [515.0, 8158.25], [514.0, 15097.666666666668], [517.0, 10176.647058823528], [516.0, 8547.0], [519.0, 9653.666666666666], [518.0, 15807.333333333332], [526.0, 8592.0], [525.0, 7153.0], [524.0, 8676.333333333334], [523.0, 6553.0], [522.0, 8537.0], [521.0, 13086.0], [520.0, 9426.0], [535.0, 8816.0], [534.0, 11875.5], [568.0, 5135.0], [573.0, 5239.5], [570.0, 7928.25], [569.0, 7701.75], [575.0, 4834.0], [571.0, 5137.0], [567.0, 4995.25], [565.0, 5419.0], [564.0, 5425.0], [563.0, 5022.0], [574.0, 5320.5], [572.0, 5209.0], [548.0, 8999.2], [547.0, 11788.6], [546.0, 9296.25], [545.0, 8744.0], [544.0, 10142.833333333332], [549.0, 18541.0], [551.0, 9270.0], [550.0, 21819.5], [554.0, 10813.0], [553.0, 9325.0], [552.0, 9244.0], [581.0, 5401.0], [604.0, 9832.333333333334], [607.0, 11551.0], [606.0, 13413.0], [605.0, 15145.6], [600.0, 5196.0], [601.0, 16402.0], [603.0, 14282.666666666666], [602.0, 9816.0], [583.0, 5063.666666666667], [582.0, 5506.0], [580.0, 5510.0], [579.0, 5405.0], [578.0, 5437.0], [577.0, 4561.0], [576.0, 5060.0], [591.0, 10726.5], [599.0, 10362.75], [597.0, 12503.5], [596.0, 16401.0], [595.0, 16400.0], [594.0, 13550.0], [593.0, 5345.0], [592.0, 7242.0], [585.0, 5369.0], [584.0, 5439.5], [586.0, 5072.0], [589.0, 5217.333333333333], [588.0, 4714.5], [587.0, 5474.0], [636.0, 12926.5], [612.0, 9798.625], [611.0, 10034.900000000001], [614.0, 9443.5], [613.0, 8312.125], [610.0, 10718.333333333336], [609.0, 9404.5], [608.0, 14450.16], [623.0, 10613.714285714284], [622.0, 5174.0], [621.0, 7330.25], [620.0, 12283.333333333334], [619.0, 11470.5], [618.0, 9919.0], [616.0, 10768.666666666668], [617.0, 11696.666666666666], [639.0, 11312.5], [625.0, 9955.0], [624.0, 7993.333333333334], [627.0, 9951.8], [626.0, 8029.6], [629.0, 12844.0], [628.0, 10601.09090909091], [631.0, 13041.0], [630.0, 11860.75], [638.0, 10933.714285714286], [637.0, 10501.333333333334], [635.0, 12974.166666666668], [634.0, 11626.222222222223], [633.0, 13167.166666666668], [632.0, 11828.111111111111], [615.0, 9669.333333333334], [669.0, 10479.0], [645.0, 10291.166666666668], [646.0, 11848.625], [664.0, 8768.5], [647.0, 14682.25], [666.0, 11882.5], [665.0, 12354.0], [668.0, 9875.333333333334], [667.0, 9659.0], [670.0, 9617.0], [644.0, 12515.714285714286], [643.0, 10908.222222222224], [642.0, 9475.444444444445], [641.0, 10068.272727272728], [640.0, 5155.115384615385], [655.0, 11745.0], [654.0, 8357.666666666666], [653.0, 11951.5], [652.0, 12206.0], [651.0, 11742.666666666666], [650.0, 14215.0], [649.0, 17142.166666666668], [648.0, 15403.833333333334], [657.0, 10251.666666666666], [656.0, 12326.0], [659.0, 8290.0], [658.0, 11910.5], [661.0, 8057.0], [660.0, 8760.0], [663.0, 11755.5], [662.0, 9269.5], [671.0, 10322.2], [696.0, 11317.0], [686.0, 8835.875], [687.0, 10625.5], [672.0, 11122.666666666666], [674.0, 9262.0], [673.0, 9186.8], [676.0, 10122.833333333334], [675.0, 9128.333333333334], [679.0, 10358.5], [678.0, 10870.5], [677.0, 8122.75], [697.0, 8266.5], [699.0, 11652.5], [698.0, 11478.0], [685.0, 8727.555555555555], [684.0, 9336.5], [683.0, 11782.5], [682.0, 8281.666666666666], [681.0, 8026.5], [680.0, 10218.333333333334], [701.0, 11946.0], [702.0, 15048.0], [688.0, 11804.333333333334], [703.0, 14669.0], [690.0, 10726.0], [691.0, 9417.5], [689.0, 11199.666666666666], [693.0, 11154.0], [692.0, 9096.166666666666], [695.0, 9338.8], [694.0, 9612.666666666666], [700.0, 8869.5], [707.0, 13910.666666666666], [704.0, 10608.0], [719.0, 6798.0], [718.0, 6818.0], [717.0, 10925.5], [716.0, 14695.0], [715.0, 12460.666666666666], [712.0, 14680.0], [705.0, 13273.0], [706.0, 12347.0], [731.0, 12242.6], [729.0, 9100.0], [728.0, 8067.0], [710.0, 14951.0], [709.0, 6950.0], [708.0, 7024.0], [735.0, 10902.666666666666], [727.0, 9261.0], [726.0, 9263.0], [725.0, 9261.0], [724.0, 9259.0], [722.0, 14673.0], [721.0, 9329.0], [720.0, 9332.0], [733.0, 9199.25], [734.0, 8822.0], [732.0, 12727.333333333334], [738.0, 11890.0], [739.0, 11826.666666666666], [737.0, 11186.0], [744.0, 11456.0], [745.0, 11683.5], [743.0, 12765.75], [742.0, 9360.0], [741.0, 10210.333333333334], [740.0, 10045.333333333334], [736.0, 11698.5], [746.0, 13749.57142857143], [1.0, 267.4343434343434]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[27.013100000000048, 624.6399333333381]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 746.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 56.0, "minX": 1.72866678E12, "maxY": 3189829.7, "series": [{"data": [[1.72866834E12, 2496429.966666667], [1.72866774E12, 2494179.033333333], [1.72866804E12, 2476230.3], [1.72866744E12, 2498744.75], [1.72866714E12, 2502057.3833333333], [1.72866684E12, 1812142.7833333334], [1.7286672E12, 2469456.65], [1.7286669E12, 3189829.7], [1.72866822E12, 2511134.0], [1.72866762E12, 2567412.683333333], [1.72866792E12, 2509986.3], [1.72866732E12, 2524615.75], [1.72866702E12, 2508880.2], [1.72866768E12, 2525698.4833333334], [1.72866738E12, 2502113.3], [1.72866708E12, 2523449.533333333], [1.72866678E12, 2441430.9166666665], [1.7286681E12, 2538142.2666666666], [1.7286684E12, 31514.933333333334], [1.7286675E12, 2484115.2666666666], [1.7286678E12, 2509975.8333333335], [1.72866786E12, 2494224.2333333334], [1.72866816E12, 2489746.933333333], [1.72866756E12, 2427840.283333333], [1.72866726E12, 2509979.6333333333], [1.72866696E12, 2498747.1666666665], [1.72866798E12, 2488605.7], [1.72866828E12, 2504316.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72866834E12, 4436.0], [1.72866774E12, 4432.0], [1.72866804E12, 4400.0], [1.72866744E12, 4440.0], [1.72866714E12, 4446.0], [1.72866684E12, 3220.0], [1.7286672E12, 4388.0], [1.7286669E12, 5668.0], [1.72866822E12, 4462.0], [1.72866762E12, 4562.0], [1.72866792E12, 4460.0], [1.72866732E12, 4486.0], [1.72866702E12, 4458.0], [1.72866768E12, 4488.0], [1.72866738E12, 4446.0], [1.72866708E12, 4484.0], [1.72866678E12, 4338.0], [1.7286681E12, 4510.0], [1.7286684E12, 56.0], [1.7286675E12, 4414.0], [1.7286678E12, 4460.0], [1.72866786E12, 4432.0], [1.72866816E12, 4424.0], [1.72866756E12, 4314.0], [1.72866726E12, 4460.0], [1.72866696E12, 4440.0], [1.72866798E12, 4422.0], [1.72866828E12, 4450.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286684E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 188.91019855595655, "minX": 1.72866678E12, "maxY": 6747.059633027514, "series": [{"data": [[1.72866834E12, 199.2592425608654], [1.72866774E12, 188.91019855595655], [1.72866804E12, 198.48545454545444], [1.72866744E12, 202.25405405405394], [1.72866714E12, 208.31039136302292], [1.72866684E12, 684.4167701863346], [1.7286672E12, 215.80173199635357], [1.7286669E12, 6747.059633027514], [1.72866822E12, 196.9148363962348], [1.72866762E12, 530.8079789565987], [1.72866792E12, 191.9421524663677], [1.72866732E12, 200.0249665626397], [1.72866702E12, 279.7191565724541], [1.72866768E12, 198.87566844919758], [1.72866738E12, 194.38596491228077], [1.72866708E12, 211.52497769848387], [1.72866678E12, 2230.5191156149344], [1.7286681E12, 214.84745011086437], [1.7286684E12, 314.57142857142856], [1.7286675E12, 201.75577707294946], [1.7286678E12, 195.2264573991029], [1.72866786E12, 191.61101083032491], [1.72866816E12, 199.3345388788427], [1.72866756E12, 209.93555864626805], [1.72866726E12, 201.7973094170406], [1.72866696E12, 542.3301801801811], [1.72866798E12, 199.23383084577114], [1.72866828E12, 197.92449438202243]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286684E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 142.74142599277994, "minX": 1.72866678E12, "maxY": 5027.772759350734, "series": [{"data": [[1.72866834E12, 153.17718665464423], [1.72866774E12, 142.74142599277994], [1.72866804E12, 150.9940909090912], [1.72866744E12, 153.19909909909893], [1.72866714E12, 157.67026540710788], [1.72866684E12, 453.2670807453414], [1.7286672E12, 164.64995442114855], [1.7286669E12, 5027.772759350734], [1.72866822E12, 150.83953384132698], [1.72866762E12, 183.3371328364753], [1.72866792E12, 146.0278026905831], [1.72866732E12, 151.05216228265704], [1.72866702E12, 230.894122925079], [1.72866768E12, 152.2210338680926], [1.72866738E12, 145.7723796671166], [1.72866708E12, 161.4214986619094], [1.72866678E12, 1674.9161676646697], [1.7286681E12, 163.7330376940131], [1.7286684E12, 257.7142857142857], [1.7286675E12, 152.95423652016316], [1.7286678E12, 148.57085201793677], [1.72866786E12, 145.05370036101073], [1.72866816E12, 153.3322784810124], [1.72866756E12, 158.8020398701903], [1.72866726E12, 152.95605381165936], [1.72866696E12, 343.366666666667], [1.72866798E12, 150.95929443690613], [1.72866828E12, 151.80764044943845]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286684E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 92.86597472924183, "minX": 1.72866678E12, "maxY": 3472.5483415666786, "series": [{"data": [[1.72866834E12, 102.76555455365194], [1.72866774E12, 92.86597472924183], [1.72866804E12, 100.44454545454529], [1.72866744E12, 100.7504504504504], [1.72866714E12, 104.84750337381917], [1.72866684E12, 284.954037267081], [1.7286672E12, 111.40565177757519], [1.7286669E12, 3472.5483415666786], [1.72866822E12, 98.993724787091], [1.72866762E12, 113.81499342393656], [1.72866792E12, 95.84573991031397], [1.72866732E12, 98.83325902808724], [1.72866702E12, 110.3476895468822], [1.72866768E12, 101.84803921568619], [1.72866738E12, 94.8956365272155], [1.72866708E12, 107.82738626226589], [1.72866678E12, 1264.6881621372625], [1.7286681E12, 109.83902439024392], [1.7286684E12, 211.85714285714286], [1.7286675E12, 101.46669687358411], [1.7286678E12, 97.90044843049319], [1.72866786E12, 94.72879061371859], [1.72866816E12, 103.49367088607595], [1.72866756E12, 105.5396383866481], [1.72866726E12, 100.00538116591925], [1.72866696E12, 183.45270270270225], [1.72866798E12, 100.98914518317514], [1.72866828E12, 100.24494382022478]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286684E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 150.0, "minX": 1.72866678E12, "maxY": 736049.0, "series": [{"data": [[1.72866834E12, 1272.0], [1.72866774E12, 1205.0], [1.72866804E12, 1229.0], [1.72866744E12, 1349.0], [1.72866714E12, 3208.0], [1.72866684E12, 16760.0], [1.7286672E12, 3396.0], [1.7286669E12, 58390.0], [1.72866822E12, 1203.0], [1.72866762E12, 736049.0], [1.72866792E12, 3189.0], [1.72866732E12, 1373.0], [1.72866702E12, 154237.0], [1.72866768E12, 1516.0], [1.72866738E12, 1335.0], [1.72866708E12, 3538.0], [1.72866678E12, 52696.0], [1.7286681E12, 1511.0], [1.7286684E12, 3166.0], [1.7286675E12, 1535.0], [1.7286678E12, 1284.0], [1.72866786E12, 1203.0], [1.72866816E12, 3185.0], [1.72866756E12, 1267.0], [1.72866726E12, 1354.0], [1.72866696E12, 93675.0], [1.72866798E12, 1207.0], [1.72866828E12, 1274.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72866834E12, 203.0], [1.72866774E12, 200.0], [1.72866804E12, 214.0], [1.72866744E12, 210.0], [1.72866714E12, 222.0], [1.72866684E12, 1341.6000000000004], [1.7286672E12, 230.0], [1.7286669E12, 18649.5], [1.72866822E12, 201.0], [1.72866762E12, 206.0], [1.72866792E12, 202.0], [1.72866732E12, 214.0], [1.72866702E12, 218.0], [1.72866768E12, 207.0], [1.72866738E12, 207.0], [1.72866708E12, 225.0], [1.72866678E12, 6930.0], [1.7286681E12, 233.4000000000001], [1.7286684E12, 487.3000000000001], [1.7286675E12, 210.0], [1.7286678E12, 206.0], [1.72866786E12, 206.0], [1.72866816E12, 205.0], [1.72866756E12, 224.0], [1.72866726E12, 215.0], [1.72866696E12, 403.8000000000002], [1.72866798E12, 211.0], [1.72866828E12, 203.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72866834E12, 1179.0], [1.72866774E12, 490.65999999999985], [1.72866804E12, 544.7799999999952], [1.72866744E12, 600.0099999999993], [1.72866714E12, 659.0], [1.72866684E12, 5299.109999999988], [1.7286672E12, 1219.300000000001], [1.7286669E12, 37321.85000000003], [1.72866822E12, 812.3999999999992], [1.72866762E12, 1200.3599999999997], [1.72866792E12, 511.3800000000001], [1.72866732E12, 554.7999999999997], [1.72866702E12, 1201.6999999999998], [1.72866768E12, 1177.6500000000005], [1.72866738E12, 467.0], [1.72866708E12, 767.1300000000015], [1.72866678E12, 19269.200000000106], [1.7286681E12, 1185.0], [1.7286684E12, 3166.0], [1.7286675E12, 613.5200000000004], [1.7286678E12, 515.0700000000002], [1.72866786E12, 484.46999999999935], [1.72866816E12, 1178.3499999999995], [1.72866756E12, 823.0000000000036], [1.72866726E12, 564.9000000000005], [1.72866696E12, 1395.8999999999996], [1.72866798E12, 551.1600000000008], [1.72866828E12, 1174.7399999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72866834E12, 233.04999999999973], [1.72866774E12, 220.1500000000001], [1.72866804E12, 229.0], [1.72866744E12, 235.94999999999982], [1.72866714E12, 270.7999999999997], [1.72866684E12, 4555.549999999993], [1.7286672E12, 287.25], [1.7286669E12, 24812.25], [1.72866822E12, 223.4000000000001], [1.72866762E12, 235.0], [1.72866792E12, 221.0], [1.72866732E12, 243.79999999999973], [1.72866702E12, 257.0], [1.72866768E12, 233.0], [1.72866738E12, 225.0], [1.72866708E12, 262.6999999999998], [1.72866678E12, 12301.5], [1.7286681E12, 309.9999999999991], [1.7286684E12, 1990.1499999999926], [1.7286675E12, 229.5999999999999], [1.7286678E12, 225.44999999999982], [1.72866786E12, 222.1500000000001], [1.72866816E12, 235.69999999999982], [1.72866756E12, 440.0], [1.72866726E12, 240.44999999999982], [1.72866696E12, 942.5999999999949], [1.72866798E12, 228.0], [1.72866828E12, 231.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72866834E12, 151.0], [1.72866774E12, 154.0], [1.72866804E12, 156.0], [1.72866744E12, 156.0], [1.72866714E12, 156.0], [1.72866684E12, 169.0], [1.7286672E12, 158.0], [1.7286669E12, 163.0], [1.72866822E12, 153.0], [1.72866762E12, 150.0], [1.72866792E12, 153.0], [1.72866732E12, 160.0], [1.72866702E12, 159.0], [1.72866768E12, 152.0], [1.72866738E12, 159.0], [1.72866708E12, 160.0], [1.72866678E12, 169.0], [1.7286681E12, 158.0], [1.7286684E12, 163.0], [1.7286675E12, 159.0], [1.7286678E12, 153.0], [1.72866786E12, 154.0], [1.72866816E12, 155.0], [1.72866756E12, 156.0], [1.72866726E12, 158.0], [1.72866696E12, 159.0], [1.72866798E12, 154.0], [1.72866828E12, 151.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72866834E12, 176.0], [1.72866774E12, 178.0], [1.72866804E12, 183.0], [1.72866744E12, 187.0], [1.72866714E12, 187.0], [1.72866684E12, 220.0], [1.7286672E12, 187.0], [1.7286669E12, 3626.0], [1.72866822E12, 176.0], [1.72866762E12, 178.0], [1.72866792E12, 178.0], [1.72866732E12, 186.0], [1.72866702E12, 186.0], [1.72866768E12, 178.0], [1.72866738E12, 187.0], [1.72866708E12, 190.0], [1.72866678E12, 441.0], [1.7286681E12, 185.0], [1.7286684E12, 173.5], [1.7286675E12, 187.0], [1.7286678E12, 180.0], [1.72866786E12, 179.0], [1.72866816E12, 177.0], [1.72866756E12, 180.0], [1.72866726E12, 187.0], [1.72866696E12, 204.0], [1.72866798E12, 182.0], [1.72866828E12, 175.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286684E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 172.0, "minX": 1.0, "maxY": 29578.0, "series": [{"data": [[2.0, 178.5], [3.0, 173.0], [4.0, 181.0], [5.0, 185.0], [6.0, 189.0], [7.0, 175.0], [9.0, 184.0], [10.0, 218.5], [11.0, 180.0], [12.0, 175.0], [13.0, 185.0], [14.0, 182.5], [15.0, 180.0], [16.0, 183.0], [17.0, 191.0], [18.0, 194.0], [19.0, 178.0], [20.0, 193.0], [21.0, 227.5], [22.0, 182.0], [23.0, 184.5], [24.0, 184.0], [25.0, 189.0], [26.0, 186.0], [27.0, 191.0], [28.0, 183.5], [29.0, 187.0], [30.0, 187.0], [31.0, 185.0], [32.0, 184.0], [33.0, 182.0], [35.0, 184.0], [34.0, 186.0], [37.0, 183.0], [36.0, 183.0], [38.0, 183.0], [39.0, 183.0], [40.0, 182.0], [41.0, 181.5], [42.0, 184.0], [43.0, 185.0], [45.0, 181.0], [44.0, 185.0], [47.0, 184.0], [46.0, 181.0], [49.0, 199.0], [48.0, 219.5], [51.0, 238.0], [50.0, 186.5], [53.0, 212.0], [52.0, 190.5], [54.0, 187.0], [55.0, 188.0], [56.0, 206.0], [57.0, 358.0], [58.0, 224.0], [59.0, 204.0], [60.0, 189.0], [61.0, 2013.5], [63.0, 205.0], [62.0, 185.0], [64.0, 183.0], [65.0, 496.0], [67.0, 4916.0], [68.0, 211.5], [71.0, 6561.5], [75.0, 535.0], [74.0, 329.5], [77.0, 8981.0], [76.0, 270.5], [82.0, 838.0], [81.0, 3552.0], [83.0, 191.0], [85.0, 186.0], [91.0, 690.0], [88.0, 226.5], [90.0, 192.0], [93.0, 4705.0], [99.0, 2572.0], [97.0, 2276.0], [103.0, 194.0], [105.0, 2308.0], [104.0, 206.0], [130.0, 3096.5], [143.0, 10307.0], [159.0, 9659.0], [172.0, 6437.5], [1.0, 172.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 8222.0], [47.0, 29578.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 172.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 7942.0, "series": [{"data": [[2.0, 130.0], [3.0, 130.0], [4.0, 134.0], [5.0, 138.0], [6.0, 144.5], [7.0, 134.5], [9.0, 135.0], [10.0, 172.0], [11.0, 134.5], [12.0, 130.5], [13.0, 138.0], [14.0, 136.5], [15.0, 135.0], [16.0, 137.0], [17.0, 147.0], [18.0, 147.0], [19.0, 132.0], [20.0, 144.0], [21.0, 167.0], [22.0, 137.0], [23.0, 138.0], [24.0, 138.0], [25.0, 142.0], [26.0, 139.0], [27.0, 141.0], [28.0, 138.0], [29.0, 139.0], [30.0, 140.0], [31.0, 139.0], [32.0, 138.0], [33.0, 136.0], [35.0, 137.0], [34.0, 139.0], [37.0, 137.0], [36.0, 137.0], [38.0, 137.0], [39.0, 137.0], [40.0, 136.0], [41.0, 136.0], [42.0, 138.0], [43.0, 138.0], [45.0, 136.0], [44.0, 139.0], [47.0, 138.0], [46.0, 136.0], [49.0, 146.0], [48.0, 158.5], [51.0, 167.0], [50.0, 138.0], [53.0, 159.0], [52.0, 142.5], [54.0, 140.0], [55.0, 140.0], [56.0, 153.0], [57.0, 208.5], [58.0, 163.5], [59.0, 152.0], [60.0, 140.0], [61.0, 1538.0], [63.0, 151.0], [62.0, 139.0], [64.0, 137.0], [65.0, 286.0], [67.0, 3748.0], [68.0, 158.5], [71.0, 4898.0], [75.0, 348.5], [74.0, 230.0], [77.0, 7582.0], [76.0, 170.5], [82.0, 574.5], [81.0, 2270.0], [83.0, 141.0], [85.0, 136.0], [91.0, 430.0], [88.0, 162.5], [90.0, 143.0], [93.0, 2423.0], [99.0, 1768.0], [97.0, 2015.0], [103.0, 144.0], [105.0, 1921.0], [104.0, 152.0], [130.0, 2496.5], [143.0, 7942.0], [159.0, 6884.0], [172.0, 5011.0], [1.0, 124.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 0.0], [47.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 172.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.72866678E12, "maxY": 38.1, "series": [{"data": [[1.72866834E12, 37.0], [1.72866774E12, 36.983333333333334], [1.72866804E12, 36.766666666666666], [1.72866744E12, 37.083333333333336], [1.72866714E12, 37.016666666666666], [1.72866684E12, 36.166666666666664], [1.7286672E12, 36.56666666666667], [1.7286669E12, 38.1], [1.72866822E12, 37.166666666666664], [1.72866762E12, 37.55], [1.72866792E12, 37.05], [1.72866732E12, 37.38333333333333], [1.72866702E12, 37.2], [1.72866768E12, 37.38333333333333], [1.72866738E12, 36.983333333333334], [1.72866708E12, 37.31666666666667], [1.72866678E12, 36.38333333333333], [1.7286681E12, 37.5], [1.7286684E12, 0.31666666666666665], [1.7286675E12, 36.78333333333333], [1.7286678E12, 37.11666666666667], [1.72866786E12, 37.03333333333333], [1.72866816E12, 36.916666666666664], [1.72866756E12, 36.416666666666664], [1.72866726E12, 37.166666666666664], [1.72866696E12, 36.766666666666666], [1.72866798E12, 36.833333333333336], [1.72866828E12, 37.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286684E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72866678E12, "maxY": 47.233333333333334, "series": [{"data": [[1.72866834E12, 36.96666666666667], [1.72866774E12, 36.93333333333333], [1.72866804E12, 36.666666666666664], [1.72866744E12, 37.0], [1.72866714E12, 37.05], [1.72866684E12, 26.833333333333332], [1.7286672E12, 36.56666666666667], [1.7286669E12, 47.233333333333334], [1.72866822E12, 37.18333333333333], [1.72866762E12, 38.016666666666666], [1.72866792E12, 37.166666666666664], [1.72866732E12, 37.38333333333333], [1.72866702E12, 37.15], [1.72866768E12, 37.4], [1.72866738E12, 37.05], [1.72866708E12, 37.36666666666667], [1.72866678E12, 36.15], [1.7286681E12, 37.583333333333336], [1.7286684E12, 0.4666666666666667], [1.7286675E12, 36.78333333333333], [1.7286678E12, 37.166666666666664], [1.72866786E12, 36.93333333333333], [1.72866816E12, 36.86666666666667], [1.72866756E12, 35.95], [1.72866726E12, 37.166666666666664], [1.72866696E12, 37.0], [1.72866798E12, 36.85], [1.72866828E12, 37.083333333333336]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72866678E12, 0.03333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7286684E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72866678E12, "maxY": 47.233333333333334, "series": [{"data": [[1.72866834E12, 36.96666666666667], [1.72866774E12, 36.93333333333333], [1.72866804E12, 36.666666666666664], [1.72866744E12, 37.0], [1.72866714E12, 37.05], [1.72866684E12, 26.833333333333332], [1.7286672E12, 36.56666666666667], [1.7286669E12, 47.233333333333334], [1.72866822E12, 37.18333333333333], [1.72866762E12, 38.016666666666666], [1.72866792E12, 37.166666666666664], [1.72866732E12, 37.38333333333333], [1.72866702E12, 37.15], [1.72866768E12, 37.4], [1.72866738E12, 37.05], [1.72866708E12, 37.36666666666667], [1.72866678E12, 36.15], [1.7286681E12, 37.583333333333336], [1.7286684E12, 0.4666666666666667], [1.7286675E12, 36.78333333333333], [1.7286678E12, 37.166666666666664], [1.72866786E12, 36.93333333333333], [1.72866816E12, 36.86666666666667], [1.72866756E12, 35.95], [1.72866726E12, 37.166666666666664], [1.72866696E12, 37.0], [1.72866798E12, 36.85], [1.72866828E12, 37.083333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72866678E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286684E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.72866678E12, "maxY": 47.233333333333334, "series": [{"data": [[1.72866834E12, 36.96666666666667], [1.72866774E12, 36.93333333333333], [1.72866804E12, 36.666666666666664], [1.72866744E12, 37.0], [1.72866714E12, 37.05], [1.72866684E12, 26.833333333333332], [1.7286672E12, 36.56666666666667], [1.7286669E12, 47.233333333333334], [1.72866822E12, 37.18333333333333], [1.72866762E12, 38.016666666666666], [1.72866792E12, 37.166666666666664], [1.72866732E12, 37.38333333333333], [1.72866702E12, 37.15], [1.72866768E12, 37.4], [1.72866738E12, 37.05], [1.72866708E12, 37.36666666666667], [1.72866678E12, 36.15], [1.7286681E12, 37.583333333333336], [1.7286684E12, 0.4666666666666667], [1.7286675E12, 36.78333333333333], [1.7286678E12, 37.166666666666664], [1.72866786E12, 36.93333333333333], [1.72866816E12, 36.86666666666667], [1.72866756E12, 35.95], [1.72866726E12, 37.166666666666664], [1.72866696E12, 37.0], [1.72866798E12, 36.85], [1.72866828E12, 37.083333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72866678E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7286684E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

