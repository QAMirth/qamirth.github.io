/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 145.0, "minX": 0.0, "maxY": 217572.0, "series": [{"data": [[0.0, 145.0], [0.1, 156.0], [0.2, 157.0], [0.3, 158.0], [0.4, 159.0], [0.5, 160.0], [0.6, 160.0], [0.7, 161.0], [0.8, 161.0], [0.9, 161.0], [1.0, 162.0], [1.1, 162.0], [1.2, 162.0], [1.3, 163.0], [1.4, 163.0], [1.5, 163.0], [1.6, 163.0], [1.7, 163.0], [1.8, 164.0], [1.9, 164.0], [2.0, 164.0], [2.1, 164.0], [2.2, 164.0], [2.3, 165.0], [2.4, 165.0], [2.5, 165.0], [2.6, 165.0], [2.7, 165.0], [2.8, 165.0], [2.9, 165.0], [3.0, 166.0], [3.1, 166.0], [3.2, 166.0], [3.3, 166.0], [3.4, 166.0], [3.5, 166.0], [3.6, 166.0], [3.7, 166.0], [3.8, 166.0], [3.9, 167.0], [4.0, 167.0], [4.1, 167.0], [4.2, 167.0], [4.3, 167.0], [4.4, 167.0], [4.5, 167.0], [4.6, 167.0], [4.7, 167.0], [4.8, 167.0], [4.9, 168.0], [5.0, 168.0], [5.1, 168.0], [5.2, 168.0], [5.3, 168.0], [5.4, 168.0], [5.5, 168.0], [5.6, 168.0], [5.7, 168.0], [5.8, 168.0], [5.9, 168.0], [6.0, 168.0], [6.1, 169.0], [6.2, 169.0], [6.3, 169.0], [6.4, 169.0], [6.5, 169.0], [6.6, 169.0], [6.7, 169.0], [6.8, 169.0], [6.9, 169.0], [7.0, 169.0], [7.1, 169.0], [7.2, 169.0], [7.3, 169.0], [7.4, 169.0], [7.5, 169.0], [7.6, 170.0], [7.7, 170.0], [7.8, 170.0], [7.9, 170.0], [8.0, 170.0], [8.1, 170.0], [8.2, 170.0], [8.3, 170.0], [8.4, 170.0], [8.5, 170.0], [8.6, 170.0], [8.7, 170.0], [8.8, 170.0], [8.9, 170.0], [9.0, 170.0], [9.1, 170.0], [9.2, 171.0], [9.3, 171.0], [9.4, 171.0], [9.5, 171.0], [9.6, 171.0], [9.7, 171.0], [9.8, 171.0], [9.9, 171.0], [10.0, 171.0], [10.1, 171.0], [10.2, 171.0], [10.3, 171.0], [10.4, 171.0], [10.5, 171.0], [10.6, 171.0], [10.7, 171.0], [10.8, 171.0], [10.9, 171.0], [11.0, 172.0], [11.1, 172.0], [11.2, 172.0], [11.3, 172.0], [11.4, 172.0], [11.5, 172.0], [11.6, 172.0], [11.7, 172.0], [11.8, 172.0], [11.9, 172.0], [12.0, 172.0], [12.1, 172.0], [12.2, 172.0], [12.3, 172.0], [12.4, 172.0], [12.5, 172.0], [12.6, 172.0], [12.7, 173.0], [12.8, 173.0], [12.9, 173.0], [13.0, 173.0], [13.1, 173.0], [13.2, 173.0], [13.3, 173.0], [13.4, 173.0], [13.5, 173.0], [13.6, 173.0], [13.7, 173.0], [13.8, 173.0], [13.9, 173.0], [14.0, 173.0], [14.1, 173.0], [14.2, 173.0], [14.3, 173.0], [14.4, 173.0], [14.5, 173.0], [14.6, 173.0], [14.7, 173.0], [14.8, 174.0], [14.9, 174.0], [15.0, 174.0], [15.1, 174.0], [15.2, 174.0], [15.3, 174.0], [15.4, 174.0], [15.5, 174.0], [15.6, 174.0], [15.7, 174.0], [15.8, 174.0], [15.9, 174.0], [16.0, 174.0], [16.1, 174.0], [16.2, 174.0], [16.3, 174.0], [16.4, 174.0], [16.5, 174.0], [16.6, 174.0], [16.7, 174.0], [16.8, 174.0], [16.9, 175.0], [17.0, 175.0], [17.1, 175.0], [17.2, 175.0], [17.3, 175.0], [17.4, 175.0], [17.5, 175.0], [17.6, 175.0], [17.7, 175.0], [17.8, 175.0], [17.9, 175.0], [18.0, 175.0], [18.1, 175.0], [18.2, 175.0], [18.3, 175.0], [18.4, 175.0], [18.5, 175.0], [18.6, 175.0], [18.7, 175.0], [18.8, 175.0], [18.9, 175.0], [19.0, 175.0], [19.1, 176.0], [19.2, 176.0], [19.3, 176.0], [19.4, 176.0], [19.5, 176.0], [19.6, 176.0], [19.7, 176.0], [19.8, 176.0], [19.9, 176.0], [20.0, 176.0], [20.1, 176.0], [20.2, 176.0], [20.3, 176.0], [20.4, 176.0], [20.5, 176.0], [20.6, 176.0], [20.7, 176.0], [20.8, 176.0], [20.9, 176.0], [21.0, 176.0], [21.1, 176.0], [21.2, 176.0], [21.3, 177.0], [21.4, 177.0], [21.5, 177.0], [21.6, 177.0], [21.7, 177.0], [21.8, 177.0], [21.9, 177.0], [22.0, 177.0], [22.1, 177.0], [22.2, 177.0], [22.3, 177.0], [22.4, 177.0], [22.5, 177.0], [22.6, 177.0], [22.7, 177.0], [22.8, 177.0], [22.9, 177.0], [23.0, 177.0], [23.1, 177.0], [23.2, 177.0], [23.3, 178.0], [23.4, 178.0], [23.5, 178.0], [23.6, 178.0], [23.7, 178.0], [23.8, 178.0], [23.9, 178.0], [24.0, 178.0], [24.1, 178.0], [24.2, 178.0], [24.3, 178.0], [24.4, 178.0], [24.5, 178.0], [24.6, 178.0], [24.7, 178.0], [24.8, 178.0], [24.9, 178.0], [25.0, 178.0], [25.1, 178.0], [25.2, 178.0], [25.3, 178.0], [25.4, 179.0], [25.5, 179.0], [25.6, 179.0], [25.7, 179.0], [25.8, 179.0], [25.9, 179.0], [26.0, 179.0], [26.1, 179.0], [26.2, 179.0], [26.3, 179.0], [26.4, 179.0], [26.5, 179.0], [26.6, 179.0], [26.7, 179.0], [26.8, 179.0], [26.9, 179.0], [27.0, 179.0], [27.1, 179.0], [27.2, 179.0], [27.3, 179.0], [27.4, 180.0], [27.5, 180.0], [27.6, 180.0], [27.7, 180.0], [27.8, 180.0], [27.9, 180.0], [28.0, 180.0], [28.1, 180.0], [28.2, 180.0], [28.3, 180.0], [28.4, 180.0], [28.5, 180.0], [28.6, 180.0], [28.7, 180.0], [28.8, 180.0], [28.9, 180.0], [29.0, 180.0], [29.1, 180.0], [29.2, 180.0], [29.3, 181.0], [29.4, 181.0], [29.5, 181.0], [29.6, 181.0], [29.7, 181.0], [29.8, 181.0], [29.9, 181.0], [30.0, 181.0], [30.1, 181.0], [30.2, 181.0], [30.3, 181.0], [30.4, 181.0], [30.5, 181.0], [30.6, 181.0], [30.7, 181.0], [30.8, 181.0], [30.9, 181.0], [31.0, 181.0], [31.1, 182.0], [31.2, 182.0], [31.3, 182.0], [31.4, 182.0], [31.5, 182.0], [31.6, 182.0], [31.7, 182.0], [31.8, 182.0], [31.9, 182.0], [32.0, 182.0], [32.1, 182.0], [32.2, 182.0], [32.3, 182.0], [32.4, 182.0], [32.5, 182.0], [32.6, 182.0], [32.7, 182.0], [32.8, 182.0], [32.9, 183.0], [33.0, 183.0], [33.1, 183.0], [33.2, 183.0], [33.3, 183.0], [33.4, 183.0], [33.5, 183.0], [33.6, 183.0], [33.7, 183.0], [33.8, 183.0], [33.9, 183.0], [34.0, 183.0], [34.1, 183.0], [34.2, 183.0], [34.3, 183.0], [34.4, 183.0], [34.5, 184.0], [34.6, 184.0], [34.7, 184.0], [34.8, 184.0], [34.9, 184.0], [35.0, 184.0], [35.1, 184.0], [35.2, 184.0], [35.3, 184.0], [35.4, 184.0], [35.5, 184.0], [35.6, 184.0], [35.7, 184.0], [35.8, 184.0], [35.9, 184.0], [36.0, 184.0], [36.1, 185.0], [36.2, 185.0], [36.3, 185.0], [36.4, 185.0], [36.5, 185.0], [36.6, 185.0], [36.7, 185.0], [36.8, 185.0], [36.9, 185.0], [37.0, 185.0], [37.1, 185.0], [37.2, 185.0], [37.3, 185.0], [37.4, 185.0], [37.5, 185.0], [37.6, 186.0], [37.7, 186.0], [37.8, 186.0], [37.9, 186.0], [38.0, 186.0], [38.1, 186.0], [38.2, 186.0], [38.3, 186.0], [38.4, 186.0], [38.5, 186.0], [38.6, 186.0], [38.7, 186.0], [38.8, 186.0], [38.9, 187.0], [39.0, 187.0], [39.1, 187.0], [39.2, 187.0], [39.3, 187.0], [39.4, 187.0], [39.5, 187.0], [39.6, 187.0], [39.7, 187.0], [39.8, 187.0], [39.9, 187.0], [40.0, 187.0], [40.1, 188.0], [40.2, 188.0], [40.3, 188.0], [40.4, 188.0], [40.5, 188.0], [40.6, 188.0], [40.7, 188.0], [40.8, 188.0], [40.9, 188.0], [41.0, 188.0], [41.1, 188.0], [41.2, 188.0], [41.3, 188.0], [41.4, 189.0], [41.5, 189.0], [41.6, 189.0], [41.7, 189.0], [41.8, 189.0], [41.9, 189.0], [42.0, 189.0], [42.1, 189.0], [42.2, 189.0], [42.3, 189.0], [42.4, 189.0], [42.5, 190.0], [42.6, 190.0], [42.7, 190.0], [42.8, 190.0], [42.9, 190.0], [43.0, 190.0], [43.1, 190.0], [43.2, 190.0], [43.3, 190.0], [43.4, 190.0], [43.5, 190.0], [43.6, 191.0], [43.7, 191.0], [43.8, 191.0], [43.9, 191.0], [44.0, 191.0], [44.1, 191.0], [44.2, 191.0], [44.3, 191.0], [44.4, 191.0], [44.5, 191.0], [44.6, 192.0], [44.7, 192.0], [44.8, 192.0], [44.9, 192.0], [45.0, 192.0], [45.1, 192.0], [45.2, 192.0], [45.3, 192.0], [45.4, 192.0], [45.5, 192.0], [45.6, 193.0], [45.7, 193.0], [45.8, 193.0], [45.9, 193.0], [46.0, 193.0], [46.1, 193.0], [46.2, 193.0], [46.3, 193.0], [46.4, 193.0], [46.5, 194.0], [46.6, 194.0], [46.7, 194.0], [46.8, 194.0], [46.9, 194.0], [47.0, 194.0], [47.1, 194.0], [47.2, 194.0], [47.3, 194.0], [47.4, 195.0], [47.5, 195.0], [47.6, 195.0], [47.7, 195.0], [47.8, 195.0], [47.9, 195.0], [48.0, 195.0], [48.1, 195.0], [48.2, 195.0], [48.3, 196.0], [48.4, 196.0], [48.5, 196.0], [48.6, 196.0], [48.7, 196.0], [48.8, 196.0], [48.9, 196.0], [49.0, 196.0], [49.1, 196.0], [49.2, 197.0], [49.3, 197.0], [49.4, 197.0], [49.5, 197.0], [49.6, 197.0], [49.7, 197.0], [49.8, 197.0], [49.9, 197.0], [50.0, 198.0], [50.1, 198.0], [50.2, 198.0], [50.3, 198.0], [50.4, 198.0], [50.5, 198.0], [50.6, 198.0], [50.7, 198.0], [50.8, 199.0], [50.9, 199.0], [51.0, 199.0], [51.1, 199.0], [51.2, 199.0], [51.3, 199.0], [51.4, 199.0], [51.5, 199.0], [51.6, 200.0], [51.7, 200.0], [51.8, 200.0], [51.9, 200.0], [52.0, 200.0], [52.1, 200.0], [52.2, 200.0], [52.3, 201.0], [52.4, 201.0], [52.5, 201.0], [52.6, 201.0], [52.7, 201.0], [52.8, 201.0], [52.9, 201.0], [53.0, 201.0], [53.1, 202.0], [53.2, 202.0], [53.3, 202.0], [53.4, 202.0], [53.5, 202.0], [53.6, 202.0], [53.7, 203.0], [53.8, 203.0], [53.9, 203.0], [54.0, 203.0], [54.1, 203.0], [54.2, 203.0], [54.3, 204.0], [54.4, 204.0], [54.5, 204.0], [54.6, 204.0], [54.7, 204.0], [54.8, 204.0], [54.9, 204.0], [55.0, 205.0], [55.1, 205.0], [55.2, 205.0], [55.3, 205.0], [55.4, 205.0], [55.5, 205.0], [55.6, 206.0], [55.7, 206.0], [55.8, 206.0], [55.9, 206.0], [56.0, 206.0], [56.1, 206.0], [56.2, 207.0], [56.3, 207.0], [56.4, 207.0], [56.5, 207.0], [56.6, 207.0], [56.7, 207.0], [56.8, 208.0], [56.9, 208.0], [57.0, 208.0], [57.1, 208.0], [57.2, 208.0], [57.3, 209.0], [57.4, 209.0], [57.5, 209.0], [57.6, 209.0], [57.7, 209.0], [57.8, 209.0], [57.9, 210.0], [58.0, 210.0], [58.1, 210.0], [58.2, 210.0], [58.3, 210.0], [58.4, 210.0], [58.5, 211.0], [58.6, 211.0], [58.7, 211.0], [58.8, 211.0], [58.9, 212.0], [59.0, 212.0], [59.1, 212.0], [59.2, 212.0], [59.3, 212.0], [59.4, 213.0], [59.5, 213.0], [59.6, 213.0], [59.7, 213.0], [59.8, 213.0], [59.9, 214.0], [60.0, 214.0], [60.1, 214.0], [60.2, 214.0], [60.3, 215.0], [60.4, 215.0], [60.5, 215.0], [60.6, 215.0], [60.7, 215.0], [60.8, 216.0], [60.9, 216.0], [61.0, 216.0], [61.1, 216.0], [61.2, 216.0], [61.3, 217.0], [61.4, 217.0], [61.5, 217.0], [61.6, 217.0], [61.7, 218.0], [61.8, 218.0], [61.9, 218.0], [62.0, 218.0], [62.1, 218.0], [62.2, 219.0], [62.3, 219.0], [62.4, 219.0], [62.5, 219.0], [62.6, 220.0], [62.7, 220.0], [62.8, 220.0], [62.9, 220.0], [63.0, 221.0], [63.1, 221.0], [63.2, 221.0], [63.3, 221.0], [63.4, 222.0], [63.5, 222.0], [63.6, 222.0], [63.7, 222.0], [63.8, 223.0], [63.9, 223.0], [64.0, 223.0], [64.1, 223.0], [64.2, 224.0], [64.3, 224.0], [64.4, 224.0], [64.5, 225.0], [64.6, 225.0], [64.7, 225.0], [64.8, 226.0], [64.9, 226.0], [65.0, 226.0], [65.1, 226.0], [65.2, 227.0], [65.3, 227.0], [65.4, 227.0], [65.5, 228.0], [65.6, 228.0], [65.7, 229.0], [65.8, 229.0], [65.9, 229.0], [66.0, 230.0], [66.1, 230.0], [66.2, 230.0], [66.3, 231.0], [66.4, 231.0], [66.5, 232.0], [66.6, 232.0], [66.7, 232.0], [66.8, 233.0], [66.9, 233.0], [67.0, 233.0], [67.1, 234.0], [67.2, 234.0], [67.3, 235.0], [67.4, 235.0], [67.5, 235.0], [67.6, 236.0], [67.7, 236.0], [67.8, 237.0], [67.9, 237.0], [68.0, 237.0], [68.1, 238.0], [68.2, 238.0], [68.3, 238.0], [68.4, 239.0], [68.5, 239.0], [68.6, 240.0], [68.7, 240.0], [68.8, 241.0], [68.9, 241.0], [69.0, 241.0], [69.1, 242.0], [69.2, 242.0], [69.3, 243.0], [69.4, 243.0], [69.5, 244.0], [69.6, 244.0], [69.7, 245.0], [69.8, 245.0], [69.9, 246.0], [70.0, 246.0], [70.1, 247.0], [70.2, 247.0], [70.3, 248.0], [70.4, 248.0], [70.5, 249.0], [70.6, 249.0], [70.7, 250.0], [70.8, 250.0], [70.9, 251.0], [71.0, 251.0], [71.1, 252.0], [71.2, 253.0], [71.3, 253.0], [71.4, 254.0], [71.5, 254.0], [71.6, 255.0], [71.7, 255.0], [71.8, 256.0], [71.9, 257.0], [72.0, 257.0], [72.1, 258.0], [72.2, 258.0], [72.3, 259.0], [72.4, 260.0], [72.5, 260.0], [72.6, 261.0], [72.7, 262.0], [72.8, 262.0], [72.9, 263.0], [73.0, 264.0], [73.1, 265.0], [73.2, 265.0], [73.3, 266.0], [73.4, 267.0], [73.5, 268.0], [73.6, 268.0], [73.7, 269.0], [73.8, 270.0], [73.9, 270.0], [74.0, 271.0], [74.1, 272.0], [74.2, 273.0], [74.3, 273.0], [74.4, 274.0], [74.5, 275.0], [74.6, 276.0], [74.7, 277.0], [74.8, 278.0], [74.9, 278.0], [75.0, 279.0], [75.1, 280.0], [75.2, 281.0], [75.3, 282.0], [75.4, 283.0], [75.5, 283.0], [75.6, 284.0], [75.7, 285.0], [75.8, 286.0], [75.9, 287.0], [76.0, 288.0], [76.1, 289.0], [76.2, 290.0], [76.3, 291.0], [76.4, 292.0], [76.5, 293.0], [76.6, 294.0], [76.7, 295.0], [76.8, 296.0], [76.9, 298.0], [77.0, 299.0], [77.1, 300.0], [77.2, 301.0], [77.3, 303.0], [77.4, 304.0], [77.5, 305.0], [77.6, 307.0], [77.7, 308.0], [77.8, 309.0], [77.9, 311.0], [78.0, 312.0], [78.1, 313.0], [78.2, 314.0], [78.3, 316.0], [78.4, 317.0], [78.5, 318.0], [78.6, 320.0], [78.7, 321.0], [78.8, 322.0], [78.9, 324.0], [79.0, 326.0], [79.1, 327.0], [79.2, 329.0], [79.3, 331.0], [79.4, 333.0], [79.5, 335.0], [79.6, 336.0], [79.7, 338.0], [79.8, 340.0], [79.9, 342.0], [80.0, 344.0], [80.1, 346.0], [80.2, 348.0], [80.3, 350.0], [80.4, 352.0], [80.5, 355.0], [80.6, 357.0], [80.7, 359.0], [80.8, 361.0], [80.9, 364.0], [81.0, 366.0], [81.1, 369.0], [81.2, 371.0], [81.3, 374.0], [81.4, 377.0], [81.5, 379.0], [81.6, 382.0], [81.7, 385.0], [81.8, 387.0], [81.9, 390.0], [82.0, 393.0], [82.1, 397.0], [82.2, 400.0], [82.3, 403.0], [82.4, 407.0], [82.5, 410.0], [82.6, 413.0], [82.7, 417.0], [82.8, 421.0], [82.9, 425.0], [83.0, 429.0], [83.1, 432.0], [83.2, 436.0], [83.3, 439.0], [83.4, 444.0], [83.5, 447.0], [83.6, 451.0], [83.7, 455.0], [83.8, 458.0], [83.9, 462.0], [84.0, 465.0], [84.1, 469.0], [84.2, 471.0], [84.3, 475.0], [84.4, 478.0], [84.5, 481.0], [84.6, 485.0], [84.7, 488.0], [84.8, 491.0], [84.9, 495.0], [85.0, 498.0], [85.1, 502.0], [85.2, 506.0], [85.3, 509.0], [85.4, 513.0], [85.5, 516.0], [85.6, 519.0], [85.7, 523.0], [85.8, 527.0], [85.9, 531.0], [86.0, 535.0], [86.1, 539.0], [86.2, 543.0], [86.3, 547.0], [86.4, 551.0], [86.5, 555.0], [86.6, 559.0], [86.7, 563.0], [86.8, 567.0], [86.9, 573.0], [87.0, 577.0], [87.1, 581.0], [87.2, 587.0], [87.3, 591.0], [87.4, 597.0], [87.5, 605.0], [87.6, 612.0], [87.7, 618.0], [87.8, 626.0], [87.9, 633.0], [88.0, 642.0], [88.1, 652.0], [88.2, 660.0], [88.3, 668.0], [88.4, 677.0], [88.5, 688.0], [88.6, 698.0], [88.7, 709.0], [88.8, 721.0], [88.9, 732.0], [89.0, 745.0], [89.1, 755.0], [89.2, 768.0], [89.3, 779.0], [89.4, 790.0], [89.5, 800.0], [89.6, 812.0], [89.7, 824.0], [89.8, 834.0], [89.9, 845.0], [90.0, 858.0], [90.1, 873.0], [90.2, 887.0], [90.3, 905.0], [90.4, 924.0], [90.5, 946.0], [90.6, 967.0], [90.7, 988.0], [90.8, 1010.0], [90.9, 1039.0], [91.0, 1061.0], [91.1, 1103.0], [91.2, 1133.0], [91.3, 1167.0], [91.4, 1174.0], [91.5, 1178.0], [91.6, 1182.0], [91.7, 1184.0], [91.8, 1188.0], [91.9, 1191.0], [92.0, 1194.0], [92.1, 1198.0], [92.2, 1203.0], [92.3, 1209.0], [92.4, 1215.0], [92.5, 1223.0], [92.6, 1232.0], [92.7, 1240.0], [92.8, 1250.0], [92.9, 1262.0], [93.0, 1271.0], [93.1, 1282.0], [93.2, 1295.0], [93.3, 1305.0], [93.4, 1318.0], [93.5, 1334.0], [93.6, 1347.0], [93.7, 1364.0], [93.8, 1377.0], [93.9, 1389.0], [94.0, 1403.0], [94.1, 1423.0], [94.2, 1450.0], [94.3, 1484.0], [94.4, 1521.0], [94.5, 1550.0], [94.6, 1573.0], [94.7, 1601.0], [94.8, 1631.0], [94.9, 1657.0], [95.0, 1688.0], [95.1, 1722.0], [95.2, 1761.0], [95.3, 1808.0], [95.4, 1849.0], [95.5, 1908.0], [95.6, 1952.0], [95.7, 2004.0], [95.8, 2083.0], [95.9, 2156.0], [96.0, 2219.0], [96.1, 2279.0], [96.2, 2367.0], [96.3, 2439.0], [96.4, 2501.0], [96.5, 2579.0], [96.6, 2707.0], [96.7, 2815.0], [96.8, 2914.0], [96.9, 3049.0], [97.0, 3208.0], [97.1, 3326.0], [97.2, 3442.0], [97.3, 3527.0], [97.4, 3644.0], [97.5, 3817.0], [97.6, 3959.0], [97.7, 4141.0], [97.8, 4387.0], [97.9, 4560.0], [98.0, 4892.0], [98.1, 5106.0], [98.2, 5405.0], [98.3, 5782.0], [98.4, 6065.0], [98.5, 6551.0], [98.6, 7318.0], [98.7, 7754.0], [98.8, 8117.0], [98.9, 8614.0], [99.0, 9003.0], [99.1, 9443.0], [99.2, 9939.0], [99.3, 10919.0], [99.4, 12045.0], [99.5, 13350.0], [99.6, 15619.0], [99.7, 16785.0], [99.8, 21037.0], [99.9, 28698.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 41217.0, "series": [{"data": [[100.0, 41217.0], [34500.0, 2.0], [32900.0, 1.0], [35700.0, 1.0], [36500.0, 1.0], [34900.0, 1.0], [37700.0, 2.0], [37300.0, 1.0], [38500.0, 1.0], [39700.0, 1.0], [42900.0, 2.0], [41300.0, 1.0], [43700.0, 1.0], [200.0, 20423.0], [52900.0, 1.0], [60500.0, 1.0], [300.0, 4111.0], [400.0, 2269.0], [500.0, 1936.0], [600.0, 932.0], [700.0, 710.0], [800.0, 614.0], [900.0, 396.0], [1000.0, 266.0], [1100.0, 829.0], [1200.0, 890.0], [1300.0, 592.0], [1400.0, 291.0], [1500.0, 275.0], [1600.0, 268.0], [1700.0, 213.0], [1800.0, 157.0], [1900.0, 168.0], [2000.0, 95.0], [2100.0, 117.0], [2300.0, 97.0], [2200.0, 131.0], [2400.0, 122.0], [2500.0, 94.0], [2600.0, 62.0], [2700.0, 68.0], [2800.0, 74.0], [2900.0, 86.0], [3000.0, 28.0], [3100.0, 58.0], [3200.0, 72.0], [3300.0, 70.0], [3400.0, 94.0], [3500.0, 75.0], [3700.0, 47.0], [3600.0, 48.0], [3800.0, 63.0], [3900.0, 43.0], [4000.0, 42.0], [4300.0, 49.0], [4100.0, 30.0], [4200.0, 23.0], [4400.0, 55.0], [4600.0, 30.0], [4500.0, 33.0], [4700.0, 24.0], [4800.0, 17.0], [77700.0, 1.0], [76100.0, 1.0], [5000.0, 34.0], [5100.0, 31.0], [4900.0, 40.0], [5300.0, 17.0], [5200.0, 33.0], [5600.0, 21.0], [5500.0, 20.0], [5400.0, 21.0], [5700.0, 26.0], [5800.0, 12.0], [5900.0, 46.0], [6000.0, 18.0], [6100.0, 17.0], [6300.0, 20.0], [6200.0, 13.0], [6500.0, 25.0], [6400.0, 14.0], [6600.0, 9.0], [6800.0, 10.0], [6900.0, 15.0], [6700.0, 4.0], [7100.0, 8.0], [7000.0, 12.0], [7300.0, 13.0], [7400.0, 23.0], [7200.0, 9.0], [7500.0, 16.0], [7600.0, 23.0], [7800.0, 14.0], [7700.0, 10.0], [7900.0, 15.0], [8100.0, 25.0], [8000.0, 42.0], [8700.0, 26.0], [8500.0, 13.0], [8200.0, 21.0], [8600.0, 17.0], [8400.0, 13.0], [8300.0, 10.0], [8900.0, 24.0], [9200.0, 15.0], [9100.0, 37.0], [8800.0, 15.0], [9000.0, 18.0], [9700.0, 8.0], [9300.0, 7.0], [9400.0, 10.0], [9500.0, 13.0], [9600.0, 26.0], [10100.0, 9.0], [10000.0, 16.0], [9900.0, 21.0], [10200.0, 9.0], [9800.0, 17.0], [10600.0, 8.0], [10300.0, 8.0], [10500.0, 4.0], [10400.0, 8.0], [10700.0, 1.0], [10900.0, 11.0], [11200.0, 5.0], [11000.0, 5.0], [10800.0, 4.0], [11100.0, 8.0], [11700.0, 13.0], [11300.0, 7.0], [11500.0, 5.0], [11600.0, 4.0], [11400.0, 8.0], [12200.0, 7.0], [12000.0, 11.0], [11900.0, 6.0], [12100.0, 1.0], [11800.0, 5.0], [12600.0, 5.0], [12400.0, 7.0], [12700.0, 4.0], [12300.0, 6.0], [12500.0, 12.0], [13200.0, 5.0], [13300.0, 8.0], [12900.0, 5.0], [13000.0, 7.0], [13100.0, 6.0], [12800.0, 4.0], [13500.0, 7.0], [13400.0, 3.0], [13700.0, 5.0], [13800.0, 5.0], [13600.0, 3.0], [14000.0, 3.0], [13900.0, 4.0], [14100.0, 3.0], [14300.0, 2.0], [14200.0, 2.0], [14600.0, 2.0], [14400.0, 2.0], [14800.0, 5.0], [14700.0, 3.0], [14500.0, 2.0], [14900.0, 4.0], [15300.0, 5.0], [15000.0, 2.0], [15100.0, 1.0], [15200.0, 1.0], [15500.0, 9.0], [15700.0, 15.0], [15600.0, 25.0], [15800.0, 3.0], [15400.0, 2.0], [16000.0, 3.0], [16100.0, 4.0], [16200.0, 4.0], [16300.0, 1.0], [15900.0, 7.0], [17200.0, 2.0], [16600.0, 5.0], [16400.0, 4.0], [17000.0, 2.0], [16800.0, 1.0], [17800.0, 3.0], [18000.0, 3.0], [18200.0, 3.0], [18400.0, 4.0], [17600.0, 4.0], [19000.0, 1.0], [19200.0, 1.0], [18800.0, 1.0], [19800.0, 2.0], [20200.0, 3.0], [20400.0, 1.0], [20000.0, 4.0], [19600.0, 1.0], [21200.0, 2.0], [20600.0, 2.0], [21000.0, 1.0], [21400.0, 6.0], [21800.0, 2.0], [21600.0, 3.0], [23400.0, 4.0], [23000.0, 2.0], [22600.0, 1.0], [22800.0, 3.0], [24200.0, 2.0], [23600.0, 3.0], [23800.0, 2.0], [24400.0, 1.0], [24000.0, 2.0], [24600.0, 1.0], [25800.0, 1.0], [26600.0, 1.0], [25600.0, 1.0], [26000.0, 1.0], [27000.0, 2.0], [26800.0, 1.0], [27200.0, 1.0], [28600.0, 1.0], [28200.0, 1.0], [29400.0, 1.0], [28800.0, 1.0], [30000.0, 1.0], [30400.0, 1.0], [29800.0, 4.0], [31600.0, 1.0], [31400.0, 1.0], [31800.0, 1.0], [32000.0, 1.0], [32600.0, 1.0], [34800.0, 1.0], [33200.0, 1.0], [33600.0, 1.0], [35200.0, 1.0], [36000.0, 1.0], [42800.0, 1.0], [42000.0, 1.0], [54800.0, 1.0], [60800.0, 1.0], [35500.0, 1.0], [35100.0, 1.0], [36700.0, 1.0], [37100.0, 1.0], [40300.0, 1.0], [39100.0, 1.0], [41500.0, 1.0], [41900.0, 1.0], [46300.0, 1.0], [50700.0, 1.0], [49900.0, 1.0], [82200.0, 1.0], [91000.0, 1.0], [106200.0, 1.0], [78100.0, 1.0], [16900.0, 3.0], [17100.0, 2.0], [16700.0, 11.0], [17300.0, 3.0], [16500.0, 1.0], [17900.0, 4.0], [17700.0, 2.0], [18100.0, 1.0], [17500.0, 1.0], [18500.0, 4.0], [19300.0, 3.0], [19100.0, 4.0], [18700.0, 2.0], [19700.0, 2.0], [19900.0, 1.0], [20100.0, 4.0], [21300.0, 1.0], [21500.0, 2.0], [20900.0, 3.0], [21100.0, 1.0], [20700.0, 2.0], [21900.0, 1.0], [22500.0, 1.0], [21700.0, 1.0], [22100.0, 2.0], [22900.0, 1.0], [22700.0, 2.0], [23500.0, 1.0], [23300.0, 1.0], [24100.0, 5.0], [24500.0, 1.0], [23900.0, 1.0], [23700.0, 1.0], [25500.0, 3.0], [25100.0, 1.0], [25300.0, 1.0], [24700.0, 1.0], [25900.0, 2.0], [26500.0, 1.0], [27500.0, 1.0], [26900.0, 1.0], [28100.0, 1.0], [27700.0, 1.0], [27900.0, 1.0], [29100.0, 1.0], [28700.0, 1.0], [29700.0, 1.0], [30100.0, 1.0], [30500.0, 3.0], [29900.0, 1.0], [30300.0, 1.0], [31300.0, 2.0], [32500.0, 2.0], [32100.0, 1.0], [33400.0, 1.0], [33000.0, 1.0], [35800.0, 1.0], [37800.0, 1.0], [43800.0, 2.0], [49400.0, 1.0], [50200.0, 1.0], [217500.0, 1.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 217500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 4523.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 68042.0, "series": [{"data": [[0.0, 68042.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 7435.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 4523.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 10.004243827160504, "minX": 1.72866858E12, "maxY": 490.5714285714287, "series": [{"data": [[1.72866996E12, 22.825330812854435], [1.72866864E12, 177.20883280757127], [1.72866966E12, 10.004243827160504], [1.72867026E12, 15.641904761904744], [1.72866906E12, 22.865712074303456], [1.72866936E12, 12.069216061185465], [1.72867038E12, 14.41482047364403], [1.72866876E12, 30.4959349593496], [1.72866882E12, 107.78709412248254], [1.72867044E12, 16.900862068965516], [1.72866912E12, 12.911686334221534], [1.72867014E12, 12.204225352112655], [1.72866954E12, 10.786328125000002], [1.72866894E12, 67.13774528664872], [1.72866984E12, 12.263339731285951], [1.72866924E12, 11.246089278901167], [1.7286693E12, 11.02346153846155], [1.7286696E12, 10.418359668923989], [1.7286687E12, 19.900521609538025], [1.728669E12, 26.771751412429396], [1.72866942E12, 12.014159969383835], [1.72867032E12, 12.452627541235142], [1.72866972E12, 11.080731150038083], [1.72867002E12, 19.791961295124676], [1.72866978E12, 10.740130318129568], [1.72866918E12, 12.87102946804441], [1.72867008E12, 14.147865853658532], [1.72866948E12, 10.301227935533348], [1.72866858E12, 490.5714285714287], [1.7286702E12, 12.766110689916594], [1.72866888E12, 79.39848812095045], [1.7286699E12, 16.601209677419362]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72867044E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 205.33050847457653, "minX": 1.0, "maxY": 24646.0, "series": [{"data": [[2.0, 373.0812499999998], [3.0, 329.8923076923073], [4.0, 342.43971631205653], [5.0, 256.96519410977226], [6.0, 253.9245929734372], [7.0, 226.44337560122386], [8.0, 205.33050847457653], [9.0, 209.86895161290306], [10.0, 220.8043269230761], [11.0, 231.7097397769518], [12.0, 247.4691287878787], [13.0, 247.9104146100688], [14.0, 294.72491909385116], [15.0, 305.6927924379671], [16.0, 298.04000000000053], [17.0, 358.7152852529605], [18.0, 363.6174757281551], [19.0, 457.20117907148125], [20.0, 420.9269521410577], [21.0, 333.3713503649638], [22.0, 342.3353909465022], [23.0, 410.57319819819764], [24.0, 391.04307334109484], [25.0, 360.0339195979898], [26.0, 483.1784741144413], [27.0, 474.7198211624449], [28.0, 472.0392464678174], [29.0, 543.4135472370767], [30.0, 652.6832412523025], [31.0, 550.0020080321294], [33.0, 646.7990543735224], [32.0, 580.938689217759], [35.0, 678.0861111111113], [34.0, 643.0306406685238], [37.0, 795.7483870967734], [36.0, 664.2561728395062], [39.0, 866.346613545816], [38.0, 667.5854545454545], [41.0, 625.9074074074074], [40.0, 759.8724279835386], [43.0, 1987.9846153846147], [42.0, 742.9261083743847], [45.0, 965.3435897435903], [44.0, 1050.8842105263154], [47.0, 954.2541436464093], [46.0, 974.1190476190475], [49.0, 941.7945205479454], [48.0, 1228.5], [51.0, 919.0769230769231], [50.0, 1254.5683453237423], [53.0, 1302.3709677419356], [52.0, 931.8571428571423], [55.0, 1081.81914893617], [54.0, 987.5363636363638], [57.0, 2334.1647058823532], [56.0, 1417.4268292682932], [59.0, 1662.4943820224714], [58.0, 1288.3229166666663], [61.0, 1230.012345679013], [60.0, 957.3977272727275], [63.0, 1642.5151515151517], [62.0, 1020.2571428571424], [67.0, 1464.2560975609758], [66.0, 1396.890410958904], [65.0, 1440.7466666666667], [64.0, 1593.783783783783], [71.0, 1485.2187500000005], [70.0, 1410.246153846154], [69.0, 1582.434782608696], [68.0, 1747.3421052631575], [75.0, 1743.3289473684206], [74.0, 1241.9315068493147], [73.0, 2220.5633802816906], [72.0, 1251.04705882353], [79.0, 1881.3749999999998], [78.0, 1204.3191489361702], [77.0, 2188.0285714285715], [76.0, 2703.910447761194], [83.0, 1426.232558139535], [82.0, 2835.942307692307], [81.0, 3060.8035714285706], [80.0, 1639.4642857142856], [87.0, 2119.6190476190477], [86.0, 3129.0535714285706], [85.0, 3661.320754716982], [84.0, 1400.2666666666664], [91.0, 2773.355555555555], [89.0, 2821.8541666666656], [88.0, 2880.4489795918375], [90.0, 1885.7916666666663], [95.0, 1999.6666666666665], [94.0, 4029.4222222222224], [93.0, 1982.2500000000007], [92.0, 2516.488888888888], [99.0, 2511.7000000000003], [98.0, 2275.5744680851067], [97.0, 1877.2666666666664], [96.0, 2643.218181818182], [103.0, 1967.1578947368423], [102.0, 2559.2045454545455], [101.0, 2058.024390243903], [100.0, 1973.9047619047622], [107.0, 2480.8249999999994], [106.0, 2450.399999999999], [105.0, 2057.3999999999996], [104.0, 2338.72972972973], [111.0, 1757.6086956521742], [110.0, 1899.3225806451608], [109.0, 2677.9130434782605], [108.0, 1891.885714285714], [115.0, 3828.136363636364], [114.0, 3119.5], [113.0, 2435.4], [112.0, 2079.3636363636365], [119.0, 2056.166666666667], [118.0, 2839.2692307692305], [117.0, 2564.1111111111118], [116.0, 3913.904761904761], [123.0, 3263.3333333333335], [122.0, 5137.25], [121.0, 3106.764705882353], [120.0, 3938.7500000000014], [127.0, 2206.7142857142853], [126.0, 4743.458333333334], [125.0, 3883.3043478260865], [124.0, 2499.3500000000004], [135.0, 2395.333333333334], [134.0, 2891.8799999999997], [133.0, 3977.6071428571427], [132.0, 2804.1562500000005], [131.0, 2837.9000000000005], [130.0, 2868.1153846153843], [129.0, 5616.666666666667], [128.0, 2873.8965517241377], [143.0, 4665.611111111111], [142.0, 2415.9], [141.0, 3538.6874999999995], [140.0, 2345.2916666666665], [139.0, 2977.611111111111], [138.0, 3356.9523809523807], [137.0, 3538.4285714285716], [136.0, 3670.0476190476197], [151.0, 3671.2499999999995], [150.0, 2547.5789473684213], [149.0, 2702.5333333333333], [148.0, 3918.1818181818185], [147.0, 5343.058823529411], [146.0, 1978.8636363636365], [145.0, 4337.0], [144.0, 3087.0555555555547], [159.0, 1856.1818181818182], [158.0, 2991.714285714286], [157.0, 2440.7272727272725], [156.0, 3288.71875], [155.0, 4758.764705882353], [154.0, 2587.8888888888887], [153.0, 3798.157894736841], [152.0, 2139.6875], [167.0, 3762.7142857142853], [166.0, 2938.0588235294117], [165.0, 1817.4210526315787], [164.0, 2439.0], [163.0, 3322.959999999999], [162.0, 4091.2592592592605], [161.0, 3185.3199999999993], [160.0, 3602.6111111111113], [175.0, 3084.181818181818], [174.0, 2290.416666666667], [173.0, 2536.7499999999995], [172.0, 2368.8571428571427], [171.0, 2787.8], [170.0, 2680.75], [169.0, 4026.891891891892], [168.0, 5008.320000000001], [183.0, 2638.32], [182.0, 2575.9999999999995], [181.0, 2105.9565217391305], [180.0, 2778.8636363636356], [179.0, 3261.227272727273], [178.0, 3147.052631578947], [177.0, 3784.8000000000015], [176.0, 2558.5], [191.0, 3075.2272727272725], [190.0, 3006.4], [189.0, 1851.2380952380952], [188.0, 4351.052631578946], [187.0, 3338.100000000001], [186.0, 2189.4545454545455], [185.0, 2581.5789473684213], [184.0, 3018.9999999999995], [199.0, 2080.846153846154], [198.0, 1560.0526315789477], [197.0, 2342.1428571428573], [196.0, 3504.3000000000006], [195.0, 2942.857142857143], [194.0, 4675.32], [193.0, 5573.0], [192.0, 3230.0869565217395], [207.0, 2179.444444444445], [206.0, 1543.5555555555557], [205.0, 1803.8999999999999], [204.0, 2726.3076923076924], [203.0, 2014.9333333333336], [202.0, 2138.9285714285716], [201.0, 3764.409090909091], [200.0, 1581.5], [215.0, 4159.250000000001], [214.0, 6345.5], [213.0, 2765.6153846153848], [212.0, 1824.7692307692307], [211.0, 1792.5833333333335], [210.0, 1367.8000000000002], [209.0, 4675.599999999999], [208.0, 2821.6000000000004], [223.0, 3568.8571428571427], [222.0, 5417.625], [221.0, 1772.3333333333335], [220.0, 2744.0], [219.0, 3509.0], [218.0, 3599.0], [217.0, 3201.0], [216.0, 1952.3333333333333], [231.0, 3376.6], [230.0, 5389.25], [229.0, 3491.416666666667], [228.0, 2282.0], [227.0, 2367.0], [226.0, 3815.2], [225.0, 4259.444444444444], [224.0, 2635.909090909091], [239.0, 2458.4], [238.0, 3243.8571428571427], [237.0, 2494.333333333333], [236.0, 2637.8], [235.0, 5459.0], [234.0, 2576.625], [233.0, 4358.0], [232.0, 3450.214285714286], [247.0, 2530.0], [246.0, 3675.666666666666], [245.0, 3149.7499999999995], [244.0, 2674.1818181818185], [243.0, 2658.8125000000005], [242.0, 3221.5625], [241.0, 3009.928571428571], [240.0, 2293.6666666666665], [255.0, 3290.866666666667], [253.0, 4512.923076923076], [252.0, 4832.666666666666], [251.0, 4441.38888888889], [250.0, 4447.736842105263], [249.0, 5005.294117647059], [254.0, 4025.0], [248.0, 6456.473684210528], [269.0, 3190.75], [271.0, 2050.5625], [270.0, 3099.285714285714], [268.0, 2294.5], [259.0, 2795.769230769231], [258.0, 6195.076923076923], [257.0, 4689.818181818182], [256.0, 4436.416666666666], [267.0, 4853.111111111111], [266.0, 3751.5], [265.0, 3054.5555555555557], [264.0, 2614.3], [263.0, 4129.454545454544], [262.0, 3359.0], [261.0, 3124.4444444444443], [260.0, 3328.7368421052633], [286.0, 10426.6], [287.0, 8539.666666666668], [285.0, 2199.8], [284.0, 7294.5], [283.0, 1155.1666666666665], [282.0, 3930.4], [281.0, 1858.3333333333333], [280.0, 7411.25], [279.0, 1460.0], [273.0, 3772.2000000000007], [272.0, 3765.333333333333], [275.0, 2495.75], [274.0, 4170.125], [278.0, 21463.0], [277.0, 1046.3333333333333], [276.0, 1409.5], [301.0, 10273.333333333332], [300.0, 2025.5], [291.0, 23648.0], [290.0, 4221.666666666667], [289.0, 6661.0], [288.0, 2354.75], [303.0, 1221.0], [302.0, 1538.0], [299.0, 899.0], [297.0, 891.0], [296.0, 825.0], [295.0, 931.0], [294.0, 4446.0], [293.0, 1674.5], [292.0, 651.5], [308.0, 4244.5], [307.0, 2545.3333333333335], [306.0, 16778.5], [305.0, 1201.0], [304.0, 603.0], [335.0, 3253.5], [334.0, 2648.5555555555557], [333.0, 3507.3333333333335], [332.0, 3165.0], [331.0, 2873.0], [330.0, 3325.0], [350.0, 3597.0], [351.0, 7083.0], [349.0, 3582.0], [348.0, 3758.0], [347.0, 3894.0], [346.0, 3832.5], [344.0, 3454.0], [343.0, 3560.5], [337.0, 8189.0], [336.0, 3192.0], [339.0, 3201.6666666666665], [338.0, 3192.0], [342.0, 4633.0], [341.0, 8740.0], [340.0, 4312.25], [366.0, 3486.0], [367.0, 4096.0], [365.0, 3478.0], [364.0, 3482.0], [363.0, 4451.5], [362.0, 3452.5], [361.0, 3458.5], [360.0, 3459.5], [359.0, 3462.5], [353.0, 3542.0], [352.0, 3556.5], [355.0, 3697.0], [354.0, 3679.0], [358.0, 3457.5], [357.0, 4058.0], [356.0, 4289.333333333333], [382.0, 4428.0], [383.0, 5147.75], [381.0, 5291.0], [380.0, 5294.5], [379.0, 3945.0], [378.0, 6321.75], [377.0, 5083.25], [376.0, 4260.5], [375.0, 5352.5], [368.0, 4331.5], [369.0, 4261.5], [371.0, 4737.0], [370.0, 4632.5], [374.0, 5264.25], [373.0, 6910.0], [372.0, 3961.5], [385.0, 5805.75], [394.0, 4615.545454545455], [395.0, 4798.0], [393.0, 4018.0], [391.0, 3830.5], [390.0, 4553.666666666667], [389.0, 6143.0], [388.0, 4230.333333333333], [387.0, 5222.0], [384.0, 5367.0], [386.0, 7036.666666666667], [399.0, 4798.0], [392.0, 4784.0], [398.0, 4797.0], [397.0, 4794.0], [396.0, 24646.0], [414.0, 6574.0], [415.0, 12589.0], [413.0, 6659.0], [412.0, 6592.0], [411.0, 6596.0], [410.0, 6575.0], [409.0, 7630.0], [408.0, 9280.0], [407.0, 8383.0], [400.0, 4807.0], [402.0, 5936.0], [401.0, 4848.0], [406.0, 7935.666666666667], [405.0, 20011.0], [404.0, 4861.0], [430.0, 9217.0], [431.0, 9064.0], [429.0, 9521.0], [428.0, 9449.5], [427.0, 5732.0], [426.0, 5744.0], [425.0, 5722.0], [424.0, 5709.0], [423.0, 5619.0], [417.0, 5720.0], [416.0, 12904.0], [419.0, 5724.0], [418.0, 6634.0], [422.0, 5622.0], [421.0, 5596.0], [420.0, 5743.0], [446.0, 4919.0], [447.0, 6040.0], [445.0, 6006.0], [444.0, 6010.0], [443.0, 5009.0], [442.0, 4897.0], [441.0, 4892.0], [440.0, 5998.0], [439.0, 5998.0], [433.0, 7001.0], [432.0, 7014.0], [435.0, 7002.0], [434.0, 7011.0], [438.0, 6994.0], [437.0, 7004.0], [436.0, 7002.0], [462.0, 6277.5], [463.0, 7454.0], [461.0, 7281.0], [460.0, 5970.0], [459.0, 5979.0], [458.0, 5967.0], [457.0, 6269.5], [455.0, 5023.0], [449.0, 23528.0], [448.0, 6147.0], [451.0, 6036.0], [450.0, 7436.0], [454.0, 5017.0], [453.0, 6183.0], [452.0, 6216.0], [478.0, 17354.0], [479.0, 15697.0], [477.0, 10995.5], [476.0, 10612.25], [475.0, 13674.454545454546], [474.0, 13766.714285714286], [473.0, 9449.666666666666], [472.0, 15844.0], [471.0, 8776.0], [465.0, 6388.0], [464.0, 7439.0], [467.0, 6497.0], [466.0, 6395.0], [470.0, 11679.0], [469.0, 14653.0], [468.0, 6533.0], [483.0, 9857.25], [489.0, 8446.4], [490.0, 8038.5], [491.0, 10073.5], [488.0, 7677.8], [495.0, 8018.0], [494.0, 8021.0], [493.0, 7967.0], [492.0, 7904.0], [487.0, 10244.857142857143], [486.0, 9782.5], [485.0, 10093.142857142857], [484.0, 13358.857142857143], [482.0, 8411.25], [480.0, 17700.0], [511.0, 9976.333333333334], [509.0, 13233.5], [499.0, 8223.0], [498.0, 8221.0], [497.0, 11360.0], [496.0, 8020.0], [507.0, 12408.5], [506.0, 12139.0], [505.0, 13000.0], [504.0, 15311.0], [503.0, 14050.75], [501.0, 10749.0], [502.0, 17602.0], [500.0, 11086.0], [541.0, 10138.8], [513.0, 15595.0], [526.0, 8086.0], [512.0, 16466.0], [524.0, 8082.0], [523.0, 8072.5], [521.0, 8054.0], [520.0, 9622.5], [543.0, 10809.8], [540.0, 12941.666666666666], [542.0, 11676.0], [539.0, 8505.666666666666], [536.0, 16746.0], [518.0, 11195.0], [516.0, 12558.5], [514.0, 13314.0], [535.0, 11431.5], [533.0, 11393.0], [532.0, 10407.0], [530.0, 11431.0], [528.0, 8102.0], [568.0, 12129.2], [562.0, 9559.5], [551.0, 9434.0], [550.0, 10396.666666666666], [549.0, 11354.857142857143], [548.0, 8275.0], [547.0, 10122.714285714284], [546.0, 14415.666666666666], [544.0, 12043.0], [545.0, 10576.5], [570.0, 14325.666666666668], [569.0, 10760.5], [573.0, 13473.666666666666], [572.0, 10645.2], [571.0, 17205.5], [575.0, 12319.857142857143], [574.0, 12223.0], [567.0, 10443.6], [566.0, 11674.75], [565.0, 10796.25], [564.0, 9611.0], [563.0, 8580.0], [561.0, 9823.0], [560.0, 11093.4], [559.0, 11721.0], [558.0, 12529.25], [557.0, 10378.8], [556.0, 13205.333333333334], [555.0, 14820.166666666668], [554.0, 11546.0], [553.0, 12616.5], [552.0, 11469.5], [603.0, 9527.833333333334], [584.0, 12055.25], [585.0, 13237.857142857143], [587.0, 14992.6], [586.0, 14838.8], [589.0, 14661.25], [588.0, 11413.0], [591.0, 10121.4], [577.0, 11896.0], [576.0, 14686.75], [579.0, 12532.333333333332], [578.0, 11944.333333333334], [581.0, 14285.857142857143], [580.0, 14958.0], [590.0, 10896.0], [583.0, 12188.375], [600.0, 10681.0], [582.0, 12208.333333333332], [607.0, 11105.2], [593.0, 9891.5], [592.0, 14074.5], [595.0, 9180.0], [594.0, 12071.25], [597.0, 11312.5], [596.0, 9174.666666666666], [599.0, 10109.0], [598.0, 8829.6], [606.0, 10943.833333333334], [604.0, 9063.75], [605.0, 9641.0], [602.0, 7924.0], [601.0, 12813.0], [632.0, 13152.0], [636.0, 12200.666666666666], [608.0, 14278.42857142857], [610.0, 13813.5], [609.0, 13825.333333333334], [623.0, 11668.666666666666], [622.0, 12725.0], [621.0, 15791.666666666666], [620.0, 10911.5], [619.0, 13677.0], [618.0, 12143.333333333334], [617.0, 13854.0], [616.0, 11045.777777777777], [611.0, 10865.285714285714], [638.0, 10169.0], [637.0, 10402.0], [624.0, 13544.0], [626.0, 9832.333333333332], [625.0, 11543.8], [634.0, 11503.0], [635.0, 10042.0], [633.0, 9502.5], [615.0, 14142.333333333332], [614.0, 12453.500000000002], [612.0, 12217.8], [613.0, 13565.333333333334], [631.0, 9445.75], [630.0, 14639.333333333334], [629.0, 12197.2], [628.0, 13694.166666666668], [627.0, 12505.833333333332], [642.0, 8768.0], [652.0, 16187.0], [650.0, 10004.0], [649.0, 9933.0], [648.0, 9939.0], [647.0, 9557.0], [646.0, 12213.5], [644.0, 9553.0], [643.0, 17886.0], [641.0, 9015.0], [640.0, 8760.25], [1.0, 323.55357142857144]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[29.12303750000007, 597.0634874999992]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 652.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 322.0, "minX": 1.72866858E12, "maxY": 3567993.6666666665, "series": [{"data": [[1.72866996E12, 2977119.0833333335], [1.72866864E12, 3567993.6666666665], [1.72866966E12, 2917432.466666667], [1.72867026E12, 2954574.35], [1.72866906E12, 2908424.283333333], [1.72866936E12, 2943352.3666666667], [1.72867038E12, 2946714.8333333335], [1.72866876E12, 2907310.3833333333], [1.72866882E12, 2738487.1333333333], [1.72867044E12, 1044521.3166666667], [1.72866912E12, 2956835.3], [1.72867014E12, 2876862.25], [1.72866954E12, 2881362.7666666666], [1.72866894E12, 2925259.8666666667], [1.72866984E12, 2932090.566666667], [1.72866924E12, 2950100.783333333], [1.7286693E12, 2926466.5833333335], [1.7286696E12, 2991710.6166666667], [1.7286687E12, 3020980.9], [1.728669E12, 2988333.066666667], [1.72866942E12, 2941103.533333333], [1.72867032E12, 2934324.6], [1.72866972E12, 2955709.35], [1.72867002E12, 3024393.5833333335], [1.72866978E12, 2936585.65], [1.72866918E12, 2941090.033333333], [1.72867008E12, 2953409.45], [1.72866948E12, 2933149.5833333335], [1.72866858E12, 181213.5], [1.7286702E12, 2969199.316666667], [1.72866888E12, 3126737.7666666666], [1.7286699E12, 2791397.783333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72866996E12, 5290.0], [1.72866864E12, 6340.0], [1.72866966E12, 5184.0], [1.72867026E12, 5250.0], [1.72866906E12, 5168.0], [1.72866936E12, 5230.0], [1.72867038E12, 5236.0], [1.72866876E12, 5166.0], [1.72866882E12, 4866.0], [1.72867044E12, 1856.0], [1.72866912E12, 5254.0], [1.72867014E12, 5112.0], [1.72866954E12, 5120.0], [1.72866894E12, 5198.0], [1.72866984E12, 5210.0], [1.72866924E12, 5242.0], [1.7286693E12, 5200.0], [1.7286696E12, 5316.0], [1.7286687E12, 5368.0], [1.728669E12, 5310.0], [1.72866942E12, 5226.0], [1.72867032E12, 5214.0], [1.72866972E12, 5252.0], [1.72867002E12, 5374.0], [1.72866978E12, 5218.0], [1.72866918E12, 5226.0], [1.72867008E12, 5248.0], [1.72866948E12, 5212.0], [1.72866858E12, 322.0], [1.7286702E12, 5276.0], [1.72866888E12, 5556.0], [1.7286699E12, 4960.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72867044E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 205.1429112964367, "minX": 1.72866858E12, "maxY": 9091.055900621117, "series": [{"data": [[1.72866996E12, 322.30321361058554], [1.72866864E12, 4167.366876971617], [1.72866966E12, 210.7839506172837], [1.72867026E12, 249.86400000000015], [1.72866906E12, 486.63699690402456], [1.72866936E12, 246.53346080305903], [1.72867038E12, 233.08250572956467], [1.72866876E12, 611.1227255129704], [1.72866882E12, 2118.924373201808], [1.72867044E12, 247.02155172413782], [1.72866912E12, 263.22877807384964], [1.72867014E12, 219.4557902973397], [1.72866954E12, 220.2472656249998], [1.72866894E12, 1270.3620623316658], [1.72866984E12, 219.57927063339736], [1.72866924E12, 242.33078977489552], [1.7286693E12, 227.11961538461588], [1.7286696E12, 218.7757712565839], [1.7286687E12, 534.366989567809], [1.728669E12, 553.8448210922792], [1.72866942E12, 232.7110600841943], [1.72867032E12, 223.9436133486768], [1.72866972E12, 229.3629093678598], [1.72867002E12, 260.71417938221055], [1.72866978E12, 209.860866232273], [1.72866918E12, 254.9062380405664], [1.72867008E12, 233.5026676829266], [1.72866948E12, 217.47774366845738], [1.72866858E12, 9091.055900621117], [1.7286702E12, 205.1429112964367], [1.72866888E12, 1810.1187904967562], [1.7286699E12, 282.8137096774201]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72867044E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 155.36012130401824, "minX": 1.72866858E12, "maxY": 7105.472049689441, "series": [{"data": [[1.72866996E12, 247.99810964083187], [1.72866864E12, 2783.3485804416296], [1.72866966E12, 162.40740740740765], [1.72867026E12, 192.40457142857136], [1.72866906E12, 352.1756965944275], [1.72866936E12, 186.5514340344168], [1.72867038E12, 180.86287242169544], [1.72866876E12, 455.971738288811], [1.72866882E12, 1655.685162351008], [1.72867044E12, 185.4967672413793], [1.72866912E12, 200.56909021697763], [1.72867014E12, 168.47769953051704], [1.72866954E12, 167.39375], [1.72866894E12, 966.9584455559849], [1.72866984E12, 169.0936660268714], [1.72866924E12, 185.74399084318978], [1.7286693E12, 172.85153846153835], [1.7286696E12, 166.51993980436424], [1.7286687E12, 325.4470938897177], [1.728669E12, 406.408286252354], [1.72866942E12, 175.9911978568695], [1.72867032E12, 170.9946298427315], [1.72866972E12, 176.6313785224676], [1.72867002E12, 201.27763304800877], [1.72866978E12, 161.00421617477943], [1.72866918E12, 192.9778032912362], [1.72867008E12, 181.16615853658539], [1.72866948E12, 164.91980046047604], [1.72866858E12, 7105.472049689441], [1.7286702E12, 155.36012130401824], [1.72866888E12, 1375.2365010799142], [1.7286699E12, 217.024193548387]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72867044E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 105.21076573161484, "minX": 1.72866858E12, "maxY": 4472.42857142857, "series": [{"data": [[1.72866996E12, 177.60604914933805], [1.72866864E12, 1777.7413249211345], [1.72866966E12, 108.78009259259271], [1.72867026E12, 136.60228571428578], [1.72866906E12, 247.97097523219784], [1.72866936E12, 125.93919694072693], [1.72867038E12, 128.00725744843416], [1.72866876E12, 325.4053426248551], [1.72866882E12, 1164.584052609946], [1.72867044E12, 129.92780172413796], [1.72866912E12, 134.1705367339168], [1.72867014E12, 115.59859154929573], [1.72866954E12, 112.57773437500009], [1.72866894E12, 747.6706425548281], [1.72866984E12, 116.3516314779271], [1.72866924E12, 125.03128576879068], [1.7286693E12, 113.52615384615372], [1.7286696E12, 110.42287434161], [1.7286687E12, 215.429955290611], [1.728669E12, 297.06854990583753], [1.72866942E12, 118.27860696517439], [1.72867032E12, 116.74491752972776], [1.72866972E12, 120.94821020563586], [1.72867002E12, 144.08150353554166], [1.72866978E12, 107.36412418551177], [1.72866918E12, 130.26597780329084], [1.72867008E12, 128.4214939024391], [1.72866948E12, 110.28818112049102], [1.72866858E12, 4472.42857142857], [1.7286702E12, 105.21076573161484], [1.72866888E12, 1094.413606911447], [1.7286699E12, 149.73870967741917]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72867044E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 145.0, "minX": 1.72866858E12, "maxY": 217572.0, "series": [{"data": [[1.72866996E12, 3249.0], [1.72866864E12, 60869.0], [1.72866966E12, 3205.0], [1.72867026E12, 3204.0], [1.72866906E12, 21898.0], [1.72866936E12, 1513.0], [1.72867038E12, 3218.0], [1.72866876E12, 12330.0], [1.72866882E12, 217572.0], [1.72867044E12, 1456.0], [1.72866912E12, 1458.0], [1.72867014E12, 2503.0], [1.72866954E12, 1398.0], [1.72866894E12, 91079.0], [1.72866984E12, 1550.0], [1.72866924E12, 21488.0], [1.7286693E12, 1835.0], [1.7286696E12, 1509.0], [1.7286687E12, 106242.0], [1.728669E12, 7612.0], [1.72866942E12, 1384.0], [1.72867032E12, 3192.0], [1.72866972E12, 3247.0], [1.72867002E12, 3234.0], [1.72866978E12, 1418.0], [1.72866918E12, 1927.0], [1.72867008E12, 3191.0], [1.72866948E12, 3172.0], [1.72866858E12, 16000.0], [1.7286702E12, 1239.0], [1.72866888E12, 36779.0], [1.7286699E12, 2406.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72866996E12, 587.0], [1.72866864E12, 12599.800000000001], [1.72866966E12, 235.0], [1.72867026E12, 306.0], [1.72866906E12, 1227.0], [1.72866936E12, 352.0], [1.72867038E12, 254.0999999999999], [1.72866876E12, 1453.6], [1.72866882E12, 4580.6], [1.72867044E12, 325.70000000000016], [1.72866912E12, 382.0], [1.72867014E12, 257.0], [1.72866954E12, 279.9000000000001], [1.72866894E12, 3465.0], [1.72866984E12, 250.0], [1.72866924E12, 314.8000000000002], [1.7286693E12, 302.0], [1.7286696E12, 265.0], [1.7286687E12, 798.0], [1.728669E12, 1239.0], [1.72866942E12, 309.0], [1.72867032E12, 262.2000000000003], [1.72866972E12, 265.0], [1.72867002E12, 335.2000000000003], [1.72866978E12, 232.0], [1.72866918E12, 354.5999999999999], [1.72867008E12, 263.0], [1.72866948E12, 274.0], [1.72866858E12, 13840.6], [1.7286702E12, 223.0], [1.72866888E12, 4070.1], [1.7286699E12, 561.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72866996E12, 1544.5999999999985], [1.72866864E12, 35785.979999999996], [1.72866966E12, 1179.1400000000003], [1.72867026E12, 1225.7399999999998], [1.72866906E12, 3345.4500000000003], [1.72866936E12, 1229.3600000000006], [1.72867038E12, 1258.8599999999997], [1.72866876E12, 4343.439999999999], [1.72866882E12, 10233.83999999999], [1.72867044E12, 1193.71], [1.72866912E12, 1244.3199999999988], [1.72867014E12, 1186.0], [1.72866954E12, 1187.3899999999999], [1.72866894E12, 8527.0], [1.72866984E12, 1191.88], [1.72866924E12, 1182.1200000000008], [1.7286693E12, 1187.9799999999996], [1.7286696E12, 867.359999999986], [1.7286687E12, 1908.7000000000016], [1.728669E12, 3406.4000000000033], [1.72866942E12, 1201.5800000000004], [1.72867032E12, 1192.7600000000002], [1.72866972E12, 1192.0], [1.72867002E12, 1245.3599999999997], [1.72866978E12, 1179.8000000000002], [1.72866918E12, 1299.8600000000001], [1.72867008E12, 1210.5], [1.72866948E12, 816.3999999999869], [1.72866858E12, 15378.139999999996], [1.7286702E12, 1181.6100000000001], [1.72866888E12, 15813.100000000004], [1.7286699E12, 1216.38]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72866996E12, 1171.6999999999998], [1.72866864E12, 19453.39999999995], [1.72866966E12, 276.0], [1.72867026E12, 491.0], [1.72866906E12, 1393.0], [1.72866936E12, 495.1999999999998], [1.72867038E12, 432.64999999999645], [1.72866876E12, 1940.5999999999995], [1.72866882E12, 5754.69999999999], [1.72867044E12, 620.2999999999988], [1.72866912E12, 511.3999999999992], [1.72867014E12, 334.1500000000001], [1.72866954E12, 382.9499999999998], [1.72866894E12, 5572.0], [1.72866984E12, 377.699999999998], [1.72866924E12, 420.50000000000045], [1.7286693E12, 387.9499999999998], [1.7286696E12, 394.1499999999992], [1.7286687E12, 1294.75], [1.728669E12, 1554.1999999999998], [1.72866942E12, 366.0], [1.72867032E12, 355.39999999999964], [1.72866972E12, 502.9500000000003], [1.72867002E12, 533.5999999999999], [1.72866978E12, 321.0], [1.72866918E12, 508.49999999999864], [1.72867008E12, 462.75], [1.72866948E12, 367.3000000000002], [1.72866858E12, 14682.2], [1.7286702E12, 245.04999999999973], [1.72866888E12, 8041.049999999999], [1.7286699E12, 608.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72866996E12, 154.0], [1.72866864E12, 166.0], [1.72866966E12, 151.0], [1.72867026E12, 151.0], [1.72866906E12, 156.0], [1.72866936E12, 154.0], [1.72867038E12, 154.0], [1.72866876E12, 162.0], [1.72866882E12, 158.0], [1.72867044E12, 154.0], [1.72866912E12, 157.0], [1.72867014E12, 145.0], [1.72866954E12, 154.0], [1.72866894E12, 159.0], [1.72866984E12, 150.0], [1.72866924E12, 152.0], [1.7286693E12, 153.0], [1.7286696E12, 147.0], [1.7286687E12, 161.0], [1.728669E12, 161.0], [1.72866942E12, 152.0], [1.72867032E12, 149.0], [1.72866972E12, 152.0], [1.72867002E12, 153.0], [1.72866978E12, 153.0], [1.72866918E12, 149.0], [1.72867008E12, 148.0], [1.72866948E12, 153.0], [1.72866858E12, 2398.0], [1.7286702E12, 151.0], [1.72866888E12, 161.0], [1.7286699E12, 157.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72866996E12, 200.0], [1.72866864E12, 414.5], [1.72866966E12, 181.0], [1.72867026E12, 190.0], [1.72866906E12, 274.0], [1.72866936E12, 191.0], [1.72867038E12, 183.0], [1.72866876E12, 292.0], [1.72866882E12, 1378.0], [1.72867044E12, 184.0], [1.72866912E12, 216.0], [1.72867014E12, 182.0], [1.72866954E12, 183.0], [1.72866894E12, 456.0], [1.72866984E12, 181.0], [1.72866924E12, 188.0], [1.7286693E12, 185.0], [1.7286696E12, 185.0], [1.7286687E12, 221.0], [1.728669E12, 336.0], [1.72866942E12, 194.0], [1.72867032E12, 185.0], [1.72866972E12, 183.0], [1.72867002E12, 197.0], [1.72866978E12, 181.0], [1.72866918E12, 193.0], [1.72867008E12, 184.0], [1.72866948E12, 183.0], [1.72866858E12, 9276.0], [1.7286702E12, 181.0], [1.72866888E12, 750.0], [1.7286699E12, 192.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72867044E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 176.0, "minX": 1.0, "maxY": 9914.0, "series": [{"data": [[2.0, 182.0], [3.0, 520.0], [4.0, 186.5], [5.0, 999.0], [6.0, 382.0], [7.0, 203.0], [8.0, 180.5], [9.0, 383.5], [10.0, 345.5], [11.0, 176.0], [12.0, 214.5], [13.0, 523.0], [14.0, 192.0], [15.0, 199.0], [16.0, 191.5], [17.0, 183.5], [18.0, 294.0], [19.0, 417.0], [20.0, 218.0], [21.0, 252.0], [22.0, 212.5], [23.0, 209.0], [24.0, 230.0], [25.0, 304.0], [26.0, 397.5], [27.0, 202.0], [28.0, 204.0], [29.0, 242.0], [30.0, 218.0], [31.0, 254.5], [33.0, 219.0], [32.0, 205.5], [35.0, 211.0], [34.0, 207.5], [37.0, 210.0], [36.0, 200.0], [38.0, 192.0], [39.0, 197.0], [41.0, 190.0], [40.0, 189.0], [43.0, 183.0], [42.0, 183.0], [45.0, 184.0], [44.0, 184.0], [46.0, 184.0], [47.0, 188.0], [49.0, 193.0], [48.0, 187.0], [50.0, 191.0], [51.0, 194.0], [52.0, 201.0], [53.0, 216.0], [55.0, 210.0], [54.0, 224.0], [56.0, 212.5], [57.0, 216.0], [59.0, 211.0], [58.0, 193.0], [61.0, 234.0], [60.0, 193.0], [63.0, 307.0], [62.0, 201.0], [64.0, 256.5], [67.0, 202.0], [65.0, 270.0], [66.0, 239.0], [70.0, 212.5], [69.0, 312.0], [68.0, 240.5], [71.0, 263.0], [73.0, 310.0], [72.0, 293.5], [74.0, 202.0], [75.0, 891.0], [76.0, 329.5], [77.0, 346.0], [79.0, 331.5], [78.0, 201.5], [82.0, 722.5], [81.0, 662.5], [80.0, 207.0], [83.0, 344.5], [86.0, 485.0], [85.0, 216.0], [84.0, 281.0], [87.0, 236.0], [88.0, 634.0], [89.0, 311.0], [91.0, 231.5], [90.0, 212.5], [93.0, 217.5], [94.0, 258.5], [92.0, 215.0], [99.0, 515.0], [98.0, 538.5], [96.0, 236.0], [103.0, 1588.0], [105.0, 206.0], [108.0, 3784.5], [110.0, 236.5], [120.0, 6303.5], [122.0, 264.5], [136.0, 3478.0], [166.0, 9914.0], [1.0, 179.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 166.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 133.0, "minX": 1.0, "maxY": 6769.0, "series": [{"data": [[2.0, 136.0], [3.0, 385.0], [4.0, 143.0], [5.0, 478.0], [6.0, 198.0], [7.0, 140.0], [8.0, 134.0], [9.0, 252.0], [10.0, 177.0], [11.0, 133.0], [12.0, 169.0], [13.0, 163.0], [14.0, 141.5], [15.0, 149.0], [16.0, 140.0], [17.0, 133.5], [18.0, 158.5], [19.0, 318.0], [20.0, 162.0], [21.0, 165.5], [22.0, 151.0], [23.0, 151.0], [24.0, 167.5], [25.0, 183.0], [26.0, 208.5], [27.0, 145.0], [28.0, 148.0], [29.0, 160.0], [30.0, 159.5], [31.0, 183.0], [33.0, 157.0], [32.0, 150.0], [35.0, 151.0], [34.0, 151.5], [37.0, 152.0], [36.0, 146.0], [38.0, 142.0], [39.0, 143.0], [41.0, 141.0], [40.0, 141.0], [43.0, 137.0], [42.0, 137.0], [45.0, 138.0], [44.0, 138.0], [46.0, 137.0], [47.0, 140.0], [49.0, 142.0], [48.0, 140.0], [50.0, 142.0], [51.0, 142.0], [52.0, 148.0], [53.0, 155.0], [55.0, 153.0], [54.0, 163.0], [56.0, 157.5], [57.0, 155.5], [59.0, 152.0], [58.0, 143.0], [61.0, 165.0], [60.0, 143.0], [63.0, 212.5], [62.0, 149.0], [64.0, 183.0], [67.0, 150.0], [65.0, 202.0], [66.0, 163.5], [70.0, 153.0], [69.0, 220.0], [68.0, 171.0], [71.0, 185.0], [73.0, 208.0], [72.0, 200.5], [74.0, 152.5], [75.0, 706.0], [76.0, 256.5], [77.0, 235.0], [79.0, 220.0], [78.0, 149.0], [82.0, 589.5], [81.0, 413.5], [80.0, 152.0], [83.0, 224.0], [86.0, 317.5], [85.0, 160.5], [84.0, 210.5], [87.0, 168.0], [88.0, 388.0], [89.0, 231.0], [91.0, 182.0], [90.0, 153.5], [93.0, 157.0], [94.0, 183.0], [92.0, 156.5], [99.0, 393.0], [98.0, 403.5], [96.0, 154.5], [103.0, 1416.0], [105.0, 153.0], [108.0, 2925.0], [110.0, 164.5], [120.0, 5261.5], [122.0, 189.0], [136.0, 2587.0], [166.0, 6769.0], [1.0, 137.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 166.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 13.466666666666667, "minX": 1.72866858E12, "maxY": 45.166666666666664, "series": [{"data": [[1.72866996E12, 43.583333333333336], [1.72866864E12, 43.1], [1.72866966E12, 43.11666666666667], [1.72867026E12, 43.86666666666667], [1.72866906E12, 43.3], [1.72866936E12, 43.45], [1.72867038E12, 43.7], [1.72866876E12, 43.4], [1.72866882E12, 43.016666666666666], [1.72867044E12, 15.283333333333333], [1.72866912E12, 43.65], [1.72867014E12, 42.766666666666666], [1.72866954E12, 42.68333333333333], [1.72866894E12, 43.666666666666664], [1.72866984E12, 43.43333333333333], [1.72866924E12, 43.63333333333333], [1.7286693E12, 43.46666666666667], [1.7286696E12, 44.3], [1.7286687E12, 43.833333333333336], [1.728669E12, 43.81666666666667], [1.72866942E12, 43.516666666666666], [1.72867032E12, 43.266666666666666], [1.72866972E12, 43.833333333333336], [1.72867002E12, 45.166666666666664], [1.72866978E12, 43.483333333333334], [1.72866918E12, 43.46666666666667], [1.72867008E12, 43.516666666666666], [1.72866948E12, 43.45], [1.72866858E12, 13.466666666666667], [1.7286702E12, 43.8], [1.72866888E12, 43.6], [1.7286699E12, 41.7]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72867044E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.683333333333333, "minX": 1.72866858E12, "maxY": 52.833333333333336, "series": [{"data": [[1.72866996E12, 44.083333333333336], [1.72866864E12, 52.833333333333336], [1.72866966E12, 43.2], [1.72867026E12, 43.75], [1.72866906E12, 43.06666666666667], [1.72866936E12, 43.583333333333336], [1.72867038E12, 43.63333333333333], [1.72866876E12, 43.05], [1.72866882E12, 40.55], [1.72867044E12, 15.466666666666667], [1.72866912E12, 43.78333333333333], [1.72867014E12, 42.6], [1.72866954E12, 42.666666666666664], [1.72866894E12, 43.31666666666667], [1.72866984E12, 43.416666666666664], [1.72866924E12, 43.68333333333333], [1.7286693E12, 43.333333333333336], [1.7286696E12, 44.3], [1.7286687E12, 44.733333333333334], [1.728669E12, 44.25], [1.72866942E12, 43.55], [1.72867032E12, 43.45], [1.72866972E12, 43.766666666666666], [1.72867002E12, 44.78333333333333], [1.72866978E12, 43.483333333333334], [1.72866918E12, 43.55], [1.72867008E12, 43.733333333333334], [1.72866948E12, 43.43333333333333], [1.72866858E12, 2.683333333333333], [1.7286702E12, 43.96666666666667], [1.72866888E12, 46.3], [1.7286699E12, 41.333333333333336]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72867044E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.683333333333333, "minX": 1.72866858E12, "maxY": 52.833333333333336, "series": [{"data": [[1.72866996E12, 44.083333333333336], [1.72866864E12, 52.833333333333336], [1.72866966E12, 43.2], [1.72867026E12, 43.75], [1.72866906E12, 43.06666666666667], [1.72866936E12, 43.583333333333336], [1.72867038E12, 43.63333333333333], [1.72866876E12, 43.05], [1.72866882E12, 40.55], [1.72867044E12, 15.466666666666667], [1.72866912E12, 43.78333333333333], [1.72867014E12, 42.6], [1.72866954E12, 42.666666666666664], [1.72866894E12, 43.31666666666667], [1.72866984E12, 43.416666666666664], [1.72866924E12, 43.68333333333333], [1.7286693E12, 43.333333333333336], [1.7286696E12, 44.3], [1.7286687E12, 44.733333333333334], [1.728669E12, 44.25], [1.72866942E12, 43.55], [1.72867032E12, 43.45], [1.72866972E12, 43.766666666666666], [1.72867002E12, 44.78333333333333], [1.72866978E12, 43.483333333333334], [1.72866918E12, 43.55], [1.72867008E12, 43.733333333333334], [1.72866948E12, 43.43333333333333], [1.72866858E12, 2.683333333333333], [1.7286702E12, 43.96666666666667], [1.72866888E12, 46.3], [1.7286699E12, 41.333333333333336]], "isOverall": false, "label": "HTTP Request-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72867044E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.683333333333333, "minX": 1.72866858E12, "maxY": 52.833333333333336, "series": [{"data": [[1.72866996E12, 44.083333333333336], [1.72866864E12, 52.833333333333336], [1.72866966E12, 43.2], [1.72867026E12, 43.75], [1.72866906E12, 43.06666666666667], [1.72866936E12, 43.583333333333336], [1.72867038E12, 43.63333333333333], [1.72866876E12, 43.05], [1.72866882E12, 40.55], [1.72867044E12, 15.466666666666667], [1.72866912E12, 43.78333333333333], [1.72867014E12, 42.6], [1.72866954E12, 42.666666666666664], [1.72866894E12, 43.31666666666667], [1.72866984E12, 43.416666666666664], [1.72866924E12, 43.68333333333333], [1.7286693E12, 43.333333333333336], [1.7286696E12, 44.3], [1.7286687E12, 44.733333333333334], [1.728669E12, 44.25], [1.72866942E12, 43.55], [1.72867032E12, 43.45], [1.72866972E12, 43.766666666666666], [1.72867002E12, 44.78333333333333], [1.72866978E12, 43.483333333333334], [1.72866918E12, 43.55], [1.72867008E12, 43.733333333333334], [1.72866948E12, 43.43333333333333], [1.72866858E12, 2.683333333333333], [1.7286702E12, 43.96666666666667], [1.72866888E12, 46.3], [1.7286699E12, 41.333333333333336]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72867044E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

